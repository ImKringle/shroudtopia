#pragma once // Include guard to prevent multiple inclusions

#include <stdint.h> // Include standard integer types (uint32_t, etc.)

namespace keen { // Assuming a 'keen' namespace, adjust as needed

struct HashKey32 {
    keen::uint32 value; // Offset: 0
};

typedef keen::HashKey32 AchievementId;

typedef keen::uint32 AchievementValue;

typedef keen::ObjectReference<keen::LocaTag> LocaTagReference;

typedef keen::LocaTagReference NameLocaTag;

typedef keen::LocaTagReference DescriptionLocaTag;

struct AchievementData {
    keen::NameLocaTag name; // Offset: 0
    keen::DescriptionLocaTag description; // Offset: 16
    keen::bool hasUnlockValue; // Offset: 32
    keen::AchievementValue unlockValue; // Offset: 36
};

typedef keen::ObjectReference<keen::AchievementData> AchievementDataReference;

typedef keen::BlobString string;

typedef keen::sint32 int;

struct Achievement {
    keen::AchievementId id; // Offset: 0
    keen::bool hasUnlockValue; // Offset: 4
    keen::AchievementValue unlockValue; // Offset: 8
    keen::uint32 dosId; // Offset: 12
    keen::string steamName; // Offset: 16
    keen::string steamStat; // Offset: 24
    keen::int npId; // Offset: 32
    keen::int xsapiId; // Offset: 36
    keen::Guid guid; // Offset: 40
    keen::string dbgName; // Offset: 56
};

struct AchievementDefinitionResource {
    keen::BlobArray<keen::Achievement> achievements; // Offset: 0
};

typedef keen::ObjectReference<keen::AchievementDefinitionResource> AchievementDefinitionReference;

struct AchievementSubDirectory {
};

struct AchievementDirectory {
};

enum class AmbientSfxPlaybackType {
    PlayAlways = 0,
    PlayOnlyWhenInBattle = 1,
    PlayOnlyWhenNotInBattle = 2,
};

enum class AmbientEitherOrBoth {
    No = 0,
    Yes = 1,
    Any = 2,
};

typedef keen::ObjectReference<keen::SoundContainer> SoundContainerReference;

enum class AmbientTags {
    ForestProp = 0,
    BendableBush = 1,
    VukahProp = 2,
    AncientProp = 3,
    PrisonProp = 4,
    GraveProp = 5,
    MineProp = 6,
    CaveProp = 7,
};

typedef keen::Bitmask8<keen::AmbientTags> AmbientMask;

enum class WeatherState {
    Clear = 0,
    Rain = 1,
    Snow = 2,
    Blizzard = 3,
};

struct AmbientSoundEffectEntry {
    keen::bool mute; // Offset: 0
    keen::float32 volume; // Offset: 4
    keen::SoundContainerReference soundContainer; // Offset: 8
    keen::ObjectReference<keen::IngameTimeSpan> ingameTimeSpan; // Offset: 24
    keen::AmbientSfxPlaybackType playbackType; // Offset: 40
    keen::AmbientMask additionalTagsInclude; // Offset: 41
    keen::Bitmask8<keen::WeatherState> weather; // Offset: 42
};

enum class AmbientEnvironment {
    None = 0,
    Grassland = 1,
    Desert = 2,
    Wetland = 3,
    Steppes = 4,
    Deepforest = 5,
    ColdHeights = 6,
    TallTrees = 7,
    AncientRooftop = 8,
    Volcano = 9,
    FogWell = 10,
    Capital = 11,
    PrisonDungeon = 12,
    GraveDungeon = 13,
    BarracksDungeon = 14,
    BoneDungeon = 15,
    HollowDungeon = 16,
    FortressCraterGarrison = 17,
    Cave = 18,
    NaturalCave = 19,
    Mine = 20,
    AncientStructure = 21,
    AncientPuzzle = 22,
    DesertTemple = 23,
    PlayerStart = 24,
};

struct AmbientSoundEffect {
    keen::bool mute; // Offset: 0
    keen::float32 volume; // Offset: 4
    keen::bool inAllEnvironments; // Offset: 8
    keen::AmbientEitherOrBoth inFog; // Offset: 9
    keen::AmbientEitherOrBoth indoors; // Offset: 10
    keen::AmbientEnvironment environment; // Offset: 11
    keen::AmbientMask ambientTagsInclude; // Offset: 12
    keen::AmbientMask ambientTagsExclude; // Offset: 13
};

typedef keen::float32 float;

struct Time {
    keen::sint64 value; // Offset: 0
};

struct AmbientSoundEffectParameters {
    keen::float sfxLifeTimeInSeconds; // Offset: 0
    keen::float chanceToPlaySound; // Offset: 4
    keen::float environmentMusicFadeValuePerSecond; // Offset: 8
    keen::float loopFadeValuePerSecond; // Offset: 12
    keen::float musicFadeOutToBattleValuePerSecond; // Offset: 16
    keen::float musicFadeOutToBossValuePerSecond; // Offset: 20
    keen::float bossMusicFadeInValuePerSecond; // Offset: 24
    keen::float bossMusicFadeOutValuePerSecond; // Offset: 28
    keen::float combatMusicFadeInValuePerSecond; // Offset: 32
    keen::float combatMusicFadeOutValuePerSecond; // Offset: 36
    keen::float caveLoopsFadeInPerSeconds; // Offset: 40
    keen::float caveLoopsFadeOutPerSeconds; // Offset: 44
    keen::Time caveMusicDelay; // Offset: 48
    keen::float rainIndoorFade; // Offset: 56
    keen::float rainIndoorLoweredVolume; // Offset: 60
    keen::uint32 daytimeFadeValuePlusMinusMinutes; // Offset: 64
    keen::float playerIsInFogThreshold; // Offset: 68
    keen::float startFogEffectsThreshold; // Offset: 72
    keen::float stopFogEffectsThreshold; // Offset: 76
    keen::float playerIsInEnvironmentThreshold; // Offset: 80
    keen::float startEnvironmentEffectsThreshold; // Offset: 84
    keen::float stopEnvironmentEffectsThreshold; // Offset: 88
    keen::float baseAmbienceThreshold; // Offset: 92
    keen::float smallEnvironmentMultiplier; // Offset: 96
    keen::float oneshotDistanceMultiplier; // Offset: 100
    keen::float temporalSmoothingSpeed; // Offset: 104
    keen::Time silenceAfterVictoryDuration; // Offset: 112
    keen::float fogMusicFogVolumeMod; // Offset: 120
    keen::float environmentMusicFogVolumeMod; // Offset: 124
    keen::float environmentMusicEnvVolumeMod; // Offset: 128
    keen::float fogLoopsFogVolumeMod; // Offset: 132
    keen::float environmentLoopsFogVolumeMod; // Offset: 136
    keen::float environmentLoopsEnvVolumeMod; // Offset: 140
    keen::uint32 propsNeededToEnableAmbientTag; // Offset: 144
    keen::Time pauseBetweenBushCollisionSounds; // Offset: 152
};

struct AmbientSfxSubDirectory {
};

struct AmbientSfxDirectory {
};

enum class SoundContainerMode {
    Random = 0,
};

enum class SoundContainerScene {
    Sfx = 0,
    Music = 1,
    Ui = 2,
    Voice = 3,
};

struct SoundContainerShared {
    keen::SoundContainerMode mode; // Offset: 0
    keen::SoundContainerScene scene; // Offset: 1
    keen::bool loop; // Offset: 2
    keen::bool loopSameChosenEntry; // Offset: 3
    keen::uint32 avoidRepeatingLastX; // Offset: 4
    keen::float32 volume; // Offset: 8
    keen::float32 volumeRandomness; // Offset: 12
    keen::float32 pitch; // Offset: 16
    keen::float32 pitchRandomness; // Offset: 20
    keen::Time sleep; // Offset: 24
    keen::Time sleepRandomness; // Offset: 32
    keen::bool hasPosition; // Offset: 40
    keen::float32 minDistance; // Offset: 44
    keen::float32 maxDistance; // Offset: 48
    keen::bool hasRandomPosition; // Offset: 52
    keen::float32 randomLeftRight; // Offset: 56
    keen::float32 randomFrontBack; // Offset: 60
};

typedef keen::uint32 uint;

struct AmbientSfxResource {
    keen::bool inAllEnvironments; // Offset: 0
    keen::AmbientEitherOrBoth inFog; // Offset: 1
    keen::AmbientEitherOrBoth indoors; // Offset: 2
    keen::AmbientEnvironment environment; // Offset: 3
    keen::AmbientSfxPlaybackType playbackType; // Offset: 4
    keen::Bitmask8<keen::WeatherState> weather; // Offset: 5
    keen::AmbientMask ambientTagsInclude; // Offset: 6
    keen::AmbientMask ambientTagsExclude; // Offset: 7
    keen::float32 volume; // Offset: 8
    keen::Time startTime; // Offset: 16
    keen::Time endTime; // Offset: 24
    keen::SoundContainerShared soundContainerShared; // Offset: 32
    keen::uint soundStart; // Offset: 96
    keen::uint soundCount; // Offset: 100
    keen::Guid id; // Offset: 104
    keen::BlobString debugNameEffect; // Offset: 120
    keen::BlobString debugNameEffectEntry; // Offset: 128
};

struct AmbientSfxCollectionResource {
    keen::BlobArray<keen::AmbientSfxResource> effects; // Offset: 0
    keen::BlobArray<keen::AmbientSfxResource> loops; // Offset: 8
    keen::BlobArray<keen::AmbientSfxResource> music; // Offset: 16
    keen::BlobArray<keen::SoundResourceReference> sounds; // Offset: 24
};

struct AmbientEventSounds {
    keen::SoundContainerReference battleStartJingle; // Offset: 0
    keen::SoundContainerReference battleEndJingle; // Offset: 16
    keen::SoundContainerReference bossMusicScavenger; // Offset: 32
    keen::SoundContainerReference bossMusicMonstrosity; // Offset: 48
    keen::SoundContainerReference bossMusicFoggerHeavy; // Offset: 64
    keen::SoundContainerReference bossMusicFoggerMage; // Offset: 80
    keen::SoundContainerReference bossMusicVukahBigfoot; // Offset: 96
    keen::SoundContainerReference bossMusicLurchie; // Offset: 112
    keen::SoundContainerReference bossMusicHollow; // Offset: 128
    keen::SoundContainerReference bossMusicCyclops; // Offset: 144
    keen::SoundContainerReference bossMusicDragon; // Offset: 160
    keen::SoundContainerReference bushCollision; // Offset: 176
};

typedef keen::ObjectReference<keen::SoundContainerResource> SoundContainerResourceReference;

struct AmbientEventSoundsResource {
    keen::SoundContainerResourceReference battleStartJingle; // Offset: 0
    keen::SoundContainerResourceReference battleEndJingle; // Offset: 16
    keen::SoundContainerResourceReference bossMusicScavenger; // Offset: 32
    keen::SoundContainerResourceReference bossMusicMonstrosity; // Offset: 48
    keen::SoundContainerResourceReference bossMusicFoggerHeavy; // Offset: 64
    keen::SoundContainerResourceReference bossMusicFoggerMage; // Offset: 80
    keen::SoundContainerResourceReference bossMusicVukahBigfoot; // Offset: 96
    keen::SoundContainerResourceReference bossMusicLurchie; // Offset: 112
    keen::SoundContainerResourceReference bossMusicHollow; // Offset: 128
    keen::SoundContainerResourceReference bossMusicCyclops; // Offset: 144
    keen::SoundContainerResourceReference bossMusicDragon; // Offset: 160
    keen::SoundContainerResourceReference bushCollision; // Offset: 176
};

struct AmbientParameterResource {
    keen::uint16 chanceForSilence; // Offset: 0
    keen::float sfxLifeTimeInSeconds; // Offset: 4
    keen::float environmentMusicFadeValuePerSecond; // Offset: 8
    keen::float loopFadeValuePerSecond; // Offset: 12
    keen::float musicFadeOutToBattleValuePerSecond; // Offset: 16
    keen::float musicFadeOutToBossValuePerSecond; // Offset: 20
    keen::float bossMusicFadeInValuePerSecond; // Offset: 24
    keen::float bossMusicFadeOutValuePerSecond; // Offset: 28
    keen::float combatMusicFadeInValuePerSecond; // Offset: 32
    keen::float combatMusicFadeOutValuePerSecond; // Offset: 36
    keen::float caveLoopsFadeInPerSeconds; // Offset: 40
    keen::float caveLoopsFadeOutPerSeconds; // Offset: 44
    keen::Time caveMusicDelay; // Offset: 48
    keen::float rainIndoorFade; // Offset: 56
    keen::float rainIndoorLoweredVolume; // Offset: 60
    keen::float playerIsInFogThreshold; // Offset: 64
    keen::float startFogEffectsThreshold; // Offset: 68
    keen::float stopFogEffectsThreshold; // Offset: 72
    keen::float playerIsInEnvironmentThreshold; // Offset: 76
    keen::float startEnvironmentEffectsThreshold; // Offset: 80
    keen::float stopEnvironmentEffectsThreshold; // Offset: 84
    keen::float baseAmbienceThreshold; // Offset: 88
    keen::float smallEnvironmentMultiplier; // Offset: 92
    keen::float oneshotDistanceMultiplier; // Offset: 96
    keen::float temporalSmoothingSpeed; // Offset: 100
    keen::Time silenceAfterVictoryDuration; // Offset: 104
    keen::float fogMusicFogVolumeMod; // Offset: 112
    keen::float environmentMusicFogVolumeMod; // Offset: 116
    keen::float environmentMusicEnvVolumeMod; // Offset: 120
    keen::float fogLoopsFogVolumeMod; // Offset: 124
    keen::float environmentLoopsFogVolumeMod; // Offset: 128
    keen::float environmentLoopsEnvVolumeMod; // Offset: 132
    keen::uint32 propsNeededToEnableAmbientTag; // Offset: 136
    keen::Time pauseBetweenBushCollisionSounds; // Offset: 144
};

typedef keen::ObjectReference<keen::VfxDefinition> VfxReference;

typedef keen::ObjectReference<keen::IngameTimeSpan> IngameTimeSpanReference;

struct AmbientVisualEffectEntry {
    keen::VfxReference vfx; // Offset: 0
    keen::IngameTimeSpanReference ingameTimeSpan; // Offset: 16
    keen::Bitmask8<keen::WeatherState> weather; // Offset: 32
};

struct AmbientVisualEffect {
    keen::AmbientEnvironment environment; // Offset: 0
    keen::bool inAllEnvironments; // Offset: 1
    keen::AmbientEitherOrBoth inFog; // Offset: 2
};

struct AmbientVfxSubDirectory {
};

struct AmbientVfxDirectory {
};

struct AmbientVfxResource {
    keen::VfxReference vfx; // Offset: 0
    keen::Time startTime; // Offset: 16
    keen::Time endTime; // Offset: 24
    keen::AmbientEnvironment environment; // Offset: 32
    keen::bool inAllEnvironments; // Offset: 33
    keen::AmbientEitherOrBoth inFog; // Offset: 34
    keen::Bitmask8<keen::WeatherState> weather; // Offset: 35
    keen::Guid id; // Offset: 36
};

struct AmbientVfxCollectionResource {
    keen::BlobArray<keen::AmbientVfxResource> effects; // Offset: 0
};

struct AmbientEnvironmentMapResource {
    keen::StaticArray<keen::AmbientEnvironment,256> voxelIdToAmbientEnvironmentMap; // Offset: 0
};

struct AmbientPPPDawnDuskOffsets {
    keen::Time nightAdaptationStartOffset; // Offset: 0
    keen::Time nightAdaptationEndOffset; // Offset: 8
    keen::Time dayAdaptationStartOffset; // Offset: 16
    keen::Time dayAdaptationEndOffset; // Offset: 24
};

typedef keen::uint32 Color;

struct AmbientPostProcessingParameters {
    keen::float rainWeatherSaturation; // Offset: 0
    keen::float nightAdaptationStrength; // Offset: 4
    keen::AmbientPPPDawnDuskOffsets dawnDuskOffset; // Offset: 8
    keen::bool deathOnlyDesaturates; // Offset: 40
    keen::float deathScreenSaturation; // Offset: 44
    keen::Color color; // Offset: 48
    keen::float defaultSaturation; // Offset: 52
};

struct AmbientPostProcessingResource {
    keen::float rainWeatherSaturation; // Offset: 0
    keen::float nightAdaptationStrength; // Offset: 4
    keen::Time nightAdaptationStartOffset; // Offset: 8
    keen::Time nightAdaptationEndOffset; // Offset: 16
    keen::Time dayAdaptationStartOffset; // Offset: 24
    keen::Time dayAdaptationEndOffset; // Offset: 32
    keen::bool deathOnlyDesaturates; // Offset: 40
    keen::float deathScreenSaturation; // Offset: 44
    keen::Color color; // Offset: 48
    keen::float defaultSaturation; // Offset: 52
};

struct AmbientCollectionResource {
    keen::ObjectReference<keen::AmbientSfxCollectionResource> sfxCollection; // Offset: 0
    keen::ObjectReference<keen::AmbientVfxCollectionResource> vfxCollection; // Offset: 16
    keen::ObjectReference<keen::AmbientParameterResource> parameters; // Offset: 32
    keen::ObjectReference<keen::AmbientEnvironmentMapResource> mapping; // Offset: 48
    keen::ObjectReference<keen::AmbientEventSoundsResource> eventSounds; // Offset: 64
    keen::ObjectReference<keen::AmbientPostProcessingResource> postProcessing; // Offset: 80
};

enum class ambient.ReasonThisSoundDoesNotPlay {
    Music = 0,
    Loop = 1,
    SFX = 2,
    Environment = 3,
    CombatSituation = 4,
    TimeOfDay = 5,
    TooMuchFog = 6,
    TooLittleFog = 7,
    WorldShape = 8,
    TaggedProps = 9,
    RandomChanceParameter = 10,
    MusicQueued = 11,
    Sleeping = 12,
    SlotAlreadyFilled = 13,
    Weather = 14,
};

typedef keen::Bitmask16<keen::ambient::ReasonThisSoundDoesNotPlay> ambient.ReasonThisSoundDoesNotPlayMask;

struct ambient.SoundExplanation {
    keen::ambient::ReasonThisSoundDoesNotPlayMask reason; // Offset: 0
    keen::float volumeCurrent; // Offset: 4
    keen::float volumeTarget; // Offset: 8
    keen::Guid soundGuid; // Offset: 12
};

struct ambient.EffectsSoundReasonsDebugMessage {
    keen::Guid effectGuid; // Offset: 0
    keen::ambient::SoundExplanation explanation; // Offset: 16
    keen::uint cellIndex; // Offset: 44
};

struct ambient.DebugMessageBundle {
    keen::BlobArray<keen::ambient::EffectsSoundReasonsDebugMessage> data; // Offset: 0
};

enum class BossMusicType {
    None = 0,
    Fogger = 1,
    Mage = 2,
    Scavenger = 3,
    Vukah = 4,
    Monstrosity = 5,
    Lurchie = 6,
    Hollow = 7,
    Cyclops = 8,
    Dragon = 9,
};

struct ecs.Component {
};

struct ecs.IsTame {
};

enum class AnimationLoopType {
    Auto = 0,
    Loop = 1,
    NoLoop = 2,
};

struct AnimationJointQuality {
    keen::string trackName; // Offset: 0
    keen::float32 quality; // Offset: 8
};

enum class AttachmentSlot {
    Root = 0,
    Head = 1,
    Chest = 2,
    Pelvis = 3,
    FootL = 4,
    FootR = 5,
    FootRL = 6,
    FootRR = 7,
    HandR = 8,
    HandL = 9,
    KneeR = 10,
    KneeL = 11,
    ArmL = 12,
    Block = 13,
    Count = 14,
};

typedef keen::Bitmask16<keen::AttachmentSlot> AttachmentSlotMask;

enum class AnimationSpace {
    Local = 0,
    LocalAdd = 1,
};

struct ModelHintSetEntry {
    keen::ObjectReference<keen::Model> model; // Offset: 0
};

struct ModelHintSet {
};

struct Animation {
    keen::string animation_node; // Offset: 0
    keen::ObjectReference<keen::ModelHierarchy> hierarchy; // Offset: 8
    keen::ObjectReference<keen::Model> modelHint; // Offset: 24
    keen::ObjectReference<keen::ModelHintSet> modelHintSet; // Offset: 40
    keen::ObjectReference<keen::ClothCollider> clothCollider; // Offset: 56
    keen::uint32 startFrame; // Offset: 72
    keen::uint32 endFrame; // Offset: 76
    keen::sint32 refFrame; // Offset: 80
    keen::AnimationSpace space; // Offset: 84
    keen::float32 xanimScale; // Offset: 88
    keen::float32 quality; // Offset: 92
    keen::BlobArray<keen::AnimationJointQuality> qualityOverrite; // Offset: 96
    keen::AnimationLoopType loopType; // Offset: 104
    keen::float32 autoLoopEpsilon; // Offset: 108
    keen::bool loopLve; // Offset: 112
    keen::bool exportJointAnimation; // Offset: 113
    keen::bool exportLveAnimation; // Offset: 114
    keen::bool exportSequenceData; // Offset: 115
    keen::bool exportDebugData; // Offset: 116
};

typedef keen::ObjectReference<keen::Animation> AnimationReference;

struct AnimationInfo {
    keen::float32 length; // Offset: 0
    keen::uint32 jointCount; // Offset: 4
    keen::uint32 frameCount; // Offset: 8
    keen::ObjectReference<keen::Model> modelHint; // Offset: 12
    keen::ObjectReference<keen::ModelHintSet> modelHintSet; // Offset: 28
    keen::ObjectReference<keen::ModelHierarchyResource> hierarchy; // Offset: 44
    keen::bool hasLve; // Offset: 60
    keen::bool hasSequences; // Offset: 61
    keen::bool loops; // Offset: 62
    keen::AnimationSpace space; // Offset: 63
    keen::BlobString name; // Offset: 64
};

struct AnimationConverterConfiguration {
    keen::bool checkParentNames; // Offset: 0
    keen::bool checkMatrixDecomposition; // Offset: 1
};

struct Sequence {
    keen::Time length; // Offset: 0
    keen::bool loop; // Offset: 8
};

struct AnimationEventSequence {
    keen::ObjectReference<keen::ModelHierarchy> hierarchyPreviewSettings; // Offset: 16
    keen::ObjectReference<keen::ClothCollider> previewClothCollider; // Offset: 32
};

typedef keen::ObjectReference<keen::SequenceResource> AnimationEventSequenceReference;

struct AnimationSequenceContainer {
    keen::BlobArray<keen::AnimationEventSequenceReference> sequences; // Offset: 0
};

enum class Blend1DInterpolationCurve {
    Linear = 0,
    WalkRunCurve = 1,
};

struct animationgraph.StateId {
};

struct animationgraph.InputId {
};

struct animationgraph.FloatInputId {
};

struct animationgraph.BoolInputId {
};

struct animationgraph.IntInputId {
};

struct animationgraph.UintInputId {
};

struct animationgraph.IdInputId {
};

struct animationgraph.OverlayId {
};

struct animationgraph.OverlayContextId {
};

typedef keen::ObjectReference<keen::animationgraph::StateId> animationgraph.StateIdReference;

typedef keen::ObjectReference<keen::animationgraph::InputId> animationgraph.InputIdReference;

typedef keen::ObjectReference<keen::animationgraph::OverlayId> animationgraph.OverlayIdReference;

typedef keen::ObjectReference<keen::animationgraph::OverlayContextId> animationgraph.OverlayContextIdReference;

typedef keen::HashKey32 animationgraph.StateIdHash;

typedef keen::HashKey32 animationgraph.InputIdHash;

struct animationgraph.AnimationIdCollection {
};

struct animationgraph.StateIdCollection {
};

struct animationgraph.InputIdCollection {
};

struct animationgraph.OverlayIdCollection {
};

struct animationgraph.OverlayContextIdCollection {
};

struct animationgraph.AnimationDebugEntry {
    keen::Guid guid; // Offset: 0
    keen::HashKey32 hash; // Offset: 16
    keen::BlobString debugName; // Offset: 20
};

struct animationgraph.AnimationGraphDebugInfo {
    keen::BlobArray<keen::animationgraph::AnimationDebugEntry> entries; // Offset: 0
};

enum class animationgraph.RootMotionFlag {
    Pure = 0,
    AlignToFloor = 1,
    WarpToTarget = 2,
    Ignore = 3,
    IgnoreScale = 4,
};

typedef keen::Bitmask8<keen::animationgraph::RootMotionFlag> animationgraph.RootMotionMask;

struct float2 {
    keen::float32 x; // Offset: 0
    keen::float32 y; // Offset: 4
};

struct Vector2 {
};

struct float3 {
    keen::float32 x; // Offset: 0
    keen::float32 y; // Offset: 4
    keen::float32 z; // Offset: 8
};

struct animationgraph.NodeBase {
    keen::animationgraph::StateIdReference id; // Offset: 0
    keen::Vector2 position; // Offset: 16
    keen::float32 defaultBlendInDuration; // Offset: 24
    keen::float3 pivotOffset; // Offset: 28
    keen::bool isIncompatibleWithOverlays; // Offset: 40
    keen::bool restartOnRetrigger; // Offset: 41
};

struct animationgraph.AnimationSpeedGradientController {
    keen::animationgraph::InputIdReference inputName; // Offset: 0
    keen::float32 inputValueA; // Offset: 16
    keen::float32 inputValueB; // Offset: 20
    keen::float32 speedFactorA; // Offset: 24
    keen::float32 speedFactorB; // Offset: 28
};

struct animationgraph.AnimationNode {
    keen::AnimationReference animation; // Offset: 44
};

struct animationgraph.AnimationSpeedGradientNode {
    keen::animationgraph::AnimationSpeedGradientController speedController; // Offset: 60
};

struct animationgraph.BlendData1DBase {
    keen::float32 position; // Offset: 0
};

struct animationgraph.ChoiceData1DBase {
    keen::uint32 choice; // Offset: 0
};

struct animationgraph.NoAnimationBlendData1D {
};

struct animationgraph.NoAnimationChoiceData1D {
};

struct animationgraph.AnimationBlendData1D {
    keen::AnimationReference animation; // Offset: 4
};

struct animationgraph.AnimationChoiceData1D {
    keen::AnimationReference animation; // Offset: 4
};

struct animationgraph.AnimationSpeedGradientBlendData1D {
    keen::animationgraph::AnimationSpeedGradientController speedController; // Offset: 20
};

struct animationgraph.AnimationSpeedGradientChoiceData1D {
    keen::animationgraph::AnimationSpeedGradientController speedController; // Offset: 20
};

struct animationgraph.HierarchyBlendData1D {
    keen::animationgraph::InputIdReference inputName; // Offset: 4
    keen::Blend1DInterpolationCurve curve; // Offset: 20
    keen::bool wrapInputAsAngle; // Offset: 21
};

struct animationgraph.BlendHierarchyDataChoice1D {
    keen::animationgraph::InputIdReference inputName; // Offset: 4
    keen::Blend1DInterpolationCurve curve; // Offset: 20
    keen::bool wrapInputAsAngle; // Offset: 21
};

struct animationgraph.ChoiceHierarchyDataBlend1D {
    keen::animationgraph::InputIdReference inputName; // Offset: 4
};

struct animationgraph.ChoiceHierarchyDataChoice1D {
    keen::animationgraph::InputIdReference inputName; // Offset: 4
};

struct animationgraph.GenderAnimationReference {
    keen::AnimationReference maleAnimation; // Offset: 0
    keen::AnimationReference femaleAnimation; // Offset: 16
};

struct animationgraph.PrimaryItemSpecificAnimationReference {
    keen::AnimationReference unarmedAnimation; // Offset: 0
    keen::AnimationReference singleAndShieldAnimation; // Offset: 16
    keen::AnimationReference singleNoShieldAnimation; // Offset: 32
    keen::AnimationReference dualAnimation; // Offset: 48
    keen::AnimationReference twoHandedAnimation; // Offset: 64
    keen::AnimationReference bowPrimaryAnimation; // Offset: 80
    keen::AnimationReference staffPrimaryAnimation; // Offset: 96
    keen::AnimationReference wandPrimaryAnimation; // Offset: 112
};

struct animationgraph.SecondaryItemSpecificAnimationReference {
    keen::AnimationReference bowAnimation; // Offset: 0
    keen::AnimationReference staffSecondaryAnimation; // Offset: 16
    keen::AnimationReference wandSecondaryAnimation; // Offset: 32
};

struct animationgraph.PrimaryItemSpecificAnimationNode {
    keen::animationgraph::PrimaryItemSpecificAnimationReference animations; // Offset: 44
};

struct animationgraph.SecondaryItemSpecificAnimationNode {
    keen::animationgraph::SecondaryItemSpecificAnimationReference animations; // Offset: 44
};

struct animationgraph.PrimaryItemSpecificBlend1D {
    keen::animationgraph::PrimaryItemSpecificAnimationReference animations; // Offset: 4
};

struct animationgraph.SecondaryItemSpecificBlend1D {
    keen::animationgraph::SecondaryItemSpecificAnimationReference animations; // Offset: 4
};

struct animationgraph.PrimaryItemSpecificChoice1D {
    keen::animationgraph::PrimaryItemSpecificAnimationReference animations; // Offset: 4
};

struct animationgraph.SecondaryItemSpecificChoice1D {
    keen::animationgraph::SecondaryItemSpecificAnimationReference animations; // Offset: 4
};

struct animationgraph.VerySpecialBlockNode {
};

struct animationgraph.MaskedNode {
    keen::BlobString delimiterJoint; // Offset: 44
    keen::animationgraph::InputIdReference delimiterInputName; // Offset: 52
    keen::Time lowerBodyBlendInTime; // Offset: 72
    keen::Time lowerBodyBlendOutTime; // Offset: 80
    keen::bool resetLowerBodyOnToggleOn; // Offset: 88
    keen::ObjectReference<keen::animationgraph::NodeBase> upperAnims; // Offset: 92
    keen::ObjectReference<keen::animationgraph::NodeBase> lowerAnims; // Offset: 108
};

struct animationgraph.Blend1D {
    keen::animationgraph::InputIdReference inputName; // Offset: 44
    keen::Blend1DInterpolationCurve curve; // Offset: 60
    keen::bool wrapInputAsAngle; // Offset: 61
};

struct animationgraph.Choice1D {
    keen::animationgraph::InputIdReference inputName; // Offset: 44
};

struct animationgraph.BlendLayerBase {
    keen::float32 weight; // Offset: 0
};

struct animationgraph.AnimationBlendLayer {
    keen::AnimationReference animation; // Offset: 4
};

struct animationgraph.HierarchyBlendLayer {
    keen::animationgraph::HierarchyBlendData1D blendHierarchy; // Offset: 4
};

struct animationgraph.ChoiceHierarchyBlendLayer {
    keen::animationgraph::ChoiceHierarchyDataBlend1D choiceHierarchy; // Offset: 4
};

struct animationgraph.PrimaryItemSpecificBlendLayer {
    keen::animationgraph::PrimaryItemSpecificAnimationReference animations; // Offset: 4
};

struct animationgraph.SecondaryItemSpecificBlendLayer {
    keen::animationgraph::SecondaryItemSpecificAnimationReference animations; // Offset: 4
};

struct animationgraph.BlendLayersNode {
};

typedef keen::ObjectReference<keen::animationgraph::NodeBase> animationgraph.NodeBaseReference;

struct animationgraph.TransitionBase {
    keen::animationgraph::NodeBaseReference startNode; // Offset: 0
    keen::animationgraph::NodeBaseReference endNode; // Offset: 16
    keen::float32 duration; // Offset: 32
};

struct animationgraph.LinearTransition {
    keen::bool sync; // Offset: 36
};

struct animationgraph.AnimationTransition {
    keen::AnimationReference animation; // Offset: 36
    keen::float32 blendIn; // Offset: 52
    keen::float32 blendOut; // Offset: 56
    keen::bool simultaneouslyPlayTargetAnimation; // Offset: 60
};

struct animationgraph.OverlayBase {
    keen::animationgraph::OverlayIdReference id; // Offset: 0
    keen::animationgraph::OverlayContextIdReference context; // Offset: 16
    keen::BlobArray<keen::animationgraph::NodeBaseReference> abortUnlessInNodes; // Offset: 32
};

struct animationgraph.AnimationOverlay {
    keen::AnimationReference animation; // Offset: 40
};

struct Group {
};

struct AnimationGraphDirectory {
};

struct AnimationGraph {
    keen::float32 defaultTransitionTime; // Offset: 0
    keen::BlobArray<keen::animationgraph::GenderAnimationReference> genderLookupTable; // Offset: 4
    keen::ObjectReference<keen::ClothCollider> clothColliderReference; // Offset: 12
};

struct animation.NodeId {
    keen::uint32 id; // Offset: 0
};

struct animationgraph_resource.TransitionBase {
    keen::animation::NodeId endNodeIndex; // Offset: 0
    keen::Time duration; // Offset: 8
};

struct animationgraph_resource.LinearTransition {
    keen::bool sync; // Offset: 16
};

struct animation.AnimationId {
    keen::uint32 id; // Offset: 0
};

struct animationgraph_resource.GenderSpecificAnimationIndex {
    keen::animation::AnimationId maleAnimation; // Offset: 0
    keen::animation::AnimationId femaleAnimation; // Offset: 4
};

struct animationgraph_resource.ExitAnimation {
    keen::animation::NodeId targetNodeIndex; // Offset: 0
    keen::Time blendIn; // Offset: 8
    keen::Time blendOut; // Offset: 16
    keen::animation::AnimationId animationIndex; // Offset: 24
    keen::bool simultaneouslyPlayTargetAnimation; // Offset: 28
};

struct animationgraph_resource.AnimationSpeedGradientController {
    keen::animationgraph::InputIdReference inputName; // Offset: 0
    keen::float32 inputValueA; // Offset: 16
    keen::float32 inputValueB; // Offset: 20
    keen::float32 speedFactorA; // Offset: 24
    keen::float32 speedFactorB; // Offset: 28
};

struct animationgraph_resource.NodeBase {
    keen::animationgraph::StateIdReference stateIdReference; // Offset: 0
    keen::animationgraph::StateIdHash stateId; // Offset: 16
    keen::BlobArray<keen::animationgraph_resource::ExitAnimation> onExits; // Offset: 20
    keen::uint32 defaultInboundTransition; // Offset: 28
    keen::BlobArray<keen::uint32> outgoingTransitions; // Offset: 32
    keen::float3 pivotOffset; // Offset: 40
    keen::bool isIncompatibleWithOverlays; // Offset: 52
    keen::bool restartOnRetrigger; // Offset: 53
    keen::bool graphCanBePaused; // Offset: 54
};

struct animationgraph_resource.AnimationNode {
    keen::animation::AnimationId animationIndex; // Offset: 56
};

struct animationgraph_resource.AnimationSpeedGradientNode {
    keen::animationgraph_resource::AnimationSpeedGradientController speedController; // Offset: 60
};

struct animationgraph_resource.BlendDataFloat1DBase {
    keen::float32 position; // Offset: 0
};

struct animationgraph_resource.BlendDataUint1DBase {
    keen::uint32 choice; // Offset: 0
};

struct animationgraph_resource.NoAnimationBlendDataFloat1D {
};

struct animationgraph_resource.AnimationBlendDataFloat1D {
    keen::animation::AnimationId animationIndex; // Offset: 4
};

struct animationgraph_resource.NoAnimationBlendDataUint1D {
};

struct animationgraph_resource.AnimationBlendDataUint1D {
    keen::animation::AnimationId animationIndex; // Offset: 4
};

struct animationgraph_resource.AnimationSpeedGradientBlendDataFloat1D {
    keen::animationgraph_resource::AnimationSpeedGradientController speedController; // Offset: 8
};

struct animationgraph_resource.AnimationSpeedGradientBlendDataUint1D {
    keen::animationgraph_resource::AnimationSpeedGradientController speedController; // Offset: 8
};

struct animationgraph_resource.FloatHierarchy1D {
    keen::animationgraph::InputIdReference floatInputName; // Offset: 0
    keen::bool wrapInputAsAngle; // Offset: 16
    keen::Blend1DInterpolationCurve curve; // Offset: 17
    keen::BlobArray<keen::BlobVariant<keen::animationgraph_resource::BlendDataFloat1DBase>> blendData; // Offset: 20
};

struct animationgraph_resource.UintHierarchy1D {
    keen::animationgraph::InputIdReference uintInputName; // Offset: 0
    keen::BlobArray<keen::BlobVariant<keen::animationgraph_resource::BlendDataUint1DBase>> blendData; // Offset: 16
};

struct animationgraph_resource.FloatHierarchyBlendDataFloat1D {
    keen::animationgraph_resource::FloatHierarchy1D hierarchy; // Offset: 4
};

struct animationgraph_resource.FloatHierarchyBlendDataUint1D {
    keen::animationgraph_resource::FloatHierarchy1D hierarchy; // Offset: 4
};

struct animationgraph_resource.UintHierarchyBlendDataFloat1D {
    keen::animationgraph_resource::UintHierarchy1D hierarchy; // Offset: 4
};

struct animationgraph_resource.UintHierarchyBlendDataUint1D {
    keen::animationgraph_resource::UintHierarchy1D hierarchy; // Offset: 4
};

struct animationgraph_resource.BlendFloat1DNode {
    keen::animationgraph_resource::FloatHierarchy1D hierarchy; // Offset: 56
};

struct animationgraph_resource.BlendUint1DNode {
    keen::animationgraph_resource::UintHierarchy1D hierarchy; // Offset: 56
};

struct animationgraph_resource.BlendLayerBase {
    keen::float32 weight; // Offset: 0
};

struct animationgraph_resource.AnimationBlendLayer {
    keen::animation::AnimationId animationIndex; // Offset: 4
};

struct animationgraph_resource.BlendHierarchyBlendLayer {
    keen::animationgraph_resource::FloatHierarchy1D hierarchy; // Offset: 4
};

struct animationgraph_resource.ChoiceHierarchyBlendLayer {
    keen::animationgraph_resource::UintHierarchy1D hierarchy; // Offset: 4
};

struct animationgraph_resource.BlendLayersNode {
    keen::BlobArray<keen::BlobVariant<keen::animationgraph_resource::BlendLayerBase>> blendLayers; // Offset: 56
};

typedef keen::ObjectReference<keen::animationgraph_resource::NodeBase> animationgraph_resource.NodeBaseReference;

struct animationgraph_resource.VerySpecialBlockNode {
    keen::string delimiterJoint; // Offset: 56
    keen::animationgraph_resource::UintHierarchy1D blockAnimData; // Offset: 64
    keen::animationgraph_resource::FloatHierarchy1D moveAnimData; // Offset: 88
};

struct animationgraph_resource.MaskedNode {
    keen::string delimiterJoint; // Offset: 56
    keen::animationgraph::InputIdReference delimiterInputName; // Offset: 64
    keen::Time lowerBodyBlendInTime; // Offset: 80
    keen::Time lowerBodyBlendOutTime; // Offset: 88
    keen::bool resetLowerBodyOnToggleOn; // Offset: 96
    keen::BlobArray<keen::BlobVariant<keen::animationgraph_resource::BlendLayerBase>> upperLayers; // Offset: 100
    keen::BlobArray<keen::BlobVariant<keen::animationgraph_resource::BlendLayerBase>> lowerLayers; // Offset: 108
};

struct animationgraph_resource.AnimationListEntry {
    keen::AnimationReference reference; // Offset: 0
    keen::Time duration; // Offset: 16
    keen::uint32 frameCount; // Offset: 24
    keen::bool hasLve; // Offset: 28
    keen::bool hasSequences; // Offset: 29
    keen::bool loops; // Offset: 30
    keen::AnimationSpace space; // Offset: 31
    keen::BlobString name; // Offset: 32
};

struct animationgraph_resource.AnimationListResource {
    keen::BlobArray<keen::animationgraph_resource::AnimationListEntry> animations; // Offset: 0
};

struct animationgraph_resource.OverlayBase {
    keen::animationgraph::StateIdHash stateId; // Offset: 0
    keen::animationgraph::OverlayIdReference name; // Offset: 4
    keen::animationgraph::OverlayContextIdReference context; // Offset: 20
    keen::BlobArray<keen::animationgraph::StateIdHash> abortUnlessInNodes; // Offset: 36
    keen::BlobString dbgName; // Offset: 44
};

struct animationgraph_resource.AnimationOverlay {
    keen::animation::AnimationId maleAnimationIndex; // Offset: 52
    keen::animation::AnimationId femaleAnimationIndex; // Offset: 56
};

typedef keen::uint16 AnimationJointIndex;

struct AnimationGraphResource {
    keen::uint32 jointCount; // Offset: 0
    keen::ObjectReference<keen::ModelHierarchyResource> hierarchy; // Offset: 4
    keen::BlobArray<keen::BlobVariant<keen::animationgraph_resource::NodeBase>> nodes; // Offset: 20
    keen::BlobArray<keen::animationgraph_resource::AnimationListEntry> animations; // Offset: 28
    keen::BlobArray<keen::BlobVariant<keen::animationgraph_resource::TransitionBase>> transitions; // Offset: 36
    keen::BlobArray<keen::BlobVariant<keen::animationgraph_resource::OverlayBase>> overlays; // Offset: 44
    keen::animationgraph_resource::UintHierarchy1D globalOverlay; // Offset: 52
    keen::StaticArray<keen::AnimationJointIndex,14> slotBoneIndexMapping; // Offset: 76
    keen::ObjectReference<keen::RenderClothColliderResource> clothColliderReference; // Offset: 104
};

typedef keen::ObjectReference<keen::AnimationGraph> AnimationGraphReference;

struct AnimationGraphInputBase {
    keen::animationgraph::InputIdHash hash; // Offset: 0
};

struct AnimationGraphFloatInput {
    keen::float32 value; // Offset: 4
};

struct AnimationGraphUintInput {
    keen::uint32 value; // Offset: 4
};

struct AnimationGraphBoolInput {
    keen::bool value; // Offset: 4
};

struct AnimationGraphIntInput {
    keen::sint32 value; // Offset: 4
};

struct AnimationGraphIdInput {
    keen::animationgraph::StateIdHash value; // Offset: 4
};

struct WorldPosition {
    keen::sint64 x; // Offset: 0
    keen::sint64 y; // Offset: 8
    keen::sint64 z; // Offset: 16
};

struct Quaternion {
    keen::float32 x; // Offset: 0
    keen::float32 y; // Offset: 4
    keen::float32 z; // Offset: 8
    keen::float32 w; // Offset: 12
};

struct WorldTransform {
    keen::WorldPosition position; // Offset: 0
    keen::Quaternion orientation; // Offset: 24
    keen::float3 scale; // Offset: 40
};

struct WarpToTargetConfig {
    keen::WorldTransform targetTransform; // Offset: 0
    keen::Time duration; // Offset: 56
    keen::Time endTime; // Offset: 64
    keen::float32 maxScale; // Offset: 72
    keen::bool isTargetSet; // Offset: 76
    keen::bool abortWarpAboveMaxScale; // Offset: 77
};

struct RootMotionConfig {
    keen::float32 movementMod; // Offset: 0
    keen::WarpToTargetConfig warpToTargetConfig; // Offset: 8
};

enum class OverlayInputsEventType {
    Invalid = 0,
    Start = 1,
    Abort = 2,
};

struct OverlayInputsEvent {
    keen::animationgraph::StateIdHash animationStateId; // Offset: 0
    keen::uint32 jointId; // Offset: 4
    keen::OverlayInputsEventType type; // Offset: 8
    keen::uint8 changeCounter; // Offset: 9
};

struct AnimationGraphInputs {
    keen::StaticArray<keen::AnimationGraphFloatInput,8> floatInputs; // Offset: 0
    keen::StaticArray<keen::AnimationGraphUintInput,8> uintInputs; // Offset: 64
    keen::StaticArray<keen::AnimationGraphBoolInput,2> boolInputs; // Offset: 128
    keen::StaticArray<keen::AnimationGraphIntInput,2> intInputs; // Offset: 144
    keen::StaticArray<keen::AnimationGraphIdInput,2> idInputs; // Offset: 160
    keen::StaticArray<keen::OverlayInputsEvent,5> overlayInputs; // Offset: 176
    keen::RootMotionConfig rootMotionConfig; // Offset: 240
    keen::WorldTransform currentTransform; // Offset: 328
};

enum class AnimGraphPreviewEventType {
    Node = 0,
    Overlay = 1,
};

struct AnimGraphPreviewSeqenceEntry {
    keen::AnimGraphPreviewEventType eventType; // Offset: 0
    keen::Time timeFromStart; // Offset: 8
    keen::uint32 selectedIndex; // Offset: 16
};

struct AnimGraphPreviewSeqence {
    keen::BlobArray<keen::AnimGraphPreviewSeqenceEntry> entries; // Offset: 0
};

struct AnimationGraphInfo {
    keen::BlobArray<keen::animationgraph::StateIdReference> nodes; // Offset: 0
    keen::BlobArray<keen::animationgraph::InputIdReference> floatInputs; // Offset: 8
    keen::BlobArray<keen::animationgraph::InputIdReference> uintInputs; // Offset: 16
    keen::BlobArray<keen::animationgraph::InputIdReference> boolInputs; // Offset: 24
    keen::BlobArray<keen::animationgraph::OverlayIdReference> overlays; // Offset: 32
    keen::ObjectReference<keen::ModelHierarchyResource> modelHierarchy; // Offset: 40
};

enum class anim_graph.LayerBlendMode {
    Override = 0,
    Additive = 1,
};

enum class anim_graph.AdditiveType {
    None = 0,
    Additive_LocalSpace = 1,
};

enum class anim_graph.TransitionRootMotionMode {
    BlendRootMotions = 0,
    UseRootMotionFromIncomingState = 1,
    UseRootMotionFromDestinationState = 2,
    UseRootMotionFromHighestWeight = 3,
};

struct anim_graph.LayerBlendOptions {
    keen::anim_graph::LayerBlendMode blendMode; // Offset: 0
    keen::ObjectReference<keen::anim_graph::BoneMask> boneMask; // Offset: 4
};

struct anim_graph.BoneMask {
    keen::ObjectReference<keen::ModelHierarchy> hierarchy; // Offset: 0
};

struct anim_graph.BoneMaskEntry {
    keen::string boneName; // Offset: 0
    keen::float32 weight; // Offset: 8
};

struct anim_graph.BoneMaskResource {
    keen::BlobArray<keen::anim_graph::BoneMaskEntryResource> entries; // Offset: 0
};

struct anim_graph.BoneMaskEntryResource {
    keen::uint8 boneIndex; // Offset: 0
    keen::float32 weight; // Offset: 4
};

struct anim_graph.AnimationSpeedController {
    keen::ObjectReference<keen::animationgraph::FloatInputId> inputName; // Offset: 0
    keen::HashKey32 inputHash; // Offset: 16
    keen::float32 inputValueA; // Offset: 20
    keen::float32 inputValueB; // Offset: 24
    keen::float32 speedFactorA; // Offset: 28
    keen::float32 speedFactorB; // Offset: 32
};

struct anim_graph.GenderMappingEntry {
    keen::Guid maleAnimation; // Offset: 0
    keen::Guid femaleAnimation; // Offset: 16
};

enum class anim_graph.tool_graph.DataType {
    Pose = 0,
    Float = 1,
    Int = 2,
    Bool = 3,
    ID = 4,
};

struct anim_graph.tool_graph.GraphParameterBase {
    keen::ObjectReference<keen::animationgraph::InputId> inputId; // Offset: 0
};

struct anim_graph.tool_graph.FloatGraphParameter {
};

struct anim_graph.tool_graph.IntGraphParameter {
};

struct anim_graph.tool_graph.BoolGraphParameter {
};

struct anim_graph.tool_graph.IDGraphParameterValue {
};

struct anim_graph.tool_graph.IDGraphParameter {
};

struct anim_graph.tool_graph.GraphParameterSet {
};

struct anim_graph.tool_graph.PinBase {
    keen::anim_graph::tool_graph::DataType dataType; // Offset: 0
};

struct anim_graph.tool_graph.InputPin {
};

struct anim_graph.tool_graph.OutputPin {
};

struct anim_graph.tool_graph.Link {
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> sourcePin; // Offset: 0
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> targetPin; // Offset: 16
};

struct anim_graph.tool_graph.EditorNodeBase {
    keen::Vector2 uiPosition; // Offset: 0
    keen::ObjectReference<keen::anim_graph::tool_graph::EditorGraphBase> secondaryGraph; // Offset: 8
    keen::ObjectReference<keen::anim_graph::tool_graph::EditorGraphBase> childGraph; // Offset: 24
};

struct anim_graph.tool_graph.FloatParameter {
    keen::ObjectReference<keen::animationgraph::FloatInputId> parameter; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> value; // Offset: 56
};

struct anim_graph.tool_graph.FloatConstant {
    keen::float32 value; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> output; // Offset: 44
};

struct anim_graph.tool_graph.FloatAdd {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.FloatSubtract {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.FloatMultiply {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.FloatGreaterThan {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 72
    keen::bool orEqual; // Offset: 88
};

struct anim_graph.tool_graph.FloatLessThan {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 72
    keen::bool orEqual; // Offset: 88
};

struct anim_graph.tool_graph.FloatEquals {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 72
    keen::float32 tolerance; // Offset: 88
};

struct anim_graph.tool_graph.FloatGreaterThanConstant {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> input; // Offset: 40
    keen::float32 value; // Offset: 56
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 60
    keen::bool orEqual; // Offset: 76
};

struct anim_graph.tool_graph.FloatLessThanConstant {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> input; // Offset: 40
    keen::float32 value; // Offset: 56
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 60
    keen::bool orEqual; // Offset: 76
};

struct anim_graph.tool_graph.FloatEqualsConstant {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> input; // Offset: 40
    keen::float32 value; // Offset: 56
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 60
    keen::float32 tolerance; // Offset: 76
};

struct anim_graph.tool_graph.FloatDivide {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.SelectPoseBase {
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> outputPose; // Offset: 40
    keen::float32 blendTime; // Offset: 56
};

struct anim_graph.tool_graph.SelectPoseByBool {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> poseA; // Offset: 60
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> poseB; // Offset: 76
};

struct anim_graph.tool_graph.SelectPoseByBoolParameters {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> selectA; // Offset: 40
};

struct FloatRange {
    keen::float32 minValue; // Offset: 0
    keen::float32 maxValue; // Offset: 4
};

struct anim_graph.tool_graph.FloatRemap {
    keen::FloatRange inputRange; // Offset: 40
    keen::FloatRange outputRange; // Offset: 48
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> inputValue; // Offset: 56
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.IDParameter {
    keen::ObjectReference<keen::animationgraph::IdInputId> parameter; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> value; // Offset: 56
};

struct anim_graph.tool_graph.IDConstant {
    keen::ObjectReference<keen::animationgraph::StateId> value; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> output; // Offset: 56
};

struct anim_graph.tool_graph.IDEquals {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> a; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> b; // Offset: 56
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.IDParameterEqualsConstant {
    keen::ObjectReference<keen::animationgraph::IdInputId> parameter; // Offset: 40
    keen::ObjectReference<keen::animationgraph::StateId> value; // Offset: 56
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 72
    keen::bool ignoreForAnimationSequences; // Offset: 88
};

struct anim_graph.tool_graph.IDEqualsConstant {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> input; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 56
    keen::ObjectReference<keen::animationgraph::StateId> value; // Offset: 72
    keen::bool ignoreForAnimationSequences; // Offset: 88
};

struct anim_graph.tool_graph.IntParameter {
    keen::ObjectReference<keen::animationgraph::IntInputId> parameter; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> value; // Offset: 56
};

struct anim_graph.tool_graph.IntConstant {
    keen::sint32 value; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> output; // Offset: 44
};

struct anim_graph.tool_graph.IntEquals {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> a; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> b; // Offset: 56
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.IntEqualsConstant {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> input; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 56
    keen::sint32 value; // Offset: 72
};

struct anim_graph.tool_graph.IsOverlayActive {
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> active; // Offset: 40
    keen::ObjectReference<keen::animationgraph::OverlayId> value; // Offset: 56
};

struct anim_graph.tool_graph.BoolParameter {
    keen::ObjectReference<keen::animationgraph::BoolInputId> parameter; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> value; // Offset: 56
};

struct anim_graph.tool_graph.BoolConstant {
    keen::bool value; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> output; // Offset: 44
};

struct anim_graph.tool_graph.BoolNegate {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> input; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 56
};

struct anim_graph.tool_graph.BoolAnd {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.BoolOr {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.BoolEquals {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.LayerBlend {
    keen::anim_graph::LayerBlendOptions blendOptions; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> base; // Offset: 60
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> layer; // Offset: 76
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> outputPose; // Offset: 92
};

struct anim_graph.tool_graph.SaveCachedPose {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> inputPose; // Offset: 40
};

struct anim_graph.tool_graph.UseCachedPose {
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> pose; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::SaveCachedPose> cachedPose; // Offset: 56
};

struct anim_graph.tool_graph.PoseResult {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> inputPose; // Offset: 40
};

struct anim_graph.tool_graph.StateMachine {
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> outputPose; // Offset: 40
};

struct anim_graph.tool_graph.StateMachineState {
    keen::bool restartOnRetrigger; // Offset: 40
    keen::bool startAtRandomTime; // Offset: 41
};

struct anim_graph.tool_graph.TransitionAdvancedOptions {
    keen::uint8 priority; // Offset: 0
    keen::anim_graph::TransitionRootMotionMode rootMotionMode; // Offset: 1
};

struct anim_graph.tool_graph.StateMachineTransition {
    keen::ObjectReference<keen::anim_graph::tool_graph::StateMachineState> fromState; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::StateMachineState> toState; // Offset: 56
    keen::bool autoTransition; // Offset: 72
    keen::float32 duration; // Offset: 76
    keen::anim_graph::tool_graph::TransitionAdvancedOptions advancedOptions; // Offset: 80
    keen::bool isGlobalTransition; // Offset: 82
};

struct anim_graph.tool_graph.StateMachineGlobalTransitions {
};

struct anim_graph.tool_graph.StateInputPin {
    keen::ObjectReference<keen::anim_graph::tool_graph::StateMachineState> state; // Offset: 4
    keen::float32 duration; // Offset: 20
    keen::anim_graph::TransitionRootMotionMode rootMotionMode; // Offset: 24
};

struct anim_graph.tool_graph.StateMachineGlobalTransitionParameters {
};

struct anim_graph.tool_graph.AdditiveAnimationParameters {
    keen::bool useCurrentAnimationAsReference; // Offset: 0
    keen::uint16 additiveReferenceFrame; // Offset: 2
    keen::AnimationReference additiveReferenceAnimation; // Offset: 4
};

struct anim_graph.tool_graph.AnimationClipSampler {
    keen::AnimationReference animation; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> outputPose; // Offset: 56
    keen::anim_graph::AdditiveType additiveType; // Offset: 72
    keen::anim_graph::tool_graph::AdditiveAnimationParameters additiveParameters; // Offset: 76
    keen::anim_graph::AnimationSpeedController speedController; // Offset: 96
};

struct anim_graph.tool_graph.EmptyAdditivePose {
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> outputPose; // Offset: 40
};

struct anim_graph.tool_graph.BlendSpace_1DItem {
    keen::float32 parameterValue; // Offset: 0
    keen::AnimationReference animation; // Offset: 4
};

struct anim_graph.tool_graph.BlendSpace_1D {
    keen::ObjectReference<keen::animationgraph::FloatInputId> parameter; // Offset: 40
    keen::ObjectReference<keen::anim_graph::tool_graph::OutputPin> outputPose; // Offset: 56
    keen::anim_graph::AdditiveType additiveType; // Offset: 72
    keen::uint16 additiveReferenceFrame; // Offset: 74
    keen::AnimationReference additiveReferenceAnimation; // Offset: 76
    keen::bool interpolateInputValue; // Offset: 92
    keen::float interpolationSpeed; // Offset: 96
    keen::anim_graph::AnimationSpeedController speedController; // Offset: 100
};

struct anim_graph.tool_graph.TransitionParameters {
    keen::ObjectReference<keen::anim_graph::tool_graph::InputPin> condition; // Offset: 40
};

struct anim_graph.tool_graph.EditorGraphBase {
    keen::ObjectReference<keen::anim_graph::tool_graph::EditorNodeBase> parentNode; // Offset: 0
    keen::ObjectReference<keen::anim_graph::tool_graph::EditorNodeBase> mostSignificantNode; // Offset: 16
};

struct anim_graph.tool_graph.FlowGraph {
};

struct anim_graph.tool_graph.StateMachineGraph {
    keen::ObjectReference<keen::anim_graph::tool_graph::StateMachineGlobalTransitions> globalTransitions; // Offset: 32
};

struct anim_graph.tool_graph.BlendTree {
};

struct anim_graph.tool_graph.ExpressionTree {
};

struct anim_graph.tool_graph.DefaultIdInputIdValue {
    keen::ObjectReference<keen::animationgraph::IdInputId> key; // Offset: 0
    keen::ObjectReference<keen::animationgraph::StateId> defaultValue; // Offset: 16
};

typedef keen::ObjectReference<keen::ModelBase> PreviewModelReference;

typedef keen::StaticArray<keen::PreviewModelReference,16> PreviewModelArray;

struct anim_graph.tool_graph.AnimationGraph2_0 {
    keen::ObjectReference<keen::anim_graph::tool_graph::BlendTree> rootGraph; // Offset: 0
    keen::ObjectReference<keen::ClothCollider> clothColliderReference; // Offset: 16
    keen::PreviewModelArray previewModelOverride; // Offset: 32
    keen::string genderPrefix; // Offset: 288
    keen::BlobArray<keen::anim_graph::GenderMappingEntry> genderMapping; // Offset: 296
};

enum class anim_graph.runtime_graph.AnimationNodeType {
    Invalid = 0,
    PoseResult = 1,
    SampleAnimationClip = 2,
    EmptyAdditivePose = 3,
    BlendSpace_1D = 4,
    FloatConstant = 5,
    FloatParameter = 6,
    IntConstant = 7,
    IntParameter = 8,
    BoolConstant = 9,
    BoolParameter = 10,
    IDConstant = 11,
    IDParameter = 12,
    StateMachine = 13,
    StateMachineState = 14,
    StateMachineTransition = 15,
    BoolNegate = 16,
    BoolAnd = 17,
    BoolOr = 18,
    BoolEquals = 19,
    FloatRemap = 20,
    FloatGreaterThan = 21,
    FloatLessThan = 22,
    FloatEquals = 23,
    FloatGreaterThanConstant = 24,
    FloatLessThanConstant = 25,
    FloatEqualsConstant = 26,
    SelectPoseByBool = 27,
    IdEquals = 28,
    IdEqualsConstant = 29,
    IdParameterEqualsConstant = 30,
    IntEquals = 31,
    IntEqualsConstant = 32,
    IsOverlayActive = 33,
    LayerBlend = 34,
    SaveCachedPose = 35,
    UseCachedPose = 36,
};

struct anim_graph.runtime_graph.AnimationNodeDefinition {
    keen::HashKey32 id; // Offset: 0
    keen::anim_graph::runtime_graph::AnimationNodeType type; // Offset: 4
};

struct anim_graph.runtime_graph.PoseResultNodeDefinition {
    keen::HashKey32 input; // Offset: 8
};

struct anim_graph.runtime_graph.SampleAnimationClipNodeDefinition {
    keen::bool loop; // Offset: 8
    keen::float32 animationDuration; // Offset: 12
    keen::ObjectReference<keen::JointAnimation> animation; // Offset: 16
    keen::ObjectReference<keen::JointAnimation> animationGenderAlternative; // Offset: 32
    keen::ObjectReference<keen::RootMotionAnimation> rootMotionAnimation; // Offset: 48
    keen::ObjectReference<keen::RootMotionAnimation> rootMotionAnimationGenderAlternative; // Offset: 64
    keen::ObjectReference<keen::AnimationSequenceContainer> eventSequenceContainer; // Offset: 80
    keen::anim_graph::AdditiveType additiveType; // Offset: 96
    keen::ObjectReference<keen::JointAnimation> additiveReferenceAnimation; // Offset: 100
    keen::ObjectReference<keen::JointAnimation> additiveReferenceAnimationGenderAlternative; // Offset: 116
    keen::uint16 additiveReferenceFrame; // Offset: 132
    keen::bool animationContentAdditive; // Offset: 134
    keen::anim_graph::AnimationSpeedController speedController; // Offset: 136
};

struct anim_graph.runtime_graph.EmptyAdditivePoseNodeDefinition {
};

struct anim_graph.runtime_graph.BlendSpace_1DItemRuntime {
    keen::float32 parameterValue; // Offset: 0
    keen::float32 animationDuration; // Offset: 4
    keen::ObjectReference<keen::JointAnimation> animation; // Offset: 8
    keen::ObjectReference<keen::JointAnimation> animationGenderAlternative; // Offset: 24
    keen::ObjectReference<keen::AnimationSequenceContainer> eventSequenceContainer; // Offset: 40
};

struct anim_graph.runtime_graph.BlendSpace_1DNodeDefinition {
    keen::BlobArray<keen::anim_graph::runtime_graph::BlendSpace_1DItemRuntime> items; // Offset: 8
    keen::ObjectReference<keen::animationgraph::FloatInputId> parameter; // Offset: 16
    keen::anim_graph::AdditiveType additiveType; // Offset: 32
    keen::ObjectReference<keen::JointAnimation> additiveReferenceAnimation; // Offset: 36
    keen::ObjectReference<keen::JointAnimation> additiveReferenceAnimationGenderAlternative; // Offset: 52
    keen::uint16 additiveReferenceFrame; // Offset: 68
    keen::anim_graph::AnimationSpeedController speedController; // Offset: 72
    keen::float interpolationSpeed; // Offset: 108
    keen::bool loop; // Offset: 112
    keen::bool animationContentAdditive; // Offset: 113
};

struct anim_graph.runtime_graph.LayerBlendNodeDefinition {
    keen::HashKey32 base; // Offset: 8
    keen::HashKey32 layer; // Offset: 12
    keen::anim_graph::LayerBlendOptions blendOptions; // Offset: 16
};

struct anim_graph.runtime_graph.SaveCachedPoseNodeDefinition {
    keen::HashKey32 inputPose; // Offset: 8
};

struct anim_graph.runtime_graph.UseCachedPoseNodeDefinition {
    keen::HashKey32 cachedPose; // Offset: 8
};

struct anim_graph.runtime_graph.FloatConstantNodeDefinition {
    keen::float32 value; // Offset: 8
};

struct anim_graph.runtime_graph.FloatParameterNodeDefinition {
    keen::uint32 parameterIndex; // Offset: 8
};

struct anim_graph.runtime_graph.StateMachineGlobalTransitionInfo {
    keen::HashKey32 toState; // Offset: 0
    keen::float32 duration; // Offset: 4
    keen::anim_graph::TransitionRootMotionMode rootMotionMode; // Offset: 8
    keen::HashKey32 conditionNode; // Offset: 12
};

struct anim_graph.runtime_graph.StateMachineNodeDefinition {
    keen::BlobArray<keen::HashKey32> states; // Offset: 8
    keen::BlobArray<keen::HashKey32> transitions; // Offset: 16
    keen::HashKey32 entryState; // Offset: 24
    keen::StaticArray<keen::anim_graph::runtime_graph::StateMachineGlobalTransitionInfo,32> globalTransitions; // Offset: 28
    keen::uint8 numGlobalTransitions; // Offset: 540
    keen::HashKey32 globalTransitionNodeId; // Offset: 544
    keen::BlobString debugName; // Offset: 548
};

struct anim_graph.runtime_graph.StateMachineStateNodeDefinition {
    keen::HashKey32 poseResult; // Offset: 8
    keen::BlobString debugName; // Offset: 12
    keen::bool restartOnRetrigger; // Offset: 20
    keen::bool startAtRandomTime; // Offset: 21
};

struct anim_graph.runtime_graph.StateMachineTransitionNodeDefinition {
    keen::HashKey32 fromState; // Offset: 8
    keen::HashKey32 toState; // Offset: 12
    keen::float32 duration; // Offset: 16
    keen::uint8 priority; // Offset: 20
    keen::HashKey32 conditionNode; // Offset: 24
    keen::anim_graph::TransitionRootMotionMode rootMotionMode; // Offset: 28
    keen::bool autoTransition; // Offset: 29
};

struct anim_graph.runtime_graph.IntConstantNodeDefinition {
    keen::sint32 value; // Offset: 8
};

struct anim_graph.runtime_graph.IntParameterNodeDefinition {
    keen::uint32 parameterIndex; // Offset: 8
};

struct anim_graph.runtime_graph.BoolConstantNodeDefinition {
    keen::bool value; // Offset: 8
};

struct anim_graph.runtime_graph.BoolParameterNodeDefinition {
    keen::uint32 parameterIndex; // Offset: 8
};

struct anim_graph.runtime_graph.IDConstantNodeDefinition {
    keen::HashKey32 value; // Offset: 8
};

struct anim_graph.runtime_graph.IDParameterNodeDefinition {
    keen::uint32 parameterIndex; // Offset: 8
};

struct anim_graph.runtime_graph.BoolNegateNodeDefinition {
    keen::HashKey32 input; // Offset: 8
};

struct anim_graph.runtime_graph.BoolAndNodeDefinition {
    keen::HashKey32 lhs; // Offset: 8
    keen::HashKey32 rhs; // Offset: 12
};

struct anim_graph.runtime_graph.BoolOrNodeDefinition {
    keen::HashKey32 lhs; // Offset: 8
    keen::HashKey32 rhs; // Offset: 12
};

struct anim_graph.runtime_graph.BoolEqualsNodeDefinition {
    keen::HashKey32 lhs; // Offset: 8
    keen::HashKey32 rhs; // Offset: 12
};

struct anim_graph.runtime_graph.FloatRemapNodeDefinition {
    keen::HashKey32 input; // Offset: 8
    keen::FloatRange inputRange; // Offset: 12
    keen::FloatRange outputRange; // Offset: 20
};

struct anim_graph.runtime_graph.FloatGreaterThanNodeDefinition {
    keen::HashKey32 lhs; // Offset: 8
    keen::HashKey32 rhs; // Offset: 12
    keen::bool orEqual; // Offset: 16
};

struct anim_graph.runtime_graph.FloatLessThanNodeDefinition {
    keen::HashKey32 lhs; // Offset: 8
    keen::HashKey32 rhs; // Offset: 12
    keen::bool orEqual; // Offset: 16
};

struct anim_graph.runtime_graph.FloatEqualsNodeDefinition {
    keen::HashKey32 lhs; // Offset: 8
    keen::HashKey32 rhs; // Offset: 12
    keen::float32 tolerance; // Offset: 16
};

struct anim_graph.runtime_graph.FloatGreaterThanConstantNodeDefinition {
    keen::HashKey32 input; // Offset: 8
    keen::float32 value; // Offset: 12
    keen::bool orEqual; // Offset: 16
};

struct anim_graph.runtime_graph.FloatLessThanConstantNodeDefinition {
    keen::HashKey32 input; // Offset: 8
    keen::float32 value; // Offset: 12
    keen::bool orEqual; // Offset: 16
};

struct anim_graph.runtime_graph.FloatEqualsConstantNodeDefinition {
    keen::HashKey32 input; // Offset: 8
    keen::float32 value; // Offset: 12
    keen::float32 tolerance; // Offset: 16
};

struct anim_graph.runtime_graph.SelectPoseByBoolNodeDefinition {
    keen::HashKey32 inputA; // Offset: 8
    keen::HashKey32 inputB; // Offset: 12
    keen::HashKey32 selectA; // Offset: 16
    keen::float32 blendTime; // Offset: 20
};

struct anim_graph.runtime_graph.IdParameterEqualsConstantNodeDefinition {
    keen::uint32 parameterIndex; // Offset: 8
    keen::HashKey32 value; // Offset: 12
    keen::bool ignoreForAnimationSequences; // Offset: 16
};

struct anim_graph.runtime_graph.IdEqualsNodeDefinition {
    keen::HashKey32 a; // Offset: 8
    keen::HashKey32 b; // Offset: 12
};

struct anim_graph.runtime_graph.IdEqualsConstantNodeDefinition {
    keen::HashKey32 a; // Offset: 8
    keen::HashKey32 comparatorValue; // Offset: 12
    keen::bool ignoreForAnimationSequences; // Offset: 16
};

struct anim_graph.runtime_graph.IntEqualsNodeDefinition {
    keen::HashKey32 a; // Offset: 8
    keen::HashKey32 b; // Offset: 12
};

struct anim_graph.runtime_graph.IntEqualsConstantNodeDefinition {
    keen::HashKey32 a; // Offset: 8
    keen::sint32 comparatorValue; // Offset: 12
};

struct anim_graph.runtime_graph.IsOverlayActiveNodeDefinition {
    keen::HashKey32 overlay; // Offset: 8
};

struct anim_graph.runtime_graph.ParameterList {
    keen::BlobArray<keen::HashKey32> parameterIds; // Offset: 0
};

struct anim_graph.runtime_graph.AnimationGraphResource2_0 {
    keen::anim_graph::runtime_graph::ParameterList floatParameters; // Offset: 0
    keen::anim_graph::runtime_graph::ParameterList uintParameters; // Offset: 8
    keen::anim_graph::runtime_graph::ParameterList intParameters; // Offset: 16
    keen::anim_graph::runtime_graph::ParameterList boolParameters; // Offset: 24
    keen::anim_graph::runtime_graph::ParameterList idParameters; // Offset: 32
    keen::anim_graph::runtime_graph::ParameterList usedInputIds; // Offset: 40
    keen::ObjectReference<keen::ModelHierarchyResource> hierarchy; // Offset: 48
    keen::StaticArray<keen::AnimationJointIndex,14> slotBoneIndexMapping; // Offset: 64
    keen::HashKey32 rootNode; // Offset: 92
    keen::BlobArray<keen::BlobVariant<keen::anim_graph::runtime_graph::AnimationNodeDefinition>> nodeDefinitions; // Offset: 96
    keen::ObjectReference<keen::RenderClothColliderResource> clothColliderReference; // Offset: 104
    keen::BlobArray<keen::anim_graph::GenderMappingEntry> genderMapping; // Offset: 120
};

struct anim_graph.GameUpdateMessage {
    keen::bool isPaused; // Offset: 0
};

struct anim_graph.DebugEntityChangedMessage {
    keen::uint32 selectedEntity; // Offset: 0
};

struct anim_graph.debug.DebugMessageBase {
    keen::Time timestamp; // Offset: 0
    keen::uint32 entityId; // Offset: 8
    keen::Guid rootGraphGuid; // Offset: 12
    keen::Guid templateId; // Offset: 28
};

struct anim_graph.debug.NodeStateUpdateMessage {
    keen::HashKey32 nodeId; // Offset: 48
    keen::bool isActive; // Offset: 52
    keen::bool isFrozen; // Offset: 53
    keen::float32 progress; // Offset: 56
    keen::float32 timeSpentInNode; // Offset: 60
    keen::HashKey32 fromState; // Offset: 64
    keen::HashKey32 toState; // Offset: 68
};

struct anim_graph.debug.InputIdMessage {
    keen::StaticArray<keen::HashKey32,8> floatInputIdHashes; // Offset: 48
    keen::StaticArray<keen::float32,8> floatInputIdValues; // Offset: 80
    keen::StaticArray<keen::HashKey32,8> intInputIdHashes; // Offset: 112
    keen::StaticArray<keen::sint32,8> intInputIdValues; // Offset: 144
    keen::StaticArray<keen::HashKey32,8> boolInputIdHashes; // Offset: 176
    keen::StaticArray<keen::bool,8> boolInputIdValues; // Offset: 208
    keen::StaticArray<keen::HashKey32,8> idInputIdHashes; // Offset: 216
    keen::StaticArray<keen::HashKey32,8> idInputIdValues; // Offset: 248
    keen::StaticArray<keen::HashKey32,8> overlayIdValues; // Offset: 280
};

struct Vector3 {
};

struct AnimationJoint {
    keen::Quaternion orientation; // Offset: 0
    keen::Vector3 position; // Offset: 16
    keen::Vector3 scale; // Offset: 32
};

struct anim_graph.debug.EntityJointMessage {
    keen::StaticArray<keen::AnimationJoint,256> animationJoints; // Offset: 48
    keen::uint8 numJoints; // Offset: 12336
};

struct anim_graph.debug.AnimationGraphInstanceInfoMessage {
    keen::uint32 retriggerCount; // Offset: 48
};

struct anim_graph.debug.StateMachineMessage {
    keen::uint32 stateMachineId; // Offset: 48
    keen::StaticArray<keen::uint32,8> fromState; // Offset: 52
    keen::StaticArray<keen::uint32,8> toState; // Offset: 84
    keen::StaticArray<keen::float32,8> duration; // Offset: 116
    keen::StaticArray<keen::float32,8> elapsed; // Offset: 148
    keen::StaticArray<keen::uint8,8> priority; // Offset: 180
    keen::StaticArray<keen::bool,8> frozen; // Offset: 188
};

typedef keen::ObjectReference<keen::anim_graph::runtime_graph::AnimationGraphResource2_0> AnimationGraphResourceReference;

struct JointAnimationHeader {
    keen::uint32 dataOffset; // Offset: 0
    keen::uint16 startTime; // Offset: 4
    keen::uint16 endTime; // Offset: 6
    keen::uint16 usedOrientationJoints; // Offset: 8
    keen::uint16 nonConstOrientationJoints; // Offset: 10
    keen::uint16 usedPositionJoints; // Offset: 12
    keen::uint16 nonConstPositionJoints; // Offset: 14
    keen::uint16 usedScaleJoints; // Offset: 16
    keen::uint16 nonConstScaleJoints; // Offset: 18
};

struct ContentHash {
    keen::uint32 size; // Offset: 0
    keen::uint32 hash0; // Offset: 4
    keen::uint32 hash1; // Offset: 8
    keen::uint32 hash2; // Offset: 12
};

enum class ContentCategory {
    None = 0,
    Cloth = 1,
    Texture = 2,
    Mesh = 3,
    Material = 4,
    Render = 5,
    ShaderCode = 6,
    Vfx = 7,
    Voxel = 8,
    Scene = 9,
    Font = 10,
    Sound = 11,
    UiTexture = 12,
    Loca = 13,
    Animation = 14,
};

struct JointAnimation {
    keen::uint64 hierarchyHash; // Offset: 0
    keen::float32 positionFactor; // Offset: 8
    keen::float32 positionTangent; // Offset: 12
    keen::float32 scaleFactor; // Offset: 16
    keen::BlobArray<keen::JointAnimationHeader> headers; // Offset: 20
    keen::ContentHash data; // Offset: 28
    keen::uint16 fps; // Offset: 44
    keen::uint16 frameCount; // Offset: 46
    keen::uint16 jointCount; // Offset: 48
    keen::uint16 flags; // Offset: 50
};

typedef keen::ObjectReference<keen::JointAnimation> JointAnimationReference;

struct float4 {
    keen::float32 x; // Offset: 0
    keen::float32 y; // Offset: 4
    keen::float32 z; // Offset: 8
    keen::float32 w; // Offset: 12
};

struct LveOrientationKey {
    keen::uint32 time; // Offset: 0
    keen::float4 values; // Offset: 4
    keen::float4 controls; // Offset: 20
};

struct LvePositionKey {
    keen::uint32 time; // Offset: 0
    keen::float3 values; // Offset: 4
    keen::float3 controls; // Offset: 16
};

typedef keen::uint32 crc32;

struct LveAnimation {
    keen::crc32 trackName; // Offset: 0
    keen::BlobArray<keen::LveOrientationKey> orientationKeys; // Offset: 4
    keen::BlobArray<keen::LvePositionKey> positionKeys; // Offset: 12
    keen::float3 startToEnd; // Offset: 20
    keen::uint16 fps; // Offset: 32
    keen::uint16 frameCount; // Offset: 34
    keen::uint16 flags; // Offset: 36
};

struct RootMotionAnimation {
    keen::BlobArray<keen::float4> orientations; // Offset: 0
    keen::BlobArray<keen::float3> positions; // Offset: 8
    keen::float3 startToEnd; // Offset: 16
    keen::uint16 fps; // Offset: 28
    keen::uint16 frameCount; // Offset: 30
};

typedef keen::string DsTypeName;

struct ColorRgb {
    keen::float32 red; // Offset: 0
    keen::float32 green; // Offset: 4
    keen::float32 blue; // Offset: 8
};

struct HdrColorRgb {
    keen::float32 red; // Offset: 0
    keen::float32 green; // Offset: 4
    keen::float32 blue; // Offset: 8
    keen::float32 intensity; // Offset: 12
};

enum class LanguageId {
    None = 0,
    En_Us = 1,
    En_Gb = 2,
    De_De = 3,
    Nl_Nl = 4,
    Fr_Fr = 5,
    It_It = 6,
    Es_Es = 7,
    Es_Mx = 8,
    Ru_Ru = 9,
    Pl_Pl = 10,
    Ja_Jp = 11,
    Id_Id = 12,
    Ko_Kr = 13,
    Ms_My = 14,
    Pt_Pt = 15,
    Pt_Br = 16,
    Th_Th = 17,
    Tr_Tr = 18,
    Vi_Vn = 19,
    Zh_Cn = 20,
    Zh_Tw = 21,
    Fr_Ca = 22,
    Es_419 = 23,
    Bg_Bg = 24,
    Cs_Cz = 25,
    Da_Dk = 26,
    Fi_Fi = 27,
    El_Gr = 28,
    Hu_Hu = 29,
    No_No = 30,
    Nb_No = 31,
    Ro_Ro = 32,
    Sv_Se = 33,
    Uk_Ua = 34,
    Count = 35,
};

enum class TextureType {
    Texture1D = 0,
    Texture2D = 1,
    Texture3D = 2,
    Cube = 3,
    Array1D = 4,
    Array2D = 5,
    ArrayCube = 6,
};

enum class PixelFormat {
    None = 0,
    R4G4_unorm_pack8 = 1,
    R4G4B4A4_unorm_pack16 = 2,
    B4G4R4A4_unorm_pack16 = 3,
    R5G6B5_unorm_pack16 = 4,
    B5G6R5_unorm_pack16 = 5,
    R5G5B5A1_unorm_pack16 = 6,
    B5G5R5A1_unorm_pack16 = 7,
    A1R5G5B5_unorm_pack16 = 8,
    R8_unorm = 9,
    R8_snorm = 10,
    R8_uscaled = 11,
    R8_sscaled = 12,
    R8_uint = 13,
    R8_sint = 14,
    R8_srgb = 15,
    R8G8_unorm = 16,
    R8G8_snorm = 17,
    R8G8_uscaled = 18,
    R8G8_sscaled = 19,
    R8G8_uint = 20,
    R8G8_sint = 21,
    R8G8_srgb = 22,
    R8G8B8_unorm = 23,
    R8G8B8_snorm = 24,
    R8G8B8_uscaled = 25,
    R8G8B8_sscaled = 26,
    R8G8B8_uint = 27,
    R8G8B8_sint = 28,
    R8G8B8_srgb = 29,
    B8G8R8_unorm = 30,
    B8G8R8_snorm = 31,
    B8G8R8_uscaled = 32,
    B8G8R8_sscaled = 33,
    B8G8R8_uint = 34,
    B8G8R8_sint = 35,
    B8G8R8_srgb = 36,
    R8G8B8A8_unorm = 37,
    R8G8B8A8_snorm = 38,
    R8G8B8A8_uscaled = 39,
    R8G8B8A8_sscaled = 40,
    R8G8B8A8_uint = 41,
    R8G8B8A8_sint = 42,
    R8G8B8A8_srgb = 43,
    B8G8R8A8_unorm = 44,
    B8G8R8A8_snorm = 45,
    B8G8R8A8_uscaled = 46,
    B8G8R8A8_sscaled = 47,
    B8G8R8A8_uint = 48,
    B8G8R8A8_sint = 49,
    B8G8R8A8_srgb = 50,
    A8B8G8R8_unorm_pack32 = 51,
    A8B8G8R8_snorm_pack32 = 52,
    A8B8G8R8_uscaled_pack32 = 53,
    A8B8G8R8_sscaled_pack32 = 54,
    A8B8G8R8_uint_pack32 = 55,
    A8B8G8R8_sint_pack32 = 56,
    A8B8G8R8_srgb_pack32 = 57,
    A2R10G10B10_unorm_pack32 = 58,
    A2R10G10B10_snorm_pack32 = 59,
    A2R10G10B10_uscaled_pack32 = 60,
    A2R10G10B10_sscaled_pack32 = 61,
    A2R10G10B10_uint_pack32 = 62,
    A2R10G10B10_sint_pack32 = 63,
    A2B10G10R10_unorm_pack32 = 64,
    A2B10G10R10_snorm_pack32 = 65,
    A2B10G10R10_uscaled_pack32 = 66,
    A2B10G10R10_sscaled_pack32 = 67,
    A2B10G10R10_uint_pack32 = 68,
    A2B10G10R10_sint_pack32 = 69,
    R16_unorm = 70,
    R16_snorm = 71,
    R16_uscaled = 72,
    R16_sscaled = 73,
    R16_uint = 74,
    R16_sint = 75,
    R16_sfloat = 76,
    R16G16_unorm = 77,
    R16G16_snorm = 78,
    R16G16_uscaled = 79,
    R16G16_sscaled = 80,
    R16G16_uint = 81,
    R16G16_sint = 82,
    R16G16_sfloat = 83,
    R16G16B16_unorm = 84,
    R16G16B16_snorm = 85,
    R16G16B16_uscaled = 86,
    R16G16B16_sscaled = 87,
    R16G16B16_uint = 88,
    R16G16B16_sint = 89,
    R16G16B16_sfloat = 90,
    R16G16B16A16_unorm = 91,
    R16G16B16A16_snorm = 92,
    R16G16B16A16_uscaled = 93,
    R16G16B16A16_sscaled = 94,
    R16G16B16A16_uint = 95,
    R16G16B16A16_sint = 96,
    R16G16B16A16_sfloat = 97,
    R32_uint = 98,
    R32_sint = 99,
    R32_sfloat = 100,
    R32G32_uint = 101,
    R32G32_sint = 102,
    R32G32_sfloat = 103,
    R32G32B32_uint = 104,
    R32G32B32_sint = 105,
    R32G32B32_sfloat = 106,
    R32G32B32A32_uint = 107,
    R32G32B32A32_sint = 108,
    R32G32B32A32_sfloat = 109,
    R64_uint = 110,
    R64_sint = 111,
    R64_sfloat = 112,
    R64G64_uint = 113,
    R64G64_sint = 114,
    R64G64_sfloat = 115,
    R64G64B64_uint = 116,
    R64G64B64_sint = 117,
    R64G64B64_sfloat = 118,
    R64G64B64A64_uint = 119,
    R64G64B64A64_sint = 120,
    R64G64B64A64_sfloat = 121,
    B10G11R11_ufloat_pack32 = 122,
    E5B9G9R9_ufloat_pack32 = 123,
    D16_unorm = 124,
    X8_D24_unorm_pack32 = 125,
    D32_sfloat = 126,
    S8_uint = 127,
    D16_unorm_S8_uint = 128,
    D24_unorm_S8_uint = 129,
    D32_sfloat_S8_uint = 130,
    BC1_RGB_unorm_block = 131,
    BC1_RGB_srgb_block = 132,
    BC1_RGBA_unorm_block = 133,
    BC1_RGBA_srgb_block = 134,
    BC2_unorm_block = 135,
    BC2_srgb_block = 136,
    BC3_unorm_block = 137,
    BC3_srgb_block = 138,
    BC4_unorm_block = 139,
    BC4_snorm_block = 140,
    BC5_unorm_block = 141,
    BC5_snorm_block = 142,
    BC6H_ufloat_block = 143,
    BC6H_sfloat_block = 144,
    BC7_unorm_block = 145,
    BC7_srgb_block = 146,
};

struct vf32_data {
    keen::StaticArray<keen::uint8,16> data; // Offset: 0
};

struct StaticHashMapEntry {
    keen::uint32 start; // Offset: 0
    keen::uint32 count; // Offset: 4
};

struct TimeRange {
    keen::Time start; // Offset: 0
    keen::Time end; // Offset: 8
};

typedef keen::uint32 fourcc;

struct HashKey64 {
    keen::uint64 value; // Offset: 0
};

struct DsTypeId {
    keen::uint32 value; // Offset: 0
};

struct ResourceId {
    keen::Guid guid; // Offset: 0
    keen::HashKey32 typeName; // Offset: 16
    keen::uint32 partIndex; // Offset: 20
    keen::uint32 reserved0; // Offset: 24
    keen::uint32 reserved1; // Offset: 28
};

struct PosixTimeStamp {
    keen::sint64 value; // Offset: 0
};

struct CalendarTimeStamp {
    keen::sint64 value; // Offset: 0
};

struct float3x3 {
    keen::float3 x; // Offset: 0
    keen::float3 y; // Offset: 12
    keen::float3 z; // Offset: 24
};

struct float3x4 {
    keen::float3 x; // Offset: 0
    keen::float3 y; // Offset: 12
    keen::float3 z; // Offset: 24
    keen::float3 w; // Offset: 36
};

struct float4x4 {
    keen::float4 x; // Offset: 0
    keen::float4 y; // Offset: 16
    keen::float4 z; // Offset: 32
    keen::float4 w; // Offset: 48
};

struct int2 {
    keen::sint32 x; // Offset: 0
    keen::sint32 y; // Offset: 4
};

struct int3 {
    keen::sint32 x; // Offset: 0
    keen::sint32 y; // Offset: 4
    keen::sint32 z; // Offset: 8
};

struct int4 {
    keen::sint32 x; // Offset: 0
    keen::sint32 y; // Offset: 4
    keen::sint32 z; // Offset: 8
    keen::sint32 w; // Offset: 12
};

struct uint2 {
    keen::uint32 x; // Offset: 0
    keen::uint32 y; // Offset: 4
};

struct uint3 {
    keen::uint32 x; // Offset: 0
    keen::uint32 y; // Offset: 4
    keen::uint32 z; // Offset: 8
};

struct uint4 {
    keen::uint32 x; // Offset: 0
    keen::uint32 y; // Offset: 4
    keen::uint32 z; // Offset: 8
    keen::uint32 w; // Offset: 12
};

struct uint24 {
    keen::uint8 lo; // Offset: 0
    keen::uint8 mi; // Offset: 1
    keen::uint8 hi; // Offset: 2
};

enum class ErrorId {
    Ok = 0,
    Temporary_TimeOut = 1,
    Temporary_OutOfMemory = 2,
    Temporary_StillRunning = 3,
    AlreadyExists = 4,
    BufferTooSmall = 5,
    Canceled = 6,
    CapacityExceeded = 7,
    CompressionError = 8,
    CorruptData = 9,
    DecompressionError = 10,
    EofReached = 11,
    FileNotFound = 12,
    DirectoryNotEmpty = 13,
    Generic = 14,
    IncompatibleData = 15,
    InitializationFailed = 16,
    Internal = 17,
    InvalidArgument = 18,
    InvalidCharacter = 19,
    InvalidPosition = 20,
    InvalidState = 21,
    InvalidValue = 22,
    KeyNotFound = 23,
    NoConnection = 24,
    ConnectionRefused = 25,
    NetworkDown = 26,
    NetworkUnreachable = 27,
    NoFactoryFound = 28,
    NoMatch = 29,
    NoPermission = 30,
    NotFound = 31,
    NotImplemented = 32,
    NotSupported = 33,
    NumberEncoding = 34,
    NumberOverflow = 35,
    NumberUnderflow = 36,
    OutOfFileHandles = 37,
    OutOfHandles = 38,
    OutOfMemory = 39,
    ParseError = 40,
    ReadError = 41,
    ResourceNotFound = 42,
    StringEncoding = 43,
    TypeMismatch = 44,
    WriteError = 45,
    WrongEndianness = 46,
    WrongVersion = 47,
    DiskFull = 48,
    BrokenPipe = 49,
    PathTooLong = 50,
    DeviceLost = 51,
    MemoryMapFailed = 52,
    AlreadyConnected = 53,
    ConnectionClosed = 54,
    NotSubscribedToApp = 55,
    SharingViolation = 56,
    OutOfDate = 57,
    InUse = 58,
    AlreadyInProgress = 59,
    UserNotSignedIn = 60,
    UserHasNoOnlineAccount = 61,
    KickedFromGame = 62,
    JoinFailed = 63,
    JoinFailedNotFound = 64,
    JoinFailedFull = 65,
    QueueEmpty = 66,
    QueueFull = 67,
    SecureConnectionFailed = 68,
    AddressInUse = 69,
    AddressNotAvailable = 70,
    OutOfRange = 71,
    HashCollision = 72,
    TooManyLinks = 73,
    UnknownHostName = 74,
    RequestTimeOut = 75,
    InvalidAlignment = 76,
    Count = 77,
};

enum class PlatformId {
    Invalid = 0,
    Ngc = 1,
    Wii = 2,
    WiiU = 3,
    Nds = 4,
    Ctr = 5,
    Ps2 = 6,
    Ps3 = 7,
    Ps4 = 8,
    Psp = 9,
    PsVita = 10,
    Xb360 = 11,
    Xb1 = 12,
    Win32_x86 = 13,
    Win32_x64 = 14,
    Linux_x86 = 15,
    Linux_x64 = 16,
    Osx_x86 = 17,
    Osx_x64 = 18,
    Ios_arm32 = 19,
    Ios_arm64 = 20,
    Android_arm32 = 21,
    Android_arm64 = 22,
    Uwp_x86 = 23,
    Uwp_x64 = 24,
    Uwp_arm32 = 25,
    Uwp_arm64 = 26,
    Nx = 27,
    Nx_Win32 = 28,
    Ps5 = 29,
    Count = 30,
};

enum class VertexColorChannel {
    Red = 0,
    Green = 1,
    Blue = 2,
    Alpha = 3,
};

struct ClothMaterial {
    keen::VertexColorChannel simulationWeightVertexColorChannel; // Offset: 0
    keen::bool useMass; // Offset: 1
    keen::float32 mass; // Offset: 4
    keen::bool usePerVertexStiffness; // Offset: 8
    keen::VertexColorChannel perVertexStiffnessVertexColorChannel; // Offset: 9
    keen::float32 gravity; // Offset: 12
    keen::float32 windStrength; // Offset: 16
    keen::float32 dragCoefficient; // Offset: 20
    keen::float32 liftCoefficient; // Offset: 24
    keen::float32 damping; // Offset: 28
    keen::float32 linearInertia; // Offset: 32
    keen::float32 angularInertia; // Offset: 36
    keen::float32 centrifugalInertia; // Offset: 40
    keen::float32 tetherStiffness; // Offset: 44
    keen::float32 phasesStiffness; // Offset: 48
    keen::float32 phasesCompressionLimit; // Offset: 52
    keen::float32 phasesStretchLimit; // Offset: 56
    keen::float32 motionConstraintsMaxRadius; // Offset: 60
    keen::float32 motionConstraintsUnlimitedRadius; // Offset: 64
    keen::float32 motionConstraintsStiffness; // Offset: 68
    keen::float32 solverFrequency; // Offset: 72
    keen::float32 collisionFriction; // Offset: 76
};

struct BvhTreeNodeData {
    keen::Vector3 boundingBoxMin; // Offset: 0
    keen::Vector3 boundingBoxMax; // Offset: 16
    keen::sint32 value; // Offset: 32
};

struct BvhTreeData {
    keen::Vector3 boundingBoxMin; // Offset: 0
    keen::Vector3 boundingBoxMax; // Offset: 16
    keen::BlobArray<keen::BvhTreeNodeData> nodes; // Offset: 32
};

enum class CollisionSegmentDirection {
    XPositive = 0,
    XNegative = 1,
    ZPositive = 2,
    ZNegative = 3,
};

struct NavEdge {
    keen::Vector3 start; // Offset: 0
    keen::Vector3 end; // Offset: 16
};

struct NavPortal {
    keen::StaticArray<keen::uint16,2> cellIndices; // Offset: 32
};

struct CollisionShapeId {
    keen::uint32 shapeId; // Offset: 0
    keen::uint32 segmentIndex; // Offset: 4
};

struct NavCell {
    keen::uint16 index; // Offset: 0
    keen::float32 minY; // Offset: 4
    keen::float32 maxY; // Offset: 8
    keen::BlobArray<keen::uint16> edgeIndices; // Offset: 12
    keen::BlobArray<keen::uint16> portalIndices; // Offset: 20
    keen::BlobArray<keen::CollisionShapeId> collisionShapeIds; // Offset: 28
    keen::uint16 extensionPortalIndex; // Offset: 36
    keen::Vector3 centroid; // Offset: 48
};

struct ColliderShape {
};

struct SphereColliderShape {
    keen::float32 radius; // Offset: 0
};

struct SpheroidColliderShape {
    keen::float32 horizontalRadius; // Offset: 0
    keen::float32 verticalRadius; // Offset: 4
};

struct CapsuleColliderShape {
    keen::float32 radius; // Offset: 0
    keen::float32 length; // Offset: 4
};

struct BoxColliderShape {
    keen::float3 halfSize; // Offset: 0
};

struct SegmentColliderShape {
    keen::float3 direction; // Offset: 0
    keen::float32 length; // Offset: 12
};

struct CollisionFace {
    keen::StaticArray<keen::uint16,3> vertices; // Offset: 0
    keen::StaticArray<keen::uint16,3> neighborFaces; // Offset: 6
    keen::uint8 neighborEdgeIndices; // Offset: 12
    keen::uint8 material; // Offset: 13
    keen::uint16 flags; // Offset: 14
};

struct CollisionObject {
    keen::uint32 id; // Offset: 0
    keen::uint32 segmentIndex; // Offset: 4
    keen::BlobArray<keen::Vector3> shapeVertices; // Offset: 8
    keen::BlobArray<keen::uint16> navCellIndices; // Offset: 16
    keen::float32 health; // Offset: 24
    keen::float32 y; // Offset: 28
};

struct CollisionGridCell {
    keen::uint16 start; // Offset: 0
    keen::uint16 count; // Offset: 2
};

struct CollisionGrid {
    keen::BlobArray<keen::CollisionGridCell> gridCells; // Offset: 0
    keen::BlobArray<keen::uint16> gridIndicies; // Offset: 8
    keen::BlobArray<keen::CollisionGridCell> collShapesPerGrid; // Offset: 16
    keen::BlobArray<keen::uint16> collShapesPerGridIndicies; // Offset: 24
    keen::uint16 cellsX; // Offset: 32
    keen::Vector2 origin; // Offset: 36
    keen::Vector2 cellSize; // Offset: 44
};

struct CollisionMeshData {
    keen::BlobArray<keen::Vector3> m_vertices; // Offset: 0
    keen::BlobArray<keen::CollisionFace> m_faces; // Offset: 8
    keen::CollisionGrid m_grid; // Offset: 16
    keen::BlobArray<keen::CollisionObject> m_objects; // Offset: 68
    keen::BlobArray<keen::NavCell> m_navCells; // Offset: 76
    keen::BlobArray<keen::NavEdge> m_navEdges; // Offset: 84
    keen::BlobArray<keen::NavPortal> m_navPortals; // Offset: 92
};

struct WorldCollisionBatch {
    keen::uint32 triangleIndex; // Offset: 0
    keen::uint32 triangleCount; // Offset: 4
};

struct WorldCollision {
    keen::BlobArray<keen::WorldCollisionBatch> triangleBatches; // Offset: 0
    keen::BlobArray<keen::float32> vertexPositions; // Offset: 8
    keen::BlobArray<keen::uint8> materialIds; // Offset: 16
    keen::BvhTreeData bvhTreeData; // Offset: 32
};

struct PaletteColor {
    keen::HdrColorRgb color; // Offset: 0
};

typedef keen::ObjectReference<keen::PaletteColor> PaletteColorReference;

struct ColorPalette {
};

struct ColorPaletteCollection {
};

typedef keen::HashKey32 PaletteColorId;

struct PaletteColorResource {
    keen::PaletteColorId paletteColorId; // Offset: 0
    keen::HdrColorRgb color; // Offset: 4
};

struct ColorPaletteCollectionResource {
    keen::BlobArray<keen::PaletteColorResource> colors; // Offset: 0
};

typedef keen::HashKey32 CommerceProductId;

struct CommerceProduct {
    keen::CommerceProductId id; // Offset: 0
    keen::uint32 platformIdSteam; // Offset: 4
};

typedef keen::ObjectReference<keen::CommerceProduct> CommerceProductReference;

struct CommerceProductSubDirectory {
};

struct CommerceProductDirectory {
};

struct CommerceProductResource {
    keen::BlobArray<keen::CommerceProduct> products; // Offset: 0
};

typedef keen::ObjectReference<keen::CommerceProductResource> CommerceResourceReference;

struct ecs.SpawnComponent {
};

struct ecs.LastTransform {
    keen::WorldTransform transform; // Offset: 0
    keen::float3 velocity; // Offset: 56
};

struct ecs.PlayerFocus {
    keen::WorldPosition position; // Offset: 0
};

struct ecs.StaticTransform {
};

struct ecs.StaticTransformDynamic {
};

struct ecs.DoNotSave {
};

struct ecs.ForceSave {
};

struct ecs.PlayerInRange {
};

struct ecs.CheckPlayerInRange {
    keen::uint8 distanceInMeter; // Offset: 0
};

struct ecs.ServerProgress {
};

struct ecs.StoredSceneId {
    keen::Guid sceneGuid; // Offset: 0
};

struct ecs.EnemyMarkerSettings {
    keen::ObjectReference<keen::ecs::EnemyMarkerTag> tag; // Offset: 0
};

struct ecs.TeleportCount {
    keen::uint8 counter; // Offset: 0
    keen::bool isWaitingForTeleport; // Offset: 1
};

struct ecs.RenderTeleportCount {
    keen::uint8 counter; // Offset: 0
    keen::bool wasTeleported; // Offset: 1
};

struct ecs.ScaleComponent {
    keen::float32 uniformScale; // Offset: 0
};

struct ecs.Velocity {
    keen::float3 velocity; // Offset: 0
};

enum class ecs.ImpulseType {
    S_Curve = 0,
    FadeOut = 1,
};

struct ecs.ImpulseData {
    keen::float3 impulse; // Offset: 0
    keen::ecs::ImpulseType type; // Offset: 12
    keen::Time startTime; // Offset: 16
    keen::Time endTime; // Offset: 24
};

struct ecs.Impulse {
    keen::float3 impulse; // Offset: 0
    keen::StaticArray<keen::ecs::ImpulseData,4> impulses; // Offset: 16
};

struct ecs.OscillateTransform {
    keen::float3 center; // Offset: 0
    keen::float3 amplitudeAxis; // Offset: 12
    keen::float32 duration; // Offset: 24
    keen::float32 phase; // Offset: 28
};

struct ecs.EntityId {
    keen::uint32 id; // Offset: 0
};

struct ecs.OwnerRelationship {
    keen::ecs::EntityId ownerEntityId; // Offset: 0
};

struct ecs.SpawnTime {
    keen::Time spawnTime; // Offset: 0
};

struct ecs.LifeTime {
    keen::Time lifeTime; // Offset: 0
    keen::Time endOfLife; // Offset: 8
    keen::bool enforceDestroy; // Offset: 16
    keen::bool triggeredDestroy; // Offset: 17
};

struct ecs.Aging {
    keen::float32 speed; // Offset: 0
};

struct ecs.TintColor {
    keen::Color color; // Offset: 0
};

struct ecs.ColorCombinationComponent {
    keen::StaticArray<keen::PaletteColorId,3> colorIds; // Offset: 0
};

enum class HighlightColorIndex {
    NoHighlight = 0,
    InvalidState = 1,
    ValidState = 2,
    MutedState = 3,
    Group1 = 4,
    Group2 = 5,
    Group3 = 6,
    Group4 = 7,
};

struct ecs.HighlightColor {
    keen::HighlightColorIndex colorIndex; // Offset: 0
};

struct ecs.Transparency {
    keen::float32 transparency; // Offset: 0
};

struct ecs.Ao {
    keen::uint8 value; // Offset: 0
};

struct ecs.Hide {
    keen::bool isHidden; // Offset: 0
    keen::bool isLocalyHidden; // Offset: 1
};

struct ecs.ModelComponent {
    keen::uint32 modelHandle; // Offset: 0
};

enum class ecs.ToggleModifierFlags {
    IgnoreToggle = 0,
    InvertToggle = 1,
    IgnoreToggleOn = 2,
    IgnoreToggleOff = 3,
};

typedef keen::Bitmask8<keen::ecs::ToggleModifierFlags> ecs.ToggleModifier;

struct ecs.ModelRenderHint {
    keen::bool canReceiveDecals; // Offset: 0
    keen::ecs::ToggleModifier toggleModifier; // Offset: 1
};

struct ecs.ModelDynamic {
    keen::ObjectReference<keen::Model> lastModel; // Offset: 0
};

struct ecs.ModelResource {
    keen::ObjectReference<keen::Model> model; // Offset: 0
};

struct ecs.ModelResourceDynamic {
    keen::ObjectReference<keen::Model> model; // Offset: 0
};

struct ecs.VoxelModel {
    keen::uint32 renderNode; // Offset: 0
};

struct ecs.VoxelModelVolatile {
    keen::uint32 pendingRenderNode; // Offset: 4
    keen::ObjectReference<keen::VoxelModelResource> lastModel; // Offset: 8
    keen::uint8 lastMaterialOverride; // Offset: 24
    keen::bool isVoxelModelChangePending; // Offset: 25
};

struct ecs.VoxelModelResourceComponent {
    keen::ObjectReference<keen::VoxelModelResource> model; // Offset: 0
    keen::uint8 materialOverride; // Offset: 16
};

struct ecs.SnowDisplacementComponent {
    keen::uint32 bodyHandle; // Offset: 0
    keen::float3 localOffset; // Offset: 4
    keen::float32 minRadius; // Offset: 16
    keen::float32 maxRadius; // Offset: 20
    keen::float32 heightNoiseScale; // Offset: 24
};

struct ecs.DungeonTriggerTypeComponent {
    keen::ObjectReference<keen::DungeonTriggerSetup> triggerSetup; // Offset: 0
};

struct ecs.AnimationGraphResourceComponent {
    keen::ObjectReference<keen::AnimationGraph> animationGraph; // Offset: 0
};

struct ecs.AnimationGraphResourceComponent2 {
    keen::ObjectReference<keen::anim_graph::tool_graph::AnimationGraph2_0> animationGraph; // Offset: 0
};

struct ecs.VfxComponentResource {
    keen::VfxReference vfx; // Offset: 0
};

struct ecs.VfxResourceDynamic {
    keen::VfxReference vfx; // Offset: 0
};

struct VfxUserEffectParameterDataBlock {
    keen::StaticArray<keen::uint32,16> data; // Offset: 0
};

struct ecs.VfxParametersTemplateComponent {
    keen::VfxUserEffectParameterDataBlock parameters; // Offset: 0
};

struct ecs.VfxParametersOverwriteComponent {
    keen::bool useVfxDefaultParameters; // Offset: 0
    keen::VfxUserEffectParameterDataBlock parameters; // Offset: 4
};

struct ecs.OverrideLevel {
    keen::uint32 newLevel; // Offset: 0
};

struct ecs.ToggleTimer {
    keen::Time timer; // Offset: 0
    keen::ecs::ToggleModifier toggleModifier; // Offset: 8
    keen::bool timerRunning; // Offset: 9
    keen::Time lastToggleChange; // Offset: 16
};

struct ecs.DestroyOnState {
    keen::bool wasInOppositeState; // Offset: 0
    keen::bool targetState; // Offset: 1
    keen::bool triggered; // Offset: 2
};

struct ecs.FxComponent {
    keen::uint32 fxHandle; // Offset: 0
    keen::ecs::ToggleModifier toggleModifier; // Offset: 4
};

struct ecs.VfxAnimationIdParameter {
};

struct ecs.Offset {
    keen::float3 localOffset; // Offset: 0
    keen::float3 worldOffset; // Offset: 12
    keen::Quaternion orientationOffset; // Offset: 24
};

struct ecs.VfxComponent {
    keen::ecs::Offset attachmentOffset; // Offset: 8
    keen::AttachmentSlot slot; // Offset: 48
    keen::bool attachToParent; // Offset: 49
};

enum class ecs.TargetType {
    Combat = 0,
    Teleport = 1,
    Interaction = 2,
    ItemInteraction = 3,
    Dismantle = 4,
    DismantleFallback = 5,
    Hook = 6,
    HookFallback = 7,
    HookAttached = 8,
    SpawnPoint = 9,
    Picking = 10,
    LastVisitedBase = 11,
    ViceralAttack = 12,
    HardLockCandidate = 13,
    GuardingEnemy = 14,
    NpcAssignment = 15,
    Count = 16,
};

struct ecs.VfxTargetedComponent {
    keen::ecs::TargetType targetType; // Offset: 52
    keen::float3 targetPosition; // Offset: 56
    keen::bool updateTargetPosition; // Offset: 68
};

struct ecs.TargetEntity {
    keen::ecs::EntityId targetId; // Offset: 0
};

struct ecs.TargetPosition {
    keen::float3 targetPosition; // Offset: 0
};

struct ecs.VfxTargetParameter {
    keen::AttachmentSlot targetSlot; // Offset: 0
    keen::ecs::Offset targetAttachmentOffset; // Offset: 4
    keen::bool attachToTarget; // Offset: 44
    keen::bool updateSourcePosition; // Offset: 45
};

struct ecs.VfxComponentVolatile {
    keen::VfxReference lastVfx; // Offset: 52
};

typedef keen::ObjectReference<keen::Notifier> NotifierReference;

struct ecs.VfxOnResourceDrop {
    keen::NotifierReference notifier; // Offset: 0
    keen::SoundContainerReference sfx; // Offset: 16
    keen::VfxReference vfx; // Offset: 32
};

struct ecs.ToggleDelay {
    keen::Time delay; // Offset: 0
};

struct ecs.ToggleState {
    keen::bool state; // Offset: 0
    keen::Time lastChange; // Offset: 8
};

struct ecs.ServerToggleState {
};

struct ecs.NetworkToggleState {
};

struct ecs.ClientToggleState {
};

struct ecs.ToggleNotifier {
    keen::Time lastEvent; // Offset: 0
    keen::ecs::ToggleModifier flags; // Offset: 8
    keen::NotifierReference notifier; // Offset: 12
    keen::Time duration; // Offset: 32
    keen::AttachmentSlot sourceSlot; // Offset: 40
    keen::ecs::Offset sourceAttachmentOffset; // Offset: 44
    keen::bool attachToSource; // Offset: 84
    keen::AttachmentSlot targetSlot; // Offset: 85
    keen::ecs::Offset targetAttachmentOffset; // Offset: 88
    keen::bool attachToTarget; // Offset: 128
    keen::SoundContainerReference sfx; // Offset: 132
    keen::VfxReference vfx; // Offset: 148
};

struct ecs.BaseAnimationGraphInput {
    keen::animationgraph::StateIdReference initialAnimationStateIdReference; // Offset: 0
    keen::AnimationGraphInputs animationInputs; // Offset: 16
    keen::animationgraph::RootMotionMask animationRootMotionMask; // Offset: 400
    keen::animationgraph::StateIdHash animationStateId; // Offset: 404
    keen::uint32 retriggerCount; // Offset: 408
};

struct ecs.ServerAnimationGraphInput {
    keen::AnimationGraphInputs previousAnimationInputs; // Offset: 416
    keen::uint8 overlayRingbufferIndex; // Offset: 800
};

struct ecs.NetworkAnimationGraphInput {
};

struct ecs.ClientAnimationGraphInputLerp {
    keen::AnimationGraphInputs source; // Offset: 0
    keen::AnimationGraphInputs target; // Offset: 384
    keen::uint32 tick; // Offset: 768
    keen::bool isSet; // Offset: 772
};

struct ecs.ClientAnimationGraphInput {
};

struct ecs.AnimationGraphHandleValue {
    keen::uint32 value; // Offset: 0
};

struct ecs.RenderPoseHandleValue {
    keen::uint32 value; // Offset: 0
};

struct ecs.AnimationGraphBaseComponent {
    keen::ecs::AnimationGraphHandleValue animationGraphHandle; // Offset: 0
    keen::ecs::RenderPoseHandleValue renderPoseHandle; // Offset: 4
};

struct ecs.AnimationGraphComponent {
    keen::ObjectReference<keen::RenderClothColliderResource> usedClothCollider; // Offset: 8
};

struct ecs.AnimationGraphSlotComponent {
    keen::bool slotsInitialized; // Offset: 0
    keen::StaticArray<keen::float3x4,14> slots; // Offset: 4
};

struct ecs.ServerAnimationGraphComponent {
};

struct ecs.ServerAnimationGraphSlotComponent {
};

struct ecs.AnimationGraphHandleValue2 {
    keen::uint32 value; // Offset: 0
};

struct ecs.AnimationGraphComponent2 {
    keen::ecs::AnimationGraphHandleValue2 animationGraphHandle; // Offset: 0
    keen::ecs::RenderPoseHandleValue renderPoseHandle; // Offset: 4
    keen::Guid clothCollider; // Offset: 8
};

struct ecs.ServerAnimationGraphComponent2 {
    keen::ecs::AnimationGraphHandleValue2 animationGraphHandle; // Offset: 0
};

struct ecs.CopyParentAnimationGraphState {
};

struct ecs.AnimatedCamera {
    keen::AttachmentSlot cameraSlot; // Offset: 0
};

struct ecs.RngState {
    keen::uint32 w; // Offset: 0
    keen::uint32 z; // Offset: 4
};

typedef keen::uint8 VoxelMaterialId;

struct ecs.WorldCollisionResults {
    keen::bool hasSpheroidCollision; // Offset: 0
    keen::float3 spheroidNormal; // Offset: 4
    keen::bool hasGroundCollision; // Offset: 16
    keen::bool isGroundWalkable; // Offset: 17
    keen::float3 groundNormal; // Offset: 20
    keen::float3 areaGroundNormal; // Offset: 32
    keen::float32 groundDistance; // Offset: 44
    keen::VoxelMaterialId groundVoxelMaterialId; // Offset: 48
    keen::bool preventFallDamage; // Offset: 49
};

struct ecs.OptionalWorldCollisionResults {
    keen::ecs::WorldCollisionResults m_value; // Offset: 0
    keen::bool m_isSet; // Offset: 52
};

struct ecs.WorldCollider {
    keen::float32 width; // Offset: 0
    keen::float32 height; // Offset: 4
    keen::float32 maxStepHeightVoxels; // Offset: 8
    keen::float32 maxStepHeightProps; // Offset: 12
    keen::bool onlyCheckPathCollidersWithBundleCheck; // Offset: 16
    keen::float32 yOffset; // Offset: 20
    keen::bool isWorldColliderReady; // Offset: 24
    keen::bool snapToGround; // Offset: 25
    keen::bool hasDetectedSafePositionBelow; // Offset: 26
    keen::ecs::OptionalWorldCollisionResults results; // Offset: 28
};

struct ecs.Gravity {
    keen::float3 direction; // Offset: 0
    keen::float32 value; // Offset: 12
    keen::bool isActive; // Offset: 16
};

struct ecs.StaticGravityModifier {
    keen::float32 modifier; // Offset: 0
};

struct ecs.Debug {
};

typedef keen::ObjectReference<keen::ecs::ColliderResponseResource> ecs.ColliderResponseResourceReference;

struct ecs.ColliderResponseComponent {
    keen::ecs::ColliderResponseResourceReference colliderResponse; // Offset: 0
};

enum class ecs.ColliderResponseFlag {
    OrientToNormal = 0,
    ApplyLocally = 1,
    AttachToSlot = 2,
};

typedef keen::Bitmask8<keen::ecs::ColliderResponseFlag> ecs.ColliderResponseFlags;

enum class ecs.CollisionType {
    Hit = 0,
    CriticalHit = 1,
    Block = 2,
    BrokenBlock = 3,
    Ineffective = 4,
    Immune = 5,
    PileUp = 6,
    Flattening = 7,
    Count = 8,
};

struct ecs.ColliderResponseResourceEntry {
    keen::SoundContainerReference sfx; // Offset: 0
    keen::VfxReference vfx; // Offset: 16
    keen::string sfxDescription; // Offset: 32
    keen::string vfxDescription; // Offset: 40
    keen::string description; // Offset: 48
    keen::float3 eulerOffset; // Offset: 56
    keen::float3 offset; // Offset: 68
    keen::ecs::CollisionType collisionType; // Offset: 80
    keen::AttachmentSlot slot; // Offset: 81
    keen::ecs::ColliderResponseFlags flags; // Offset: 82
};

struct ecs.ColliderResponseResource {
    keen::BlobArray<keen::ecs::ColliderResponseResourceEntry> responseEntries; // Offset: 0
    keen::Guid templateId; // Offset: 8
    keen::string templateDescription; // Offset: 24
};

struct ecs.ColliderResponse {
    keen::ecs::CollisionType collisionType; // Offset: 0
    keen::SoundContainerReference sfx; // Offset: 4
    keen::VfxReference vfx; // Offset: 20
    keen::float3 eulerOffset; // Offset: 36
    keen::float3 offset; // Offset: 48
    keen::bool applyLocally; // Offset: 60
    keen::bool orientToNormal; // Offset: 61
    keen::bool overrideSlot; // Offset: 62
    keen::AttachmentSlot slot; // Offset: 63
    keen::bool attach; // Offset: 64
};

struct ecs.ColliderResourceComponent {
    keen::BlobArray<keen::ecs::ColliderResourceData> colliders; // Offset: 0
};

typedef keen::ObjectReference<keen::CollisionFeedbackMaterial> CollisionFeedbackMaterialReference;

typedef keen::HashKey32 ItemId;

typedef keen::ObjectReference<keen::ItemInfo> ItemReference;

enum class PropDamageSusceptibility {
    None = 0,
    Wood = 1,
    Stone = 2,
    Metal = 3,
};

struct ecs.CollisionFeedbackMaterialComponent {
    keen::CollisionFeedbackMaterialReference material; // Offset: 0
    keen::ItemId itemId; // Offset: 16
    keen::ItemReference itemRef; // Offset: 20
    keen::PropDamageSusceptibility propDamageSusceptibility; // Offset: 36
};

struct ecs.ColliderId {
    keen::uint64 id; // Offset: 0
};

struct ecs.AbstractCollider {
    keen::ecs::ToggleModifier toggleModifier; // Offset: 0
    keen::ecs::ColliderId colliderId; // Offset: 8
};

struct ecs.StaticCollider {
};

struct ecs.StaticClientCollider {
};

enum class ecs.ColliderFlags {
    World = 0,
    Solid = 1,
    Fluid = 2,
    Walkable = 3,
    WalkablePlatform = 4,
    NoNpcMovement = 5,
    ClimbingWall = 6,
    Combat = 7,
    Force = 8,
    Steering = 9,
    HookShotTarget = 10,
    PlacementBlocker = 11,
    Interaction = 12,
    PathGridInteraction = 13,
    Sight = 14,
    BlockCameraLoS = 15,
    SoundOccluder = 16,
};

typedef keen::Bitmask32<keen::ecs::ColliderFlags> ecs.ColliderMask;

enum class ecs.ColliderMode {
    Default = 0,
    Sitting = 1,
    Lying = 2,
    Evading = 3,
    ClimbingWall = 4,
    Death = 5,
    Invisible = 6,
};

struct ecs.Collider {
    keen::bool isPathBlocker; // Offset: 16
    keen::ecs::ColliderMask disabledCollisions; // Offset: 20
    keen::ecs::ColliderMode activeColliderSetup; // Offset: 24
};

struct ecs.ClientCollider {
};

enum class ecs.PlayerSpawnType {
    StartLocation = 0,
    SavePoint = 1,
    Base = 2,
};

struct ecs.PlayerSpawnPoint {
    keen::ecs::PlayerSpawnType target; // Offset: 0
    keen::StaticArray<keen::ecs::Offset,5> landingPads; // Offset: 4
};

struct ecs.QueryId {
    keen::uint32 id; // Offset: 0
};

struct ecs.IsPlayerInSight {
    keen::bool isInSight; // Offset: 0
    keen::ecs::QueryId queryId; // Offset: 4
    keen::Time nextQueryUpdate; // Offset: 8
    keen::ecs::Offset sourceOffset; // Offset: 16
    keen::ecs::Offset targetOffset; // Offset: 56
};

typedef keen::uint8 ecs.LocalPlayerMask;

struct ecs.IsLocalPlayerInRange {
    keen::float32 rangeMargin; // Offset: 0
    keen::ecs::LocalPlayerMask arePlayersInRangeMask; // Offset: 4
};

enum class ecs.TriggerShapeType {
    Range = 0,
    Box = 1,
};

struct ecs.TriggerShape {
    keen::ecs::TriggerShapeType shape; // Offset: 0
    keen::float32 rangeX; // Offset: 4
    keen::float32 rangeY; // Offset: 8
    keen::float32 rangeZ; // Offset: 12
    keen::ecs::Offset offset; // Offset: 16
};

enum class FloorMaterialShape {
    None = 0,
    HalfRadiusClump = 1,
    HalfRadiusClumpPeekOut = 2,
};

struct ecs.FloorMaterial {
    keen::ObjectReference<keen::BaseVoxelMaterial> material; // Offset: 0
    keen::float32 radius; // Offset: 16
    keen::FloorMaterialShape shape; // Offset: 20
    keen::float32 noiseStrength; // Offset: 24
};

struct ecs.TriggerShapes {
    keen::BlobArray<keen::ecs::TriggerShape> shapes; // Offset: 0
};

struct ecs.FogResistanceState {
    keen::float32 accumulatedValue; // Offset: 0
};

struct ecs.AudioResourceComponent {
    keen::SoundContainerReference soundContainer; // Offset: 0
};

struct ecs.AudioComponent {
    keen::AttachmentSlot slot; // Offset: 8
    keen::ecs::Offset offset; // Offset: 12
    keen::bool stopOnDestroy; // Offset: 52
    keen::bool attach; // Offset: 53
    keen::bool attachToParent; // Offset: 54
};

struct ecs.AudioComponentVolatile {
    keen::SoundContainerReference lastSoundContainer; // Offset: 56
};

struct ecs.AmbientQueryId {
    keen::uint32 id; // Offset: 0
};

struct ecs.AmbientSystemQuery {
    keen::ecs::AmbientQueryId queryId; // Offset: 0
};

typedef keen::HashKey32 LocaTagId;

struct ecs.UiInteractable {
    keen::uint32 handle; // Offset: 0
    keen::LocaTagId verbId; // Offset: 4
    keen::float32 hintRange; // Offset: 8
};

struct ecs.QueryTest {
    keen::Time queryTime; // Offset: 0
    keen::ecs::QueryId queryId; // Offset: 8
};

struct ecs.DespawnLink {
    keen::ecs::EntityId parentEntityId; // Offset: 0
    keen::bool despawnOnDeath; // Offset: 4
};

struct ecs.Transform {
    keen::float3 position; // Offset: 0
    keen::Quaternion orientation; // Offset: 12
};

struct ecs.CurrentTransform {
    keen::WorldTransform transform; // Offset: 0
};

struct ecs.RenderTransform {
    keen::WorldTransform transform; // Offset: 0
    keen::WorldTransform interpolationSource; // Offset: 56
    keen::WorldTransform interpolationTarget; // Offset: 112
    keen::uint32 interpolationNewestTick; // Offset: 168
};

struct ecs.SetDataBreakPointMessage {
    keen::uint32 entityId; // Offset: 0
    keen::HashKey32 dynamicType; // Offset: 4
    keen::uint16 offset; // Offset: 8
    keen::uint8 size; // Offset: 10
    keen::bool write; // Offset: 11
};

struct ecs.ComponentMessageEntry {
    keen::BlobString name; // Offset: 0
    keen::HashKey32 dynamicType; // Offset: 8
    keen::HashKey32 templateType; // Offset: 12
    keen::uint8 affinity; // Offset: 16
    keen::uint8 queryAffinity; // Offset: 17
};

struct ecs.ComponentMessage {
    keen::BlobArray<keen::ecs::ComponentMessageEntry> components; // Offset: 0
};

struct ecs.EcsComponentsMask {
    keen::StaticArray<keen::uint64,9> mask; // Offset: 0
};

struct ecs.EcsSystemsMask {
    keen::uint64 mask; // Offset: 0
};

struct ecs.EcsEventsMask {
    keen::StaticArray<keen::uint64,2> mask; // Offset: 0
};

struct ecs.TemplateMessageEntry {
    keen::Guid guid; // Offset: 0
    keen::BlobString name; // Offset: 16
    keen::ecs::EcsComponentsMask componentsMask; // Offset: 24
};

struct ecs.TemplateMessage {
    keen::BlobArray<keen::ecs::TemplateMessageEntry> templates; // Offset: 0
};

struct ecs.EntityMessageEntry {
    keen::ecs::EntityId entityId; // Offset: 0
    keen::uint32 templateIndex; // Offset: 4
};

struct ecs.TotalEntityMessage {
    keen::BlobArray<keen::ecs::EntityMessageEntry> entities; // Offset: 0
};

struct ecs.ChangeEntityMessage {
    keen::BlobArray<keen::ecs::EntityMessageEntry> createdEntities; // Offset: 0
    keen::BlobArray<keen::ecs::EntityMessageEntry> destroyedEntities; // Offset: 8
};

struct ecs.TickMessage {
    keen::uint32 tick; // Offset: 0
    keen::uint32 entityCount; // Offset: 4
    keen::uint32 entitiesAdded; // Offset: 8
    keen::uint32 entitiesRemoved; // Offset: 12
    keen::uint32 eventCount; // Offset: 16
    keen::uint32 messageCount; // Offset: 20
};

struct ecs.ProgramInfoComponentDependencies {
    keen::ecs::EcsComponentsMask required; // Offset: 0
    keen::ecs::EcsComponentsMask optional; // Offset: 72
};

struct ecs.ProgramInfoDependencies {
    keen::ecs::ProgramInfoComponentDependencies components; // Offset: 0
    keen::ecs::ProgramInfoComponentDependencies templateComponents; // Offset: 144
    keen::ecs::EcsSystemsMask externalSystems; // Offset: 288
    keen::ecs::EcsComponentsMask entityComponents; // Offset: 296
    keen::ecs::EcsComponentsMask entityTemplates; // Offset: 368
    keen::ecs::EcsEventsMask events; // Offset: 440
    keen::bool isThreadSafe; // Offset: 456
};

struct ecs.ProgramInfoReadWriteDependency {
    keen::ecs::ProgramInfoDependencies read; // Offset: 0
    keen::ecs::ProgramInfoDependencies write; // Offset: 464
    keen::ecs::EcsComponentsMask forbiddenComponents; // Offset: 928
    keen::ecs::EcsComponentsMask requiredComponents; // Offset: 1000
};

struct ecs.ProgramId {
    keen::uint16 id; // Offset: 0
};

struct ecs.ProgramInfo {
    keen::ecs::ProgramId programId; // Offset: 0
    keen::BlobString programName; // Offset: 4
    keen::bool isPresentation; // Offset: 12
    keen::bool isDisabled; // Offset: 13
    keen::bool isSystem; // Offset: 14
    keen::bool isInit; // Offset: 15
    keen::bool noPrediction; // Offset: 16
    keen::bool isDeactivated; // Offset: 17
    keen::bool isDeactivatedPrediction; // Offset: 18
    keen::ecs::ProgramInfoReadWriteDependency dependencies; // Offset: 24
};

struct ecs.ProgramsMessage {
    keen::BlobArray<keen::ecs::ProgramInfo> programs; // Offset: 0
};

struct ecs.EventTypesMessageEntry {
    keen::string name; // Offset: 0
    keen::uint16 size; // Offset: 8
    keen::bool serverRead; // Offset: 10
    keen::bool serverWrite; // Offset: 11
    keen::bool clientRead; // Offset: 12
    keen::bool clientWrite; // Offset: 13
};

struct ecs.EventTypesMessage {
    keen::BlobArray<keen::ecs::EventTypesMessageEntry> events; // Offset: 0
};

struct ecs.ExternalSystemsMessageEntry {
    keen::string name; // Offset: 0
    keen::bool readThreadSafe; // Offset: 8
    keen::bool writeThreadSafe; // Offset: 9
    keen::bool serverRead; // Offset: 10
    keen::bool serverWrite; // Offset: 11
    keen::bool clientRead; // Offset: 12
    keen::bool clientWrite; // Offset: 13
};

struct ecs.ExternalSystemsMessage {
    keen::BlobArray<keen::ecs::ExternalSystemsMessageEntry> systems; // Offset: 0
};

struct ecs.TaskSlotsMessageProgram {
    keen::uint16 index; // Offset: 0
    keen::uint16 storageCount; // Offset: 2
    keen::uint16 chunkCount; // Offset: 4
    keen::uint32 entityCount; // Offset: 8
};

struct ecs.TaskSlotsMessageEntry {
    keen::ecs::EcsComponentsMask componentsRead; // Offset: 0
    keen::ecs::EcsComponentsMask componentsWrite; // Offset: 72
    keen::ecs::EcsSystemsMask systemsRead; // Offset: 144
    keen::ecs::EcsSystemsMask systemsWrite; // Offset: 152
    keen::ecs::EcsComponentsMask entitiesRead; // Offset: 160
    keen::ecs::EcsComponentsMask entitiesWrite; // Offset: 232
    keen::bool isThreadSafe; // Offset: 304
    keen::BlobArray<keen::ecs::TaskSlotsMessageProgram> programs; // Offset: 308
};

struct ecs.TaskSlotsMessage {
    keen::uint32 tick; // Offset: 0
    keen::BlobArray<keen::ecs::TaskSlotsMessageEntry> entries; // Offset: 4
};

struct ecs.SendTaskSlotsMessage {
    keen::uint8 dummy; // Offset: 0
};

struct ecs.StartEntityUpdateMessage {
    keen::ecs::EntityId entityId; // Offset: 0
};

struct ecs.StopEntityUpdateMessage {
    keen::ecs::EntityId entityId; // Offset: 0
};

struct ecs.EntityComponentEntry {
    keen::uint16 index; // Offset: 0
    keen::uint16 offset; // Offset: 2
    keen::uint16 size; // Offset: 4
};

struct ecs.EntityComponentMessage {
    keen::ecs::EntityId entityId; // Offset: 0
    keen::BlobArray<keen::ecs::EntityComponentEntry> components; // Offset: 4
    keen::BlobArray<keen::uint64> buffer; // Offset: 12
};

struct ecs.EntityTemplateMessage {
    keen::Guid templateGuid; // Offset: 0
    keen::BlobArray<keen::uint64> templateData; // Offset: 16
};

struct ecs.StartTimelineMessage {
    keen::BlobArray<keen::ecs::EntityId> entityIds; // Offset: 0
};

struct ecs.StopTimelineMessage {
    keen::uint8 dummy; // Offset: 0
};

enum class ecs.AdjustTick {
    None = 0,
    Reset = 1,
    Inc = 2,
    Dec = 3,
};

struct ecs.TimelineFrameMessage {
    keen::Time time; // Offset: 0
    keen::Time systemTime; // Offset: 8
    keen::Time lastSystemTime; // Offset: 16
    keen::uint32 tickCount; // Offset: 24
    keen::uint32 currentTick; // Offset: 28
    keen::uint32 lastTick; // Offset: 32
    keen::Time frameDuration; // Offset: 40
    keen::Time frameTime; // Offset: 48
    keen::Time nextTickTime; // Offset: 56
    keen::float32 tickInterpolationFactor; // Offset: 64
    keen::ecs::AdjustTick adjustTick; // Offset: 68
};

struct ecs.UpdateGameTimeMessage {
    keen::Time time; // Offset: 0
};

struct ecs.DebugQueryMessage {
    keen::ecs::QueryId queryId; // Offset: 0
};

struct ecs.EntityStateComponent {
    keen::uint16 index; // Offset: 0
    keen::uint16 size; // Offset: 2
    keen::uint16 offset0; // Offset: 4
    keen::uint16 offset1; // Offset: 6
};

struct ecs.TimelineEntityStateData {
    keen::ecs::EntityId entityId; // Offset: 0
    keen::WorldTransform transform; // Offset: 8
    keen::uint32 gridCellId; // Offset: 64
    keen::uint32 dirtyValue; // Offset: 68
    keen::uint32 dataTick; // Offset: 72
    keen::uint16 isCulled; // Offset: 76
    keen::uint16 isCulledPrediction; // Offset: 78
    keen::uint16 playerMask; // Offset: 80
};

struct ecs.TimelineEntityState {
    keen::ecs::TimelineEntityStateData entity0; // Offset: 0
    keen::ecs::TimelineEntityStateData entity1; // Offset: 88
    keen::BlobArray<keen::ecs::EntityStateComponent> components; // Offset: 176
    keen::BlobArray<keen::uint64> buffer; // Offset: 184
};

struct ecs.TimelineSystemCounts {
    keen::uint32 entities; // Offset: 0
    keen::uint32 sceneEntities; // Offset: 4
    keen::uint32 activeSceneChunks; // Offset: 8
};

struct ecs.TimelineCamera {
    keen::WorldTransform transform0; // Offset: 0
    keen::WorldTransform transform1; // Offset: 56
};

struct ecs.TimelineSystemUpdateMessage {
    keen::Time time0; // Offset: 0
    keen::Time time1; // Offset: 8
    keen::Time frameTime; // Offset: 16
    keen::Time frameDuration; // Offset: 24
    keen::uint32 tick; // Offset: 32
    keen::uint32 lastTick; // Offset: 36
    keen::float32 tickFactor; // Offset: 40
    keen::ecs::TimelineSystemCounts startCounts; // Offset: 44
    keen::ecs::TimelineSystemCounts endCounts; // Offset: 56
    keen::BlobArray<keen::ecs::EntityMessageEntry> createdEntities; // Offset: 68
    keen::BlobArray<keen::ecs::EntityMessageEntry> destroyedEntities; // Offset: 76
    keen::BlobArray<keen::ecs::TimelineEntityState> entities; // Offset: 84
    keen::ecs::TimelineCamera camera; // Offset: 96
};

struct ecs.TimelineReplicationPriorityEntry {
    keen::ecs::EntityId entityId; // Offset: 0
    keen::uint16 priority; // Offset: 4
};

struct ecs.TimelineReplicationPriorityMessage {
    keen::Time time; // Offset: 0
    keen::uint32 tick; // Offset: 8
    keen::uint8 playerIndex; // Offset: 12
    keen::BlobArray<keen::ecs::TimelineReplicationPriorityEntry> clientEntries; // Offset: 16
    keen::BlobArray<keen::ecs::TimelineReplicationPriorityEntry> predictionEntries; // Offset: 24
};

enum class ecs.TimelineEntitySkipReason {
    NothingChanged = 0,
    TooBig = 1,
};

struct ecs.TimelineEntitySkipMessage {
    keen::Time time; // Offset: 0
    keen::uint32 tick; // Offset: 8
    keen::uint8 playerIndex; // Offset: 12
    keen::bool prediction; // Offset: 13
    keen::ecs::EntityId entityId; // Offset: 16
    keen::ecs::TimelineEntitySkipReason reason; // Offset: 20
};

struct ecs.TimelineEntitySendMessage {
    keen::Time time; // Offset: 0
    keen::uint32 tick; // Offset: 8
    keen::uint8 playerIndex; // Offset: 12
    keen::bool prediction; // Offset: 13
    keen::bool create; // Offset: 14
    keen::ecs::EntityId entityId; // Offset: 16
    keen::BlobArray<keen::uint8> messageData; // Offset: 20
};

struct ecs.TimelineEntityRecvMessage {
    keen::Time time; // Offset: 0
    keen::uint32 tick; // Offset: 8
    keen::ecs::EntityId entityId; // Offset: 12
    keen::bool prediction; // Offset: 16
    keen::bool create; // Offset: 17
};

struct ecs.TimelineEntityProcessMessage {
    keen::Time time; // Offset: 0
    keen::uint32 tick; // Offset: 8
    keen::ecs::EntityId entityId; // Offset: 12
    keen::bool prediction; // Offset: 16
    keen::bool create; // Offset: 17
};

struct ecs.TimelineInputSendMessage {
    keen::Time time; // Offset: 0
    keen::uint32 tick; // Offset: 8
    keen::ecs::EntityId entityId; // Offset: 12
};

struct ecs.TimelineInputRecvMessage {
    keen::Time time; // Offset: 0
    keen::uint32 tick; // Offset: 8
    keen::ecs::EntityId entityId; // Offset: 12
};

struct ecs.TimelineReplicationComponent {
    keen::uint16 index; // Offset: 0
    keen::uint16 count; // Offset: 2
    keen::uint16 deltaSize; // Offset: 4
};

struct ecs.TimelineReplicationTemplate {
    keen::string name; // Offset: 0
    keen::uint32 checkedEntityCount; // Offset: 8
    keen::uint32 updatedEntityCount; // Offset: 12
    keen::BlobArray<keen::ecs::TimelineReplicationComponent> components; // Offset: 16
};

struct ecs.TimelineReplicationEvent {
    keen::string name; // Offset: 0
    keen::uint32 size; // Offset: 8
    keen::uint32 count; // Offset: 12
};

struct ecs.TimelineReplicationStatisticsData {
    keen::uint32 prioQueueSize; // Offset: 0
    keen::uint32 dirtyEntities; // Offset: 4
    keen::uint32 changedEntities; // Offset: 8
    keen::uint32 createdEntities; // Offset: 12
    keen::uint32 destroyedEntities; // Offset: 16
    keen::uint32 messageCount; // Offset: 20
    keen::uint32 messageSize; // Offset: 24
    keen::uint32 totalEventCount; // Offset: 28
    keen::uint32 totalEventSize; // Offset: 32
    keen::BlobArray<keen::ecs::TimelineReplicationTemplate> templates; // Offset: 36
    keen::BlobArray<keen::ecs::TimelineReplicationEvent> events; // Offset: 44
};

struct ecs.TimelineReplicationStatisticsMessage {
    keen::Time time; // Offset: 0
    keen::uint32 playerIndex; // Offset: 8
    keen::ecs::TimelineReplicationStatisticsData client; // Offset: 12
    keen::ecs::TimelineReplicationStatisticsData prediction; // Offset: 64
};

struct ecs.TimelinePredictionEntityState {
    keen::ecs::EntityId entityId; // Offset: 0
    keen::uint32 dataTick; // Offset: 4
    keen::bool isDirty; // Offset: 8
    keen::bool isDestroyed; // Offset: 9
    keen::BlobArray<keen::ecs::EntityComponentEntry> components; // Offset: 12
    keen::BlobArray<keen::uint64> buffer; // Offset: 20
};

struct ecs.TimelinePredictionUpdateMessage {
    keen::Time time; // Offset: 0
    keen::uint32 startTick; // Offset: 8
    keen::uint32 clientTick; // Offset: 12
    keen::uint32 lastTick; // Offset: 16
    keen::uint32 sourceTick; // Offset: 20
    keen::BlobArray<keen::ecs::TimelinePredictionEntityState> entities; // Offset: 24
};

struct ecs.TimelinePredictionTickMessage {
    keen::Time time0; // Offset: 0
    keen::Time time1; // Offset: 8
    keen::uint32 tick; // Offset: 16
    keen::BlobArray<keen::ecs::TimelinePredictionEntityState> entities; // Offset: 20
};

struct ecs.SceneCellEntity {
    keen::ecs::EntityId entityId; // Offset: 0
    keen::float3 position; // Offset: 4
    keen::uint16 templateIndex; // Offset: 16
    keen::uint16 clientCulledMask; // Offset: 18
    keen::uint16 predictionCulledMask; // Offset: 20
    keen::bool isUncullable; // Offset: 22
    keen::bool hasPosition; // Offset: 23
    keen::bool isDynamic; // Offset: 24
};

struct ecs.SceneCellMessage {
    keen::uint2 cellPosition; // Offset: 0
    keen::uint32 cellIndex; // Offset: 8
    keen::BlobArray<keen::ecs::SceneCellEntity> entities; // Offset: 12
    keen::uint32 sceneEntityCount; // Offset: 20
};

enum class ecs.SceneChunkState {
    Unloaded = 0,
    Load = 1,
    Loaded = 2,
    Unload = 3,
};

struct ecs.SceneChunkEntry {
    keen::ecs::SceneChunkState state; // Offset: 0
    keen::bool isActive; // Offset: 1
    keen::uint32 entityCount; // Offset: 4
    keen::uint32 destroyedEntityCount; // Offset: 8
    keen::Time unloadAge; // Offset: 16
};

struct ecs.SceneChunksMessage {
    keen::BlobArray<keen::ecs::SceneChunkEntry> chunks; // Offset: 0
};

struct ecs.SceneZoneBox {
    keen::float3 min; // Offset: 0
    keen::float3 max; // Offset: 12
};

struct ecs.SceneBuildZonesMessage {
    keen::BlobArray<keen::ecs::SceneZoneBox> allowedZones; // Offset: 0
    keen::BlobArray<keen::ecs::SceneZoneBox> forbiddenZones; // Offset: 8
    keen::BlobArray<keen::ecs::SceneZoneBox> activeZones; // Offset: 16
    keen::BlobArray<keen::ecs::SceneZoneBox> playableZones; // Offset: 24
};

struct ecs.SceneMessage {
    keen::Guid sceneGuid; // Offset: 0
    keen::uint2 sceneChunkSize; // Offset: 16
    keen::uint2 entityGridSize; // Offset: 24
    keen::float32 entityGridCellSize; // Offset: 32
};

enum class ecs.SceneControlMessageType {
    Start = 0,
    Stop = 1,
};

struct ecs.SceneControlMessage {
    keen::ecs::SceneControlMessageType type; // Offset: 0
};

struct ecs.SceneHotPointsMessage {
    keen::BlobArray<keen::float2> hotPoints; // Offset: 0
};

struct ecs.SceneHotPointsFile {
    keen::BlobArray<keen::float2> hotPoints; // Offset: 0
};

struct ecs.ScenePlayerCamera {
    keen::float3 position; // Offset: 0
    keen::float yRotation; // Offset: 12
};

struct ecs.ScenePlayerCamerasMessage {
    keen::StaticArray<keen::ecs::ScenePlayerCamera,16> cameras; // Offset: 0
};

struct ecs.SceneChunkResetMessage {
    keen::uint32 chunkIndex; // Offset: 0
};

enum class ecs.QueryFlag {
    OnlyPlayer = 0,
    NoPlayers = 1,
    SortByDistance = 2,
    CheckLineOfSight = 3,
    PreferHullIntersection = 4,
    KeepResults = 5,
    OnlyPathBlockers = 6,
    NoPathBlockers = 7,
    AbortAfterFirstMatch = 8,
    DrawDebug = 9,
};

typedef keen::Bitmask16<keen::ecs::QueryFlag> ecs.QueryFlags;

struct AxisAlignedBox {
    keen::Vector3 min; // Offset: 0
    keen::Vector3 max; // Offset: 16
};

struct ecs.SceneColliderQueryEntry {
    keen::ecs::QueryId queryId; // Offset: 0
    keen::ecs::EntityId entityId; // Offset: 4
    keen::ecs::ProgramId programId; // Offset: 8
    keen::uint32 templateIndex; // Offset: 12
    keen::ecs::QueryFlags flags; // Offset: 16
    keen::float3 position; // Offset: 20
    keen::AxisAlignedBox colliderAabb; // Offset: 32
    keen::string debugName; // Offset: 64
    keen::uint32 resultCount; // Offset: 72
    keen::bool checkWorldTriangles; // Offset: 76
};

struct ecs.RangeQueryId {
    keen::uint32 id; // Offset: 0
};

struct ecs.SceneRangeQueryEntry {
    keen::ecs::RangeQueryId queryId; // Offset: 0
    keen::ecs::EntityId entityId; // Offset: 4
    keen::ecs::ProgramId programId; // Offset: 8
    keen::uint32 templateIndex; // Offset: 12
    keen::uint16 componentId; // Offset: 16
    keen::AxisAlignedBox aabb; // Offset: 32
    keen::float32 range; // Offset: 64
    keen::string debugName; // Offset: 68
    keen::uint32 resultCount; // Offset: 76
};

struct ecs.SceneQueriesMessage {
    keen::uint32 triangleQueryCount; // Offset: 0
    keen::BlobArray<keen::ecs::SceneColliderQueryEntry> colliderQueries; // Offset: 4
    keen::BlobArray<keen::ecs::SceneRangeQueryEntry> rangeQueries; // Offset: 12
};

struct ecs.TimeControlMessage {
    keen::sint16 tickDelta; // Offset: 0
    keen::Time sleep; // Offset: 8
    keen::Time sleepOnce; // Offset: 16
};

struct ecs.DestroyEntityMessage {
    keen::ecs::EntityId entityId; // Offset: 0
};

typedef keen::ObjectReference<keen::ecs::Template> ecs.TemplateReference;

struct HolisticMapFilterTemplateEntry {
    keen::ecs::TemplateReference templateReference; // Offset: 0
    keen::bool showChildTemplates; // Offset: 16
};

enum class ecs.TestState {
    Destroyed = 0,
    Create = 1,
    Created = 2,
    Destroy = 3,
};

struct ecs.TestA {
    keen::Time time; // Offset: 0
    keen::uint32 state; // Offset: 8
    keen::ecs::TestState stateB; // Offset: 12
    keen::ecs::TestState stateC; // Offset: 13
    keen::ecs::TestState stateD; // Offset: 14
};

struct ecs.TestB {
    keen::uint32 value; // Offset: 0
};

struct ecs.TestC {
    keen::uint32 value; // Offset: 0
};

struct ecs.TestD {
    keen::uint32 value; // Offset: 0
};

struct ecs.TestTemplateA {
    keen::uint32 value; // Offset: 0
};

struct ecs.DynamicTestTemplateA {
    keen::uint32 defValue; // Offset: 0
    keen::uint32 value; // Offset: 4
};

struct ecs.TestTemplateB {
    keen::uint32 value; // Offset: 0
};

struct ecs.DynamicTestTemplateB {
    keen::uint32 value; // Offset: 0
};

struct ecs.DynamicTypeTestTemplate {
    keen::BlobArray<keen::uint32> values; // Offset: 0
};

struct ecs.TestBase {
    keen::BlobString name; // Offset: 0
};

struct ecs.DynamicTestBase {
    keen::uint32 value; // Offset: 0
    keen::uint32 notSave; // Offset: 4
    keen::ecs::EntityId mainEntity; // Offset: 8
    keen::Time start; // Offset: 16
    keen::Time duration; // Offset: 24
};

struct ecs.TestBaseEntry {
    keen::uint32 value; // Offset: 0
    keen::ecs::EntityId spouseId; // Offset: 4
    keen::ecs::QueryId queryId; // Offset: 8
};

struct ecs.TestBaseEntryServer {
    keen::uint32 value; // Offset: 0
};

struct ecs.TestBaseEntryTemplateClient {
    keen::uint32 value; // Offset: 0
};

struct ecs.TestBaseEntrySpawnClient {
    keen::uint32 value; // Offset: 0
};

struct ecs.TestBaseEntryAddClient {
    keen::uint32 value; // Offset: 0
};

struct ecs.Event {
};

struct ecs.TestEvent1 {
    keen::uint32 data; // Offset: 0
};

struct ecs.TestEvent2 {
    keen::uint32 data; // Offset: 0
};

struct ecs.TestEventCreate {
    keen::uint32 value; // Offset: 0
};

struct ecs.GridId {
    keen::uint64 id; // Offset: 0
};

struct ecs.PathQueryId {
    keen::uint32 id; // Offset: 0
};

enum class ecs.QueryResultFlag {
    Hit = 0,
    QueryNew = 1,
    UpdateNew = 2,
    OutOfSight = 3,
    User2 = 4,
    User3 = 5,
    User4 = 6,
    User5 = 7,
};

typedef keen::Bitmask8<keen::ecs::QueryResultFlag> ecs.QueryResultFlags;

enum class ecs.CollisionCheckFlag {
    PreferHullIntersection = 0,
    Moved = 1,
};

typedef keen::Bitmask8<keen::ecs::CollisionCheckFlag> ecs.CollisionCheckFlags;

struct ecs.Template {
    keen::bool predictEntity; // Offset: 0
    keen::bool farCulling; // Offset: 1
    keen::bool questEntity; // Offset: 2
};

struct ecs.TemplateResource {
    keen::string name; // Offset: 0
    keen::bool predictEntity; // Offset: 8
    keen::bool farCulling; // Offset: 9
    keen::BlobArray<keen::BlobVariant<keen::ecs::Component>> components; // Offset: 12
};

typedef keen::ObjectReference<keen::ecs::TemplateResource> ecs.TemplateResourceReference;

struct ecs.TemplateSubDirectory {
};

struct ecs.TemplateDirectory {
};

struct ecs.TemplateCollectionResource {
    keen::BlobArray<keen::ecs::TemplateResourceReference> templates; // Offset: 0
};

typedef keen::ObjectReference<keen::ecs::TemplateCollectionResource> ecs.TemplateCollectionReference;

struct ecs.ServerInfo {
    keen::Time minDuration; // Offset: 0
    keen::Time avgDuration; // Offset: 8
    keen::Time maxDuration; // Offset: 16
    keen::uint32 sceneEntityCount; // Offset: 24
    keen::uint32 dynamicEntityCount; // Offset: 28
    keen::uint32 sceneChunkCount; // Offset: 32
    keen::uint32 bandwidth; // Offset: 36
};

struct ecs.ColliderFlagData {
    keen::ecs::ColliderMask isA; // Offset: 0
    keen::ecs::ColliderMask checkAgainst; // Offset: 4
};

struct ecs.ColliderModeSetup {
    keen::bool defaultMode; // Offset: 0
    keen::bool sitting; // Offset: 1
    keen::bool lying; // Offset: 2
    keen::bool evading; // Offset: 3
    keen::bool climbingWall; // Offset: 4
    keen::bool death; // Offset: 5
    keen::bool invisible; // Offset: 6
};

struct ecs.ColliderData {
    keen::bool enabled; // Offset: 0
    keen::ecs::ColliderFlagData flags; // Offset: 4
    keen::float3 offset; // Offset: 12
    keen::Quaternion orientation; // Offset: 24
    keen::float32 stickyness; // Offset: 40
    keen::ecs::ColliderModeSetup colliderModeSetup; // Offset: 44
    keen::bool preventFallDamage; // Offset: 51
    keen::bool isSnappingBox; // Offset: 52
};

struct ecs.SphereColliderData {
    keen::SphereColliderShape shape; // Offset: 56
    keen::bool continuous; // Offset: 60
};

struct ecs.SpheroidColliderData {
    keen::SpheroidColliderShape shape; // Offset: 56
};

struct ecs.CapsuleColliderData {
    keen::CapsuleColliderShape shape; // Offset: 56
    keen::bool continuous; // Offset: 64
};

struct ecs.SegmentColliderData {
    keen::SegmentColliderShape shape; // Offset: 56
};

struct ecs.MovingSphereColliderData {
    keen::SphereColliderShape sphereShape; // Offset: 56
    keen::SegmentColliderShape segmentShape; // Offset: 60
};

struct ecs.BoxColliderData {
    keen::BoxColliderShape shape; // Offset: 56
    keen::bool continuous; // Offset: 68
};

struct ecs.LineSegment {
    keen::Vector3 p0; // Offset: 0
    keen::Vector3 p1; // Offset: 16
};

struct ecs.SegmentBundleColliderData {
    keen::StaticArray<keen::ecs::LineSegment,4> segments; // Offset: 64
};

typedef keen::BlobArray<keen::BlobVariant<keen::ecs::ColliderData>> ecs.ColliderDataArray;

enum class ecs.ColliderResolveFlag {
    Continuous = 0,
};

typedef keen::Bitmask8<keen::ecs::ColliderResolveFlag> ecs.ColliderResolveMask;

struct ecs.ColliderResourceData {
    keen::ecs::ColliderDataArray dataArray; // Offset: 0
    keen::ecs::ColliderFlagData combinedFlags; // Offset: 8
    keen::ecs::ColliderResolveMask resolveMask; // Offset: 16
};

struct ecs.CollisionEvent {
    keen::ecs::EntityId entityA; // Offset: 0
    keen::ecs::EntityId entityB; // Offset: 4
    keen::float3 position; // Offset: 8
    keen::float3 normal; // Offset: 20
    keen::float32 sqrDistance; // Offset: 32
    keen::float32 overlap; // Offset: 36
    keen::ecs::ColliderMask colliderFlagsA; // Offset: 40
    keen::ecs::ColliderMask colliderFlagsB; // Offset: 44
    keen::uint8 voxelMaterialId; // Offset: 48
};

enum class ecs.EntitySpawnValue {
    Velocity = 0,
    TintColor = 1,
    TriggerRange = 2,
    TriggerRange2 = 3,
    TriggerRange3 = 4,
    TriggerId_Unused = 5,
    ItemId = 6,
    EnemySettings = 7,
    RandomSpawnerSetting_AllowUpScaling = 8,
    RandomSpawnerSetting_AllowDownScaling = 9,
    RandomSpawnerSetting_MinSpawnerAmount = 10,
    EnemyTestFlags = 11,
    Level = 12,
    EnemyMarkerTag = 13,
    TeleporterId = 14,
    TeleportTargetId = 15,
    JumpParameters = 16,
};

typedef keen::Bitmask32<keen::ecs::EntitySpawnValue> ecs.EntitySpawnValueMask;

enum class ecs.EnemyFeature {
    UseTaunt = 0,
    UseThreatSystem = 1,
    UseBlocking = 2,
    Move = 3,
    Prowl = 4,
    Rotate = 5,
    RotateWhileStanding = 6,
    Patrol = 7,
    Roaming = 8,
    ShowSpawnSequence = 9,
    ReturnHome = 10,
    FleeHome = 11,
    Combat = 12,
    Interact = 13,
    TriggerAlarm = 14,
    CallForHelp = 15,
    Run = 16,
    IdleTurn = 17,
    BlockProjectiles = 18,
    SearchForCover = 19,
    MoveToMarker = 20,
    Sleep = 21,
    RunAround = 22,
    Circling = 23,
};

typedef keen::Bitmask32<keen::ecs::EnemyFeature> ecs.EnemyFeatureMask;

struct ecs.EnemyMarkerTag {
};

typedef keen::ObjectReference<keen::actor::ActorSequence> actor.ActorSequenceReference;

struct ecs.EnemySettings {
    keen::animationgraph::StateIdReference idleAnimation; // Offset: 0
    keen::ecs::EnemyFeatureMask enabledFeatures; // Offset: 16
    keen::ecs::EnemyFeatureMask disabledFeatures; // Offset: 20
    keen::float32 checkDistance; // Offset: 24
    keen::ObjectReference<keen::ecs::EnemyMarkerTag> requiredMarkerTag; // Offset: 28
    keen::actor::ActorSequenceReference spawnSequence; // Offset: 44
    keen::float32 maxTargetDistanceToHomeZone; // Offset: 60
};

enum class ecs.RandomSpawnerSetting {
    AllowUpScaling = 0,
    AllowDownScaling = 1,
    MinSpawnerAmount = 2,
};

typedef keen::Bitmask8<keen::ecs::RandomSpawnerSetting> ecs.RandomSpawnerSettingMask;

enum class ecs.RandomSpawnerAmount {
    Few = 0,
    Normal = 1,
    Many = 2,
    Extreme = 3,
};

struct ecs.RandomSpawnerSettings {
    keen::bool allowUpScaling; // Offset: 0
    keen::bool allowDownScaling; // Offset: 1
    keen::ecs::RandomSpawnerAmount minSpawnerAmount; // Offset: 2
    keen::ecs::RandomSpawnerSettingMask changedSettings; // Offset: 3
};

struct ecs.RandomSpawnerEntitySettings {
    keen::bool allowUpScaling; // Offset: 0
    keen::bool allowDownScaling; // Offset: 1
    keen::ecs::RandomSpawnerAmount minSpawnerAmount; // Offset: 2
};

struct ecs.EntitySpawnData {
    keen::float3 position; // Offset: 0
    keen::Quaternion orientation; // Offset: 12
    keen::ecs::EntityId parentEntityId; // Offset: 28
    keen::Time spawnTime; // Offset: 32
    keen::uint64 randomSeed; // Offset: 40
    keen::float3 velocity; // Offset: 48
    keen::Color tintColor; // Offset: 60
    keen::float32 triggerRange; // Offset: 64
    keen::float32 triggerRange2; // Offset: 68
    keen::float32 triggerRange3; // Offset: 72
    keen::HashKey32 itemId; // Offset: 76
    keen::ecs::EnemySettings enemySettings; // Offset: 80
    keen::ecs::RandomSpawnerEntitySettings randomSpawnerSettings; // Offset: 144
    keen::sint32 level; // Offset: 148
    keen::ecs::EntitySpawnValueMask mask; // Offset: 152
};

enum class ecs.PathGridType {
    Default = 0,
    Flying = 1,
};

enum class ecs.PathNodeType {
    None = 0,
    Tar = 1,
    Mud = 2,
    Road = 3,
    Fog = 4,
    DeadlyFog = 5,
    Lava = 6,
    Building = 7,
    Collider = 8,
    WalkablePlatform = 9,
    NoNpcMovementCollider = 10,
    NoNpcMovementTerrain = 11,
    NoNpcMovementBuilding = 12,
    NpcAvoid = 13,
    ClosedDoor = 14,
};

struct ecs.PathNodeCostFactors {
    keen::float32 none; // Offset: 0
    keen::float32 building; // Offset: 4
    keen::float32 collider; // Offset: 8
    keen::float32 walkablePlatform; // Offset: 12
    keen::float32 tar; // Offset: 16
    keen::float32 mud; // Offset: 20
    keen::float32 road; // Offset: 24
    keen::float32 fog; // Offset: 28
    keen::float32 deadlyFog; // Offset: 32
    keen::float32 lava; // Offset: 36
    keen::float32 noNpcMovement; // Offset: 40
    keen::float32 npcAvoid; // Offset: 44
    keen::float32 closedDoor; // Offset: 48
};

typedef keen::Bitmask16<keen::ecs::PathNodeType> ecs.PathNodeTypeMask;

struct ecs.PathGridMaterialSettings {
    keen::ecs::PathNodeType pathNodeType; // Offset: 0
};

typedef keen::StaticArray<keen::ecs::PathGridMaterialSettings,256> ecs.PathGridMaterialSettingsArray;

struct ecs.PathNodeRequirements {
    keen::ecs::PathNodeTypeMask requiredTypes; // Offset: 0
    keen::ecs::PathNodeTypeMask forbiddenTypes; // Offset: 2
};

enum class ecs.PathQueryTargetType {
    Default = 0,
    PreferClosestTargetNode = 1,
    UseClosestTargetNodeAsFallback = 2,
};

enum class ecs.PathMoveType {
    Move = 0,
    JumpUp = 1,
    JumpDown = 2,
    OpenDoor = 3,
};

typedef keen::Bitmask8<keen::ecs::PathMoveType> ecs.PathMoveTypeMask;

enum class ecs.PathQueryCheck {
    None = 0,
    EnsureFreePath = 1,
    EnsureOccupiedPath = 2,
};

struct ecs.PathGridDistance {
    keen::uint32 halfMeters; // Offset: 0
};

enum class ecs.PathGridInteractionType {
    None = 0,
    OpenedDoor = 1,
    ClosedDoor = 2,
    MovingObject = 3,
};

struct ecs.PathfindingHeightDifferenceSettings {
    keen::float terrain; // Offset: 0
    keen::float building; // Offset: 4
    keen::float collider; // Offset: 8
};

struct ecs.PathfindingSettings {
    keen::ecs::PathfindingHeightDifferenceSettings maxHeightDifferenceSettings; // Offset: 0
};

enum class ecs.LerpTransformTarget {
    ClimbingTransformStart = 0,
    ClimbingTransformIntermediate = 1,
    ClimbingTransformEnd = 2,
};

struct ecs.AlignedBox {
    keen::float3 min; // Offset: 0
    keen::float3 max; // Offset: 12
};

enum class enemy01.CombatState {
    None = 0,
    Move = 1,
    Attack = 2,
    AttackExecution = 3,
    Block = 4,
    Prowl = 5,
    TurnBeforeTaunt = 6,
    Taunt = 7,
    TurnBeforeCallForHelp = 8,
    CallForHelp = 9,
    Turn = 10,
    TriggerAlarm = 11,
    CustomBehavior = 12,
    TargetNotReachable = 13,
    TargetOutsideLeash = 14,
    ContinuousMovement = 15,
    SearchForCover = 16,
    RunAround = 17,
};

typedef keen::Bitmask32<keen::enemy01::CombatState> enemy01.CombatStateMask;

enum class enemy01.State {
    Invalid = 0,
    Start = 1,
    Idle = 2,
    Dead = 3,
    Spawning = 4,
    Combat = 5,
    ReturnHome = 6,
    FleeHome = 7,
    WaitAtHome = 8,
    ReactToNoise = 9,
    Patrol = 10,
    TurnAfterPatrol = 11,
    WaitAfterPatrol = 12,
    ControlledByAttack = 13,
    Roaming = 14,
    Flee = 15,
    WaitAfterFlee = 16,
    Falling = 17,
    Hit = 18,
    Guard = 19,
    Interact = 20,
    Landing = 21,
    BlockProjectile = 22,
    MoveToMarker = 23,
    Sleep = 24,
    Circling = 25,
};

enum class enemy01.EnemyClass {
    Melee = 0,
    Ranger = 1,
    Mage = 2,
};

typedef keen::Bitmask32<keen::enemy01::State> enemy01.StateMask;

enum class enemy01.StateUpdateType {
    OnEnter = 0,
    OnExecute = 1,
    OnExit = 2,
};

enum class enemy01.StateCondition {
    Death = 0,
    TargetSelected = 1,
    TargetLost = 2,
    IsFinished = 3,
    TargetUnreachable = 4,
    NoiseHeard = 5,
    ProjectileHeard = 6,
    IsReadyToPatrol = 7,
    IsReadyToInteract = 8,
    IsReadyToTriggerAlarm = 9,
    IsControlledByAttack = 10,
    IsReadyForRoaming = 11,
    IsReadyForCircling = 12,
    WantsToFlee = 13,
    HasBeenHit = 14,
    IsFalling = 15,
    HitReaction = 16,
    NeedsToGuard = 17,
    WantsToLand = 18,
    NeedsToTurn = 19,
    CanMoveToMarker = 20,
    WantsToSleep = 21,
};

struct enemy01.EnemyVariable {
};

typedef keen::ObjectReference<keen::enemy01::EnemyVariable> enemy01.EnemyVariableReference;

struct enemy01.AbilityConstrain {
    keen::bool negated; // Offset: 0
};

struct enemy01.DistanceConstrain {
    keen::float32 min; // Offset: 4
    keen::float32 max; // Offset: 8
};

struct enemy01.VerticalDistanceConstraint {
    keen::float32 minDistance; // Offset: 4
    keen::float32 maxDistance; // Offset: 8
};

struct enemy01.HorizontalDistanceConstraint {
    keen::float32 minDistance; // Offset: 4
    keen::float32 maxDistance; // Offset: 8
};

struct enemy01.ClearPathConstrain {
    keen::bool checkSolidColliders; // Offset: 1
    keen::bool checkSteeringColliders; // Offset: 2
};

struct enemy01.CooldownConstrain {
    keen::Time duration; // Offset: 8
};

struct enemy01.StateConstrain {
    keen::enemy01::StateMask states; // Offset: 4
};

struct enemy01.CombatStateConstrain {
    keen::enemy01::CombatStateMask combatStates; // Offset: 4
};

struct enemy01.StateDurationConstrain {
    keen::Time duration; // Offset: 8
};

struct enemy01.CurrentCombatStateDurationConstrain {
    keen::Time duration; // Offset: 8
};

struct enemy01.IsRetaliateAllowedConstrain {
    keen::bool isAllowed; // Offset: 1
};

struct enemy01.IsTargetOfMyTargetConstrain {
    keen::bool isTargetOfMyTarget; // Offset: 1
};

struct enemy01.LastHitReceivedConstrain {
    keen::Time minDuration; // Offset: 8
    keen::Time maxDuration; // Offset: 16
};

struct enemy01.ThreatConstrain {
    keen::float32 minThreat; // Offset: 4
};

struct enemy01.AngleToTargetConstrain {
    keen::float32 minAngle; // Offset: 4
    keen::float32 maxAngle; // Offset: 8
};

struct enemy01.AngleFromSlotToTargetConstraint {
    keen::AttachmentSlot slot; // Offset: 1
    keen::float32 minAngle; // Offset: 4
    keen::float32 maxAngle; // Offset: 8
};

struct enemy01.IsInAttackRangeConstrain {
};

struct enemy01.IsInPhaseConstrain {
    keen::ObjectReference<keen::EnemyPhase> phase; // Offset: 4
    keen::Time minDuration; // Offset: 24
};

struct enemy01.IsLastPhaseConstraint {
    keen::ObjectReference<keen::EnemyPhase> phase; // Offset: 4
};

enum class ecs.HitEventFlags {
    WasBlocked = 0,
    WasParried = 1,
    WasBlockBroken = 2,
    WasCrit = 3,
    WasVisceral = 4,
    WasBackstab = 5,
    WasWeakspot = 6,
    WasSkillShot = 7,
    WasResistance = 8,
    WasImmune = 9,
    WasIneffective = 10,
    HideIneffective = 11,
    HideEffective = 12,
    WasKillingBlow = 13,
    WasHealing = 14,
    WasTerrain = 15,
    WasBuilding = 16,
    WasPileUp = 17,
    WasFlattening = 18,
    UseHitDirectionForPushBack = 19,
};

typedef keen::Bitmask32<keen::ecs::HitEventFlags> ecs.HitEventFlagMask;

struct enemy01.HasBeenHitInCurrentPhaseConstrain {
    keen::ecs::HitEventFlagMask requiredHitEventFlags; // Offset: 4
};

enum class actor.StateFlag {
    Grounded = 0,
    Jumping = 1,
    Blocking = 2,
    Dodging = 3,
    ParryOportunity = 4,
    BlockOpportunity = 5,
    Exhausted = 6,
    Dead = 7,
    Sheltered = 8,
    Sitting = 9,
    PlayingInstrument = 10,
    Sleeping = 11,
    Spawning = 12,
    InFog = 13,
    Warm = 14,
    Wet = 15,
    Cold = 16,
    Freezing = 17,
    InSneakMode = 18,
    Unhappy = 19,
    HasAggro = 20,
    InCombat = 21,
    InRangeCombat = 22,
    InRangeCombatPreparing = 23,
    InRangeCombatShooting = 24,
    InRangeCombatKeepTarget = 25,
    InSnappingLerp = 26,
    Cooking = 27,
    Falling = 28,
    Climbing = 29,
    ClimbingTransition = 30,
    Attached = 31,
    HangGliding = 32,
    AttachedToHook = 33,
    Flying = 34,
    TurnSequence = 35,
    CanPayUsageCosts = 36,
    Invisible = 37,
    EnemyPrepareAttack = 38,
    IsAnythingAbove = 39,
    IsReadyForGameplay = 40,
    IsActionOpportunityTriggered = 41,
    WantsToMove = 42,
    HandsFree = 43,
    IsWorking = 44,
    Petting = 45,
};

typedef keen::Bitmask64<keen::actor::StateFlag> actor.StateMask;

struct enemy01.CombatTargetStateFlagsConstrain {
    keen::actor::StateMask flags; // Offset: 8
};

struct enemy01.IsAttackSelectedConstrain {
    keen::actor::ActorSequenceReference attackSequence; // Offset: 4
};

struct enemy01.IsAnyAttackSelectedConstraint {
};

struct enemy01.EnemyHealthPercentageConstrain {
    keen::float32 minPercentage; // Offset: 4
    keen::float32 maxPercentage; // Offset: 8
};

struct enemy01.CurrentTargetHealthPercentageConstrain {
    keen::float32 minPercentage; // Offset: 4
    keen::float32 maxPercentage; // Offset: 8
};

struct enemy01.IsPlayerTargetConstrain {
    keen::bool isPlayer; // Offset: 1
};

struct enemy01.TargetActorStatesConstrain {
    keen::actor::StateMask requiredStates; // Offset: 8
    keen::actor::StateMask excludedStates; // Offset: 16
};

struct enemy01.ActorStatesConstrain {
    keen::actor::StateMask requiredStates; // Offset: 8
    keen::actor::StateMask excludedStates; // Offset: 16
};

struct enemy01.HasCombatTargetConstrain {
};

struct enemy01.NeedsToFlee {
};

struct enemy01.RandomChanceConstrain {
    keen::float32 chance; // Offset: 4
};

struct enemy01.IsGroupLeaderConstrain {
};

struct enemy01.IsGroupMemberConstrain {
};

struct enemy01.IsGuardingPlayerConstraint {
};

struct enemy01.IsTargetInHomeZoneConstraint {
};

struct enemy01.TargetDistanceToHomeZoneConstraint {
    keen::float32 minDistance; // Offset: 4
    keen::float32 maxDistance; // Offset: 8
};

struct enemy01.IsTargetReachableConstraint {
};

struct enemy01.IsVariableSetConstraint {
    keen::enemy01::EnemyVariableReference variable; // Offset: 4
};

struct enemy01.Ability {
    keen::actor::ActorSequenceReference actionSequence; // Offset: 0
};

struct enemy01.AbilitySelectionContrains {
};

struct enemy01.AbilityExecutionContrains {
};

struct enemy01.AbilityAbortConstraints {
};

typedef keen::BlobArray<keen::BlobVariant<keen::enemy01::AbilityConstrain>> enemy01.AbilityConstrains;

enum class enemy01.AttackStyle {
    Normal = 0,
    Retaliate = 1,
    Special = 2,
    Initiate = 3,
    InitiateFollowUp = 4,
    Teleport = 5,
    Dash = 6,
    Jump = 7,
    IgnoreThreat = 8,
};

typedef keen::Bitmask16<keen::enemy01::AttackStyle> enemy01.AttackStyleMask;

enum class enemy01.AttackFlag {
    StartAnimationDirectly = 0,
    AbortOnWallCollision = 1,
    NeedsTurn = 2,
    NoPauseAfterAttack = 3,
    ContinueMovement = 4,
    EnsureFreePath = 5,
    CheckDynamicPathBlockers = 6,
    DisableLeaning = 7,
    EnforceLeaning = 8,
    DisableRotation = 9,
};

typedef keen::Bitmask16<keen::enemy01::AttackFlag> enemy01.AttackFlagMask;

enum class enemy01.CombatTargetChangeMode {
    KeepCurrentCombatTarget = 0,
    SelectRandomCombatTarget = 1,
    SelectClosestCombatTarget = 2,
    SelectFurthestCombatTarget = 3,
};

enum class enemy01.BlockRotationDuration {
    None = 0,
    Short = 1,
    Medium = 2,
    Long = 3,
};

struct enemy01.Action {
};

typedef keen::BlobVariant<keen::enemy01::Action> enemy01.ActionVariant;

typedef keen::BlobArray<keen::enemy01::ActionVariant> enemy01.ActionVariants;

struct enemy01.AttackActions {
};

struct enemy01.AttackConstraints {
};

enum class enemy01.AttackCommandMode {
    RunInParallel = 0,
    PauseDefaultExecution = 1,
};

struct enemy01.AttackCommandData {
    keen::enemy01::AttackCommandMode mode; // Offset: 0
};

struct enemy01.AttackCommandDescription {
};

struct enemy01.AttackCommand {
    keen::enemy01::AbilityConstrains constraints; // Offset: 4
    keen::enemy01::ActionVariants actions; // Offset: 12
};

typedef keen::BlobArray<keen::enemy01::AttackCommand> enemy01.AttackCommandArray;

struct enemy01.AttackCommandContainerDescription {
};

struct enemy01.AttackData {
};

struct enemy01.JumpAttackData {
    keen::float32 distanceFactor; // Offset: 0
    keen::float32 minForce; // Offset: 4
    keen::float32 maxForce; // Offset: 8
    keen::float32 height; // Offset: 12
    keen::float32 forwardMomentum; // Offset: 16
};

struct enemy01.DashAttackData {
    keen::float32 overshootDistance; // Offset: 0
    keen::float32 lookAheadLength; // Offset: 4
    keen::float32 collisionAvoidanceLength; // Offset: 8
    keen::float32 collisionOffset; // Offset: 12
    keen::float32 decelerateDistance; // Offset: 16
    keen::float32 decelerateEnforceDistance; // Offset: 20
};

struct enemy01.TeleportAttackData {
    keen::float32 minDistance; // Offset: 0
    keen::float32 maxDistance; // Offset: 4
    keen::uint32 verticalSearchDistance; // Offset: 8
    keen::bool checkLineOfSight; // Offset: 12
    keen::ecs::PathNodeRequirements targetNodeRequirements; // Offset: 14
    keen::float32 minHorizontalSpace; // Offset: 20
    keen::float32 minVerticalSpace; // Offset: 24
};

typedef keen::BlobVariant<keen::enemy01::AttackData> enemy01.AttackDataVariant;

struct enemy01.AttackDataDescription {
};

struct enemy01.AttackDesscription {
    keen::enemy01::AttackStyleMask attackStyle; // Offset: 16
    keen::float32 selectionChance; // Offset: 20
    keen::enemy01::AttackFlagMask flags; // Offset: 24
    keen::float32 threat; // Offset: 28
    keen::float32 minRange; // Offset: 32
    keen::float32 maxRange; // Offset: 36
    keen::float32 maxVerticalRange; // Offset: 40
    keen::ObjectReference<keen::enemy01::AttackCooldownGroupId> cooldownGroupID; // Offset: 44
    keen::float32 speed; // Offset: 60
    keen::float32 acceleration; // Offset: 64
    keen::actor::ActorSequenceReference executionAttackSequence; // Offset: 68
    keen::enemy01::BlockRotationDuration blockRotationDuration; // Offset: 84
    keen::enemy01::CombatTargetChangeMode combatTargetChangeMode; // Offset: 85
};

struct enemy01.AttackDesscriptionResource {
    keen::enemy01::AttackDesscription description; // Offset: 0
    keen::enemy01::AbilityConstrains selectionConstrain; // Offset: 88
    keen::enemy01::AbilityConstrains executionConstrain; // Offset: 96
    keen::enemy01::AbilityConstrains abortConstraints; // Offset: 104
    keen::enemy01::AttackCommandArray commands; // Offset: 112
    keen::enemy01::AttackDataVariant data; // Offset: 120
};

enum class enemy01.BehaviorMode {
    OnUpdate = 0,
    OnEnter = 1,
    OnExit = 2,
    OnStartAttack = 3,
    OnEndAttack = 4,
    OnEnterState = 5,
    OnExitState = 6,
};

struct enemy01.BehaviorExecutionContrains {
};

struct enemy01.BehaviorAbortConstraints {
};

struct enemy01.BehaviorActions {
};

struct enemy01.BehaviorSettings {
    keen::Time checkIntervalMin; // Offset: 0
    keen::Time checkIntervalMax; // Offset: 8
    keen::Time cooldownMin; // Offset: 16
    keen::Time cooldownMax; // Offset: 24
    keen::float32 chance; // Offset: 32
};

struct enemy01.BehaviorDesscription {
    keen::enemy01::BehaviorMode mode; // Offset: 0
    keen::enemy01::BehaviorSettings settings; // Offset: 8
};

struct enemy01.BehaviorDesscriptionResource {
    keen::enemy01::AbilityConstrains executionConstrain; // Offset: 48
    keen::enemy01::AbilityConstrains abortConstraints; // Offset: 56
    keen::enemy01::ActionVariants actions; // Offset: 64
};

typedef keen::ObjectReference<keen::enemy01::BehaviorDesscription> enemy01.BehaviorDescriptionReference;

struct enemy01.BehaviorReferenceDescription {
    keen::enemy01::BehaviorDescriptionReference behavior; // Offset: 0
};

struct enemy01.AttackCooldownGroupId {
};

struct enemy01.AttackCooldownGroup {
    keen::ObjectReference<keen::enemy01::AttackCooldownGroupId> id; // Offset: 0
    keen::Time cooldown; // Offset: 16
};

struct enemy01.BlockRotationSettings {
    keen::Time shortBlockRotationDuration; // Offset: 0
    keen::Time mediumBlockRotationDuration; // Offset: 8
    keen::Time longBlockRotationDuration; // Offset: 16
};

struct enemy01.CombatTurnConditions {
    keen::float32 minSpeed; // Offset: 0
    keen::Time minWalkDuration; // Offset: 8
};

struct enemy01.LeaningSettings {
    keen::enemy01::CombatStateMask combatStates; // Offset: 0
    keen::AttachmentSlot slot; // Offset: 4
};

struct enemy01.CombatJumpMoveSettings {
    keen::bool useJumpMoveIfTargetIsNotReachable; // Offset: 0
    keen::Time minJumpMoveDuration; // Offset: 8
    keen::Time maxJumpMoveDuration; // Offset: 16
    keen::uint8 maxJumpUpHeight; // Offset: 24
    keen::uint8 maxJumpDownHeight; // Offset: 25
};

struct enemy01.AttackMoveSettings {
    keen::bool alwaysLookAtCombatTarget; // Offset: 0
};

struct enemy01.SleepDaytimeSetting {
    keen::float chance; // Offset: 0
    keen::Time minSleepDuration; // Offset: 8
    keen::Time maxSleepDuration; // Offset: 16
};

struct enemy01.SleepSetup {
    keen::enemy01::SleepDaytimeSetting daySettings; // Offset: 0
    keen::enemy01::SleepDaytimeSetting nightSettings; // Offset: 24
    keen::Time minInitialCheckDelay; // Offset: 48
    keen::Time maxInitialCheckDelay; // Offset: 56
    keen::Time minCheckInterval; // Offset: 64
    keen::Time maxCheckInterval; // Offset: 72
    keen::animationgraph::StateIdReference sleepAnimation; // Offset: 80
};

struct enemy01.CombatSetup {
    keen::float32 preferedDistance; // Offset: 0
    keen::float32 preferedDistanceVariation; // Offset: 4
    keen::float32 preferedDistanceEngaged; // Offset: 8
    keen::float32 preferedDistanceEngagedVariation; // Offset: 12
    keen::float32 maxVerticalDistance; // Offset: 16
    keen::float32 maxPlayerTargetDistance; // Offset: 20
    keen::float32 maxNonPlayerTargetDistance; // Offset: 24
    keen::uint8 retaliateCount; // Offset: 28
    keen::BlobArray<keen::enemy01::AttackCooldownGroup> cooldownGroups; // Offset: 32
    keen::float32 walkStartDistance; // Offset: 40
    keen::float32 runStartDistance; // Offset: 44
    keen::float32 runEndDistance; // Offset: 48
    keen::float32 combatRotationSpeedFactor; // Offset: 52
    keen::animationgraph::StateIdReference combatIdleAnimation; // Offset: 56
    keen::enemy01::BlockRotationSettings blockRotationSettings; // Offset: 72
    keen::Time minAttackDuration; // Offset: 96
    keen::Time maxAttackDuration; // Offset: 104
    keen::enemy01::CombatTurnConditions turnConditions; // Offset: 112
    keen::enemy01::LeaningSettings leaningSettings; // Offset: 128
    keen::enemy01::CombatJumpMoveSettings jumpMoveSettings; // Offset: 136
    keen::enemy01::AttackMoveSettings attackMoveSettings; // Offset: 168
};

struct enemy01.BlockingSetup {
    keen::actor::ActorSequenceReference blockSequence; // Offset: 0
    keen::Time minBlockDuration; // Offset: 16
    keen::Time maxBlockDuration; // Offset: 24
    keen::Time maxTotalBlockDuration; // Offset: 32
    keen::Time minBlockHitExtendDuration; // Offset: 40
    keen::Time maxBlockHitExtendDuration; // Offset: 48
    keen::float32 blockAfterHitChance; // Offset: 56
    keen::bool activateBlockAtStart; // Offset: 60
    keen::bool autoToggleBlock; // Offset: 61
    keen::float32 autoToggleBlockMaxDistance; // Offset: 64
    keen::bool useBlockWalk; // Offset: 68
    keen::animationgraph::StateIdReference blockWalkAnimation; // Offset: 72
    keen::float32 minBlockProjectileDistance; // Offset: 88
    keen::float32 maxBlockProjectileDistance; // Offset: 92
};

struct enemy01.HomeZoneSetup {
    keen::float32 radius; // Offset: 0
};

struct enemy01.AggroPoolSetup {
    keen::float32 maxValue; // Offset: 0
};

struct enemy01.AggroPools {
    keen::enemy01::AggroPoolSetup senses; // Offset: 0
    keen::enemy01::AggroPoolSetup friends; // Offset: 4
    keen::enemy01::AggroPoolSetup enemies; // Offset: 8
};

struct enemy01.AggroSetup {
    keen::float32 viewRange; // Offset: 0
    keen::float32 nightViewRangeFactor; // Offset: 4
    keen::float32 viewConeHalfAngle; // Offset: 8
    keen::float32 aggroFromAttack; // Offset: 12
    keen::float32 aggroInRange; // Offset: 16
    keen::float32 aggroLossOutOfSight; // Offset: 20
    keen::float32 aggroLossUnreachable; // Offset: 24
    keen::float32 aggroDiminishSpeed; // Offset: 28
    keen::float32 noticedAggro; // Offset: 32
    keen::float32 initialAggro; // Offset: 36
    keen::float32 alarmedAggroThreshold; // Offset: 40
    keen::float32 aggroRange; // Offset: 44
    keen::float32 aggroRangeWhileMoving; // Offset: 48
    keen::bool checkPathToTarget; // Offset: 52
    keen::bool checkLineOfSight; // Offset: 53
    keen::enemy01::AggroPools pools; // Offset: 56
    keen::bool preferCloserTargets; // Offset: 68
    keen::float32 preferCloserTargetsDistanceThreshold; // Offset: 72
    keen::bool preferShortestPath; // Offset: 76
    keen::float32 preferShortestPathDistanceThreshold; // Offset: 80
    keen::bool preferTargetsWithLessAttackers; // Offset: 84
};

struct enemy01.CallForHelpSetup {
    keen::float32 chance; // Offset: 0
    keen::float32 minRange; // Offset: 4
    keen::float32 radius; // Offset: 8
};

struct enemy01.RoamingSetup {
    keen::Time minInitialStartDuration; // Offset: 0
    keen::Time maxInitialStartDuration; // Offset: 8
    keen::Time minStartDuration; // Offset: 16
    keen::Time maxStartDuration; // Offset: 24
    keen::float32 minRadius; // Offset: 32
    keen::float32 maxRadius; // Offset: 36
    keen::float32 maxAngle; // Offset: 40
    keen::float32 maxHomeZoneDistance; // Offset: 44
    keen::bool loop; // Offset: 48
    keen::float32 minLoopUpdateDistance; // Offset: 52
    keen::ecs::PathNodeRequirements targetNodeRequirements; // Offset: 56
};

struct enemy01.FleeSetup {
    keen::float32 minFleeRadius; // Offset: 0
    keen::float32 maxFleeRadius; // Offset: 4
    keen::animationgraph::StateIdReference fleeAnimation; // Offset: 8
    keen::Time maxFleeDuration; // Offset: 24
};

struct enemy01.NoiseListenerSetup {
    keen::actor::ActorSequenceReference reactToNoiseSequence; // Offset: 0
    keen::float32 listenRangeFactor; // Offset: 16
    keen::float32 listenRangeFactorWhileSleeping; // Offset: 20
};

struct enemy01.SteeringSetup {
    keen::float32 defaultSteeringWeight; // Offset: 0
    keen::float32 roamingSteeringWeight; // Offset: 4
    keen::float32 closeCombatSteeringWeight; // Offset: 8
    keen::float32 farCombatSteeringWeight; // Offset: 12
};

struct enemy01.ProwlSetup {
    keen::float32 minProwlDistance; // Offset: 0
    keen::float32 maxProwlDistance; // Offset: 4
    keen::float32 maxHeightDifference; // Offset: 8
    keen::Time minProwlDuration; // Offset: 16
    keen::Time maxProwlDuration; // Offset: 24
    keen::Time minProwlCooldown; // Offset: 32
    keen::Time maxProwlCooldown; // Offset: 40
    keen::bool checkClearPath; // Offset: 48
};

struct enemy01.ParrySetup {
    keen::actor::ActorSequenceReference parriedSequence; // Offset: 0
    keen::actor::ActorSequenceReference parriedStunSequence; // Offset: 16
    keen::actor::ActorSequenceReference parriedStunLongDurationSequence; // Offset: 32
    keen::float32 addedThreatAfterParry; // Offset: 48
};

enum class ecs.LocomotionSpeedSelector {
    Zero = 0,
    Sneak = 1,
    Walk = 2,
    Run = 3,
    Sprint = 4,
    Combat = 5,
    Patrol = 6,
    Flee = 7,
    Custom = 8,
};

struct enemy01.MovementSetup {
    keen::float32 maxMovementAngleDefault; // Offset: 0
    keen::float32 maxMovementAngleProwl; // Offset: 4
    keen::float32 maxMovementAngleCombat; // Offset: 8
    keen::float32 maxMovementAngleCombatWithoutRoation; // Offset: 12
    keen::float32 maxMovementAngleRoaming; // Offset: 16
    keen::ecs::LocomotionSpeedSelector returnHomeSpeed; // Offset: 20
};

struct enemy01.GuardSetup {
    keen::float32 startDistance; // Offset: 0
    keen::float32 targetDistance; // Offset: 4
    keen::bool guardParent; // Offset: 8
    keen::bool canGuardPlayer; // Offset: 9
};

struct enemy01.PatrolSetup {
    keen::Time initialStartTimeMin; // Offset: 0
    keen::Time initialStartTimeMax; // Offset: 8
    keen::Time patrolStartMin; // Offset: 16
    keen::Time patrolStartMax; // Offset: 24
    keen::Time patrolPauseMin; // Offset: 32
    keen::Time patrolPauseMax; // Offset: 40
    keen::float startTurnDistamce; // Offset: 48
    keen::animationgraph::StateIdReference patrolAnimation; // Offset: 52
};

struct enemy01.InteractionSetup {
    keen::Time interactionPauseMin; // Offset: 0
    keen::Time interactionPauseMax; // Offset: 8
};

struct enemy01.TauntSetup {
    keen::actor::ActorSequenceReference tauntSequence; // Offset: 0
    keen::float32 tauntChance; // Offset: 16
    keen::Time cooldown; // Offset: 24
};

struct actor.TurnSetup {
    keen::actor::ActorSequenceReference turnLeftSmallSequence; // Offset: 0
    keen::actor::ActorSequenceReference turnLeftBigSequence; // Offset: 16
    keen::actor::ActorSequenceReference turnRightSmallSequence; // Offset: 32
    keen::actor::ActorSequenceReference turnRightBigSequence; // Offset: 48
    keen::float32 minSmallTurnAngle; // Offset: 64
    keen::float32 minBigTurnAngle; // Offset: 68
};

struct enemy01.TurnSetup {
    keen::float32 minIdleTurnAngle; // Offset: 72
    keen::Time minIdleTurnCooldown; // Offset: 80
    keen::Time maxIdleTurnCooldown; // Offset: 88
    keen::float32 minDistance; // Offset: 96
    keen::AttachmentSlot slot; // Offset: 100
};

struct enemy01.SearchForCoverSetup {
    keen::uint8 minCoverDistance; // Offset: 0
    keen::uint8 maxCoverDistance; // Offset: 1
    keen::Time minCoverDuration; // Offset: 8
    keen::Time maxCoverDuration; // Offset: 16
    keen::Time minCoverCooldown; // Offset: 24
    keen::Time maxCoverCooldown; // Offset: 32
};

struct enemy01.RunAroundSetup {
    keen::Time minDuration; // Offset: 0
    keen::Time maxDuration; // Offset: 8
    keen::float32 minRadius; // Offset: 16
    keen::float32 maxRadius; // Offset: 20
};

struct enemy01.PathNodeSetup {
    keen::ecs::PathNodeCostFactors defaultCostFactors; // Offset: 0
    keen::ecs::PathNodeCostFactors roamingCostFactors; // Offset: 52
};

enum class enemy01.CirclingDirection {
    Left = 0,
    Right = 1,
};

struct enemy01.CirclingSetup {
    keen::float initialRadius; // Offset: 0
    keen::float initialHeightOffset; // Offset: 4
    keen::bool useOuterCircleAsCombatPosition; // Offset: 8
    keen::enemy01::CirclingDirection initialDirection; // Offset: 9
    keen::bool changeDirection; // Offset: 10
    keen::Time minDirectionChangeDuration; // Offset: 16
    keen::Time maxDirectionChangeDuration; // Offset: 24
};

typedef keen::ObjectReference<keen::enemy01::CombatSetup> enemy01.CombatSetupReference;

enum class enemy01.LookAtMovementTargetState {
    None = 0,
    LookAtCombatTarget = 1,
    LookAtMovementTarget = 2,
};

enum class enemy01.UnreachableJumpMoveState {
    Inactive = 0,
    Active = 1,
    Finished = 2,
};

struct enemy01.EnemyVariableStateEntry {
    keen::enemy01::EnemyVariableReference variable; // Offset: 0
    keen::bool state; // Offset: 16
};

struct enemy01.EnemyVariableStates {
    keen::StaticArray<keen::enemy01::EnemyVariableStateEntry,4> states; // Offset: 0
};

enum class impact.HitReactionType {
    None = 0,
    Light = 1,
    Heavy = 2,
    Boss = 3,
    LongStun = 4,
    TrapStun = 5,
    ShortStun_BeGoneSkill = 6,
    ThrowIntoAir = 7,
    ThrowIntoAir_OnlyWhenGrounded = 8,
};

struct enemy01.CombatData {
    keen::uint8 selectedAttackIndex; // Offset: 0
    keen::uint8 lastAttackIndex; // Offset: 1
    keen::float3 toTarget; // Offset: 4
    keen::float2 horizontalKeepDistanceDirection; // Offset: 16
    keen::HashKey32 threatPoolId; // Offset: 24
    keen::Time lastChangeEvaluation; // Offset: 32
    keen::Time stateChangeTime; // Offset: 40
    keen::Time stateMinTime; // Offset: 48
    keen::Time stateMaxTime; // Offset: 56
    keen::Time lastAttackTime; // Offset: 64
    keen::Time lastHitReceived; // Offset: 72
    keen::impact::HitReactionType lastHitReactionType; // Offset: 80
    keen::ecs::HitEventFlagMask lastHitEventFlags; // Offset: 84
    keen::Time targetEnteredPrivateSpace; // Offset: 88
    keen::Time prowlAngleChange; // Offset: 96
    keen::float32 selectedPreferedDistance; // Offset: 104
    keen::float32 preferedDistanceMin; // Offset: 108
    keen::float32 preferedDistanceMax; // Offset: 112
    keen::float32 prowlAngle; // Offset: 116
    keen::float32 distanceToTarget; // Offset: 120
    keen::enemy01::CombatState state; // Offset: 124
    keen::bool targetOfMyTarget; // Offset: 125
    keen::uint8 hitsReceivedWhileBlocking; // Offset: 126
    keen::Time lastBlockChanceEvaluationTime; // Offset: 128
    keen::bool shouldBlockLastHit; // Offset: 136
    keen::StaticArray<keen::uint8,16> attackExecutionCount; // Offset: 137
    keen::StaticArray<keen::Time,8> nextAllowedAttackGroupTime; // Offset: 160
    keen::float3 closestReachableTargetPosition; // Offset: 224
    keen::Time nextReachablePositionUpdateTime; // Offset: 240
    keen::bool isTargetReachable; // Offset: 248
    keen::bool isTargetInsideLeash; // Offset: 249
    keen::ecs::EntityId lastTargetId; // Offset: 252
    keen::uint8 commandIndex; // Offset: 256
    keen::uint8 actionIndex; // Offset: 257
    keen::Time lastActionStartTime; // Offset: 264
    keen::Time lastAttackAbortCheckTime; // Offset: 272
    keen::Time nextAllowedProwlTime; // Offset: 280
    keen::Time nextAllowedSearchForCoverTime; // Offset: 288
    keen::Time nextSearchForCoverChangeDistanceTime; // Offset: 296
    keen::uint8 currentSearchForCoverDistance; // Offset: 304
    keen::enemy01::LookAtMovementTargetState lookAtMovementTargetState; // Offset: 305
    keen::Time unreachableJumpMoveStartTime; // Offset: 312
    keen::Time unreachableJumpMoveEndTime; // Offset: 320
    keen::enemy01::UnreachableJumpMoveState unreachableJumpMoveState; // Offset: 328
};

enum class enemy01.CirclingState {
    MoveIntoRange = 0,
    MoveToTargetAngle = 1,
    MoveContinuously = 2,
};

typedef keen::float32 Angle;

struct enemy01.CirclingData {
    keen::enemy01::CirclingState state; // Offset: 0
    keen::Angle targetAngle; // Offset: 4
    keen::WorldPosition centerPosition; // Offset: 8
    keen::float radius; // Offset: 32
    keen::enemy01::CirclingDirection direction; // Offset: 36
    keen::Time nextDirectionChangeTime; // Offset: 40
    keen::float centerHeightOffset; // Offset: 48
};

enum class enemy01.EnemyMarkerType {
    PatrolPoint = 0,
    Interaction = 1,
    Alarm = 2,
    MoveTarget = 3,
};

typedef keen::Bitmask8<keen::enemy01::EnemyMarkerType> enemy01.EnemyMarkerTypeMask;

struct enemy01.SetCombatStateAction {
    keen::enemy01::CombatState state; // Offset: 0
    keen::Time minTime; // Offset: 8
    keen::Time maxTime; // Offset: 16
};

struct enemy01.SetPhaseAction {
    keen::ObjectReference<keen::EnemyPhase> newPhase; // Offset: 0
};

struct enemy01.SwitchToLastPhaseAction {
};

struct enemy01.SelectAttackAction {
    keen::enemy01::AttackStyle attackStyle; // Offset: 0
};

struct enemy01.GetStunnedAction {
};

struct enemy01.SetImmuneAction {
    keen::bool immune; // Offset: 0
};

typedef keen::ObjectReference<keen::Signal> SignalReference;

struct enemy01.SendToggleEventAction {
    keen::SignalReference triggerId; // Offset: 0
    keen::bool state; // Offset: 16
};

struct enemy01.TriggerStateConditionAction {
    keen::enemy01::StateCondition condition; // Offset: 0
};

struct enemy01.RunAwayAction {
    keen::float32 minDistance; // Offset: 0
    keen::float32 maxDistance; // Offset: 4
};

struct enemy01.MoveForwardAction {
    keen::float32 minDistance; // Offset: 0
    keen::float32 maxDistance; // Offset: 4
    keen::ecs::LocomotionSpeedSelector speed; // Offset: 8
};

struct enemy01.PauseAction {
    keen::float32 minDuration; // Offset: 0
    keen::float32 maxDuration; // Offset: 4
    keen::bool lookAtCombatTarget; // Offset: 8
};

struct enemy01.SetIdleAnimationAction {
    keen::animationgraph::StateIdReference animation; // Offset: 0
};

struct enemy01.SetWalkAnimationAction {
    keen::animationgraph::StateIdReference animation; // Offset: 0
};

struct enemy01.SetMovementSpeedAction {
    keen::ecs::LocomotionSpeedSelector movementType; // Offset: 0
    keen::float32 speed; // Offset: 4
};

struct enemy01.PlayActionSequenceAction {
    keen::actor::ActorSequenceReference sequence; // Offset: 0
    keen::bool waitUntilFinished; // Offset: 16
};

struct enemy01.ChangeSlopeAlignmentAction {
    keen::float32 longitudinalFactor; // Offset: 0
    keen::float32 lateralFactor; // Offset: 4
};

struct enemy01.StartFlyingAction {
};

struct enemy01.EnterFlyingStateAction {
};

struct enemy01.StopFlyingAction {
};

struct enemy01.ToggleAllowFallDownAction {
    keen::bool allowFallDown; // Offset: 0
};

struct enemy01.GuardParentAction {
};

struct enemy01.GuardGroupLeaderAction {
};

struct enemy01.StopGuardAction {
};

struct enemy01.EnableFeatureAction {
    keen::ecs::EnemyFeature feature; // Offset: 0
};

struct enemy01.DisableFeatureAction {
    keen::ecs::EnemyFeature feature; // Offset: 0
};

struct enemy01.SetFleeRadiusAction {
    keen::float32 fleeRadius; // Offset: 0
};

struct enemy01.SelectFriendAction {
    keen::float32 minHealthPercentage; // Offset: 0
    keen::float32 maxHealthPercentage; // Offset: 4
    keen::float32 minDistance; // Offset: 8
    keen::float32 maxDistance; // Offset: 12
};

struct enemy01.SelectEnemyAction {
    keen::float32 minHealthPercentage; // Offset: 0
    keen::float32 maxHealthPercentage; // Offset: 4
    keen::float32 minDistance; // Offset: 8
    keen::float32 maxDistance; // Offset: 12
};

struct enemy01.MoveToTargetAction {
    keen::float32 targetDistance; // Offset: 0
    keen::ecs::TargetType targetType; // Offset: 4
    keen::ecs::LocomotionSpeedSelector speed; // Offset: 5
};

struct enemy01.WaitUntilActorStateIsFinished {
    keen::actor::StateFlag state; // Offset: 0
};

struct enemy01.WaitUntilSequenceIsFinished {
};

struct enemy01.SetWorldColliderYOffsetAction {
    keen::float32 yOffset; // Offset: 0
};

struct enemy01.ToggleBlockAction {
    keen::bool shouldBlock; // Offset: 0
};

struct enemy01.ToggleVerticalLeaningAction {
    keen::bool shouldUseVerticalLeaning; // Offset: 0
};

struct enemy01.SetVariableAction {
    keen::enemy01::EnemyVariableReference variable; // Offset: 0
    keen::bool state; // Offset: 16
};

struct enemy01.ClearVariableAction {
    keen::enemy01::EnemyVariableReference variable; // Offset: 0
};

struct enemy01.SetCirclingRadiusAction {
    keen::float radius; // Offset: 0
};

struct enemy01.SetCirclingHeightOffsetAction {
    keen::float heightOffset; // Offset: 0
};

struct enemy01.MoveToCirclingTargetAction {
    keen::ecs::LocomotionSpeedSelector speed; // Offset: 0
    keen::float32 maxArriveDistance; // Offset: 4
    keen::bool keepCurrentDirection; // Offset: 8
};

struct enemy01.TurnToCirclingTargetAction {
};

struct enemy01.StoreCurrentCirclingTargetAngleAction {
};

struct enemy01.StoreCirclingPositionAsTargetAction {
    keen::ecs::TargetType target; // Offset: 0
    keen::float radius; // Offset: 4
    keen::Angle angleOffset; // Offset: 8
};

typedef keen::ObjectReference<keen::enemy01::AttackDesscriptionResource> ecs.AttackReference;

typedef keen::ObjectReference<keen::enemy01::AttackDesscription> ecs.AttackDescriptionReference;

struct ecs.AttackReferenceDescription {
    keen::ecs::AttackDescriptionReference attack; // Offset: 0
};

struct ecs.EnemyArsenal {
};

typedef keen::Bitmask16<keen::impact::HitReactionType> ecs.HitReactionTypeMask;

struct ecs.Enemy01BehaviorState {
    keen::enemy01::CombatSetup combatSetup; // Offset: 0
    keen::enemy01::HomeZoneSetup homeZoneSetup; // Offset: 176
    keen::enemy01::AggroSetup aggroSetup; // Offset: 180
    keen::enemy01::CallForHelpSetup callForHelpSetup; // Offset: 268
    keen::enemy01::RoamingSetup roamingSetup; // Offset: 280
    keen::enemy01::FleeSetup fleeSetup; // Offset: 344
    keen::enemy01::BlockingSetup blockingSetup; // Offset: 376
    keen::enemy01::NoiseListenerSetup noiseListenerSetup; // Offset: 472
    keen::enemy01::SteeringSetup steeringSetup; // Offset: 496
    keen::enemy01::ProwlSetup prowlSetup; // Offset: 512
    keen::enemy01::ParrySetup parrySetup; // Offset: 568
    keen::enemy01::MovementSetup movementSetup; // Offset: 620
    keen::enemy01::GuardSetup guardSetup; // Offset: 644
    keen::enemy01::InteractionSetup interactionSetup; // Offset: 656
    keen::enemy01::PatrolSetup patrolSetup; // Offset: 672
    keen::enemy01::TauntSetup tauntSetup; // Offset: 744
    keen::enemy01::TurnSetup turnSetup; // Offset: 776
    keen::enemy01::SearchForCoverSetup searchForCoverSetup; // Offset: 880
    keen::enemy01::SleepSetup sleepSetup; // Offset: 920
    keen::enemy01::RunAroundSetup runAroundSetup; // Offset: 1016
    keen::enemy01::PathNodeSetup pathNodeSetup; // Offset: 1040
    keen::enemy01::CirclingSetup circlingSetup; // Offset: 1144
    keen::actor::ActorSequenceReference callForHelpSequence; // Offset: 1176
    keen::actor::ActorSequenceReference spawnSequence; // Offset: 1192
    keen::enemy01::EnemyClass enemyClass; // Offset: 1208
    keen::ecs::EnemyFeatureMask enabledFeatures; // Offset: 1212
    keen::float32 threatFactor; // Offset: 1216
    keen::SignalReference deathSignal; // Offset: 1220
    keen::float32 pushBackScale; // Offset: 1236
    keen::ecs::HitReactionTypeMask disabledHitReactions; // Offset: 1240
    keen::float32 maxHeightDiff; // Offset: 1244
};

struct ecs.FlyingEnemy {
    keen::float32 minRoamingHeight; // Offset: 0
    keen::float32 maxRoamingHeight; // Offset: 4
    keen::float32 minFlyHeight; // Offset: 8
    keen::float32 maxFlyHeight; // Offset: 12
    keen::float32 landingHeight; // Offset: 16
    keen::float32 attackHeightOffset; // Offset: 20
    keen::float32 combatIdleHeightOffset; // Offset: 24
    keen::float32 defaultArriveDistance; // Offset: 28
    keen::float32 attackArriveDistance; // Offset: 32
    keen::bool attackWhileGrounded; // Offset: 36
    keen::animationgraph::StateIdReference idleAnimation; // Offset: 40
};

struct ecs.DynamicEnemy01BehaviorState {
    keen::enemy01::State state; // Offset: 0
    keen::Time stateChangeTime; // Offset: 8
    keen::float3 homeZonePosition; // Offset: 16
    keen::bool movementTargetIsValid; // Offset: 28
    keen::float3 movementTarget; // Offset: 32
    keen::float3 movementStartPosition; // Offset: 44
    keen::Time movementStartTime; // Offset: 56
    keen::enemy01::CombatData combatData; // Offset: 64
    keen::enemy01::CirclingData circlingData; // Offset: 400
    keen::enemy01::EnemyVariableStates variableStates; // Offset: 456
    keen::Time nextAllowedRoamingTime; // Offset: 536
    keen::uint16 targetCounter; // Offset: 544
    keen::Time lastBehaviorCheckTime; // Offset: 552
    keen::Time lastBehaviorExecutionTime; // Offset: 560
    keen::StaticArray<keen::Time,32> nextBehaviorCheckTime; // Offset: 568
    keen::uint8 currentBehaviorIndex; // Offset: 824
    keen::uint8 currentBehaviorActionIndex; // Offset: 825
    keen::ecs::QueryId callForHelpQueryId; // Offset: 828
    keen::ecs::EntityId callForHelpTargetEntityId; // Offset: 832
    keen::Time lastHelpTime; // Offset: 840
    keen::Time returnHomeStartTime; // Offset: 848
    keen::enemy01::StateMask executedStates; // Offset: 856
    keen::ecs::QueryId dashQueryId; // Offset: 860
    keen::ecs::EntityId noiseEntityId; // Offset: 864
    keen::ecs::EntityId projectileEntityId; // Offset: 868
    keen::uint8 controlledByAttacks; // Offset: 872
    keen::Time nextAllowedCombatIdleRotationTime; // Offset: 880
    keen::bool teleportPositionFound; // Offset: 888
    keen::animationgraph::StateIdHash currentIdleAnimation; // Offset: 892
    keen::animationgraph::StateIdHash currentWalkAnimation; // Offset: 896
    keen::float32 currentLongitudinalSlopeAlignmentFactor; // Offset: 900
    keen::float32 currentLateralSlopeAlignmentFactor; // Offset: 904
    keen::ecs::EntityId guardEntityId; // Offset: 908
    keen::float32 currentGuardTargetDistance; // Offset: 912
    keen::ecs::EntityId currentMarkerId; // Offset: 916
    keen::Time nextAllowedInteractionTime; // Offset: 920
    keen::Time nextAllowedPatrolTime; // Offset: 928
    keen::Time nextCheckGuardTime; // Offset: 936
    keen::Time nextCheckTauntTime; // Offset: 944
    keen::Time nextAllowedCombatIdleTurnTime; // Offset: 952
    keen::bool enabled; // Offset: 960
    keen::float3 lastNoisePosition; // Offset: 964
    keen::bool shouldBlock; // Offset: 976
    keen::bool isWalkBlockActive; // Offset: 977
    keen::bool isAttackMove; // Offset: 978
    keen::bool isVerticalLeaningActive; // Offset: 979
    keen::ecs::EnemyFeatureMask enabledFeatures; // Offset: 980
    keen::ecs::EnemyFeatureMask disabledFeatures; // Offset: 984
    keen::Time nextSleepCheckTime; // Offset: 992
    keen::Time sleepEndTime; // Offset: 1000
    keen::ecs::EntityId parriedByEntity; // Offset: 1008
};

enum class ecs.UnitMode {
    Wildlife = 0,
    Enemy = 1,
};

struct ecs.UnitTransformer {
    keen::ecs::UnitMode mode; // Offset: 0
};

struct ecs.PlayerCountScaling {
    keen::bool scaleHealth; // Offset: 0
    keen::bool scaleDamage; // Offset: 1
    keen::bool scaleStamina; // Offset: 2
    keen::float32 healthScaling; // Offset: 4
    keen::float32 damageScaling; // Offset: 8
    keen::float32 staminaScaling; // Offset: 12
    keen::bool allowDownScaling; // Offset: 16
    keen::uint8 minPlayerCount; // Offset: 17
};

struct ecs.EnemyLevelScaling {
    keen::float32 healthScaleFactor; // Offset: 0
    keen::float32 staminaScaleFactor; // Offset: 4
};

struct ecs.EnemyScaling {
    keen::Time updateInterval; // Offset: 0
    keen::ecs::PlayerCountScaling playerCountScaling; // Offset: 8
    keen::ecs::EnemyLevelScaling enemyLevelScaling; // Offset: 28
};

struct ecs.DynamicEnemyScaling {
    keen::Time nextUpdateTime; // Offset: 0
    keen::uint32 lastTargets; // Offset: 8
    keen::uint32 lastLevel; // Offset: 12
    keen::float32 lastDamageMultiplier; // Offset: 16
    keen::sint32 initialBaseMaxHealth; // Offset: 20
    keen::sint32 initialBaseStrength; // Offset: 24
    keen::sint32 initialBaseDexterity; // Offset: 28
    keen::sint32 initialBaseIntelligence; // Offset: 32
};

struct ecs.EnemyMarkerEntry {
    keen::float3 position; // Offset: 0
    keen::ecs::EntityId entityId; // Offset: 12
    keen::enemy01::EnemyMarkerType markerType; // Offset: 16
};

struct ecs.EnemyMarkerCheck {
    keen::float32 checkDistance; // Offset: 0
    keen::ecs::RangeQueryId queryId; // Offset: 4
    keen::Time nextCheckTime; // Offset: 8
    keen::StaticArray<keen::ecs::EnemyMarkerEntry,8> markers; // Offset: 16
};

struct ecs.EnemyMarker {
    keen::enemy01::EnemyMarkerType markerType; // Offset: 0
    keen::actor::ActorSequenceReference defaultInteractSequence; // Offset: 4
    keen::bool useTargetOffset; // Offset: 20
    keen::ecs::Offset targetOffset; // Offset: 24
    keen::float32 arriveDistance; // Offset: 64
    keen::float32 alarmRange; // Offset: 68
    keen::bool usePatrolPointDirection; // Offset: 72
    keen::bool attackTargets; // Offset: 73
    keen::uint8 maxUsers; // Offset: 74
    keen::uint8 minHorizontalSpace; // Offset: 75
    keen::uint8 minTargetHorizontalSpace; // Offset: 76
};

struct ecs.LastEnemyValue {
    keen::float32 lastEnemyValue; // Offset: 0
};

struct ecs.DynamicEnemyMarker {
    keen::uint8 users; // Offset: 0
};

struct ecs.EnemyArsenalReference {
    keen::ObjectReference<keen::ecs::EnemyArsenal> arsenal; // Offset: 0
};

struct ecs.EnemyAttackAttachment {
    keen::actor::ActorSequenceReference initialSequence; // Offset: 0
};

enum class ecs.EnemyAttackAttachmentState {
    None = 0,
    Active = 1,
    Inactive = 2,
};

struct ecs.DynamicEnemyAttackAttachment {
    keen::ecs::EnemyAttackAttachmentState state; // Offset: 0
};

struct enemy.EnemyArsenal {
    keen::BlobArray<keen::enemy01::AttackDesscriptionResource> attacks; // Offset: 0
    keen::BlobArray<keen::enemy01::BehaviorDesscriptionResource> behaviors; // Offset: 8
};

struct enemy.EnemyArsenalResource {
    keen::Guid guid; // Offset: 0
    keen::BlobArray<keen::enemy01::AttackDesscriptionResource> attacks; // Offset: 16
    keen::BlobArray<keen::enemy01::BehaviorDesscriptionResource> behaviors; // Offset: 24
};

struct enemy.EnemyArsenalSubDirectory {
};

struct enemy.EnemyArsenalDirectory {
};

struct enemy.EnemyArsenalRegistryResource {
    keen::BlobArray<keen::enemy::EnemyArsenalResource> arsenals; // Offset: 0
};

struct enemy01_debug.KillEnemyMessage {
    keen::ecs::EntityId enemyId; // Offset: 0
};

struct enemy01_debug.EnforceEnemyAttackMessage {
    keen::ecs::EntityId enemyId; // Offset: 0
    keen::uint8 attackIndex; // Offset: 4
};

struct enemy01_debug.ToggleDisableEnemyAttackMessage {
    keen::ecs::EntityId enemyId; // Offset: 0
    keen::uint8 attackIndex; // Offset: 4
    keen::bool disabled; // Offset: 5
};

struct enemy01_debug.SetTameStateMessage {
    keen::ecs::EntityId enemyId; // Offset: 0
    keen::bool tamed; // Offset: 4
};

struct enemy01_debug.SetFrozenStateMessage {
    keen::ecs::EntityId enemyId; // Offset: 0
    keen::bool frozen; // Offset: 4
};

struct enemy01_debug.DebugAnimationGraphMessage {
    keen::ecs::EntityId enemyId; // Offset: 0
};

struct enemy01_debug.SetStateMessage {
    keen::ecs::EntityId enemyId; // Offset: 0
    keen::enemy01::State state; // Offset: 4
};

struct enemy01_debug.EnforcePhaseMessage {
    keen::ecs::EntityId enemyId; // Offset: 0
    keen::Guid phaseId; // Offset: 4
};

struct enemy01.DebugAttackState {
    keen::StaticArray<keen::bool,8> constraintStates; // Offset: 0
    keen::bool isValid; // Offset: 8
};

struct enemy01.DebugBehaviorState {
    keen::StaticArray<keen::bool,8> constraintStates; // Offset: 0
    keen::bool isValid; // Offset: 8
    keen::uint32 executionCount; // Offset: 12
};

struct enemy01.StateEntry {
    keen::enemy01::State state; // Offset: 0
    keen::Time time; // Offset: 8
};

struct enemy01.CombatStateEntry {
    keen::enemy01::CombatState state; // Offset: 0
    keen::Time time; // Offset: 8
};

struct ecs.EnemyDebug {
    keen::uint8 enforcedAttackIndex; // Offset: 0
    keen::StaticArray<keen::uint64,1> disabledAttacks; // Offset: 8
    keen::bool tamed; // Offset: 16
    keen::bool frozen; // Offset: 17
    keen::StaticArray<keen::enemy01::DebugAttackState,16> attackStates; // Offset: 18
    keen::StaticArray<keen::enemy01::DebugBehaviorState,32> behaviorStates; // Offset: 164
    keen::StaticArray<keen::enemy01::StateEntry,8> stateHistory; // Offset: 680
    keen::StaticArray<keen::enemy01::CombatStateEntry,8> combatStateHistory; // Offset: 808
    keen::enemy01::State nextState; // Offset: 936
    keen::Guid enforcedPhase; // Offset: 940
};

enum class ecs.EnemyTest {
    StayOnGround = 0,
    Patrol = 1,
    EnemyVsEnemyFight = 2,
    ReactToNoise = 3,
    Steering = 4,
    AggroBigAngleLongDistance = 5,
    AggroSmallAngleShortDistance = 6,
};

typedef keen::Bitmask32<keen::ecs::EnemyTest> ecs.EnemyTestFlags;

struct ecs.EnemyPatrolTest {
    keen::bool hasReachedPatrolPoint0; // Offset: 0
    keen::bool hasReachedPatrolPoint1; // Offset: 1
};

struct ecs.EnemyTestToggle {
    keen::ecs::EnemyTestFlags tests; // Offset: 0
};

struct ecs.UnitGroup {
    keen::StaticArray<keen::ecs::EntityId,24> members; // Offset: 0
    keen::Time nextUpdateTime; // Offset: 96
};

struct ecs.UnitGroupMember {
    keen::ecs::EntityId groupId; // Offset: 0
    keen::ecs::EntityId groupLeaderId; // Offset: 4
    keen::uint8 memberIndex; // Offset: 8
};

enum class wildlife.State {
    Invalid = 0,
    Start = 1,
    Spawning = 2,
    Idle = 3,
    Alert = 4,
    Flee = 5,
    Roaming = 6,
    RunAway = 7,
    Hit = 8,
    Landing = 9,
    FlyToLandingPosition = 10,
    Gliding = 11,
    Dead = 12,
    ReturnToSpawnPosition = 13,
    FoodBaitPursue = 14,
    FoodBaitEat = 15,
};

enum class wildlife.StateCondition {
    IsFinished = 0,
    Alert = 1,
    NeedsToFlee = 2,
    IsInDanger = 3,
    Hit = 4,
    IsStuck = 5,
    Death = 6,
    TooFarAwayFromSpawnPosition = 7,
    HasSensedFoodBait = 8,
    Aborted = 9,
};

enum class wildlife.Feature {
    Roaming = 0,
    Flee = 1,
    ShowSpawnSequence = 2,
    Tameable = 3,
};

typedef keen::Bitmask16<keen::wildlife::Feature> wildlife.FeatureMask;

struct wildlife.MovementSetup {
    keen::float32 maxMovementAngleDefault; // Offset: 0
    keen::float32 maxMovementAngleFlee; // Offset: 4
    keen::float32 maxMovementAngleRoaming; // Offset: 8
    keen::float32 maxMovementAngleLanding; // Offset: 12
};

struct wildlife.GlidingSetup {
    keen::float32 minGlidingDistance; // Offset: 0
    keen::float32 maxGlidingDistance; // Offset: 4
};

struct wildlife.PathNodeSetup {
    keen::ecs::PathNodeCostFactors defaultCostFactors; // Offset: 0
    keen::ecs::PathNodeCostFactors roamingCostFactors; // Offset: 52
};

struct wildlife.TamingSetup {
    keen::ecs::TemplateReference favoriteFood; // Offset: 0
    keen::uint8 necessaryTamingSteps; // Offset: 16
    keen::float32 foodBaitSensorRange; // Offset: 20
    keen::float32 foodBaitAngleCheckMinDistance; // Offset: 24
    keen::Time foodBaitEatMaxDuration; // Offset: 32
    keen::Time alertDurationHigh; // Offset: 40
    keen::Time alertDurationMediumFoodEat; // Offset: 48
    keen::float32 foodBaitEatAdaptFleeRadiusDistance; // Offset: 56
    keen::float32 tamingApproachFinishedFleeRadius; // Offset: 60
    keen::float32 foodBaitEatSnoutPivotDistance; // Offset: 64
};

struct ecs.WildlifeTurnSetup {
    keen::bool useTurnSequences; // Offset: 72
};

struct ecs.Wildlife {
    keen::actor::ActorSequenceReference spawnSequence; // Offset: 0
    keen::animationgraph::StateIdReference idleAnimation; // Offset: 16
    keen::Time minIdleDuration; // Offset: 32
    keen::Time maxIdleDuration; // Offset: 40
    keen::float32 minRoamingRadius; // Offset: 48
    keen::float32 maxRoamingRadius; // Offset: 52
    keen::float32 minFleeRadius; // Offset: 56
    keen::float32 maxFleeRadius; // Offset: 60
    keen::float32 fallbackFleeRadius; // Offset: 64
    keen::float32 maxMovementRadius; // Offset: 68
    keen::animationgraph::StateIdReference secureIdleAnimation; // Offset: 72
    keen::Time minFeelSecureDuration; // Offset: 88
    keen::Time maxFeelSecureDuration; // Offset: 96
    keen::float32 callForHelpChance; // Offset: 104
    keen::actor::ActorSequenceReference callForHelpSequence; // Offset: 108
    keen::float32 listenRangeFactor; // Offset: 124
    keen::wildlife::FeatureMask enabledFeatures; // Offset: 128
    keen::wildlife::MovementSetup movementSetup; // Offset: 132
    keen::wildlife::GlidingSetup glidingSetup; // Offset: 148
    keen::ecs::WildlifeTurnSetup turnSetup; // Offset: 156
    keen::wildlife::PathNodeSetup pathNodeSetup; // Offset: 232
    keen::wildlife::TamingSetup tamingSetup; // Offset: 336
    keen::actor::ActorSequenceReference tamingPetInteractionSequence; // Offset: 408
    keen::LocaTagReference tamingPetInteractionVerbLoca; // Offset: 424
};

enum class ecs.AlertState {
    Low_Relaxed = 0,
    Medium_Alert = 1,
    High_Danger = 2,
};

struct ecs.DynamicWildlife {
    keen::wildlife::State state; // Offset: 0
    keen::wildlife::State lastState; // Offset: 1
    keen::Time feelSecureDuration; // Offset: 8
    keen::Time lastFleeTime; // Offset: 16
    keen::float3 spawnPosition; // Offset: 24
    keen::Time idleEndTime; // Offset: 40
    keen::Time lastStateChangeTime; // Offset: 48
    keen::float3 dangerOrigin; // Offset: 56
    keen::float32 runAwayDistance; // Offset: 68
    keen::float3 currentTargetPosition; // Offset: 72
    keen::Time keepRoamingTargetUntilTime; // Offset: 88
    keen::Time foodBaitEatTimer; // Offset: 96
    keen::ecs::AlertState previousAlertState; // Offset: 104
    keen::Time alertTimeStamp; // Offset: 112
    keen::Time foodBaitNeedinessTimeStamp; // Offset: 120
    keen::Time foodBaitReactionTimeStamp; // Offset: 128
    keen::Time tamingShrinkRadiusTimerStart; // Offset: 136
    keen::ecs::EntityId foodBaitEntityId; // Offset: 144
    keen::uint8 tamingProgress; // Offset: 148
};

struct ecs.NetworkWildlife {
    keen::ecs::AlertState alertState; // Offset: 0
    keen::Time alertTimeStamp; // Offset: 8
    keen::uint8 tamingProgress; // Offset: 16
    keen::bool isEatingFoodBait; // Offset: 17
};

struct ecs.WildlifeTransformer {
    keen::Time timeWithoutHit; // Offset: 0
    keen::Time minDurationWithoutHit; // Offset: 8
};

enum class AmbientEffectPlaybackType {
    PlayAlways = 0,
    PlayOnlyWhenInBattle = 1,
    PlayOnlyWhenNotInBattle = 2,
};

struct AmbientEffectEntry {
    keen::SoundContainerReference soundContainer; // Offset: 0
    keen::ObjectReference<keen::IngameTimeSpan> ingameTimeSpan; // Offset: 16
    keen::bool mute; // Offset: 32
    keen::AmbientEffectPlaybackType playbackType; // Offset: 33
    keen::float32 volume; // Offset: 36
};

enum class Biome {
    Default = 0,
    Grassland = 1,
    Desert = 2,
    Wetland = 3,
    Steppes = 4,
    Deepforest = 5,
    ColdHeights = 6,
};

struct AmbientEffect {
    keen::bool inAllBiomes; // Offset: 0
    keen::Biome biome; // Offset: 1
    keen::bool mute; // Offset: 2
    keen::bool whenInFog; // Offset: 3
};

struct AmbientSoundEffectEntryResource {
    keen::SoundContainerReference soundContainer; // Offset: 0
    keen::IngameTimeSpanReference ingameTimeSpan; // Offset: 16
    keen::float32 volume; // Offset: 32
    keen::Guid id; // Offset: 36
    keen::Time startTime; // Offset: 56
    keen::Time endTime; // Offset: 64
    keen::string description; // Offset: 72
    keen::string soundContainerDescription; // Offset: 80
    keen::string ingameTimeSpanDescription; // Offset: 88
    keen::AmbientEffectPlaybackType playbackType; // Offset: 96
};

struct AmbientSoundEffectResource {
    keen::bool inAllBiomes; // Offset: 0
    keen::bool whenInFog; // Offset: 1
    keen::Biome biome; // Offset: 2
    keen::BlobArray<keen::AmbientSoundEffectEntryResource> effectEntries; // Offset: 4
    keen::Guid id; // Offset: 12
    keen::string description; // Offset: 28
};

struct AmbientVfxEffectEntry {
    keen::VfxReference vfx; // Offset: 0
    keen::IngameTimeSpanReference ingameTimeSpan; // Offset: 16
};

struct AmbientVfxEffect {
    keen::bool inAllBiomes; // Offset: 0
    keen::Biome biome; // Offset: 1
    keen::bool whenInFog; // Offset: 2
};

struct AmbientVfxEffectEntryResource {
    keen::VfxReference vfx; // Offset: 0
    keen::IngameTimeSpanReference ingameTimeSpan; // Offset: 16
    keen::Time startTime; // Offset: 32
    keen::Time endTime; // Offset: 40
    keen::Guid id; // Offset: 48
    keen::string description; // Offset: 64
    keen::string vfxDescription; // Offset: 72
    keen::string ingameTimeSpanDescription; // Offset: 80
};

struct AmbientVfxEffectResource {
    keen::BlobArray<keen::AmbientVfxEffectEntryResource> effectEntries; // Offset: 0
    keen::Biome biome; // Offset: 8
    keen::Guid id; // Offset: 12
    keen::string description; // Offset: 28
    keen::bool whenInFog; // Offset: 36
    keen::bool inAllBiomes; // Offset: 37
};

struct CollisionFeedbackEffect2 {
    keen::bool enabled; // Offset: 0
    keen::SoundContainerReference sfx; // Offset: 4
    keen::VfxReference vfx; // Offset: 20
    keen::ecs::Offset ecsOffset; // Offset: 36
    keen::bool orientToNormal; // Offset: 76
    keen::bool overrideSlot; // Offset: 77
    keen::AttachmentSlot slot; // Offset: 78
    keen::bool attach; // Offset: 79
    keen::bool playOnlyLocalSFX; // Offset: 80
    keen::bool useRootPosition; // Offset: 81
};

struct CollisionFeedbackEffectCollection2 {
    keen::CollisionFeedbackEffect2 onHit; // Offset: 0
    keen::CollisionFeedbackEffect2 onCriticalHit; // Offset: 84
    keen::CollisionFeedbackEffect2 onBlock; // Offset: 168
    keen::CollisionFeedbackEffect2 onBrokenBlock; // Offset: 252
    keen::CollisionFeedbackEffect2 onIneffective; // Offset: 336
    keen::CollisionFeedbackEffect2 onImmune; // Offset: 420
    keen::CollisionFeedbackEffect2 onFlattening; // Offset: 504
    keen::CollisionFeedbackEffect2 onPileUp; // Offset: 588
};

typedef keen::ObjectReference<keen::CollisionFeedbackEffectCollection2> CollisionFeedbackEffectCollectionReference;

enum class MaterialFeedbackEventType {
    OnPlace = 0,
    OnPickup = 1,
    OnTearDown = 2,
    OnDestruction = 3,
    OnFlatten = 4,
    OnPileUp = 5,
    Count = 6,
};

typedef keen::Bitmask8<keen::MaterialFeedbackEventType> MaterialFeedbackEventMask;

enum class MaterialFeedbackEffectSize {
    Tiny = 0,
    Small = 1,
    Medium = 2,
    Large = 3,
    Count = 4,
};

struct FoleyEffectCollection {
    keen::ecs::Offset offset; // Offset: 0
    keen::SoundContainerReference evade; // Offset: 40
    keen::SoundContainerReference jump; // Offset: 56
    keen::SoundContainerReference run; // Offset: 72
    keen::SoundContainerReference sprint; // Offset: 88
    keen::SoundContainerReference walk; // Offset: 104
};

struct EnvironmentEffectBase {
    keen::SoundContainerReference sfx; // Offset: 0
    keen::ecs::Offset offset; // Offset: 16
    keen::bool orientToNormal; // Offset: 56
    keen::VfxReference vfx; // Offset: 60
};

enum class EnvironmentEffectType {
    PlayerDodgerollStart = 0,
    PlayerDodgerollEnd = 1,
    PlayerFallDamage = 2,
    PlayerJump = 3,
    PlayerJumpLandSoft = 4,
    PlayerJumpLandHard = 5,
    PlayerRun = 6,
    PlayerSprint = 7,
    PlayerWalk = 8,
    PlayerSlide = 9,
    FlyCrashDown = 10,
    FlyLiftOff = 11,
    FlyTouchDown = 12,
    FlyHoverFlap = 13,
    NPCWalk = 14,
    Count = 15,
};

struct EnvironmentEffectPlayerDodgerollStart {
    keen::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectPlayerDodgerollEnd {
    keen::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectPlayerFallDamage {
    keen::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectPlayerJump {
    keen::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectPlayerJumpLand {
    keen::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectPlayerJumpLandSmall {
    keen::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectPlayerRun {
    keen::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectPlayerSprint {
    keen::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectPlayerWalk {
    keen::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectPlayerSlide {
    keen::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectVultureCrashDown {
    keen::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectVultureFlyLiftOff {
    keen::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectVultureFlyTouchDown {
    keen::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectVultureHoverFlap {
    keen::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectNPCWalk {
    keen::EnvironmentEffectType effectType; // Offset: 76
};

struct MaterialFeedbackEventBase {
    keen::SoundContainerReference sfxTiny; // Offset: 0
    keen::SoundContainerReference sfxSmall; // Offset: 16
    keen::SoundContainerReference sfxMedium; // Offset: 32
    keen::SoundContainerReference sfxLarge; // Offset: 48
    keen::ecs::Offset ecsOffset; // Offset: 64
    keen::bool orientToNormal; // Offset: 104
    keen::bool useRootPosition; // Offset: 105
    keen::VfxReference vfx; // Offset: 108
};

struct MaterialFeedbackEventOnPlace {
    keen::MaterialFeedbackEventType type; // Offset: 124
};

struct MaterialFeedbackEventOnPickup {
    keen::MaterialFeedbackEventType type; // Offset: 124
};

struct MaterialFeedbackEventOnTearDown {
    keen::MaterialFeedbackEventType type; // Offset: 124
};

struct MaterialFeedbackEventOnDestruction {
    keen::MaterialFeedbackEventType type; // Offset: 124
};

struct MaterialFeedbackEventOnFlatten {
    keen::MaterialFeedbackEventType type; // Offset: 124
};

struct MaterialFeedbackEventOnPileUp {
    keen::MaterialFeedbackEventType type; // Offset: 124
};

struct CollisionFeedbackMaterial {
    keen::CollisionFeedbackEffectCollectionReference defaultEffectCollection; // Offset: 0
    keen::ItemReference materialItem; // Offset: 16
    keen::PropDamageSusceptibility damageSusceptibility; // Offset: 32
    keen::bool hasFoleyEffects; // Offset: 33
    keen::uint32 foleyEffectImportance; // Offset: 36
    keen::FoleyEffectCollection foleyEffects; // Offset: 40
};

struct WeatherLayerMaterial {
    keen::CollisionFeedbackEffectCollectionReference defaultEffectCollection; // Offset: 0
    keen::WeatherState weather; // Offset: 16
};

struct CollisionFeedbackRule {
    keen::CollisionFeedbackMaterialReference materialA; // Offset: 0
    keen::CollisionFeedbackMaterialReference materialB; // Offset: 16
    keen::CollisionFeedbackEffectCollectionReference effectCollection; // Offset: 32
};

struct CollisionFeedback {
};

enum class ColliderFeedbackEffectFlag {
    OrientToNormal = 0,
    ApplyLocally = 1,
    AttachToSlot = 2,
    UseRootPosition = 3,
    SFX_OnlyLocalPlayer = 4,
};

typedef keen::Bitmask8<keen::ColliderFeedbackEffectFlag> ColliderFeedbackEffectFlags;

struct MaterialFeedbackEffect {
    keen::string description; // Offset: 0
    keen::ecs::Offset ecsOffset; // Offset: 8
    keen::SoundContainerReference sfx; // Offset: 48
    keen::VfxReference vfx; // Offset: 64
    keen::BlobOptional<keen::VfxUserEffectParameterDataBlock> vfxParameters; // Offset: 80
    keen::AttachmentSlot slot; // Offset: 84
    keen::ColliderFeedbackEffectFlags flags; // Offset: 85
};

typedef keen::HashKey32 MaterialFeedbackId;

struct MaterialFeedback {
    keen::MaterialFeedbackId id; // Offset: 0
    keen::MaterialFeedbackEventMask eventTypeMask; // Offset: 4
    keen::StaticArray<keen::MaterialFeedbackEffect,6> eventEffectsTiny; // Offset: 8
    keen::StaticArray<keen::MaterialFeedbackEffect,6> eventEffectsSmall; // Offset: 536
    keen::StaticArray<keen::MaterialFeedbackEffect,6> eventEffectsMedium; // Offset: 1064
    keen::StaticArray<keen::MaterialFeedbackEffect,6> eventEffectsLarge; // Offset: 1592
    keen::bool hasFoleyEffects; // Offset: 2120
    keen::uint32 foleyEffectImportance; // Offset: 2124
    keen::StaticArray<keen::MaterialFeedbackEffect,5> foleyMaterialFeedbackEffects; // Offset: 2128
    keen::bool hasEnvironmentEffects; // Offset: 2568
    keen::StaticArray<keen::MaterialFeedbackEffect,15> environmentMaterialFeedbackEffects; // Offset: 2572
    keen::Bitmask16<keen::ecs::CollisionType> collisionTypeMask; // Offset: 3892
    keen::StaticArray<keen::MaterialFeedbackEffect,8> collisionTypeEffects; // Offset: 3896
};

typedef keen::ObjectReference<keen::MaterialFeedback> MaterialFeedbackReference;

struct CollisionFeedbackMatrixEntry {
    keen::uint64 materialPairId; // Offset: 0
    keen::StaticArray<keen::MaterialFeedbackEffect,8> effects; // Offset: 8
    keen::Bitmask16<keen::ecs::CollisionType> effectMask; // Offset: 712
};

struct MaterialFeedbackSubDirectory {
};

struct MaterialFeedbackDirectory {
};

struct MaterialFeedbackCollectionResource {
    keen::Guid id; // Offset: 0
    keen::string description; // Offset: 16
    keen::BlobArray<keen::CollisionFeedbackMatrixEntry> collisionEffectMatrixEntry; // Offset: 24
    keen::BlobArray<keen::MaterialFeedbackReference> materials; // Offset: 32
    keen::MaterialFeedbackReference rainMaterialLayeredEffects; // Offset: 40
    keen::MaterialFeedbackReference snowMaterialLayeredEffects; // Offset: 56
    keen::MaterialFeedbackReference blizzardMaterialLayeredEffects; // Offset: 72
};

enum class DebugEnvironmentEffectType {
    DebugHitEffect = 0,
    DebugEnvironmentOrFootdownEffect = 1,
    DebugFoleyEffect = 2,
    DebugPropEffect = 3,
    Count = 4,
};

enum class FoleyType {
    Evade = 0,
    Jump = 1,
    Run = 2,
    Sprint = 3,
    Walk = 4,
    Count = 5,
};

struct DebugEnvironmentEffect {
    keen::DebugEnvironmentEffectType type; // Offset: 0
    keen::FoleyType foleyType; // Offset: 1
    keen::EnvironmentEffectType environmentEffectType; // Offset: 2
    keen::ecs::CollisionType collisionType; // Offset: 3
    keen::MaterialFeedbackEventType eventType; // Offset: 4
    keen::MaterialFeedbackEffectSize effectSize; // Offset: 5
    keen::WeatherState weatherState; // Offset: 6
    keen::bool collisionRuleFound; // Offset: 7
    keen::MaterialFeedbackId materialA; // Offset: 8
    keen::MaterialFeedbackId materialB; // Offset: 12
    keen::Guid eventGuid; // Offset: 16
    keen::Guid sfx; // Offset: 32
    keen::Guid vfx; // Offset: 48
    keen::float eventSendTime; // Offset: 64
    keen::float eventReceiveTime; // Offset: 68
    keen::float entityFootWorldHeight; // Offset: 72
    keen::float effectWorldHeight; // Offset: 76
};

enum class impact.MajorDirection {
    Invalid = 0,
    SourceTarget = 1,
    RightToLeft = 2,
    LeftToRight = 3,
    UpToDown = 4,
    DownToUp = 5,
    BackToFront = 6,
};

struct actor.ActorSequence {
    keen::impact::MajorDirection majorDirection; // Offset: 16
};

typedef keen::BlobArray<keen::BlobVariant<keen::SequenceEvent>> SequenceEvents;

struct SequenceResource {
    keen::SequenceEvents events; // Offset: 0
    keen::Time length; // Offset: 8
    keen::bool loop; // Offset: 16
    keen::BlobString name; // Offset: 20
};

struct actor.ActorSequenceResource {
    keen::Guid resourceId; // Offset: 32
    keen::impact::MajorDirection majorDirection; // Offset: 48
};

typedef keen::ObjectReference<keen::ecs::EntityTag> ecs.EntityTagReference;

struct ecs.EntityTagReferenceEntry {
    keen::ecs::EntityTagReference tag; // Offset: 0
};

struct SequenceEvent {
    keen::Time time; // Offset: 0
    keen::Time duration; // Offset: 8
    keen::ecs::EntityTagReference requiredEntityTag; // Offset: 16
    keen::StaticArray<keen::ecs::EntityTagReferenceEntry,4> forbiddenTags; // Offset: 32
};

struct actor.SetAnimationEvent {
    keen::animationgraph::StateIdReference animationName; // Offset: 96
    keen::bool usePureLveLocomotion; // Offset: 112
    keen::bool alignLveLocomotionToFloor; // Offset: 113
    keen::bool scaleLveWithMovementInput; // Offset: 114
    keen::bool retriggerAnimation; // Offset: 115
};

struct actor.RootMotionWarpEvent {
    keen::float32 minDistanceToTarget; // Offset: 96
    keen::float32 maxScale; // Offset: 100
    keen::bool abortWarpAboveMaxScale; // Offset: 104
};

struct actor.PreserveVelocity {
};

struct actor.ImpulseEvent {
    keen::float3 worldDistance; // Offset: 96
    keen::float3 localDistance; // Offset: 108
    keen::ecs::ImpulseType impulseType; // Offset: 120
    keen::bool applyOnlyHorizontally; // Offset: 121
};

struct actor.ApplyImpulseEvent {
    keen::float3 worldImpulse; // Offset: 96
    keen::float3 localImpulse; // Offset: 108
};

struct actor.SetAnimationOverlayEvent {
    keen::animationgraph::OverlayIdReference overlayName; // Offset: 96
    keen::BlobString jointMaskStart; // Offset: 112
};

struct actor.KeepAliveEvent {
    keen::actor::StateMask keepAliveMask; // Offset: 96
    keen::actor::StateMask abortMask; // Offset: 104
};

struct actor.LoopEvent {
    keen::actor::StateMask keepAliveMask; // Offset: 96
    keen::actor::StateMask abortMask; // Offset: 104
    keen::bool jumpToLoopEndOnAbort; // Offset: 112
};

enum class actor.ScopeEndBehavior {
    LoopScope = 0,
    ExitScope = 1,
};

struct actor.ScopeEvent {
    keen::actor::ScopeEndBehavior scopeEndBehavior; // Offset: 120
};

struct actor.ChangeColliderSetup {
    keen::ecs::ColliderMode mode; // Offset: 96
};

struct actor.ToggleInteractionActionEvent {
};

struct actor.LootInteractionActionEvent {
    keen::bool lootAll; // Offset: 96
    keen::bool forAllPlayers; // Offset: 97
};

struct actor.ResetFallAltitudeOnApexEvent {
};

enum class actor.SnapType {
    Stick = 0,
    Target = 1,
    TargetOrStick = 2,
    TargetOrSetting = 3,
    TargetOrCursor = 4,
    Cursor = 5,
};

enum class actor.InterpolationMode {
    LinearAxisRotation = 0,
    ExponentialLerp = 1,
    LerpWithConstantSpeed = 2,
    LerpSmooth = 3,
    LerpSmoother = 4,
    RotateLeft = 5,
    RotateRight = 6,
};

struct actor.SnapEvent {
    keen::actor::SnapType type; // Offset: 96
    keen::ecs::TargetType targetType; // Offset: 97
    keen::actor::InterpolationMode rotationInterpolationMode; // Offset: 98
};

struct actor.SetAbortByMovement {
    keen::bool value; // Offset: 96
};

struct actor.PushEvent {
    keen::float32 force; // Offset: 96
};

enum class actor.JumpType {
    Invalid = 0,
    Default = 1,
    DoubleDefault = 2,
    DoubleSprint = 3,
    Sprint = 4,
    DefaultSubmerged = 5,
    StruggleSubmerged = 6,
    Glider = 7,
    HookSwingEnter = 8,
    HookSwingDefaultExit = 9,
    HookSwingSprintExit = 10,
    LadderClimbing = 11,
    FreeClimbing = 12,
    Slide = 13,
    Attack = 14,
    Airwolf = 15,
    NpcMovement = 16,
    JumpPad = 17,
};

struct actor.JumpEvent {
};

struct actor.HookEvent {
};

struct actor.SelfDestructEvent {
};

enum class CameraId {
    EntityCamera = 0,
    PlayerCameraCustomizationBody = 1,
    PlayerCameraCustomizationFace = 2,
    PlayerCameraSpawning = 3,
    PlayerCameraSpawningDolly = 4,
    PlayerCameraRespawning = 5,
    PlayerCameraDefault = 6,
    PlayerCameraDefaultTarget = 7,
    PlayerCameraSprinting = 8,
    PlayerCameraRangedBowDefault = 9,
    PlayerCameraRangedBowDefaultTarget = 10,
    PlayerCameraRangedBowSneaking = 11,
    PlayerCameraRangedBowSneakingTarget = 12,
    PlayerCameraRangedStaffDefault = 13,
    PlayerCameraRangedStaffDefaultTarget = 14,
    PlayerCameraRangedStaffSneaking = 15,
    PlayerCameraRangedStaffSneakingTarget = 16,
    PlayerCameraHipfire = 17,
    PlayerCameraExecute = 18,
    PlayerCameraIdle = 19,
    PlayerCameraSneaking = 20,
    PlayerCameraSitting = 21,
    PlayerCameraCooking = 22,
    PlayerCameraClimbing = 23,
    PlayerCameraHookShot = 24,
    PlayerCameraGlider = 25,
    PlayerCameraDialogue = 26,
    PlayerCameraAltar = 27,
    PlayerCameraBuilding = 28,
    PlayerCameraBuildingModeOrbit = 29,
    PlayerCameraBuildingModeFree = 30,
};

struct actor.LockCameraIdEvent {
    keen::CameraId cameraId; // Offset: 96
};

struct actor.UnlockCameraIdEvent {
};

enum class CameraOverride {
    None = 0,
    BlinkLerpSpeed = 1,
    CameraTransitionLerpSpeed = 2,
};

struct actor.SetCameraOverrideEvent {
    keen::CameraOverride cameraOverride; // Offset: 96
};

struct actor.CameraShakeEvent {
    keen::float32 trauma; // Offset: 96
};

struct actor.CameraShakeImpulseEvent {
    keen::float3 impulse; // Offset: 96
    keen::float32 additionalTrauma; // Offset: 108
};

enum class HudScreenType {
    Invalid = 0,
    InGame = 1,
    SystemMenu = 2,
    SettingsMenu = 3,
    InGameMenu = 4,
    Map = 5,
    Journal = 6,
    Character = 7,
    PlayerCrafting = 8,
    Backpack = 9,
    SkillTree = 10,
    FlameAltar = 11,
    AltarUpgrade = 12,
    FlameUpgrade = 13,
    AltarDeactivate = 14,
    SkillRespec = 15,
    LoreReading = 16,
    Signpost = 17,
    ReadOnlyLootChest = 18,
    StorageChest = 19,
    Collection = 20,
    FeedingStation = 21,
    StationBasedCrafting = 22,
    NpcDialog = 23,
    NpcCrafting = 24,
    FactoryCrafting = 25,
    BlueprintSideMenu = 26,
    TerraformingSideMenu = 27,
    NpcSummonerSideMenu = 28,
    UserFeedback = 29,
    TwitchDrops = 30,
    NoUi = 31,
    TechGallery = 32,
    FelixPlayground = 33,
    LukasPlayground = 34,
    NicPlayground = 35,
    YcPlayground = 36,
};

struct actor.OpenUi {
    keen::HudScreenType hudScreen; // Offset: 96
};

struct actor.NegativeFeedbackEvent {
    keen::LocaTagReference messageLocaTag; // Offset: 96
};

enum class ecs.EnemyEventType {
    CallForHelp = 0,
    LaunchProjectiles = 1,
    DestroyProjectiles = 2,
    CalcDashMovement = 3,
    RemoveAttackAttachment = 4,
};

struct actor.EnemyCommandEvent {
    keen::ecs::EnemyEventType eventType; // Offset: 96
};

struct actor.TriggerNoiseEvent {
    keen::float32 range; // Offset: 96
};

enum class ecs.SyncedAttackType {
    Execute = 0,
    SneakExecute = 1,
};

struct actor.SyncAttackEvent {
    keen::ecs::SyncedAttackType type; // Offset: 96
};

struct actor.SyncedSequenceEvent {
    keen::actor::ActorSequenceReference sequence; // Offset: 96
};

struct actor.TriggerKnowledge {
    keen::bool unlockForGroup; // Offset: 96
};

enum class actor.AbilityFlag {
    CanTriggerPrimary = 0,
    CanTriggerSecondary = 1,
    CanRangedCombatShoot = 2,
    CanUseTool = 3,
    CanEvade = 4,
    CanBlock = 5,
    CanUseLongerStunParry = 6,
    CanJump = 7,
    CanTriggerGlider = 8,
    CanInteract = 9,
    CanSprint = 10,
    CanSneak = 11,
    CanSit = 12,
    CanClimb = 13,
    CanExternallyAbortSequence = 14,
    CanAbortSequenceByDeath = 15,
    CanShowHitReaction = 16,
    CanChangeCombatTargetOrHardLockCandidate = 17,
    CanChangeVisceralTarget = 18,
    CanChangeInteractionTarget = 19,
    CanChangeBuildingCursor = 20,
    CanRecharge = 21,
    CanMove = 22,
    CanRotate = 23,
    CanCancel = 24,
};

typedef keen::Bitmask32<keen::actor::AbilityFlag> actor.AbilityMask;

struct actor.MovementFactors {
    keen::float32 forward; // Offset: 0
    keen::float32 backward; // Offset: 4
    keen::float32 lateral; // Offset: 8
};

typedef keen::ObjectReference<keen::skilltree_nodes::Node> skilltree_nodes.NodeReference;

struct actor.DisableAbilityEvent {
    keen::actor::AbilityMask mask; // Offset: 96
    keen::skilltree_nodes::NodeReference overrideSkill; // Offset: 100
};

struct actor.EnableAbilityEvent {
    keen::actor::AbilityMask mask; // Offset: 96
    keen::skilltree_nodes::NodeReference overrideSkill; // Offset: 100
};

struct actor.SetStateEvent {
    keen::actor::StateMask mask; // Offset: 96
};

struct actor.ClearStateEvent {
    keen::actor::StateMask mask; // Offset: 96
};

struct actor.RequestUiCover {
};

struct actor.SetGravityEvent {
    keen::float32 gravityModifier; // Offset: 96
};

struct actor.ResetGravityEvent {
};

struct actor.LerpMovementFactorEvent {
    keen::actor::MovementFactors desiredMovementFactors; // Offset: 96
    keen::Time lerpDuration; // Offset: 112
};

struct actor.LerpRotationFactorEvent {
    keen::float32 desiredRotationSpeedFactor; // Offset: 96
};

struct actor.LerpTransformEvent {
    keen::ecs::LerpTransformTarget lerpTarget; // Offset: 96
    keen::bool lerpPosition; // Offset: 97
    keen::bool lerpOrientation; // Offset: 98
};

struct actor.LerpSubmergeDepthEvent {
    keen::float submergeDelta; // Offset: 96
};

struct actor.StartClimbing {
    keen::bool isLadder; // Offset: 96
    keen::Time lerpDuration; // Offset: 104
};

struct actor.StopClimbing {
    keen::bool isLadder; // Offset: 96
    keen::Time lerpDuration; // Offset: 104
};

struct actor.PlayInstrumentEvent {
};

struct actor.TeleportToTargetEvent {
    keen::ecs::TargetType targetType; // Offset: 96
};

struct actor.PetAnimalEvent {
};

struct actor.UpgradeAnimalEvent {
};

enum class actor.ActionSequenceTrigger {
    Invalid = 0,
    Primary = 1,
    Secondary = 2,
    Tool = 3,
    Evade = 4,
    Block = 5,
    Parry = 6,
    Jump = 7,
    Glider = 8,
    Interact = 9,
    InteractHold = 10,
    Sneak = 11,
    Sit = 12,
    Climb = 13,
    HitReaction = 14,
    Respawn = 15,
    ExternalTrigger = 16,
    Parried = 17,
    ExternalAbortAndOverride = 18,
    Death = 19,
    ParriedOverride = 20,
    ClearAll = 65535,
};

struct actor.SetOpportunity {
    keen::actor::ActionSequenceTrigger triggeredBy; // Offset: 96
    keen::skilltree_nodes::NodeReference requiredSkill; // Offset: 100
    keen::Time followUpTime; // Offset: 120
    keen::Guid eventGuid; // Offset: 128
    keen::bool override; // Offset: 144
};

typedef keen::ObjectReference<keen::ImpactDefinition> ImpactProgramReference;

typedef keen::BlobArray<keen::BlobVariant<keen::impact::ImpactConfig>> impact.Configurations;

struct actor.SetActionOportunity {
    keen::actor::ActorSequenceReference followUp; // Offset: 152
    keen::ImpactProgramReference costImpact; // Offset: 168
    keen::impact::Configurations impactValues; // Offset: 184
};

struct actor.ClearActionOportunity {
    keen::actor::ActionSequenceTrigger triggeredBy; // Offset: 96
};

enum class actor.SpawnEntityTransform {
    Spawner = 0,
    Cursor = 1,
    Crosshair = 2,
    RangedCrosshairOrTowardsCombatTarget = 3,
    Teleport = 4,
    CombatTarget = 5,
    InteractionTarget = 6,
    SafePlayerPosition = 7,
    Unit = 8,
    BetweenCombatTargetAndSpawner = 9,
};

struct actor.RadiusRange {
    keen::float32 minRadius; // Offset: 0
    keen::float32 maxRadius; // Offset: 4
};

struct actor.RandomOrientationOffset {
    keen::Angle minX; // Offset: 0
    keen::Angle maxX; // Offset: 4
    keen::Angle minY; // Offset: 8
    keen::Angle maxY; // Offset: 12
    keen::Angle minZ; // Offset: 16
    keen::Angle maxZ; // Offset: 20
};

struct actor.SpawnEntityBaseEvent {
    keen::skilltree_nodes::NodeReference requiredSkill; // Offset: 96
    keen::ecs::TemplateReference templateReference; // Offset: 112
    keen::actor::SpawnEntityTransform spawnTransform; // Offset: 128
    keen::AttachmentSlot attachmentSlot; // Offset: 129
    keen::AttachmentSlot spawnSlot; // Offset: 130
    keen::ecs::Offset spawnOffset; // Offset: 132
    keen::impact::MajorDirection vfxDirection; // Offset: 172
    keen::ecs::TargetType providedTarget; // Offset: 173
    keen::bool consume; // Offset: 174
    keen::ItemReference onConsumeExchange; // Offset: 176
    keen::bool addWeaponReference; // Offset: 192
    keen::bool despawnAfterSequence; // Offset: 193
    keen::bool endSequenceOnDespawn; // Offset: 194
    keen::bool transferUsedItem; // Offset: 195
    keen::bool copyCustomString; // Offset: 196
    keen::actor::RadiusRange randomSpawnRadius; // Offset: 200
    keen::actor::RandomOrientationOffset randomOrientationOffset; // Offset: 208
    keen::float32 minSpawnRatio; // Offset: 232
    keen::float32 maxSpawnRatio; // Offset: 236
    keen::uint8 minSpawnCount; // Offset: 240
    keen::uint8 maxSpawnCount; // Offset: 241
    keen::bool breakImpactHierarchy; // Offset: 242
    keen::bool ignoreSpawnVelocity; // Offset: 243
    keen::float3 spawnVelocity; // Offset: 244
    keen::bool applyRandomLoot; // Offset: 256
    keen::bool copyCombatAttributes; // Offset: 257
    keen::float32 chance; // Offset: 260
};

struct actor.RefillBurner {
};

struct actor.SpawnEntityEvent {
    keen::bool isProjectile; // Offset: 264
    keen::bool clearProjectiles; // Offset: 265
};

struct actor.TriggerMartyrSkills {
};

struct actor.SpawnEntityPerAggroTargetEvent {
    keen::actor::StateMask excludedTargetStates; // Offset: 264
    keen::bool isProjectile; // Offset: 272
    keen::bool clearProjectiles; // Offset: 273
    keen::bool onlyPlayerTargets; // Offset: 274
    keen::actor::RadiusRange randomPerTargetSpawnRadius; // Offset: 276
    keen::uint8 maxTargets; // Offset: 284
};

struct impact.DamageDistribution {
    keen::float32 physicalCutDamage; // Offset: 0
    keen::float32 physicalPierceDamage; // Offset: 4
    keen::float32 physicalBluntDamage; // Offset: 8
    keen::float32 magicalFireDamage; // Offset: 12
    keen::float32 magicalIceDamage; // Offset: 16
    keen::float32 magicalFogDamage; // Offset: 20
    keen::float32 magicalLightningDamage; // Offset: 24
    keen::float32 healing; // Offset: 28
    keen::float32 poisonDamage; // Offset: 32
    keen::uint32 woodDamage; // Offset: 36
    keen::uint32 stoneDamage; // Offset: 40
    keen::uint32 metalDamage; // Offset: 44
    keen::uint32 explosionDamage; // Offset: 48
};

struct actor.SpawnImpact {
    keen::ImpactProgramReference impact; // Offset: 264
    keen::Guid eventGuid; // Offset: 280
    keen::impact::DamageDistribution damageDistribution; // Offset: 296
    keen::ecs::ColliderResourceData colliderData; // Offset: 348
    keen::impact::Configurations impactValues; // Offset: 368
    keen::bool damageDistributionIsSet; // Offset: 376
};

typedef keen::ObjectReference<keen::BuffType> BuffTypeReference;

struct actor.ApplyBuffEvent {
    keen::BuffTypeReference buffTypeOverride; // Offset: 96
    keen::bool consume; // Offset: 112
    keen::impact::Configurations impactValues; // Offset: 116
    keen::impact::DamageDistribution damageDistribution; // Offset: 124
    keen::bool damageDistributionIsSet; // Offset: 176
};

struct actor.PlaceVoxelObjectEvent {
    keen::bool subtract; // Offset: 96
    keen::bool consume; // Offset: 97
};

struct Matrix33 {
    keen::Vector3 x; // Offset: 0
    keen::Vector3 y; // Offset: 16
    keen::Vector3 z; // Offset: 32
};

struct Matrix43 {
    keen::Matrix33 rot; // Offset: 0
    keen::Vector3 pos; // Offset: 48
};

struct actor.DetachEntityEvent {
    keen::Vector3 force; // Offset: 96
    keen::Vector3 randomAngleByAxis; // Offset: 112
    keen::Matrix43 launchTransform; // Offset: 128
    keen::bool addGravity; // Offset: 192
};

struct actor.DetachProjectileEntityEvent {
};

struct actor.SetTriggerStateEvent {
    keen::SignalReference trigger; // Offset: 96
    keen::bool state; // Offset: 112
};

struct actor.ShowAmmunition {
};

struct actor.SetVisualAmmunition {
};

struct actor.ResetVisualAmmunition {
};

struct actor.StartCookEvent {
};

struct actor.SpawnCookEntitesEvent {
};

struct actor.ActivateCombatStanceEvent {
};

typedef keen::ObjectReference<keen::ecs::DefaultInventorySetup> ecs.DefaultInventoryReference;

struct actor.TransformToLootEvent {
    keen::ecs::DefaultInventoryReference defaultInventory; // Offset: 96
    keen::bool keepDefaultInventory; // Offset: 112
    keen::uint8 genericSlotCount; // Offset: 113
    keen::uint8 availableSlotCount; // Offset: 114
    keen::actor::ActorSequenceReference defaultAction; // Offset: 116
    keen::LocaTagReference verbLoca; // Offset: 132
    keen::ecs::Offset vfxOnSpawnOffset; // Offset: 148
    keen::VfxReference vfxOnSpawn; // Offset: 188
    keen::VfxUserEffectParameterDataBlock vfxParameters; // Offset: 204
    keen::uint32 lootHealth; // Offset: 268
};

struct actor.AcceptInteractionEvent {
};

enum class actor.VoxelChangeType {
    Invalid = 0,
    Add = 1,
    Flatten = 2,
    HorizontalFlatten = 3,
    Undo = 4,
};

struct actor.ChangeVoxel {
    keen::actor::VoxelChangeType changeType; // Offset: 96
};

struct actor.Dismantle {
};

typedef keen::HashKey32 NpcId;

struct actor.AssignNpc {
    keen::NpcId npcId; // Offset: 96
};

struct actor.TameWildlifeEvent {
};

struct actor.RotationInterpolation {
    keen::Quaternion startOrientation; // Offset: 0
    keen::Quaternion targetOrientation; // Offset: 16
    keen::float3 linearRotationAxis; // Offset: 32
    keen::float32 speed; // Offset: 44
    keen::actor::InterpolationMode interpolationMode; // Offset: 48
};

struct actor.RotationData {
    keen::Time startTime; // Offset: 0
    keen::Quaternion targetOrientation; // Offset: 8
    keen::Time snapDuration; // Offset: 24
};

typedef keen::HashKey32 actor.SequenceResourceId;

struct actor.SequenceRuntimeId {
    keen::actor::SequenceResourceId sequenceId; // Offset: 0
    keen::Time triggerTime; // Offset: 8
    keen::ecs::EntityId actorEntityId; // Offset: 16
    keen::uint8 callIndex; // Offset: 20
};

typedef keen::uint8 InventorySlotIndex;

struct InventorySlotId {
    keen::ecs::EntityId entityId; // Offset: 0
    keen::InventorySlotIndex slotIndex; // Offset: 4
};

enum class ItemStateFlag {
    Broken = 0,
    DurabilityInitialized = 1,
    ContinuousDurabilityLoss = 2,
    IsEquipped = 3,
    HasLevel = 4,
    HasDamage = 5,
    IsNew = 6,
    HasContinuousDurability = 7,
};

typedef keen::Bitmask8<keen::ItemStateFlag> ItemStateMask;

struct ItemInstanceInfo {
    keen::InventorySlotId slotId; // Offset: 0
    keen::ItemId itemId; // Offset: 8
    keen::ecs::EntityId pide; // Offset: 12
    keen::ItemStateMask stateMask; // Offset: 16
};

typedef keen::HashKey32 SongId;

typedef keen::HashKey32 KnowledgeId;

struct actor.ActionSequenceTriggerContext {
    keen::actor::SequenceRuntimeId sequenceRuntimeId; // Offset: 0
    keen::actor::ActionSequenceTrigger triggerType; // Offset: 24
    keen::ItemInstanceInfo costItem; // Offset: 28
    keen::ItemInstanceInfo usedItem; // Offset: 48
    keen::ItemInstanceInfo usedAmmunition; // Offset: 68
    keen::actor::JumpType jumpType; // Offset: 88
    keen::float3 directionOverride; // Offset: 92
    keen::SongId songId; // Offset: 104
    keen::Time startTime; // Offset: 112
    keen::ecs::EntityId interactionHostId; // Offset: 120
    keen::uint32 interactionOfferId; // Offset: 124
    keen::StaticArray<keen::KnowledgeId,8> unlockKnowledgeIds; // Offset: 128
    keen::StaticArray<keen::ecs::EntityTagReferenceEntry,4> entityTags; // Offset: 160
};

typedef keen::HashKey32 SkillNodeId;

struct actor.FollowUp {
    keen::actor::ActionSequenceTriggerContext context; // Offset: 0
    keen::actor::SequenceResourceId originalEventSequence; // Offset: 224
    keen::Guid eventGuid; // Offset: 228
    keen::Time localExecutionTime; // Offset: 248
    keen::SkillNodeId requiredSkill; // Offset: 256
    keen::ImpactProgramReference costImpact; // Offset: 260
    keen::bool wasTriggered; // Offset: 276
};

enum class actor.ActionSequenceFlags {
    IsActive = 0,
    IsInScope = 1,
    IsInScopeLoop = 2,
    RetriggerAnimation = 3,
    AbortViaMovement = 4,
    SelfDestruct = 5,
};

typedef keen::Bitmask8<keen::actor::ActionSequenceFlags> actor.ActionSequenceState;

struct actor.ActionSequenceSpan {
    keen::Time startTime; // Offset: 0
    keen::Time endTime; // Offset: 8
};

struct actor.ColliderModeData {
    keen::ecs::ColliderMode mode; // Offset: 0
    keen::Time endTime; // Offset: 8
};

struct actor.ActionSequencePlaybackContext {
    keen::Time playedTime; // Offset: 0
    keen::Time currentTime; // Offset: 8
    keen::Time sequenceLength; // Offset: 16
    keen::Time scopeStartTime; // Offset: 24
    keen::Time scopeEndTime; // Offset: 32
    keen::actor::StateMask scopeAbortMask; // Offset: 40
    keen::actor::StateMask scopeKeepAliveMask; // Offset: 48
    keen::bool scopeJumpToScopeEndOnAbort; // Offset: 56
    keen::actor::ActionSequenceState state; // Offset: 57
    keen::StaticArray<keen::actor::ActionSequenceSpan,2> playbackSpan; // Offset: 64
    keen::StaticArray<keen::actor::FollowUp,6> followUps; // Offset: 96
    keen::actor::AbilityMask abilityMask; // Offset: 1776
    keen::actor::StateMask setStateMask; // Offset: 1784
    keen::actor::StateMask unsetStateMask; // Offset: 1792
    keen::actor::StateMask sequenceAbortMask; // Offset: 1800
    keen::actor::StateMask sequenceKeepAliveMask; // Offset: 1808
    keen::bool wrapedAround; // Offset: 1816
};

struct actor.SignalStates {
    keen::StaticArray<keen::Guid,8> activeSignals; // Offset: 0
};

struct actor.ActionSequence {
    keen::actor::ActionSequenceTriggerContext triggerContext; // Offset: 0
    keen::actor::ActionSequencePlaybackContext playbackContext; // Offset: 224
};

struct actor.PlaceItemEvent {
};

struct actor.SetAttackChainVariationEvent {
    keen::ecs::EntityTagReference followUpSequenceTag; // Offset: 96
};

struct PreviewAnimGraph2 {
    keen::ObjectReference<keen::anim_graph::tool_graph::AnimationGraph2_0> animGraphId; // Offset: 0
    keen::bool useFemaleAnimation; // Offset: 16
};

struct ActorActionContainer {
    keen::ObjectReference<keen::AnimationGraph> previewAnimationGraph; // Offset: 0
    keen::PreviewAnimGraph2 previewAnimationGraph2Info; // Offset: 16
};

struct ActorActionContainerRoot {
};

typedef keen::ObjectReference<keen::actor::ActorSequenceResource> ActorSequenceResourceReference;

struct ActorSequenceCollectionResource {
    keen::BlobArray<keen::ActorSequenceResourceReference> sequences; // Offset: 0
};

enum class AmmunitionType {
    Invalid = 0,
    Arrow = 1,
    Spell = 2,
    Count = 2,
};

enum class animal.Needs {
    Shelter = 0,
    Sleep = 1,
    Food = 2,
};

typedef keen::Bitmask8<keen::animal::Needs> animal.NeedsMask;

enum class animal.InteractionState {
    IsTurning = 0,
    IsCloseToPlayer = 1,
    IsPlayingPetSequence = 2,
};

typedef keen::Bitmask8<keen::animal::InteractionState> animal.InteractionStates;

enum class animal.TargetSearchState {
    TargetReached = 0,
    NotTryingThisState = 1,
};

typedef keen::Bitmask8<keen::animal::TargetSearchState> animal.TargetSearchStates;

enum class animal.State {
    Invalid = 0,
    Init = 1,
    Start = 2,
    Idle = 3,
    Roam = 4,
    Sitting = 5,
    Sleep = 6,
    Eating = 7,
    Interested = 8,
    GreetPlayer = 9,
    FinishTask = 10,
};

enum class animal.StateCondition {
    IsFinished = 0,
    HasFailed = 1,
    WantsToRoam = 2,
    WantsToSit = 3,
    WantsToEat = 4,
    WantsToSleep = 5,
    WantsToGreet = 6,
    WantsToIdle = 7,
    IsInterested = 8,
};

enum class animal.Type {
    None = 0,
    FarmAnimal = 1,
    Bunny = 2,
    Catdeer = 3,
    Goat = 4,
    SandDigger = 5,
    Turkey = 6,
    Yak = 7,
    Pet = 8,
    Cat = 9,
    Dog = 10,
};

typedef keen::Bitmask16<keen::animal::Type> animal.TypeMask;

struct animal.IdleSequenceSetup {
    keen::Time minSequenceCooldown; // Offset: 0
    keen::Time maxSequenceCooldown; // Offset: 8
};

struct animal.DecisionSetup {
    keen::float idleWeight; // Offset: 0
    keen::float inspectWeight; // Offset: 4
    keen::float sitWeight; // Offset: 8
    keen::float greetWeight; // Offset: 12
    keen::float roamWeight; // Offset: 16
};

struct animal.IdleSetup {
    keen::Time minDuration; // Offset: 0
    keen::Time maxDuration; // Offset: 8
    keen::float32 sequenceChance; // Offset: 16
};

struct animal.SearchTargetSetup {
    keen::float32 targetRadius; // Offset: 0
    keen::float32 bedRadius; // Offset: 4
};

struct animal.TargetSetup {
    keen::bool isBed; // Offset: 0
    keen::bool isFood; // Offset: 1
    keen::bool isInteresting; // Offset: 2
};

struct animal.HungerSetup {
    keen::Time timeUntilHungerMinDuration; // Offset: 0
    keen::Time timeUntilHungerMaxDuration; // Offset: 8
    keen::Time foodConsumptionRate; // Offset: 16
};

struct animal.ReproductionSetup {
    keen::float32 maxReproductionDistance; // Offset: 0
    keen::float32 baseReproductionChance; // Offset: 4
    keen::Time reproductionRate; // Offset: 8
};

enum class animal.AnimalQueryStatus {
    Idle = 0,
    Requested = 1,
    WaitForResult = 2,
    Canceled = 3,
};

struct animal.RangeQueryInfo {
    keen::animal::AnimalQueryStatus status; // Offset: 0
    keen::ecs::RangeQueryId queryId; // Offset: 4
};

struct animal.PathQueryInfo {
    keen::animal::AnimalQueryStatus status; // Offset: 0
    keen::ecs::PathQueryId queryId; // Offset: 4
};

enum class animal.ReproductionQueryState {
    Idle = 0,
    RangeQueries = 1,
    PathQueries = 2,
    Canceled = 3,
};

struct animal.ReproductionState {
    keen::bool requirementsFulfilled; // Offset: 0
    keen::animal::ReproductionQueryState queryState; // Offset: 1
    keen::ecs::EntityId closestFreeBedId; // Offset: 4
    keen::ecs::EntityId closestOtherAnimalId; // Offset: 8
    keen::animal::RangeQueryInfo animalQuery; // Offset: 12
    keen::animal::RangeQueryInfo bedQuery; // Offset: 20
    keen::animal::PathQueryInfo animalPathQuery; // Offset: 28
    keen::animal::PathQueryInfo bedPathQuery; // Offset: 36
};

struct animal.HungerState {
    keen::StaticArray<keen::ecs::EntityId,8> foodTargets; // Offset: 0
    keen::animal::RangeQueryInfo foodSourceQueryInfo; // Offset: 32
    keen::animal::PathQueryInfo pathfindingQuery; // Offset: 40
    keen::uint8 currentPathfindingIndex; // Offset: 48
};

struct active_npc.RoamingSetup {
    keen::float32 minDistanceToCurrentPosition; // Offset: 0
    keen::float32 maxRadiusFromSpawn; // Offset: 4
    keen::ecs::PathNodeRequirements targetNodeRequirements; // Offset: 8
};

struct active_npc.MovementSetup {
    keen::float32 maxMovementAngleDefault; // Offset: 0
    keen::float32 maxMovementAngleRoaming; // Offset: 4
};

struct active_npc.SleepSetup {
    keen::FloatRange sleepTime; // Offset: 0
    keen::FloatRange wakeUpTime; // Offset: 8
};

struct active_npc.PathNodeSetup {
    keen::ecs::PathNodeCostFactors defaultCostFactors; // Offset: 0
    keen::ecs::PathNodeCostFactors roamingCostFactors; // Offset: 52
};

struct ecs.Animal {
    keen::actor::TurnSetup turnSetup; // Offset: 0
    keen::actor::ActorSequenceReference sitSequence; // Offset: 72
    keen::actor::ActorSequenceReference sleepSequence; // Offset: 88
    keen::actor::ActorSequenceReference inspectSequence; // Offset: 104
    keen::actor::ActorSequenceReference beingPetSequence; // Offset: 120
    keen::actor::ActorSequenceReference eatingSequence; // Offset: 136
    keen::actor::ActorSequenceReference sadIdleSequence; // Offset: 152
    keen::actor::ActorSequenceReference greetSequence; // Offset: 168
    keen::float32 minDistanceToPlayer; // Offset: 184
    keen::animal::Type type; // Offset: 188
    keen::animal::DecisionSetup decisionSetup; // Offset: 192
    keen::animal::IdleSetup idleSetup; // Offset: 216
    keen::active_npc::RoamingSetup roamingSetup; // Offset: 240
    keen::active_npc::MovementSetup movementSetup; // Offset: 252
    keen::active_npc::SleepSetup sleepSetup; // Offset: 260
    keen::animal::SearchTargetSetup searchTargetSetup; // Offset: 276
    keen::active_npc::PathNodeSetup pathNodeSetup; // Offset: 284
    keen::animal::HungerSetup hungerSetup; // Offset: 392
    keen::animal::ReproductionSetup reproductionSetup; // Offset: 416
    keen::ecs::TemplateReference babyAnimalVersion; // Offset: 432
    keen::actor::ActorSequenceReference defaultInteractionSequence; // Offset: 448
    keen::LocaTagReference defaultInteractionVerbLoca; // Offset: 464
};

struct ecs.DynamicAnimal {
    keen::animal::State state; // Offset: 0
    keen::animal::State previousState; // Offset: 1
    keen::Time standingNextToPlayerTimer; // Offset: 8
    keen::animal::TargetSearchStates targetSearchStates; // Offset: 16
    keen::ecs::EntityId beingPetByPlayerId; // Offset: 20
    keen::ecs::RangeQueryId queryId; // Offset: 24
    keen::animal::ReproductionState reproductionState; // Offset: 28
    keen::Time timeUntilHungry; // Offset: 72
    keen::Time eatingCooldown; // Offset: 80
    keen::animal::HungerState hungerState; // Offset: 88
    keen::bool bedSearched; // Offset: 140
};

struct ecs.NetworkAnimal {
    keen::animal::NeedsMask needs; // Offset: 0
};

struct ecs.AnimalSaved {
    keen::float3 spawnPosition; // Offset: 0
    keen::Time lastFoodConsumptionTime; // Offset: 16
    keen::Time lastValidReproduction; // Offset: 24
    keen::bool willConsumeFood; // Offset: 32
    keen::Time nextReproductionCheck; // Offset: 40
    keen::animal::NeedsMask needs; // Offset: 48
};

struct ecs.AnimalTarget {
    keen::animal::TargetSetup setup; // Offset: 0
    keen::animal::TypeMask types; // Offset: 4
    keen::ecs::Offset targetOffset; // Offset: 8
};

struct ecs.DynamicAnimalTarget {
    keen::ecs::EntityId associatedAnimal; // Offset: 0
};

struct ecs.BabyAnimal {
    keen::Time growTime; // Offset: 0
    keen::ecs::TemplateReference grownUpEntity; // Offset: 8
    keen::Time growUpTimer; // Offset: 24
    keen::bool canGrowUp; // Offset: 32
};

enum class ecs.AttributeFlags {
    Initialized = 0,
    Break_OnWrite = 1,
};

struct ecs.AttributeComponent {
    keen::HashKey32 rootId; // Offset: 0
    keen::HashKey32 signature; // Offset: 4
    keen::uint32 storageOffset; // Offset: 8
    keen::uint32 storageSize; // Offset: 12
    keen::Bitmask16<keen::ecs::AttributeFlags> flags; // Offset: 16
};

struct ecs.FloatAttribute {
};

struct ecs.UInt32Attribute {
};

struct ecs.SInt32Attribute {
};

struct ecs.BoolAttribute {
};

struct ecs.DurabilityLoad {
    keen::float32 percentage; // Offset: 0
};

struct ecs.DurabilityBurndown {
    keen::Time lastUpdate; // Offset: 0
};

enum class impact.AttributeType {
    Invalid = 0,
    Bool = 1,
    Sint32 = 2,
    Uint32 = 3,
    Float32 = 4,
};

struct impact.AttributeDeclerationBase {
    keen::BlobString formula; // Offset: 0
};

struct impact.AttributeDecleration {
    keen::impact::AttributeType type; // Offset: 8
};

typedef keen::uint16 impact.AttributeIndex;

struct AttributeContainer {
};

typedef keen::uint32 AttributeCommand;

enum class AttributeOps {
    Invalid = 0,
    Load0 = 1,
    Load = 2,
    LoadRef = 3,
    Store = 4,
    Push = 5,
    Add = 6,
    Substract = 7,
    Multiply = 8,
    Divide = 9,
    Pow = 10,
    MulPercentage = 11,
    Clamp = 12,
    ScaleToNewMax = 13,
    Min = 14,
    Max = 15,
    And = 16,
    Or = 17,
    Not = 18,
    NAnd = 19,
    Halt = 20,
};

struct AttributeStructure {
    keen::impact::AttributeIndex parentIndex; // Offset: 0
    keen::impact::AttributeIndex childIndex; // Offset: 2
    keen::impact::AttributeIndex siblingIndex; // Offset: 4
    keen::BlobArray<keen::AttributeCommand> calculation; // Offset: 8
};

struct BaseAttributeResource {
    keen::HashKey32 type; // Offset: 0
    keen::BlobArray<keen::HashKey32> ids; // Offset: 4
    keen::BlobArray<keen::AttributeStructure> structure; // Offset: 12
    keen::BlobArray<keen::string> debugNames; // Offset: 20
};

struct AttributeContainerResource {
    keen::BlobArray<keen::BaseAttributeResource> attributes; // Offset: 0
};

typedef keen::ObjectReference<keen::impact::AttributeDecleration> AttributeRootReference;

typedef keen::ObjectReference<keen::impact::AttributeDeclerationBase> AttributeReference;

struct AttributeValueBase {
    keen::AttributeReference id; // Offset: 0
};

struct FloatAttributeValue {
    keen::float32 value; // Offset: 16
};

struct SInt32AttributeValue {
    keen::sint32 value; // Offset: 16
};

struct UInt32AttributeValue {
    keen::uint32 value; // Offset: 16
};

struct BoolAttributeValue {
    keen::bool value; // Offset: 16
};

struct BalancingAltarCount {
    keen::uint8 flameLevel; // Offset: 0
    keen::uint8 altarCount; // Offset: 1
};

struct BalancingBuildzoneSize {
    keen::uint8 altarLevel; // Offset: 0
    keen::float3 buildzoneSize; // Offset: 4
};

enum class ExperienceSourceType {
    None = 0,
    Exploration = 1,
    Lore = 2,
    Quest = 3,
    Combat = 4,
    Mining = 5,
};

struct ExperienceBalancing {
    keen::ExperienceSourceType source; // Offset: 0
};

struct ExperienceBalanceValue {
    keen::ExperienceSourceType source; // Offset: 0
    keen::HashKey32 experienceValueId; // Offset: 4
    keen::uint32 experienceGain; // Offset: 8
};

struct RandomSpawnerBalancing {
    keen::float32 fewAmountFactor; // Offset: 0
    keen::float32 manyAmountFactor; // Offset: 4
    keen::float32 extremeAmountFactor; // Offset: 8
};

struct AggroPoolThresholdBalancing {
    keen::uint32 twoPoolsThreshold; // Offset: 0
    keen::uint32 threePoolsThreshold; // Offset: 4
    keen::uint32 maxPoolsThreshold; // Offset: 8
};

struct AggroPoolBalancing {
    keen::AggroPoolThresholdBalancing fewThresholds; // Offset: 0
    keen::AggroPoolThresholdBalancing normalThresholds; // Offset: 12
    keen::AggroPoolThresholdBalancing manyThresholds; // Offset: 24
    keen::AggroPoolThresholdBalancing extremeThresholds; // Offset: 36
};

struct BalancingTable {
    keen::uint32 genericWeaponSeed; // Offset: 0
    keen::uint32 flameLevelMax; // Offset: 4
    keen::uint32 altarLevelMax; // Offset: 8
    keen::uint32 playerLevelMax; // Offset: 12
    keen::uint32 playerLevelCap; // Offset: 16
    keen::uint32 itemLevelCap; // Offset: 20
    keen::float32 damageBoostFlame; // Offset: 24
    keen::uint32 apPerFlameLevel; // Offset: 28
    keen::float32 critBonus; // Offset: 32
    keen::float32 baseCritChance; // Offset: 36
    keen::float32 powerCreepWeapon; // Offset: 40
    keen::uint32 htkStartPve; // Offset: 44
    keen::uint32 htkEndPve; // Offset: 48
    keen::float32 damageMod2Handed; // Offset: 52
    keen::uint32 playerBaseHealth; // Offset: 56
    keen::uint32 playerHealthPerAP; // Offset: 60
    keen::uint32 playerBaseMana; // Offset: 64
    keen::uint32 playerManaPerAP; // Offset: 68
    keen::uint32 playerBaseStamina; // Offset: 72
    keen::uint32 playerStaminaPerAP; // Offset: 76
    keen::uint32 playerBaseBodyHeat; // Offset: 80
    keen::float32 freezeDurationFactor; // Offset: 84
    keen::float32 freezeDurationOffset; // Offset: 88
    keen::uint32 disableFreezingBaseLevel; // Offset: 92
    keen::uint32 playerBaseFogResistance; // Offset: 96
    keen::uint32 playerFogResistancePerFlameLevel; // Offset: 100
    keen::uint32 htkStartEvp; // Offset: 104
    keen::uint32 htkEndEvp; // Offset: 108
    keen::uint32 killToLevelUPStart; // Offset: 112
    keen::uint32 killToLevelUPEnd; // Offset: 116
    keen::float32 epicWeaponBonus; // Offset: 120
    keen::uint32 xpNeededFromKnowledge; // Offset: 124
    keen::float32 parryToDepletion; // Offset: 128
    keen::uint32 shotsToDepletion; // Offset: 132
    keen::uint32 avarageCharacterMod; // Offset: 136
    keen::ObjectReference<keen::GameKnowledgeDirectory> knowledgeDirectory; // Offset: 140
    keen::float32 levelDifferenceXpDamper; // Offset: 156
    keen::float32 levelDifferenceXpModMin; // Offset: 160
    keen::float32 levelDifferenceXpModMax; // Offset: 164
    keen::float32 groupSizeXpDamper; // Offset: 168
    keen::float32 groupSizeXpDamperModMin; // Offset: 172
    keen::uint32 skillPointsPerLevel; // Offset: 176
    keen::uint32 maximumTotalMusicComfortBuff; // Offset: 180
    keen::uint32 maximumInstrumentsCountedForComfort; // Offset: 184
    keen::Time timePerInstrumentUntilMaxBuff; // Offset: 192
    keen::float32 defaultArmorBlowthrough; // Offset: 200
    keen::float32 damageScalePerAttributePoint; // Offset: 204
    keen::uint32 xpSeedEnemy; // Offset: 208
    keen::float32 xpSharedOther; // Offset: 212
    keen::float32 perkPower; // Offset: 216
    keen::uint32 perkUpgradeCostSeed; // Offset: 220
    keen::float32 perkCostCreep; // Offset: 224
    keen::uint32 trashStart; // Offset: 228
    keen::uint32 trashEnd; // Offset: 232
    keen::float noiseRainFactor; // Offset: 236
    keen::float buffReapplyPercentage; // Offset: 240
    keen::RandomSpawnerBalancing randomSpawnerBalancing; // Offset: 244
    keen::AggroPoolBalancing aggroPoolBalancing; // Offset: 256
    keen::uint32 maximumAnimalsInWorld; // Offset: 304
    keen::float hookShotCostLevelFactor; // Offset: 308
    keen::uint32 hookShotCostBase; // Offset: 312
    keen::BlobArray<keen::uint8> altarsPerFlameLevel; // Offset: 316
    keen::BlobArray<keen::float3> buildzoneSizesPerAltarLevel; // Offset: 324
    keen::BlobArray<keen::ExperienceBalanceValue> experienceValues; // Offset: 332
};

enum class BalancingLocaIds {
    HealthPerAP = 0,
    ManaPerAP = 1,
    StaminaPerAP = 2,
};

enum class BuffSlotType {
    Food = 0,
    Buff = 1,
    Debuff = 2,
    Rested = 3,
    TerrainDebuff = 4,
};

enum class BuffApplyType {
    Invalid = 0,
    ResetTime = 1,
    ReplaceAtEnd = 2,
    Replace = 3,
};

struct OnCreateHelper {
    keen::AttachmentSlot slot; // Offset: 0
    keen::ecs::Offset offset; // Offset: 4
    keen::bool attach; // Offset: 44
    keen::SoundContainerReference sfx; // Offset: 48
    keen::VfxReference vfx; // Offset: 64
    keen::bool onlyPlayer; // Offset: 80
    keen::NotifierReference notifier; // Offset: 84
};

struct WhileAppliedHelper {
    keen::AttachmentSlot slot; // Offset: 0
    keen::ecs::Offset offset; // Offset: 4
    keen::SoundContainerReference sfx; // Offset: 44
    keen::VfxReference vfx; // Offset: 60
    keen::VfxUserEffectParameterDataBlock parameters; // Offset: 76
};

typedef keen::HashKey32 BuffTypeId;

struct UiTextureResource {
    keen::PixelFormat format; // Offset: 0
    keen::uint2 size; // Offset: 4
    keen::uint8 levelCount; // Offset: 12
    keen::ContentHash data; // Offset: 16
};

typedef keen::ObjectReference<keen::Image> ImageReference;

struct UiTexture {
    keen::UiTextureResource texture; // Offset: 0
    keen::ImageReference image; // Offset: 32
};

enum class FactionType {
    Environment = 0,
    HitAll = 1,
    Fogger = 2,
    Vukah = 3,
    Scavenger = 4,
    Wildlife = 5,
    WildBeast = 6,
    Player = 7,
    AutomatedPlayer = 8,
    HitOthers = 9,
    Skeleton = 10,
    PlayerAlly = 11,
    FarmAnimal = 12,
    Cyclops = 13,
};

typedef keen::Bitmask16<keen::FactionType> FactionMask;

struct BuffType {
    keen::BuffTypeId buffTypeId; // Offset: 0
    keen::BuffSlotType slot; // Offset: 4
    keen::BuffApplyType applyType; // Offset: 5
    keen::Time defaultLifeTime; // Offset: 8
    keen::NameLocaTag name; // Offset: 16
    keen::DescriptionLocaTag description; // Offset: 32
    keen::bool hideInUi; // Offset: 48
    keen::UiTexture icon; // Offset: 52
    keen::bool hideDurationInUi; // Offset: 100
    keen::bool despawnOnDeath; // Offset: 101
    keen::ImpactProgramReference impact; // Offset: 104
    keen::FactionMask factionExcludeMask; // Offset: 120
    keen::impact::Configurations impactValues; // Offset: 124
    keen::BlobArray<keen::ImpactUiValue> uiValues; // Offset: 132
    keen::OnCreateHelper onCreate; // Offset: 140
    keen::WhileAppliedHelper whileApplied; // Offset: 240
};

struct BuffTypeSubDirectory {
};

struct BuffTypDirectory {
};

struct ecs.BuffInstance {
    keen::ecs::EntityId buffEntityId; // Offset: 0
    keen::BuffTypeId typeId; // Offset: 4
    keen::bool cleansed; // Offset: 8
};

struct ecs.BuffContainer {
    keen::StaticArray<keen::ecs::BuffInstance,4> foodBuffs; // Offset: 0
    keen::StaticArray<keen::ecs::BuffInstance,16> genericBuffs; // Offset: 48
    keen::StaticArray<keen::ecs::BuffInstance,16> genericDebuffs; // Offset: 240
    keen::StaticArray<keen::ecs::BuffInstance,1> restedBuff; // Offset: 432
    keen::StaticArray<keen::ecs::BuffInstance,1> terrainDebuff; // Offset: 444
    keen::Time hungerStartTime; // Offset: 456
    keen::bool extendedFoodBuffSlots; // Offset: 464
};

struct impact.DamageSetup {
    keen::float32 physicalCutDamage; // Offset: 0
    keen::float32 physicalPierceDamage; // Offset: 4
    keen::float32 physicalBluntDamage; // Offset: 8
    keen::float32 magicalFireDamage; // Offset: 12
    keen::float32 magicalIceDamage; // Offset: 16
    keen::float32 magicalFogDamage; // Offset: 20
    keen::float32 magicalLightningDamage; // Offset: 24
    keen::float32 healing; // Offset: 28
    keen::float32 poisonDamage; // Offset: 32
    keen::sint32 woodDamage; // Offset: 36
    keen::sint32 stoneDamage; // Offset: 40
    keen::sint32 metalDamage; // Offset: 44
    keen::sint32 explosionDamage; // Offset: 48
};

struct ecs.BuffComponent {
    keen::BuffTypeId buffTypeId; // Offset: 0
    keen::impact::DamageSetup damageSetup; // Offset: 4
    keen::bool isDamageSetupSet; // Offset: 56
};

struct ecs.BuffNetworkData {
    keen::Time restDuration; // Offset: 0
    keen::BuffTypeId buffTypeId; // Offset: 8
    keen::float32 durationPercentage; // Offset: 12
};

struct UiTexturePreload {
    keen::BlobArray<keen::UiTexture> textures; // Offset: 0
};

struct BuffTypeCollectionResource {
    keen::BlobArray<keen::BuffTypeReference> buffs; // Offset: 0
    keen::UiTexturePreload uiTextures; // Offset: 8
};

enum class InhibitBuildingCheck {
    None = 0,
    Lenient = 1,
    Strict = 2,
};

enum class InhibitBuildType {
    Lenient = 0,
    Strict = 1,
};

typedef keen::Bitmask8<keen::InhibitBuildType> InhibitBuildMask;

enum class Gender {
    Female = 0,
    Male = 1,
};

typedef keen::ObjectReference<keen::VoicePack> VoicePackReference;

typedef keen::ObjectReference<keen::ColorPreset> ColorPresetReference;

struct CharacterPreset {
    keen::Gender gender; // Offset: 0
    keen::VoicePackReference voicePackId; // Offset: 4
    keen::ColorPresetReference hairGradient; // Offset: 20
    keen::ColorPresetReference beardGradient; // Offset: 36
    keen::PaletteColorReference skinColor; // Offset: 52
    keen::PaletteColorReference eyeBrowColor; // Offset: 68
    keen::PaletteColorReference eyeColor; // Offset: 84
    keen::ItemReference head; // Offset: 100
    keen::ItemReference hair; // Offset: 116
    keen::ItemReference beard; // Offset: 132
    keen::ItemReference neck; // Offset: 148
    keen::ItemReference collar; // Offset: 164
    keen::ItemReference chest; // Offset: 180
    keen::ItemReference waist; // Offset: 196
    keen::ItemReference crotch; // Offset: 212
    keen::ItemReference upperArms; // Offset: 228
    keen::ItemReference lowerArms; // Offset: 244
    keen::ItemReference hands; // Offset: 260
    keen::ItemReference upperLegs; // Offset: 276
    keen::ItemReference lowerLegs; // Offset: 292
    keen::ItemReference feet; // Offset: 308
    keen::ItemReference armourHead; // Offset: 324
    keen::ItemReference armourUpperBody; // Offset: 340
    keen::ItemReference armourArms; // Offset: 356
    keen::ItemReference armourLowerBody; // Offset: 372
    keen::ItemReference armourFeet; // Offset: 388
};

typedef keen::ObjectReference<keen::ColorGradient> ColorGradientReference;

struct ColorPreset {
    keen::ColorGradientReference colorGradient; // Offset: 0
};

typedef keen::HashKey32 ColorPresetId;

struct ColorPresetResource {
    keen::ColorPresetId presetId; // Offset: 0
    keen::ObjectReference<keen::RenderGradientMapResource> colorGradient; // Offset: 4
};

struct CharacterPresetSubDirectory {
};

struct CharacterPresetDirectory {
};

typedef keen::ObjectReference<keen::CharacterPresetDirectory> CharacterPresetCollectionReference;

typedef keen::HashKey32 CharacterPresetId;

typedef keen::HashKey32 VoicePackId;

struct CharacterPresetResource {
    keen::CharacterPreset references; // Offset: 0
    keen::CharacterPresetId presetId; // Offset: 404
    keen::Gender gender; // Offset: 408
    keen::VoicePackId voicePackId; // Offset: 412
    keen::ColorPresetId hairColorId; // Offset: 416
    keen::ColorPresetId beardColorId; // Offset: 420
    keen::PaletteColorId skinColor; // Offset: 424
    keen::PaletteColorId eyeBrowColor; // Offset: 428
    keen::PaletteColorId eyeColor; // Offset: 432
    keen::ItemId head; // Offset: 436
    keen::ItemId hair; // Offset: 440
    keen::ItemId beard; // Offset: 444
    keen::ItemId neck; // Offset: 448
    keen::ItemId collar; // Offset: 452
    keen::ItemId chest; // Offset: 456
    keen::ItemId waist; // Offset: 460
    keen::ItemId crotch; // Offset: 464
    keen::ItemId upperArms; // Offset: 468
    keen::ItemId lowerArms; // Offset: 472
    keen::ItemId hands; // Offset: 476
    keen::ItemId upperLegs; // Offset: 480
    keen::ItemId lowerLegs; // Offset: 484
    keen::ItemId feet; // Offset: 488
    keen::ItemId armourHead; // Offset: 492
    keen::ItemId armourUpperBody; // Offset: 496
    keen::ItemId armourArms; // Offset: 500
    keen::ItemId armourLowerBody; // Offset: 504
    keen::ItemId armourFeet; // Offset: 508
};

struct ColorCombination {
    keen::PaletteColorReference color0; // Offset: 0
    keen::PaletteColorReference color1; // Offset: 16
    keen::PaletteColorReference color2; // Offset: 32
};

struct CharacterPresetPreviewModelInfo {
    keen::ObjectReference<keen::Model> model; // Offset: 0
    keen::ColorCombination colorCombination; // Offset: 16
    keen::ObjectReference<keen::RenderGradientMapResource> gradient; // Offset: 64
    keen::BlobArray<keen::RenderBlendShapeSlot> blendShapes; // Offset: 80
};

typedef keen::ObjectReference<keen::CharacterPreset> CharacterPresetReference;

enum class BlendShapeFlags {
    Female = 0,
    Hat = 1,
    Hood = 2,
    Jaw01 = 3,
    Jaw02 = 4,
    Jaw03 = 5,
    Jaw04 = 6,
    Jaw05 = 7,
    Jaw06 = 8,
    Jaw07 = 9,
    Jaw08 = 10,
    NoArmor = 11,
    Shield = 12,
    Tight = 13,
    ArmsTight01 = 14,
    LegsBeltTight = 15,
    LegsFeetTight = 16,
    LegsFeetTight01 = 17,
};

typedef keen::Bitmask32<keen::BlendShapeFlags> BlendShapeMask;

struct CharacterPresetPreview {
    keen::CharacterPresetReference preset; // Offset: 0
    keen::BlobArray<keen::CharacterPresetPreviewModelInfo> models; // Offset: 16
    keen::BlendShapeMask activeBlendShapes; // Offset: 24
};

typedef keen::ObjectReference<keen::CharacterPreset> CharacterPresetObjectReference;

struct CharacterPresetCollection {
    keen::BlobArray<keen::CharacterPresetResource> presets; // Offset: 0
    keen::BlobArray<keen::ColorPresetResource> colorGradients; // Offset: 8
};

typedef keen::HashKey32 ColorCombinationId;

typedef keen::ObjectReference<keen::ColorCombination> ColorCombinationReference;

typedef keen::StaticArray<keen::PaletteColorId,3> ColorCombinationResource;

struct ColorCombinationSubDirectory {
};

struct ColorCombinationDirectory {
};

struct ecs.ComfortQuery {
    keen::ecs::RangeQueryId queryId; // Offset: 0
    keen::Time nextQuery; // Offset: 8
    keen::bool nearWarmth; // Offset: 16
    keen::ecs::EntityId warmthEntityId; // Offset: 20
};

enum class ecs.ComfortCategory {
    Hearth = 0,
    Bed = 1,
    Chair = 2,
    Table = 3,
    Bench = 4,
    Throne = 5,
    Bathtub = 6,
    Sink = 7,
    Toilet = 8,
    Shower = 9,
    Carpet = 10,
    Illumination = 11,
    Flame = 12,
    Trophy = 13,
    Stool = 14,
    Kitchen = 15,
    Wellness = 16,
};

struct ecs.ComfortProvider {
    keen::sint32 comfort; // Offset: 0
    keen::ecs::ComfortCategory category; // Offset: 4
    keen::float32 range; // Offset: 8
    keen::uint32 freezingResistance; // Offset: 12
};

struct ecs.NetworkComfort {
    keen::ecs::EntityId hearthEntityId; // Offset: 0
    keen::uint16 level; // Offset: 4
};

enum class ecs.ShelterQueryState {
    Waiting = 0,
    Startup = 1,
    WaitForResults = 2,
    Finished = 3,
};

struct ecs.Shelter {
    keen::float32 checkRange; // Offset: 0
    keen::float32 requiredShelterPercentage; // Offset: 4
};

enum class ecs.ShelterRay {
    Ray00 = 0,
    Ray01 = 1,
    Ray02 = 2,
    Ray03 = 3,
    Ray04 = 4,
    Ray05 = 5,
    Ray06 = 6,
    Ray07 = 7,
    Ray08 = 8,
    Ray09 = 9,
    Ray10 = 10,
    Ray11 = 11,
    Ray12 = 12,
    Ray13 = 13,
    Ray14 = 14,
    Ray15 = 15,
};

typedef keen::Bitmask16<keen::ecs::ShelterRay> ecs.RayHitMask;

struct ecs.DynamicShelter {
    keen::uint32 nextQueryTick; // Offset: 0
    keen::float32 shelterPercentage; // Offset: 4
    keen::ecs::RayHitMask queryHits; // Offset: 8
    keen::ecs::ShelterQueryState queryState; // Offset: 10
    keen::bool sheltered; // Offset: 11
    keen::bool shelterStateSet; // Offset: 12
};

struct ecs.Resting {
    keen::Time waitTime0; // Offset: 0
    keen::Time waitTime1; // Offset: 8
    keen::Time waitTime2; // Offset: 16
    keen::Time waitTime3; // Offset: 24
    keen::Time waitTime4; // Offset: 32
};

struct CraftingWorkshopDirectory {
};

struct CraftingWorkshopSubDirectory {
};

struct UiWorkshopRenderingOptions {
    keen::ObjectReference<keen::Model> model; // Offset: 0
    keen::animationgraph::StateIdReference defaultAnimation; // Offset: 16
    keen::animationgraph::StateIdHash defaultAnimationStateId; // Offset: 32
    keen::ObjectReference<keen::AnimationGraph> animationGraph; // Offset: 36
};

enum class KnowledgeRequirementType {
    World = 0,
    Player = 1,
    PredefinedKnowledge = 2,
    Item = 3,
    Dialog = 4,
    Query = 5,
};

enum class PredefinedKnowledgeTypes {
    SkillpointsSpent = 0,
    FastTravelWorld = 1,
    FastTravelHomeBase = 2,
    AnyBaseVisited = 3,
    ItemTrashed = 4,
    PerkUnlocked = 5,
    BuildingHammerUsed = 6,
};

enum class ItemKnowledgeTrigger {
    Pickup = 0,
    Use = 1,
    Inspect = 2,
};

struct GameKnowledgeRequirementBase {
    keen::KnowledgeRequirementType queryType; // Offset: 0
    keen::ObjectReference<keen::WorldKnowledgeObject> knowledge; // Offset: 4
    keen::ObjectReference<keen::PlayerKnowledgeObject> playerKnowledge; // Offset: 20
    keen::PredefinedKnowledgeTypes predefinedKnowledge; // Offset: 36
    keen::ItemKnowledgeTrigger itemKnowledge; // Offset: 37
    keen::ObjectReference<keen::ItemInfo> item; // Offset: 40
    keen::ObjectReference<keen::NpcDialogOptionBase> dialogOption; // Offset: 56
    keen::ObjectReference<keen::GameKnowledgeQuery> query; // Offset: 72
    keen::ObjectReference<keen::FbUiWorldEvent> triggerUiEvent; // Offset: 88
};

struct GameKnowledgeRequirement {
};

struct WorkshopDefinition {
    keen::LocaTagReference name; // Offset: 0
    keen::ItemReference item; // Offset: 16
    keen::bool isNpc; // Offset: 32
    keen::bool ignoreInJournalUi; // Offset: 33
    keen::GameKnowledgeRequirement unlockRequirement; // Offset: 36
};

typedef keen::ObjectReference<keen::WorkshopDefinition> WorkshopReference;

struct CraftingPropDefinition {
    keen::LocaTagReference name; // Offset: 0
    keen::ItemReference item; // Offset: 16
};

typedef keen::HashKey32 WorkshopId;

struct WorkshopResource {
    keen::bool isNpc; // Offset: 0
    keen::bool ignoreInJournalUi; // Offset: 1
    keen::Guid workshopGuid; // Offset: 4
    keen::WorkshopId workshopId; // Offset: 20
    keen::LocaTagId name; // Offset: 24
    keen::ItemId item; // Offset: 28
    keen::ItemReference itemRef; // Offset: 32
};

typedef keen::uint64 CraftingPropMask;

typedef keen::HashKey32 CraftingPropId;

struct CraftingPropResource {
    keen::Guid craftingPropGuid; // Offset: 0
    keen::CraftingPropId craftingPropId; // Offset: 16
    keen::uint8 craftingPropIndex; // Offset: 20
    keen::LocaTagId name; // Offset: 24
    keen::ItemId item; // Offset: 28
    keen::ItemReference itemRef; // Offset: 32
};

struct WorkshopRegistryResource {
    keen::BlobArray<keen::WorkshopResource> npcs; // Offset: 0
    keen::BlobArray<keen::WorkshopResource> workshops; // Offset: 8
    keen::BlobArray<keen::CraftingPropResource> craftingProps; // Offset: 16
};

typedef keen::HashKey64 CustomStringId;

struct debug.EnemySpawnEntry {
    keen::BlobString displayName; // Offset: 0
    keen::ecs::TemplateReference entity; // Offset: 8
    keen::uint8 sortPriority; // Offset: 24
};

struct debug.EnemyDebugMenuFilterEntry {
    keen::BlobString displayName; // Offset: 0
    keen::BlobString filter; // Offset: 8
};

struct debug.EnemyDebugMenu {
    keen::BlobArray<keen::debug::EnemySpawnEntry> entries; // Offset: 0
    keen::BlobArray<keen::debug::EnemyDebugMenuFilterEntry> filters; // Offset: 8
    keen::sint32 maxLevel; // Offset: 16
};

typedef keen::HashKey32 DialogOptionId;

struct NpcDialogDirectory {
};

struct NpcDialogDefinition {
    keen::actor::ActorSequenceReference defaultSequence; // Offset: 0
    keen::actor::ActorSequenceReference missingRequirementSequence; // Offset: 16
    keen::LocaTagReference headline; // Offset: 32
    keen::LocaTagReference craftingOption; // Offset: 48
    keen::LocaTagReference itemUpgradeOption; // Offset: 64
    keen::LocaTagReference itemRecyclingOption; // Offset: 80
    keen::LocaTagReference sendBackToFlameOption; // Offset: 96
};

struct NpcDialogGroup {
};

struct NpcDialogOptionBase {
    keen::bool overrideSequence; // Offset: 0
    keen::actor::ActorSequenceReference sequence; // Offset: 4
};

struct NpcDialogInitLine {
    keen::bool isWakeup; // Offset: 20
};

struct NpcDialogFarewellLine {
};

struct NpcDialogTransitionLine {
};

struct NpcDialogOption {
    keen::LocaTagReference name; // Offset: 20
};

struct NpcDialogResponseBase {
};

struct NpcDialogText {
    keen::LocaTagReference body; // Offset: 0
};

struct NpcDialogOptionResourceBase {
    keen::DialogOptionId optionId; // Offset: 0
    keen::bool overrideSequence; // Offset: 4
    keen::actor::ActorSequenceReference sequence; // Offset: 8
    keen::KnowledgeId unlockKnowledge; // Offset: 24
    keen::KnowledgeId knowledgeRequirement; // Offset: 28
    keen::BlobArray<keen::LocaTagId> bodyTexts; // Offset: 32
};

struct NpcDialogInitLineResource {
    keen::bool isWakeup; // Offset: 40
};

struct NpcDialogTransitionLineResource {
};

struct NpcDialogFarewellResource {
};

struct NpcDialogOptionResource {
    keen::LocaTagId optionText; // Offset: 40
};

struct NpcDialogResource {
    keen::LocaTagId headline; // Offset: 0
    keen::LocaTagId crafting; // Offset: 4
    keen::LocaTagId itemUpgrade; // Offset: 8
    keen::LocaTagId itemRecycling; // Offset: 12
    keen::LocaTagId sendBackToFlame; // Offset: 16
    keen::actor::ActorSequenceReference defaultSequence; // Offset: 20
    keen::actor::ActorSequenceReference missingRequirementSequence; // Offset: 36
    keen::BlobArray<keen::NpcDialogInitLineResource> initLines; // Offset: 52
    keen::BlobArray<keen::NpcDialogTransitionLineResource> transitionLines; // Offset: 60
    keen::BlobArray<keen::NpcDialogFarewellResource> farewellLines; // Offset: 68
    keen::BlobArray<keen::NpcDialogOptionResource> dialogOptions; // Offset: 76
};

enum class EquipmentSlotType {
    Invalid = 0,
    MeleeWeapon = 1,
    Tool = 2,
    BuildTool = 3,
    MidRangeWeapon = 4,
    RangeWeapon = 5,
    Arrow = 6,
    Spell = 7,
    TerrainMaterial = 8,
    BlueprintMaterial_Default = 9,
    BlueprintMaterial_Roof = 10,
    Armour_Head = 11,
    Armour_UpperBody = 12,
    Armour_Arms = 13,
    Armour_LowerBody = 14,
    Armour_Feet = 15,
    Shield = 16,
    BodyPart_Head = 17,
    BodyPart_Hair = 18,
    BodyPart_EyeBrow = 19,
    BodyPart_Beard = 20,
    BodyPart_Neck = 21,
    BodyPart_Collar = 22,
    BodyPart_Chest = 23,
    BodyPart_Waist = 24,
    BodyPart_Crotch = 25,
    BodyPart_UpperArms = 26,
    BodyPart_LowerArms = 27,
    BodyPart_Hands = 28,
    BodyPart_UpperLegs = 29,
    BodyPart_LowerLegs = 30,
    BodyPart_Feet = 31,
    HookShot = 32,
    Glider = 33,
    ClimbWall = 34,
    Consumable = 35,
    Armour_Accessory = 36,
    Armour_Ring = 37,
    Backpack = 38,
};

enum class EquipmentSlot {
    Vanity_Head = 0,
    Vanity_UpperBody = 1,
    Vanity_Arms = 2,
    Vanity_LowerBody = 3,
    Vanity_Feet = 4,
    Armour_Head = 5,
    Armour_UpperBody = 6,
    Armour_Arms = 7,
    Armour_LowerBody = 8,
    Armour_Feet = 9,
    BodyPart_Head = 10,
    BodyPart_Hair = 11,
    BodyPart_EyeBrow = 12,
    BodyPart_Beard = 13,
    BodyPart_Neck = 14,
    BodyPart_Collar = 15,
    BodyPart_Chest = 16,
    BodyPart_Waist = 17,
    BodyPart_Crotch = 18,
    BodyPart_UpperArms = 19,
    BodyPart_LowerArms = 20,
    BodyPart_Hands = 21,
    BodyPart_UpperLegs = 22,
    BodyPart_LowerLegs = 23,
    BodyPart_Feet = 24,
    Ring0 = 25,
    Ring1 = 26,
    Accessory0 = 27,
    Accessory1 = 28,
    RangedWeapon = 29,
    Shield = 30,
    Arrow = 31,
    Spell = 32,
    TerrainMaterial = 33,
    BlueprintMaterial_Default = 34,
    BlueprintMaterial_Roof = 35,
    HookShot = 36,
    Glider = 37,
    ClimbWall = 38,
    Backpack = 39,
    Count = 40,
    Invalid = 40,
    MainHand = 41,
};

enum class VisualEquippedItems {
    BodyPart_Head = 0,
    BodyPart_Hair = 1,
    BodyPart_EyeBrow = 2,
    BodyPart_Beard = 3,
    BodyPart_Neck = 4,
    BodyPart_Collar = 5,
    BodyPart_Chest = 6,
    BodyPart_Waist = 7,
    BodyPart_Crotch = 8,
    BodyPart_UpperArms = 9,
    BodyPart_LowerArms = 10,
    BodyPart_Hands = 11,
    BodyPart_UpperLegs = 12,
    BodyPart_LowerLegs = 13,
    BodyPart_Feet = 14,
    Armour_Head = 15,
    Armour_UpperBody = 16,
    Armour_Arms = 17,
    Armour_LowerBody = 18,
    Armour_Feet = 19,
    Ring0 = 20,
    Ring1 = 21,
    Shield = 22,
    MainHand = 23,
    Count = 24,
};

typedef keen::Bitmask32<keen::VisualEquippedItems> VisualEquipmentMask;

enum class ImpactEquippedItems {
    MainHand = 0,
    Shield = 1,
    Armour_Head = 2,
    Armour_UpperBody = 3,
    Armour_Arms = 4,
    Armour_LowerBody = 5,
    Armour_Feet = 6,
    Ring0 = 7,
    Ring1 = 8,
    Accessory0 = 9,
    Accessory1 = 10,
    Count = 11,
};

typedef keen::Bitmask32<keen::ImpactEquippedItems> ImpactEquipmentMask;

typedef keen::HashKey32 PerkId;

struct ecs.ItemImpact {
    keen::ItemInstanceInfo itemInstance; // Offset: 0
    keen::ecs::EntityId entityId; // Offset: 20
    keen::StaticArray<keen::ecs::EntityId,5> perkEntities; // Offset: 24
    keen::StaticArray<keen::PerkId,5> perkIds; // Offset: 44
};

struct ecs.ItemVisual {
    keen::ItemInstanceInfo itemInstance; // Offset: 0
    keen::ecs::EntityId entityId; // Offset: 20
};

struct ecs.EquipmentSlotData {
    keen::InventorySlotId vanityHead; // Offset: 0
    keen::InventorySlotId vanityUpperBody; // Offset: 8
    keen::InventorySlotId vanityArms; // Offset: 16
    keen::InventorySlotId vanityLowerBody; // Offset: 24
    keen::InventorySlotId vanityFeet; // Offset: 32
    keen::InventorySlotId armourHead; // Offset: 40
    keen::InventorySlotId armourUpperBody; // Offset: 48
    keen::InventorySlotId armourArms; // Offset: 56
    keen::InventorySlotId armourLowerBody; // Offset: 64
    keen::InventorySlotId armourFeet; // Offset: 72
    keen::InventorySlotId bodyPartHead; // Offset: 80
    keen::InventorySlotId bodyPartHair; // Offset: 88
    keen::InventorySlotId bodyPartEyeBrow; // Offset: 96
    keen::InventorySlotId bodyPartBeard; // Offset: 104
    keen::InventorySlotId bodyPartNeck; // Offset: 112
    keen::InventorySlotId bodyPartCollar; // Offset: 120
    keen::InventorySlotId bodyPartChest; // Offset: 128
    keen::InventorySlotId bodyPartWaist; // Offset: 136
    keen::InventorySlotId bodyPartCrotch; // Offset: 144
    keen::InventorySlotId bodyPartUpperArms; // Offset: 152
    keen::InventorySlotId bodyPartLowerArms; // Offset: 160
    keen::InventorySlotId bodyPartHands; // Offset: 168
    keen::InventorySlotId bodyPartUpperLegs; // Offset: 176
    keen::InventorySlotId bodyPartLowerLegs; // Offset: 184
    keen::InventorySlotId bodyPartFeet; // Offset: 192
    keen::InventorySlotId ring0; // Offset: 200
    keen::InventorySlotId ring1; // Offset: 208
    keen::InventorySlotId accessory0; // Offset: 216
    keen::InventorySlotId accessory1; // Offset: 224
    keen::InventorySlotId rangedWeapon; // Offset: 232
    keen::InventorySlotId shield; // Offset: 240
    keen::InventorySlotId arrow; // Offset: 248
    keen::InventorySlotId spell; // Offset: 256
    keen::InventorySlotId terrainMaterial; // Offset: 264
    keen::InventorySlotId blueprintMaterialDefault; // Offset: 272
    keen::InventorySlotId blueprintMaterialRoof; // Offset: 280
    keen::InventorySlotId hookShot; // Offset: 288
    keen::InventorySlotId glider; // Offset: 296
    keen::InventorySlotId climbWall; // Offset: 304
    keen::InventorySlotId backpack; // Offset: 312
};

enum class ecs.CspItemIsBroken {
    ActionbarSlot0 = 0,
    ActionbarSlot1 = 1,
    ActionbarSlot2 = 2,
    ActionbarSlot3 = 3,
    ActionbarSlot4 = 4,
    ActionbarSlot5 = 5,
    ActionbarSlot6 = 6,
    ActionbarSlot7 = 7,
    ActionbarSlot8 = 8,
    ActionbarSlot9 = 9,
    ActionbarSlot10 = 10,
    ActionbarSlot11 = 11,
    ActionbarSlot12 = 12,
    ActionbarSlot13 = 13,
    ActionbarSlot14 = 14,
    ActionbarSlot15 = 15,
    ShieldItem = 16,
    RangedWeapon = 17,
};

typedef keen::Bitmask32<keen::ecs::CspItemIsBroken> ecs.CspItemIsBrokenMask;

struct ActionbarSlotSelection {
    keen::InventorySlotIndex index; // Offset: 0
};

struct ecs.SlotSelection {
    keen::ecs::EquipmentSlotData equipment; // Offset: 0
    keen::StaticArray<keen::ecs::EntityId,2> actionbarEntityIds; // Offset: 320
    keen::ItemInstanceInfo actionItem; // Offset: 328
    keen::ImpactEquipmentMask disabledEquipment; // Offset: 348
    keen::ActionbarSlotSelection actionbarSlotSelection; // Offset: 352
    keen::ecs::CspItemIsBrokenMask cspItemIsBrokenHelper; // Offset: 356
};

struct ecs.FinishedActionbarInit {
};

struct ecs.PackedEquipmentSlotEntityIds {
    keen::ecs::EntityId vanityHead; // Offset: 0
    keen::ecs::EntityId vanityUpperBody; // Offset: 4
    keen::ecs::EntityId vanityArms; // Offset: 8
    keen::ecs::EntityId vanityLowerBody; // Offset: 12
    keen::ecs::EntityId vanityFeet; // Offset: 16
    keen::ecs::EntityId armourHead; // Offset: 20
    keen::ecs::EntityId armourUpperBody; // Offset: 24
    keen::ecs::EntityId armourArms; // Offset: 28
    keen::ecs::EntityId armourLowerBody; // Offset: 32
    keen::ecs::EntityId armourFeet; // Offset: 36
    keen::ecs::EntityId bodyPartHead; // Offset: 40
    keen::ecs::EntityId bodyPartHair; // Offset: 44
    keen::ecs::EntityId bodyPartEyeBrow; // Offset: 48
    keen::ecs::EntityId bodyPartBeard; // Offset: 52
    keen::ecs::EntityId bodyPartNeck; // Offset: 56
    keen::ecs::EntityId bodyPartCollar; // Offset: 60
    keen::ecs::EntityId bodyPartChest; // Offset: 64
    keen::ecs::EntityId bodyPartWaist; // Offset: 68
    keen::ecs::EntityId bodyPartCrotch; // Offset: 72
    keen::ecs::EntityId bodyPartUpperArms; // Offset: 76
    keen::ecs::EntityId bodyPartLowerArms; // Offset: 80
    keen::ecs::EntityId bodyPartHands; // Offset: 84
    keen::ecs::EntityId bodyPartUpperLegs; // Offset: 88
    keen::ecs::EntityId bodyPartLowerLegs; // Offset: 92
    keen::ecs::EntityId bodyPartFeet; // Offset: 96
    keen::ecs::EntityId ring0; // Offset: 100
    keen::ecs::EntityId ring1; // Offset: 104
    keen::ecs::EntityId accessory0; // Offset: 108
    keen::ecs::EntityId accessory1; // Offset: 112
    keen::ecs::EntityId rangedWeapon; // Offset: 116
    keen::ecs::EntityId shield; // Offset: 120
    keen::ecs::EntityId arrow; // Offset: 124
    keen::ecs::EntityId spell; // Offset: 128
    keen::ecs::EntityId terrainMaterial; // Offset: 132
    keen::ecs::EntityId blueprintMaterialDefault; // Offset: 136
    keen::ecs::EntityId blueprintMaterialRoof; // Offset: 140
    keen::ecs::EntityId hookShot; // Offset: 144
    keen::ecs::EntityId glider; // Offset: 148
    keen::ecs::EntityId climbWall; // Offset: 152
    keen::ecs::EntityId backpack; // Offset: 156
};

struct ecs.PackedEquipmentSlotIndices {
    keen::InventorySlotIndex vanityHead; // Offset: 0
    keen::InventorySlotIndex vanityUpperBody; // Offset: 1
    keen::InventorySlotIndex vanityArms; // Offset: 2
    keen::InventorySlotIndex vanityLowerBody; // Offset: 3
    keen::InventorySlotIndex vanityFeet; // Offset: 4
    keen::InventorySlotIndex armourHead; // Offset: 5
    keen::InventorySlotIndex armourUpperBody; // Offset: 6
    keen::InventorySlotIndex armourArms; // Offset: 7
    keen::InventorySlotIndex armourLowerBody; // Offset: 8
    keen::InventorySlotIndex armourFeet; // Offset: 9
    keen::InventorySlotIndex bodyPartHead; // Offset: 10
    keen::InventorySlotIndex bodyPartHair; // Offset: 11
    keen::InventorySlotIndex bodyPartEyeBrow; // Offset: 12
    keen::InventorySlotIndex bodyPartBeard; // Offset: 13
    keen::InventorySlotIndex bodyPartNeck; // Offset: 14
    keen::InventorySlotIndex bodyPartCollar; // Offset: 15
    keen::InventorySlotIndex bodyPartChest; // Offset: 16
    keen::InventorySlotIndex bodyPartWaist; // Offset: 17
    keen::InventorySlotIndex bodyPartCrotch; // Offset: 18
    keen::InventorySlotIndex bodyPartUpperArms; // Offset: 19
    keen::InventorySlotIndex bodyPartLowerArms; // Offset: 20
    keen::InventorySlotIndex bodyPartHands; // Offset: 21
    keen::InventorySlotIndex bodyPartUpperLegs; // Offset: 22
    keen::InventorySlotIndex bodyPartLowerLegs; // Offset: 23
    keen::InventorySlotIndex bodyPartFeet; // Offset: 24
    keen::InventorySlotIndex ring0; // Offset: 25
    keen::InventorySlotIndex ring1; // Offset: 26
    keen::InventorySlotIndex accessory0; // Offset: 27
    keen::InventorySlotIndex accessory1; // Offset: 28
    keen::InventorySlotIndex rangedWeapon; // Offset: 29
    keen::InventorySlotIndex shield; // Offset: 30
    keen::InventorySlotIndex arrow; // Offset: 31
    keen::InventorySlotIndex spell; // Offset: 32
    keen::InventorySlotIndex terrainMaterial; // Offset: 33
    keen::InventorySlotIndex blueprintMaterialDefault; // Offset: 34
    keen::InventorySlotIndex blueprintMaterialRoof; // Offset: 35
    keen::InventorySlotIndex hookShot; // Offset: 36
    keen::InventorySlotIndex glider; // Offset: 37
    keen::InventorySlotIndex climbWall; // Offset: 38
    keen::InventorySlotIndex backpack; // Offset: 39
};

struct ecs.PackedSlotSelection {
    keen::ecs::PackedEquipmentSlotEntityIds equipmentEntityIds; // Offset: 0
    keen::ecs::PackedEquipmentSlotIndices equipmentIndices; // Offset: 160
    keen::StaticArray<keen::ecs::EntityId,2> actionbarEntityIds; // Offset: 200
    keen::ItemInstanceInfo actionItem; // Offset: 208
    keen::ImpactEquipmentMask disabledEquipment; // Offset: 228
    keen::ActionbarSlotSelection actionbarSlotSelection; // Offset: 232
    keen::uint32 cspItemIsBrokenHelper; // Offset: 236
};

struct ecs.CspHackInventoryStockSelection {
    keen::StaticArray<keen::uint16,5> versions; // Offset: 0
};

struct ecs.Equipment {
    keen::VisualEquipmentMask visualMask; // Offset: 0
    keen::ImpactEquipmentMask impactMask; // Offset: 4
    keen::StaticArray<keen::ecs::ItemImpact,11> equipmentImpacts; // Offset: 8
    keen::StaticArray<keen::ecs::ItemVisual,24> equipmentVisuals; // Offset: 712
    keen::CollisionFeedbackMaterialReference blockMaterial; // Offset: 1288
    keen::CollisionFeedbackMaterialReference bodyMaterial; // Offset: 1304
};

struct ecs.RenderEquipment {
    keen::StaticArray<keen::uint32,24> modelHandles; // Offset: 0
    keen::StaticArray<keen::ObjectReference<keen::Model>,24> lastModels; // Offset: 96
    keen::StaticArray<keen::ColorCombinationResource,24> colors; // Offset: 480
    keen::VisualEquipmentMask hideMask; // Offset: 768
    keen::MaterialFeedbackId foleyMaterialId; // Offset: 772
    keen::BlendShapeMask blendShapeMask; // Offset: 776
};

enum class PrimaryAnimationSet {
    None = 0,
    SingleAndShield = 1,
    SingleNoShield = 2,
    DualWield = 3,
    TwoHanded = 4,
    Bow = 5,
    Staff = 6,
    Wand = 7,
};

enum class SecondaryAnimationSet {
    None = 0,
    Bow = 1,
    StaffCast = 2,
    WandCast = 3,
};

struct ecs.EquipmentAnimationSets {
    keen::PrimaryAnimationSet primaryAnimationSet; // Offset: 0
    keen::SecondaryAnimationSet secondaryAnimationSet; // Offset: 1
};

struct Game38RootObjects {
    keen::ObjectReference<keen::RenderSettingsGpuPresets> renderSettingsGpuPresets; // Offset: 0
    keen::ObjectReference<keen::Scene> scene; // Offset: 16
    keen::ObjectReference<keen::ItemDirectory> itemDirectory; // Offset: 32
    keen::ObjectReference<keen::GameKnowledgeDirectory> gameKnowledgeDirectory; // Offset: 48
    keen::ObjectReference<keen::KnowledgeQueryDirectory> gameKnowledgeQueryResourceDb; // Offset: 64
    keen::ObjectReference<keen::GameKnowledgeQueryTriggerResource> gameKnowledgeQueryTriggerResource; // Offset: 80
    keen::ObjectReference<keen::DefaultLootLabelCollectionRootDirectory> lootLabelCollection; // Offset: 96
    keen::ObjectReference<keen::RecipeList> recipeRegistry; // Offset: 112
    keen::ObjectReference<keen::BalancingTable> balancingTable; // Offset: 128
    keen::ObjectReference<keen::CraftingWorkshopDirectory> workshopRegistry; // Offset: 144
    keen::ObjectReference<keen::BuffTypDirectory> buffTypeCollection; // Offset: 160
    keen::ObjectReference<keen::MidiSongDirectory> midiSongCollection; // Offset: 176
    keen::ObjectReference<keen::ImpactDirectory> impactRegistry; // Offset: 192
    keen::ObjectReference<keen::AttributeContainer> attributeContainer; // Offset: 208
    keen::ObjectReference<keen::ActorActionContainerRoot> actorSequenceCollection; // Offset: 224
    keen::ObjectReference<keen::TerraformingEfficiencyRegistryResource> terraformingEfficiencyRegistry; // Offset: 240
    keen::ObjectReference<keen::VoxelBlueprintRegistryFolder> voxelBlueprintConfig; // Offset: 256
    keen::ObjectReference<keen::VoxelBlueprintItemRegistryResource> voxelBlueprintItemRegistry; // Offset: 272
    keen::ObjectReference<keen::VoxelBlueprintMaterialPoolRegistryFolder> voxelBlueprintMaterialPoolRegistry; // Offset: 288
    keen::ObjectReference<keen::enemy::EnemyArsenalDirectory> enemyArsenalRegistry; // Offset: 304
    keen::ObjectReference<keen::PerkDirectory> perkCollection; // Offset: 320
    keen::ObjectReference<keen::IngameTimeConfig> ingameTimeConfig; // Offset: 336
    keen::ObjectReference<keen::SkillTreeDefinition> skillTree; // Offset: 352
    keen::ObjectReference<keen::ecs::TemplateDirectory> templateCollection; // Offset: 368
    keen::ObjectReference<keen::FbUiBundle> fbUiBundle; // Offset: 384
    keen::ObjectReference<keen::JournalDirectory> journalRegistry; // Offset: 400
    keen::ObjectReference<keen::MapMarkerRegistryTool> mapMarkerRegistry; // Offset: 416
    keen::ObjectReference<keen::MaterialFeedbackDirectory> materialFeedbackCollection; // Offset: 432
    keen::ObjectReference<keen::LocaTagCollection> locaTagCollection; // Offset: 448
    keen::ObjectReference<keen::VoicePackDirectory> voicePacks; // Offset: 464
    keen::ObjectReference<keen::AmbientCollectionResource> ambientCollection; // Offset: 480
    keen::ObjectReference<keen::FbUiMap> fbUiMapResource; // Offset: 496
    keen::ObjectReference<keen::UiFont> uiFontDefault; // Offset: 512
    keen::ObjectReference<keen::UiFont> uiFontFancy; // Offset: 528
    keen::ObjectReference<keen::VfxDefinition> grassVfx; // Offset: 544
    keen::ObjectReference<keen::VfxDefinition> buildingBlockDamageDecalVfx; // Offset: 560
    keen::ObjectReference<keen::VfxDefinition> blueprintHoverHighlightVfx; // Offset: 576
    keen::ObjectReference<keen::ClothCollider> maleClothCollider; // Offset: 592
    keen::ObjectReference<keen::ClothCollider> femaleClothCollider; // Offset: 608
    keen::ObjectReference<keen::Notifier> staminaDrainNotifier; // Offset: 624
    keen::ObjectReference<keen::Notifier> exhaustedNotifier; // Offset: 640
    keen::ObjectReference<keen::Notifier> pickupLootNotifier; // Offset: 656
    keen::ObjectReference<keen::Notifier> itemBrokenNotifier; // Offset: 672
    keen::ObjectReference<keen::RenderSystemResource> renderSystem; // Offset: 688
    keen::ObjectReference<keen::GpcResourceList> gpcResourceList; // Offset: 704
    keen::ObjectReference<keen::VolumetricFogInitializationMaterial> analyticFog; // Offset: 720
    keen::ObjectReference<keen::VoxelMaterialList> buildingMaterialBlending; // Offset: 736
    keen::ObjectReference<keen::WorldMaterial2> worldMaterial2; // Offset: 752
    keen::ObjectReference<keen::VolumetricFog2ResourceData> volumetricFog2; // Offset: 768
    keen::ObjectReference<keen::VolumetricFogGridRenderParameters> volumetricFogGridParameters; // Offset: 784
    keen::ObjectReference<keen::SoundContainer> pregameMusic; // Offset: 800
    keen::ObjectReference<keen::SoundContainer> loreIntroMusic; // Offset: 816
    keen::ObjectReference<keen::SoundContainer> spellChargeFullSfx; // Offset: 832
    keen::ObjectReference<keen::debug::EnemyDebugMenu> enemyDebugMenu; // Offset: 848
    keen::ObjectReference<keen::CharacterPresetCollectionReference> characterPresetCollection; // Offset: 864
    keen::ObjectReference<keen::TwitchDropCollection> twitchDropCollection; // Offset: 880
    keen::ObjectReference<keen::Scene> characterScenePlayer; // Offset: 896
    keen::ObjectReference<keen::Scene> characterScenePlayerPortrait; // Offset: 912
    keen::ObjectReference<keen::Scene> characterScenePlayerPregame; // Offset: 928
    keen::ObjectReference<keen::Scene> characterSceneNpc; // Offset: 944
    keen::ObjectReference<keen::CommerceProductDirectory> commerceProducts; // Offset: 960
    keen::ObjectReference<keen::AchievementDirectory> achievements; // Offset: 976
    keen::ObjectReference<keen::PreloadVfxList> preloadVfxList; // Offset: 992
    keen::ObjectReference<keen::ColorPaletteCollection> colorPaletteCollection; // Offset: 1008
    keen::ObjectReference<keen::WeatherSystemConfiguration> weatherSystemResource; // Offset: 1024
};

struct Game38SharedResources {
    keen::ObjectReference<keen::SceneResource> scene; // Offset: 0
    keen::ObjectReference<keen::ItemKnowledgeResource> gameKnowledge; // Offset: 16
    keen::ObjectReference<keen::GameKnowledgeResource> gameKnowledgeResource; // Offset: 32
    keen::ObjectReference<keen::GameKnowledgeQueryResourceDb> gameKnowledgeQueryResourceDb; // Offset: 48
    keen::ObjectReference<keen::ItemRegistryResource> itemRegistry; // Offset: 64
    keen::ObjectReference<keen::JournalRegistryResource> journalRegistry; // Offset: 80
    keen::ObjectReference<keen::DevItemRegistryResource> devItemRegistry; // Offset: 96
    keen::ObjectReference<keen::RecipeRegistryResource> recipeRegistry; // Offset: 112
    keen::ObjectReference<keen::BalancingTable> balancingTable; // Offset: 128
    keen::ObjectReference<keen::WorkshopRegistryResource> workshopRegistry; // Offset: 144
    keen::ObjectReference<keen::NpcCollection> npcCollection; // Offset: 160
    keen::ObjectReference<keen::DefaultLootLabelCollectionResource> lootLabelCollection; // Offset: 176
    keen::ObjectReference<keen::LootableItemsResource> lootableItems; // Offset: 192
    keen::ObjectReference<keen::LootDistributionTreeResource> lootDistribution; // Offset: 208
    keen::ObjectReference<keen::BuffTypeCollectionResource> buffTypeCollection; // Offset: 224
    keen::ObjectReference<keen::MidiSongCollection> midiSongCollection; // Offset: 240
    keen::ObjectReference<keen::ImpactRegistryResource> impactRegistry; // Offset: 256
    keen::ObjectReference<keen::AttributeContainerResource> attributeContainer; // Offset: 272
    keen::ObjectReference<keen::ActorSequenceCollectionResource> actorSequenceCollection; // Offset: 288
    keen::ObjectReference<keen::TerraformingEfficiencyRegistryResource> terraformingEfficiencyRegistry; // Offset: 304
    keen::ObjectReference<keen::GuidRegistryResource> voxelBlueprintConfig; // Offset: 320
    keen::ObjectReference<keen::VoxelBlueprintItemRegistryResource> voxelBlueprintItemRegistry; // Offset: 336
    keen::ObjectReference<keen::VoxelBlueprintMaterialPoolRegistryResource> voxelBlueprintMaterialPoolRegistry; // Offset: 352
    keen::ObjectReference<keen::enemy::EnemyArsenalRegistryResource> enemyArsenalRegistry; // Offset: 368
    keen::ObjectReference<keen::PerkCollectionResource> perkCollection; // Offset: 384
    keen::ObjectReference<keen::IngameTimeConfig> ingameTimeConfig; // Offset: 400
    keen::ObjectReference<keen::SkillTreeResource> skillTree; // Offset: 416
    keen::ObjectReference<keen::ecs::TemplateCollectionResource> templateCollection; // Offset: 432
    keen::ObjectReference<keen::TwitchDropCollection> twitchDropCollection; // Offset: 448
    keen::ObjectReference<keen::NotifierResource> staminaDrainNotifier; // Offset: 464
    keen::ObjectReference<keen::NotifierResource> exhaustedNotifier; // Offset: 480
    keen::ObjectReference<keen::NotifierResource> pickupLootNotifier; // Offset: 496
    keen::ObjectReference<keen::NotifierResource> itemBrokenNotifier; // Offset: 512
    keen::ObjectReference<keen::CharacterPresetCollection> characterPresetCollection; // Offset: 528
    keen::ObjectReference<keen::animationgraph::AnimationGraphDebugInfo> animationGraphDebugInfo; // Offset: 544
    keen::ObjectReference<keen::CommerceProductResource> commerceProducts; // Offset: 560
    keen::ObjectReference<keen::ColorPaletteCollectionResource> colorPaletteCollection; // Offset: 576
    keen::ObjectReference<keen::GameSettingsPresetsResource> gameSettingPresets; // Offset: 592
    keen::ObjectReference<keen::WeatherSystemResource> weatherSystemResource; // Offset: 608
};

struct Game38ClientResources {
    keen::Game38SharedResources shared; // Offset: 0
    keen::ObjectReference<keen::RenderSettingsGpuPresetsResource> renderSettingsGpuPresets; // Offset: 624
    keen::ObjectReference<keen::FbUiBundle> fbUiBundle; // Offset: 640
    keen::ObjectReference<keen::MapMarkerRegistryResource> mapMarkerRegistry; // Offset: 656
    keen::ObjectReference<keen::ItemKnowledgeResource> itemKnowledge; // Offset: 672
    keen::ObjectReference<keen::VoicePackDirectoryResource> voicePacks; // Offset: 688
    keen::ObjectReference<keen::MaterialFeedbackCollectionResource> materialFeedbackCollection; // Offset: 704
    keen::ObjectReference<keen::LocaTagCollectionResource> locaTagCollection; // Offset: 720
    keen::ObjectReference<keen::RenderColorGradingMapResource> colorGradingFogRegular; // Offset: 736
    keen::ObjectReference<keen::RenderColorGradingMapResource> colorGradingFogDangerous; // Offset: 752
    keen::ObjectReference<keen::RenderColorGradingMapResource> colorGradingLowHealth; // Offset: 768
    keen::ObjectReference<keen::RenderClothColliderResource> maleClothCollider; // Offset: 784
    keen::ObjectReference<keen::RenderClothColliderResource> femaleClothCollider; // Offset: 800
    keen::ObjectReference<keen::FbUiMapResource> fbUiMapResource; // Offset: 816
    keen::ObjectReference<keen::UiFontResource> uiFontDefault; // Offset: 832
    keen::ObjectReference<keen::UiFontResource> uiFontFancy; // Offset: 848
    keen::ObjectReference<keen::VfxResource> grassVfx; // Offset: 864
    keen::ObjectReference<keen::VfxResource> buildingBlockDamageDecalVfx; // Offset: 880
    keen::ObjectReference<keen::VfxResource> blueprintHoverHighlightVfx; // Offset: 896
    keen::ObjectReference<keen::SoundContainerResource> pregameMusic; // Offset: 912
    keen::ObjectReference<keen::SoundContainerResource> loreIntroMusic; // Offset: 928
    keen::ObjectReference<keen::SoundContainerResource> spellChargeFullSfx; // Offset: 944
    keen::ObjectReference<keen::AmbientCollectionResource> ambientCollection; // Offset: 960
    keen::ObjectReference<keen::debug::EnemyDebugMenu> enemyDebugMenu; // Offset: 976
    keen::ObjectReference<keen::SceneResource> characterScenePlayer; // Offset: 992
    keen::ObjectReference<keen::SceneResource> characterScenePlayerPortrait; // Offset: 1008
    keen::ObjectReference<keen::SceneResource> characterScenePlayerPregame; // Offset: 1024
    keen::ObjectReference<keen::SceneResource> characterSceneNpc; // Offset: 1040
    keen::ObjectReference<keen::AchievementDefinitionResource> achievements; // Offset: 1056
    keen::ObjectReference<keen::PreloadVfxListResource> preloadVfxList; // Offset: 1072
};

struct Game38ServerResources {
    keen::Game38SharedResources shared; // Offset: 0
    keen::ObjectReference<keen::GameKnowledgeQueryTriggerResource> gameKnowledgeQueryTriggerResource; // Offset: 624
};

typedef keen::ObjectReference<keen::Midi> MidiReference;

enum class MidiInstrumentType {
    None = 0,
    Lute = 1,
    Flute = 2,
    Harp = 3,
    DounDoun = 4,
};

struct MidiSong {
    keen::NameLocaTag name; // Offset: 0
    keen::MidiReference midiSong; // Offset: 16
    keen::MidiInstrumentType defaultForInstrument; // Offset: 32
};

struct MidiSongSubDirectory {
};

struct MidiSongDirectory {
};

struct MidiSongResource {
    keen::LocaTagReference name; // Offset: 0
    keen::MidiReference midiSong; // Offset: 16
    keen::KnowledgeId unlockKnowledge; // Offset: 32
    keen::MidiInstrumentType defaultForInstrument; // Offset: 36
};

struct InstrumentSampleCollectionResource {
    keen::ObjectReference<keen::SamplerInstrumentResource> samplesLute; // Offset: 0
    keen::ObjectReference<keen::SamplerInstrumentResource> samplesLuteChord; // Offset: 16
    keen::ObjectReference<keen::SamplerInstrumentResource> samplesFlute; // Offset: 32
    keen::ObjectReference<keen::SamplerInstrumentResource> samplesHarp; // Offset: 48
    keen::ObjectReference<keen::SamplerInstrumentResource> samplesDounDoun; // Offset: 64
    keen::ObjectReference<keen::SamplerInstrumentResource> samplesTambourin; // Offset: 80
};

struct MidiSongCollection {
    keen::BlobArray<keen::ObjectReference<keen::MidiSongResource>> songCollection; // Offset: 0
    keen::InstrumentSampleCollectionResource sampleCollection; // Offset: 8
};

enum class ecs.G38TestSuite {
    Fail = 0,
    CookingTests = 1,
    FallDamage = 2,
    Sliding = 3,
    ClimbLadder = 4,
    ClimbWall = 5,
    HookShotSwing = 6,
    HookShotPull = 7,
    Glider = 8,
    InventoryTest = 9,
    EnemyTests = 10,
    DungeonTriggerTests = 11,
    KnowledgeTests = 12,
};

enum class ecs.FailTest {
    Init = 0,
    Setup = 1,
    Exit = 2,
};

enum class ecs.InventoryTest {
    InvalidInventory = 0,
    TransferHalfToFullStack = 1,
    TransferFullToHalfStack = 2,
    TransferHalfToHalfStack = 3,
    TransferOneFromFullToHalfStack = 4,
    TransferStack = 5,
    EquipmentSlotTransferAmmunition = 6,
    FillStack = 7,
    ExpandInventory = 8,
    AbortExpand = 9,
    ExpandInventoryAgain = 10,
    ShrinkInventory = 11,
    ExpandAndTransferItems = 12,
    ShrinkAndTransferItems = 13,
    ShrinkNotEnoughFreeSpace = 14,
};

enum class ecs.DungeonTriggerTest {
    PressurePlate = 0,
    BasicButton = 1,
    AndConnection = 2,
    OrConnection = 3,
};

enum class ecs.KnowledgeTest {
    Queries = 0,
};

enum class ecs.CookingTest {
    CreateCookingTestComponent = 0,
    CreateCookingItems = 1,
    PlaceCampfire = 2,
    SitAtCampfire = 3,
    CookFood = 4,
    CleanupCookingTest = 5,
};

enum class ecs.FallDamageTestId {
    NoFallDamage = 0,
    MediumFallDamage = 1,
    LethalFallDamageAbortsTeleport = 2,
    TeleportWithoutLethalFallDamage = 3,
    LethalFallDamage = 4,
    LethalSwipeAgainstSlopes = 5,
    NoFallDamageSwipeAgainstSlidingMaterialSlopes = 6,
};

enum class ecs.SlidingTestId {
    WalkUpShallowSlope = 0,
    WalkDownShallowSlope = 1,
    DontWalkUpSteepSlope = 2,
    SlideDownSteepSlope = 3,
    DontWalkUpShallowSlidingMaterialSlope = 4,
    SlideDownShallowSlidingMaterialSlope = 5,
};

enum class ecs.ClimbLadderTestId {
    ClimbUpFlawless = 0,
    ClimbDownFlawless = 1,
    ClimbUpTiltedLadder = 2,
    ClimbDownTiltedLadder = 3,
    ClimbUpSubsequentStaggeredLadders = 4,
    ClimbDownSubsequentStaggeredLadders = 5,
    ClimbUpSubsequentAlignedLadders = 6,
    ClimbDownSubsequentAlignedLadders = 7,
    ClimbNonStop = 8,
    ClimbUpExitBlocked = 9,
    ClimbUpStepBlocked = 10,
    ClimbDownStepBlocked = 11,
    LadderInsideFloorCollisionA = 12,
    LadderInsideFloorCollisionB = 13,
    LadderInsideFloorCollisionC = 14,
    WalkAgainstLadderBack = 15,
    InterruptByJump = 16,
    InterruptByHitEvent = 17,
};

enum class ecs.ClimbWallTestId {
    ClimbUpFlawless = 0,
    ClimbDownFlawless = 1,
    ClimbUpSubsequentAlignedWalls = 2,
    ClimbDownSubsequentAlignedWalls = 3,
    InterruptByJump = 4,
    InterruptByHitEvent = 5,
};

enum class ecs.HookShotSwingTestId {
    SwingGeneral = 0,
    SwingEnterManualJump = 1,
    SwingEnterAutoJump = 2,
    SwingExitAutoRelease = 3,
    DoubleSwingChain = 4,
    InterruptByHitEvent = 5,
};

enum class ecs.HookShotPullTestId {
    PullGeneral = 0,
    PullEnterManualJump = 1,
    PullEnterNoJump = 2,
    PullUp = 3,
    PullFlat = 4,
    PullDown = 5,
    InterruptByHitEvent = 6,
};

enum class ecs.GliderTestId {
    GliderGeneral = 0,
    GliderEnterManualJump = 1,
    GliderEnterNoJump = 2,
    GliderExitFloorCollision = 3,
    GliderAccelerate = 4,
    GliderDecelerate = 5,
    GliderTurn = 6,
    InterruptByHitEvent = 7,
};

struct ecs.CookingTestComponent {
    keen::ecs::EntityId campfireEntityId; // Offset: 0
    keen::Time cookTime; // Offset: 8
    keen::Time postCookWaitTime; // Offset: 16
    keen::Time sitWaitTime; // Offset: 24
    keen::Time standWaitTime; // Offset: 32
    keen::uint8 campfireEntityDeletionTryCount; // Offset: 40
    keen::uint8 cookingTestComponentDeletionTryCount; // Offset: 41
    keen::bool sitToggled; // Offset: 42
    keen::bool standToggled; // Offset: 43
    keen::bool cookingToggled; // Offset: 44
};

struct ecs.TestValueMemory {
    keen::float3 vectorValue; // Offset: 0
    keen::float32 floatValue; // Offset: 12
};

struct ecs.FakePlayerSpawner {
    keen::ecs::TemplateReference entityTemplate; // Offset: 0
};

enum class VoxelMaterialType {
    Terrain = 0,
    Building = 1,
};

struct BaseVoxelMaterial {
};

struct BiomeVoxelMaterial {
    keen::ObjectReference<keen::SolidVoxelMaterial> grassland; // Offset: 0
    keen::ObjectReference<keen::SolidVoxelMaterial> desert; // Offset: 16
    keen::ObjectReference<keen::SolidVoxelMaterial> wetland; // Offset: 32
    keen::ObjectReference<keen::SolidVoxelMaterial> steppes; // Offset: 48
    keen::ObjectReference<keen::SolidVoxelMaterial> deepforest; // Offset: 64
    keen::ObjectReference<keen::SolidVoxelMaterial> coldheights; // Offset: 80
};

enum class HardnessCategory {
    Soft = 0,
    SlightlyHard = 1,
    ModeratelyHard = 2,
    Hard = 3,
    VeryHard = 4,
    Unbreakable = 5,
};

struct VoxelWorldDisplacement {
    keen::ImageReference map; // Offset: 0
    keen::float32 scale; // Offset: 16
    keen::float32 origin; // Offset: 20
    keen::float32 uvScale; // Offset: 24
};

enum class VfxMaterialType {
    None = 0,
    Mud = 1,
    Tar = 2,
    Lava = 3,
    Ice = 4,
    Snow = 5,
};

struct SolidVoxelMaterial {
    keen::VoxelMaterialType type; // Offset: 0
    keen::ItemReference materialItem; // Offset: 4
    keen::HardnessCategory hardness; // Offset: 20
    keen::sint32 healthPoints; // Offset: 24
    keen::ObjectReference<keen::Recipe> blockCraftingRecipe; // Offset: 28
    keen::uint32 voxelsPerLootItemExchangeRate; // Offset: 44
    keen::ObjectReference<keen::ExperienceBalanceValue> experienceGain; // Offset: 48
    keen::bool canBeFlattened; // Offset: 64
    keen::bool isSlidingMaterial; // Offset: 65
    keen::VoxelWorldDisplacement sideDisplacement; // Offset: 68
    keen::VoxelWorldDisplacement topDisplacement; // Offset: 96
    keen::ObjectReference<keen::SolidVoxelMaterial> stoneMaterial; // Offset: 124
    keen::bool canReceiveFloorMaterial; // Offset: 140
    keen::ObjectReference<keen::PbrBuildingMaterial> pbrBuildingMaterial; // Offset: 144
    keen::CollisionFeedbackMaterialReference collisionFeedbackMaterial; // Offset: 160
    keen::AmbientEnvironment ambientEnvironment; // Offset: 176
    keen::BuffTypeReference buffType; // Offset: 180
    keen::ObjectReference<keen::VoxelObjectDefinition> previewVoxelObject; // Offset: 196
    keen::bool isDangerous; // Offset: 212
    keen::float frictionFactor; // Offset: 216
    keen::float maxSubmergeDepth; // Offset: 220
    keen::float minSubmergePercentage; // Offset: 224
    keen::float maxSubmergePercentage; // Offset: 228
    keen::VfxMaterialType vfxMaterialType; // Offset: 232
    keen::ecs::EntityTagReference entityTag; // Offset: 236
    keen::ecs::PathNodeType pathNodeType; // Offset: 252
};

struct BaseFogVoxelMaterial {
    keen::VoxelWorldDisplacement sideDisplacement; // Offset: 0
    keen::VoxelWorldDisplacement topDisplacement; // Offset: 28
};

struct FogVoxelMaterial {
    keen::uint8 level; // Offset: 56
};

struct DecorativeFogVoxelMaterial {
};

struct WaterVoxelMaterial {
};

enum class TemperatureVoxelType {
    Normal = 0,
    Freezing = 1,
};

struct TemperatureVoxelMaterial {
    keen::TemperatureVoxelType temperature; // Offset: 0
};

struct VoxelMaterialTerraformingInfo {
    keen::SolidVoxelMaterial solidVoxelMaterial; // Offset: 0
    keen::PropDamageSusceptibility damageSusceptibility; // Offset: 256
};

struct VoxelMaterialScatteringNoise {
    keen::float32 scale; // Offset: 0
    keen::float32 persistence; // Offset: 4
    keen::float32 outMin; // Offset: 8
    keen::float32 outMax; // Offset: 12
};

struct VoxelMaterialScattering {
    keen::ObjectReference<keen::AbstractScatterImage> densityMap; // Offset: 0
    keen::float32 density; // Offset: 16
    keen::VoxelMaterialScatteringNoise densityNoise; // Offset: 20
    keen::VoxelMaterialScatteringNoise depthNoise; // Offset: 36
    keen::float32 maxWidth; // Offset: 52
    keen::VoxelMaterialScatteringNoise detailNoise; // Offset: 56
    keen::VoxelMaterialScatteringNoise dirtDetailNoise; // Offset: 72
};

enum class VoxelMaterialScatteringShape {
    None = 0,
    NoiseBlob = 1,
    Shaft = 2,
    EmissiveSphere = 3,
    Geodes = 4,
};

struct VoxelMaterialScatterTargetMaterial {
    keen::ObjectReference<keen::SolidVoxelMaterial> material; // Offset: 0
    keen::bool enableScattering; // Offset: 16
    keen::VoxelMaterialScatteringShape shape; // Offset: 17
    keen::float32 modulationInputScale; // Offset: 20
    keen::float32 shapeNoiseScale; // Offset: 24
    keen::float32 structureScale; // Offset: 28
    keen::float32 structureFadeSize; // Offset: 32
    keen::float32 outerRadius; // Offset: 36
    keen::float32 geodesScattterRadius; // Offset: 40
    keen::uint32 geodesCount; // Offset: 44
    keen::float2 geodesRadiusRange; // Offset: 48
    keen::float32 geodesShellWidth; // Offset: 56
};

struct VoxelMaterialScatterTargetMaterialList {
    keen::BlobArray<keen::VoxelMaterialScatterTargetMaterial> materials; // Offset: 0
};

struct VoxelMaterialScatteringList {
    keen::BlobArray<keen::Guid> materialGuids; // Offset: 0
    keen::BlobArray<keen::VoxelMaterialScattering> settings; // Offset: 8
    keen::BlobArray<keen::VoxelMaterialScatterTargetMaterialList> targetMaterials; // Offset: 16
};

struct ecs.Health {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,8> dataStorage; // Offset: 36
};

struct ecs.Stamina {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,8> dataStorage; // Offset: 36
};

struct ecs.StaminaDepletionMod {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.StaminaDamageMod {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.Mana {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,8> dataStorage; // Offset: 36
};

struct ecs.Revive {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,6> dataStorage; // Offset: 36
};

struct ecs.Durability {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,2> dataStorage; // Offset: 36
};

struct ecs.Movement {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,12> dataStorage; // Offset: 36
};

struct ecs.RangedCombat {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,5> dataStorage; // Offset: 36
};

struct ecs.FogResistance {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,5> dataStorage; // Offset: 36
};

struct ecs.Level {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::uint32,2> dataStorage; // Offset: 36
};

struct ecs.Experience {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::uint32,3> dataStorage; // Offset: 36
};

struct ecs.Threat {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,14> dataStorage; // Offset: 36
};

struct ecs.ThreatBonus {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,3> dataStorage; // Offset: 36
};

struct ecs.DamageMod {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.ToolDamageMod {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.DamageModBackstab {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.DamageModSkillShot {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.DamageModSneak {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.DamageModMerciless {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.DamageModAgainst {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,6> dataStorage; // Offset: 36
};

struct ecs.HealingMod {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.DamageSusceptibility {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,19> dataStorage; // Offset: 36
};

struct ecs.CritChance {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,8> dataStorage; // Offset: 36
};

struct ecs.CritDamageMod {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.Strength {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,3> dataStorage; // Offset: 36
};

struct ecs.Intelligence {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,3> dataStorage; // Offset: 36
};

struct ecs.Dexterity {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,3> dataStorage; // Offset: 36
};

struct ecs.Endurance {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,3> dataStorage; // Offset: 36
};

struct ecs.Constitution {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,3> dataStorage; // Offset: 36
};

struct ecs.Spirit {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,3> dataStorage; // Offset: 36
};

struct ecs.Armor {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,5> dataStorage; // Offset: 36
};

struct ecs.ArmorPoints {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::uint32,28> dataStorage; // Offset: 36
};

struct ecs.Block {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,1> dataStorage; // Offset: 36
};

struct ecs.ParryProficiency {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.Comfort {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,1> dataStorage; // Offset: 36
};

struct ecs.Rested {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.MeleeDamageMod {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,8> dataStorage; // Offset: 36
};

struct ecs.RangedDamageMod {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,8> dataStorage; // Offset: 36
};

struct ecs.MagicDamageMod {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,8> dataStorage; // Offset: 36
};

struct ecs.AllyAggroMultiplier {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,1> dataStorage; // Offset: 36
};

struct ecs.StaminaRechargeMod {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,1> dataStorage; // Offset: 36
};

struct ecs.HealthRechargeMod {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,1> dataStorage; // Offset: 36
};

struct ecs.ManaRechargeMod {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,1> dataStorage; // Offset: 36
};

struct ecs.WeaponCategoryDamageMod {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,9> dataStorage; // Offset: 36
};

struct ecs.BodyHeatMaxMod {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.BodyHeat {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::uint32,8> dataStorage; // Offset: 36
};

struct ecs.FreezingResistance {
    keen::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,3> dataStorage; // Offset: 36
};

typedef keen::HashKey32 ItemCollectionId;

typedef keen::HashKey32 SignalId;

typedef keen::HashKey32 LootContainerId;

typedef keen::HashKey32 JournalEntryId;

struct Signal {
};

typedef keen::LocaTagReference CaptionLocaTag;

typedef keen::LocaTagReference LoreLocaTag;

enum class ItemKnowledgeFlag {
    Name = 0,
    Description = 1,
    Lore = 2,
    Recipes = 3,
    Inspected = 4,
};

typedef keen::Bitmask8<keen::ItemKnowledgeFlag> ItemKnowledgeMask;

struct RecipeItemStackResource {
    keen::ItemReference itemRef; // Offset: 0
    keen::ItemId item; // Offset: 16
    keen::uint32 count; // Offset: 20
};

enum class InventoryActionType {
    One = 0,
    Half = 1,
    All = 2,
    CustomAmount = 3,
    Destroy = 4,
};

struct VersionedData {
    keen::uint16 changeCount; // Offset: 0
};

enum class UiState {
    None = 0,
    Preload = 1,
    PreGame = 2,
    Load = 3,
    LoreIntro = 4,
    Play = 5,
};

enum class WheelMenuType {
    None = 0,
    WeaponWheel = 1,
    ToolWheel = 2,
};

enum class InputMode {
    KeyboardMouse = 0,
    Gamepad = 1,
};

enum class AttackDirectionInput {
    UseCamera = 0,
    UseMovement = 1,
};

enum class ControllerButtonStyle {
    Xbox = 0,
    Playstation = 1,
    NintendoSwitch = 2,
};

enum class UiInputId {
    Confirm = 0,
    ConfirmExcludingKeyboard = 1,
    Back = 2,
    Close = 3,
    CloseKeyboardEscapeOnly = 4,
    SecondaryAction = 5,
    TertiaryAction = 6,
    ScreenButtonTrigger = 7,
    NavigationDirections = 8,
    Left = 9,
    Right = 10,
    Up = 11,
    Down = 12,
    LeftHold = 13,
    RightHold = 14,
    UpHold = 15,
    DownHold = 16,
    NextTab = 17,
    PreviousTab = 18,
    NextSubTab = 19,
    PreviousSubTab = 20,
    PageContentScrollBackward = 21,
    PageContentScrollForward = 22,
    PreviousServerPage = 23,
    NextServerPage = 24,
    ZoomIn = 25,
    ZoomOut = 26,
    MapWaypointQuickAction = 27,
    MapSnapToWaypoint = 28,
    MapSnapToPlayerPos = 29,
    MapSnapToHomeBase = 30,
    MapWorldSidebar = 31,
    MapFilterSidebar = 32,
    MapFilterFocusType = 33,
    ClearMapFilter = 34,
    MapPlayersSidebar = 35,
    MapActionsMenu = 36,
    FastTravel = 37,
    GoToJournalEntry = 38,
    ShowOnMap = 39,
    GoToReferencedJournalPage = 40,
    ToggleWaypoint = 41,
    CreateCustomMarker = 42,
    RemoveCustomMarker = 43,
    Ping = 44,
    ItemUseFromBackpack = 45,
    ItemDeleteInBackpack = 46,
    ItemActionsMenu = 47,
    ItemViewerVisibilityToggle = 48,
    SplitStack = 49,
    CharacterDelete = 50,
    SalvageItem = 51,
    LootTakeAll = 52,
    GrabItemEntireStack = 53,
    GrabItemPartialStackBegin = 54,
    GrabItemPartialStackEnd = 55,
    DropItemStackIntoSlot = 56,
    ItemQuickMoveOtherInventory = 57,
    ItemQuickMoveActionbarBackpack = 58,
    ItemQuickMoveContextSensitive = 59,
    RefillStacks = 60,
    SplitStackAdjustMin = 61,
    SplitStackAdjustDecrement = 62,
    SplitStackAdjustHalf = 63,
    SplitStackAdjustIncrement = 64,
    SplitStackAdjustMax = 65,
    BeginStorageStacksActions = 66,
    EndStorageStacksActions = 67,
    BeginStorageAllActions = 68,
    EndStorageAllActions = 69,
    StorageDepositStacks = 70,
    StorageDepositAll = 71,
    StorageRefillStacks = 72,
    StorageTakeAll = 73,
    SortInventory = 74,
    SortStorage = 75,
    EquipAtTargetSlot = 76,
    UnequipAtTargetSlot = 77,
    EquipFromBackpack = 78,
    EquipVanityFromBackpack = 79,
    UnequipFromBackpack = 80,
    Craft = 81,
    CraftFail = 82,
    CraftMultiple = 83,
    CraftMultipleFail = 84,
    Pin = 85,
    Unpin = 86,
    ToggleContentViewerPage = 87,
    Gift = 88,
    ShowTutorial = 89,
    CharacterRename = 90,
    HidePassword = 91,
    TogglePersonalProgressionMode = 92,
    IncreaseSettingsValue = 93,
    DecreaseSettingsValue = 94,
    IncreaseSettingsValueGamepadAlternative = 95,
    DecreaseSettingsValueGamepadAlternative = 96,
    ResetSettings = 97,
    KickPlayer = 98,
    ConfigureHostSettings = 99,
    RenameAltar = 100,
    Count = 101,
};

enum class CharacterState {
    NewlyCreated = 0,
    MarkedForDelete = 1,
    DontUploadToCloud = 2,
};

typedef keen::Bitmask8<keen::CharacterState> CharacterStateMask;

typedef keen::Guid CharacterId;

typedef keen::uint8 SaveGameSlotIndex;

typedef keen::Guid PlayerId;

typedef keen::Guid BaseId;

struct EnemyPhase {
};

struct JumpToObject {
    keen::Guid objectId; // Offset: 0
};

enum class ecs.SpecialInteraction {
    Invalid = 0,
    Enemy_Execution = 1,
    Sneak_Attack = 2,
    StartGuarding = 3,
    StopGuarding = 4,
};

enum class PlayerLoginState {
    Invalid = 0,
    SendLoginResponseData = 1,
    WaitingForMachineReady = 2,
    LoginOk = 3,
    LogoutPending = 4,
    Logout = 5,
    Failed = 6,
};

enum class GameClientInitState {
    NotInitialized = 0,
    Init = 1,
    Login = 2,
    LoadScene = 3,
    LoadVoxelWorld = 4,
    SyncCharacterSaveGame = 5,
    TitleScreen = 6,
    Ready = 7,
};

enum class PlayerPermissions {
    CanKickBan = 0,
    CanAccessInventories = 1,
    CanEditBase = 2,
    CanExtendBase = 3,
};

typedef keen::Bitmask8<keen::PlayerPermissions> PlayerPermissionsMask;

enum class VoxelConstraint {
    HasSubmergeDepth = 0,
    IsDangerous = 1,
};

typedef keen::Bitmask8<keen::VoxelConstraint> VoxelConstraintMask;

struct VoxelRequirements {
    keen::VoxelConstraintMask required; // Offset: 0
    keen::VoxelConstraintMask forbidden; // Offset: 1
};

struct ecs.ServerProgressSystem {
    keen::ecs::EntityId progressEntity; // Offset: 0
    keen::uint32 progressLevel; // Offset: 4
    keen::uint32 currentAltarCount; // Offset: 8
    keen::uint32 currentHighestAltarLevel; // Offset: 12
};

struct ecs.BaseIdComponent {
    keen::BaseId baseId; // Offset: 0
    keen::float3 buildZoneSize; // Offset: 16
    keen::Time endOfTimeout; // Offset: 32
    keen::bool wasAbandoned; // Offset: 40
};

struct ecs.ClientBaseIdComponent {
    keen::Time endOfTimeout; // Offset: 0
    keen::bool wasAbandoned; // Offset: 8
    keen::uint16 farmingAnimalCount; // Offset: 10
    keen::uint16 hungryFarmingAnimalCount; // Offset: 12
    keen::uint16 animalsWithoutBedCount; // Offset: 14
    keen::uint16 npcBedCount; // Offset: 16
    keen::uint16 farmingAnimalBedCount; // Offset: 18
    keen::uint16 occupiedFarmingAnimalBedCount; // Offset: 20
};

struct ecs.NoBuildZone {
};

struct ecs.UnlockedJournalEntries {
    keen::uint16 knowledgeChangeCounter; // Offset: 0
    keen::uint16 journalChangeCounter; // Offset: 2
};

struct ecs.HealthBar {
    keen::Time lastChange; // Offset: 0
};

struct ecs.EnergyProvider {
    keen::uint32 energyPerSecond; // Offset: 0
};

struct ecs.EnergyQuery {
    keen::ecs::EntityId entityId; // Offset: 0
    keen::uint32 energyPerSecond; // Offset: 4
    keen::float32 entityDistanceSquared; // Offset: 8
};

enum class ecs.CookingState {
    CookingRequirementsNotMet = 0,
    NotCooking = 1,
    CurrentlyCooking = 2,
    StartedCooking = 3,
    StoppedCooking = 4,
    SwitchToFoodBurnedEntity = 5,
    WaitForFoodEntityDestruction = 6,
    WaitForEvents = 7,
};

enum class ecs.CookingFlags {
    ReceivedSpawnCookEvent = 0,
    ReceivedStartCookEvent = 1,
    IsCooking = 2,
    CanCook = 3,
};

typedef keen::Bitmask8<keen::ecs::CookingFlags> ecs.CookingMask;

struct ecs.CookingData {
    keen::ecs::EntityId cookingHearthEntityId; // Offset: 0
    keen::ecs::EntityId skewerEntityId; // Offset: 4
    keen::ecs::EntityId burnedFoodEntityId; // Offset: 8
    keen::ecs::EntityId cookFoodEntityId; // Offset: 12
    keen::ItemId baseItemId; // Offset: 16
    keen::ItemId cookingItemId; // Offset: 20
    keen::ItemId nextCookingItemId; // Offset: 24
    keen::KnowledgeId nextKnowledgeTriggerId; // Offset: 28
    keen::KnowledgeId cookingKnowledgeTriggerId; // Offset: 32
    keen::uint32 cookingEnergy; // Offset: 36
    keen::uint32 requiredEnergy; // Offset: 40
    keen::ecs::CookingMask mask; // Offset: 44
    keen::ecs::CookingState state; // Offset: 45
};

struct ecs.NetworkCookingData {
    keen::ecs::EntityId cookingHearthEntityId; // Offset: 0
    keen::ecs::CookingMask mask; // Offset: 4
};

struct ecs.CookingNotifier {
    keen::NotifierReference onFoodStateChange; // Offset: 0
    keen::NotifierReference onFoodBurned; // Offset: 16
};

struct ecs.AttributeRegeneration {
    keen::Time lastNegativeChange; // Offset: 0
    keen::float32 accumulatedValue; // Offset: 8
    keen::sint32 lastValue; // Offset: 12
};

struct ecs.HealthRecharge {
};

struct ecs.StaminaRecharge {
};

struct ecs.ManaRegeneration {
};

struct ecs.BodyHeatRecharge {
};

struct ecs.StaminaDepletion {
    keen::float32 accumulatedValue; // Offset: 0
};

struct ecs.BodyHeatDepletion {
    keen::float32 accumulatedValue; // Offset: 0
};

struct ecs.MovementVector {
    keen::float3 velocity; // Offset: 0
    keen::float3 movement; // Offset: 12
};

struct ecs.Projectile {
};

struct ecs.ParriableProjectile {
    keen::ecs::TemplateReference parriedProjectileTemplate; // Offset: 0
    keen::Angle launchPitchAngleOffset; // Offset: 16
    keen::float32 launchSpeedFactor; // Offset: 20
};

struct ecs.ParriedProjectile {
    keen::FactionType originalFaction; // Offset: 0
    keen::ecs::EntityId originalSpawnerId; // Offset: 4
};

enum class ecs.ProjectileMode {
    Direct = 0,
    Ballistic = 1,
};

struct ecs.CirclingTargetSettings {
    keen::Angle angleOffset; // Offset: 0
    keen::float radius; // Offset: 4
    keen::float heightOffset; // Offset: 8
};

struct ecs.EnemyProjectile {
    keen::ecs::ProjectileMode mode; // Offset: 0
    keen::float32 targetOffsetY; // Offset: 4
    keen::uint8 maxTries; // Offset: 8
    keen::float32 force; // Offset: 12
    keen::bool addGravity; // Offset: 16
    keen::bool useLowAngle; // Offset: 17
    keen::bool lockTargetPosition; // Offset: 18
    keen::BlobArray<keen::Angle> hitAngles; // Offset: 20
    keen::Angle minPitch; // Offset: 28
    keen::Angle maxPitch; // Offset: 32
    keen::Angle maxHorizontalAngle; // Offset: 36
    keen::bool useFixedTargetOffset; // Offset: 40
    keen::ecs::Offset targetOffset; // Offset: 44
    keen::bool useCirclingTarget; // Offset: 84
    keen::ecs::CirclingTargetSettings circlingTargetSettings; // Offset: 88
};

struct ecs.StaticUsedItem {
    keen::ItemReference itemReference; // Offset: 0
};

struct ecs.UsedItem {
    keen::ItemId itemId; // Offset: 0
};

struct ecs.PerkContainer {
    keen::StaticArray<keen::PerkId,5> perkIds; // Offset: 0
    keen::StaticArray<keen::bool,5> perkIsUnlocked; // Offset: 20
};

enum class ecs.DismantleVolumeClass {
    Tiny = 0,
    Small = 1,
    Medium = 2,
    Large = 3,
};

enum class ecs.DismantleMethod {
    None = 0,
    PickUp = 1,
    TearDown = 2,
};

struct ecs.DismantleOverride {
    keen::bool overrideMethod; // Offset: 0
    keen::ecs::DismantleMethod method; // Offset: 1
    keen::bool overrideVolumeClass; // Offset: 2
    keen::ecs::DismantleVolumeClass volumeClass; // Offset: 3
    keen::bool ignoreBuildZoneChecks; // Offset: 4
    keen::bool preventDismantlingWithFilledInventory; // Offset: 5
};

struct ecs.ClientDismantleOverride {
    keen::bool forceImmediateDismantlePrompt; // Offset: 0
};

struct ecs.SubEntitySpawnInfo {
    keen::ecs::TemplateReference templateRef; // Offset: 0
    keen::ecs::Offset offset; // Offset: 16
    keen::AttachmentSlot slot; // Offset: 56
    keen::bool hasKnowledgeRequirement; // Offset: 57
    keen::GameKnowledgeRequirement knowledgeRequirement; // Offset: 60
    keen::KnowledgeId knowledgeRequirementId; // Offset: 164
    keen::bool attach; // Offset: 168
    keen::bool despawnOnDeath; // Offset: 169
    keen::bool addDespawnLink; // Offset: 170
    keen::bool addOwnerRelationship; // Offset: 171
    keen::bool doNotSave; // Offset: 172
    keen::bool copyConditionalDespawn; // Offset: 173
    keen::bool copyLevel; // Offset: 174
    keen::bool addImpactHierarchy; // Offset: 175
};

struct ecs.SubEntities {
    keen::BlobArray<keen::ecs::SubEntitySpawnInfo> subEntities; // Offset: 0
    keen::bool hasSavedChildren; // Offset: 8
};

struct ecs.DynamicSubEntities {
    keen::StaticArray<keen::ecs::EntityId,16> subEntities; // Offset: 0
};

struct ecs.SubEntitiesStop {
};

struct ecs.ToggleSubEntities {
    keen::ecs::ToggleModifier toggleModifier; // Offset: 0
};

struct ecs.DynamicToggleSubEntities {
    keen::bool dontSpawn; // Offset: 0
};

struct ecs.SubEntityAttachmentMask {
    keen::AttachmentSlotMask mask; // Offset: 0
};

struct ecs.EntityAnimation {
    keen::JointAnimationReference animation; // Offset: 0
    keen::uint32 animationHandle; // Offset: 16
    keen::Time sampleTime; // Offset: 24
};

struct ecs.DespawnAfterSequence {
    keen::actor::SequenceRuntimeId sequenceId; // Offset: 0
};

struct ecs.WeaponReference {
    keen::ecs::EntityId weaponEntityId; // Offset: 0
    keen::ecs::EntityId weaponOwnerEntityId; // Offset: 4
};

struct ecs.HitReactionConfig {
    keen::animationgraph::OverlayIdReference hitReactionOverlay; // Offset: 0
    keen::actor::ActorSequenceReference hitSequence; // Offset: 16
};

struct ecs.HitReactionBehavior {
    keen::ecs::HitReactionConfig hitReactionBlockLightAttack; // Offset: 0
    keen::ecs::HitReactionConfig hitReactionLight; // Offset: 32
    keen::ecs::HitReactionConfig hitReactionHeavy; // Offset: 64
    keen::ecs::HitReactionConfig hitReactionBoss; // Offset: 96
    keen::ecs::HitReactionConfig hitReactionLongStun; // Offset: 128
    keen::ecs::HitReactionConfig hitReactionTrapStun; // Offset: 160
    keen::ecs::HitReactionConfig hitReactionShortStunBeGoneSkill; // Offset: 192
    keen::ecs::HitReactionConfig hitReactionThrowIntoAir; // Offset: 224
    keen::ecs::HitReactionConfig hitReactionWhileFlying; // Offset: 256
};

enum class ecs.EntityReferenceType {
    Self = 0,
    Parent = 1,
    Weapon = 2,
};

struct ecs.LerpRenderTransform {
    keen::bool isInitialized; // Offset: 0
    keen::ecs::EntityReferenceType entityReferenceType; // Offset: 1
    keen::AttachmentSlot attachmentSlot; // Offset: 2
    keen::Time lerpDuration; // Offset: 8
    keen::float32 lerpValueStart; // Offset: 16
    keen::float32 lerpValueEnd; // Offset: 20
    keen::Time lerpTimeStart; // Offset: 24
    keen::float3 translateDelta; // Offset: 32
};

struct ecs.HomeToTarget {
    keen::float3 targetLocalOffset; // Offset: 0
    keen::float32 turnSpeed; // Offset: 12
    keen::float32 turnSpeedMinDistanceFactor; // Offset: 16
    keen::float32 turnSpeedMaxDistanceFactor; // Offset: 20
    keen::float32 turnSpeedMinDistance; // Offset: 24
    keen::float32 turnSpeedMaxDistance; // Offset: 28
    keen::float32 acceleration; // Offset: 32
    keen::float32 maxSpeed; // Offset: 36
    keen::bool homeToCollisionTarget; // Offset: 40
    keen::float32 rayLength; // Offset: 44
    keen::bool accelerateDependsOnAngle; // Offset: 48
};

struct ecs.DynamicHomeToTarget {
    keen::float3 targetPosition; // Offset: 0
};

struct ecs.Boomerang {
    keen::Time returnToSpawnerDelay; // Offset: 0
    keen::float32 destroyOnApproachSpawnerDistance; // Offset: 8
};

enum class ecs.AggroTargetState {
    Unknown = 0,
    Aborted = 1,
    Noticed = 2,
    Alarmed = 3,
};

enum class ecs.AggroPool {
    Senses = 0,
    Friends = 1,
    Enemies = 2,
    Count = 3,
};

struct ecs.AggroPoolData {
    keen::float32 value; // Offset: 0
    keen::Time lastGain; // Offset: 8
};

enum class ecs.LineOfSightState {
    None = 0,
    InSight = 1,
    OutOfSight = 2,
    Count = 3,
};

enum class ecs.TargetReachableState {
    Unknown = 0,
    Reachable = 1,
    NotReachable = 2,
};

struct ecs.AggroTarget {
    keen::StaticArray<keen::ecs::AggroPoolData,3> aggroPools; // Offset: 0
    keen::ecs::AggroTargetState state; // Offset: 48
    keen::ecs::EntityId entityId; // Offset: 52
    keen::float32 value; // Offset: 56
    keen::Time lastLineOfSightQueryTime; // Offset: 64
    keen::ecs::LineOfSightState lineOfSightState; // Offset: 72
    keen::Time lastStateChangeTime; // Offset: 80
    keen::FactionType faction; // Offset: 88
    keen::float pathLength; // Offset: 92
    keen::ecs::TargetReachableState reachableState; // Offset: 96
    keen::float distanceToTarget; // Offset: 100
    keen::float enemyValue; // Offset: 104
};

struct ecs.AggroTargetPathQuery {
    keen::ecs::PathQueryId queryId; // Offset: 0
    keen::Time nextCheckTime; // Offset: 8
    keen::float3 lastStart; // Offset: 16
    keen::float3 lastTarget; // Offset: 28
};

struct ecs.Aggro {
    keen::StaticArray<keen::ecs::AggroTarget,6> targets; // Offset: 0
    keen::StaticArray<keen::ecs::AggroTargetPathQuery,6> pathQueries; // Offset: 672
    keen::Time nextAllowedTargetChangeTime; // Offset: 912
    keen::ecs::QueryId queryId; // Offset: 920
    keen::bool applyEnemyValue; // Offset: 924
    keen::bool allowTargetSwitches; // Offset: 925
};

struct ecs.TriggerNoise {
    keen::float32 range; // Offset: 0
    keen::Time nextTriggerTime; // Offset: 8
    keen::Time triggerInterval; // Offset: 16
};

struct ecs.TriggerWalkingNoise {
    keen::float32 sneakRange; // Offset: 0
    keen::float32 walkRange; // Offset: 4
    keen::float32 runRange; // Offset: 8
    keen::float32 sprintRange; // Offset: 12
    keen::Time nextTriggerTime; // Offset: 16
    keen::Time triggerInterval; // Offset: 24
};

struct ecs.EnemyPhases {
    keen::StaticArray<keen::ObjectReference<keen::EnemyPhase>,8> phases; // Offset: 0
};

struct ecs.DynamicEnemyPhases {
    keen::Guid lastPhase; // Offset: 0
    keen::Guid currentPhase; // Offset: 16
    keen::Time currentPhaseStartTime; // Offset: 32
};

struct ecs.EnemyAiming {
    keen::BlobArray<keen::bool> hitPattern; // Offset: 0
    keen::float32 minDistanceToMissTarget; // Offset: 8
};

struct ecs.DynamicEnemyAiming {
    keen::uint8 hitIndex; // Offset: 0
    keen::uint8 hitAngleIndex; // Offset: 1
    keen::StaticArray<keen::ecs::EntityId,8> projectiles; // Offset: 4
};

enum class ecs.ContextualVector2Context {
    PositionDelta = 0,
    Velocity = 1,
};

struct ecs.ContextualVector2 {
    keen::ecs::ContextualVector2Context context; // Offset: 0
    keen::Vector2 value; // Offset: 4
};

struct ecs.ExecutionTarget {
    keen::float32 executionRange; // Offset: 0
    keen::bool enableSneackAttackExecution; // Offset: 4
    keen::bool enableMercilessAttackExecution; // Offset: 5
    keen::float32 minMercilessAttackHealthPercentage; // Offset: 8
    keen::bool allowMercilessAttackRetrigger; // Offset: 12
    keen::bool canMercilessAttackBeExecuted; // Offset: 13
    keen::bool waitForHealthAboveThreshold; // Offset: 14
    keen::bool waitForStaminaRecharge; // Offset: 15
};

enum class ecs.TransferItemToInventoryFlag {
    Gifting = 0,
    RefillStacks = 1,
    MoveAllStacks = 2,
    ToActionbar = 3,
    ToBackpack = 4,
};

typedef keen::Bitmask8<keen::ecs::TransferItemToInventoryFlag> ecs.TransferItemToInventoryFlags;

struct ecs.InventoryTransferAction {
    keen::VersionedData versionData; // Offset: 0
    keen::ecs::EntityId sourceEntityId; // Offset: 4
    keen::ecs::EntityId targetEntityId; // Offset: 8
    keen::InventorySlotId sourceSlotId; // Offset: 12
    keen::InventorySlotId targetSlotId; // Offset: 20
    keen::InventoryActionType type; // Offset: 28
    keen::ecs::TransferItemToInventoryFlags flags; // Offset: 29
    keen::uint16 amount; // Offset: 30
};

struct ecs.SelectSongAction {
    keen::VersionedData versionData; // Offset: 0
    keen::HashKey32 songId; // Offset: 4
};

struct ecs.SortInventoryAction {
    keen::VersionedData versionData; // Offset: 0
    keen::ecs::EntityId targetInventoryId; // Offset: 4
};

struct ecs.CreateBuildingItemAction {
    keen::VersionedData versionData; // Offset: 0
    keen::ActionbarSlotSelection selectedIndex; // Offset: 2
    keen::ItemId itemId; // Offset: 4
};

struct ecs.CreateNpcItemAction {
    keen::VersionedData versionData; // Offset: 0
    keen::ItemId itemId; // Offset: 4
};

struct ecs.ActionbarSelectionAction {
    keen::VersionedData versionData; // Offset: 0
    keen::ActionbarSlotSelection selectedIndex; // Offset: 2
};

struct ecs.InventoryStockCycleAction {
    keen::VersionedData versionData; // Offset: 0
    keen::ItemId selectedItemId; // Offset: 4
};

struct ecs.ParryAction {
    keen::VersionedData versionData; // Offset: 0
    keen::StaticArray<keen::ecs::EntityId,4> targetEntityIds; // Offset: 4
};

struct ecs.KickPlayerAction {
    keen::VersionedData versionData; // Offset: 0
    keen::ecs::EntityId targetEntityId; // Offset: 4
};

struct ecs.TwitchDropRewardAction {
    keen::VersionedData versionData; // Offset: 0
    keen::ecs::EntityId targetEntityId; // Offset: 4
    keen::ItemId itemId; // Offset: 8
};

enum class ecs.TombstoneMode {
    AddBackpackMaterials = 0,
    Everything = 1,
    NoTombstone = 2,
};

enum class ecs.WeatherFrequency {
    Disabled = 0,
    Rare = 1,
    Normal = 2,
    Often = 3,
};

enum class ecs.AggroPoolAmount {
    Few = 0,
    Normal = 1,
    Many = 2,
    Extreme = 3,
};

enum class ecs.TamingStartleRepercussion {
    KeepProgress = 0,
    LoseSomeProgress = 1,
    LoseAllProgress = 2,
};

struct ecs.GameSettings {
    keen::float playerHealthFactor; // Offset: 0
    keen::float playerManaFactor; // Offset: 4
    keen::float playerStaminaFactor; // Offset: 8
    keen::float playerBodyHeatFactor; // Offset: 12
    keen::bool enableDurability; // Offset: 16
    keen::bool enableStarvingDebuff; // Offset: 17
    keen::float foodBuffDurationFactor; // Offset: 20
    keen::Time fromHungerToStarving; // Offset: 24
    keen::float shroudTimeFactor; // Offset: 32
    keen::ecs::TombstoneMode tombstoneMode; // Offset: 36
    keen::bool enableGliderTurbulences; // Offset: 37
    keen::ecs::WeatherFrequency weatherFrequency; // Offset: 38
    keen::float miningDamageFactor; // Offset: 40
    keen::float plantGrowthSpeedFactor; // Offset: 44
    keen::float resourceDropStackAmountFactor; // Offset: 48
    keen::float factoryProductionSpeedFactor; // Offset: 52
    keen::float perkUpgradeRecyclingFactor; // Offset: 56
    keen::float perkCostFactor; // Offset: 60
    keen::float experienceCombatFactor; // Offset: 64
    keen::float experienceMiningFactor; // Offset: 68
    keen::float experienceExplorationQuestsFactor; // Offset: 72
    keen::ecs::RandomSpawnerAmount randomSpawnerAmount; // Offset: 76
    keen::ecs::AggroPoolAmount aggroPoolAmount; // Offset: 77
    keen::float enemyDamageFactor; // Offset: 80
    keen::float enemyHealthFactor; // Offset: 84
    keen::float enemyStaminaFactor; // Offset: 88
    keen::float enemyPerceptionRangeFactor; // Offset: 92
    keen::float bossDamageFactor; // Offset: 96
    keen::float bossHealthFactor; // Offset: 100
    keen::float threatBonus; // Offset: 104
    keen::bool pacifyAllEnemies; // Offset: 108
    keen::ecs::TamingStartleRepercussion tamingStartleRepercussion; // Offset: 109
    keen::Time dayTimeDuration; // Offset: 112
    keen::Time nightTimeDuration; // Offset: 120
};

struct ecs.AdminChangeGameSettingsAction {
    keen::ecs::GameSettings gameSettings; // Offset: 0
    keen::VersionedData versionData; // Offset: 128
};

struct ecs.AdminApplyInventoryCommand {
    keen::VersionedData versionData; // Offset: 0
    keen::Guid inventoryGuid; // Offset: 4
    keen::bool clearInventories; // Offset: 20
};

struct ecs.AdminSpawnCommand {
    keen::VersionedData versionData; // Offset: 0
    keen::uint16 level; // Offset: 2
    keen::Guid templateGuid; // Offset: 4
    keen::uint8 optionalDistance; // Offset: 20
    keen::uint8 count; // Offset: 21
    keen::bool useRoaming; // Offset: 22
    keen::bool showSpawnSequence; // Offset: 23
    keen::bool spawnAsGroup; // Offset: 24
    keen::bool spawnAsFakePlayer; // Offset: 25
    keen::bool followPlayer; // Offset: 26
    keen::uint8 autoDestroyTicks; // Offset: 27
};

struct ecs.AdminKillFactionCommand {
    keen::VersionedData versionData; // Offset: 0
    keen::FactionMask factionMask; // Offset: 2
    keen::uint32 playerMask; // Offset: 4
};

enum class ItemRarity {
    Common = 0,
    Uncommon = 1,
    Rare = 2,
    Epic = 3,
    Legendary = 4,
    Count = 5,
};

struct ecs.AdminInventoryCreateAction {
    keen::ItemId itemId; // Offset: 0
    keen::VersionedData versionData; // Offset: 4
    keen::uint16 count; // Offset: 6
    keen::ItemRarity rarity; // Offset: 8
    keen::uint8 level; // Offset: 9
    keen::bool createForAllPlayers; // Offset: 10
    keen::bool createFullStack; // Offset: 11
    keen::bool fillEmptyStacks; // Offset: 12
    keen::bool maximizeCharacter; // Offset: 13
    keen::bool cleanupInventory; // Offset: 14
    keen::bool flameLevelUpgrade; // Offset: 15
};

struct ecs.AdminTeleportAction {
    keen::ecs::Transform transform; // Offset: 0
    keen::VersionedData versionData; // Offset: 28
};

struct ecs.AdminSetDayTimeAction {
    keen::Time syncDaytime; // Offset: 0
    keen::Time syncDaytimeTick; // Offset: 8
    keen::VersionedData versionData; // Offset: 16
};

struct ecs.AdminDestroyItemAction {
    keen::VersionedData versionData; // Offset: 0
    keen::InventorySlotId inventorySlotId; // Offset: 4
};

struct ecs.AdminSetFlameLevel {
    keen::VersionedData versionData; // Offset: 0
    keen::uint8 flameLevel; // Offset: 2
};

struct ecs.AdminSetCharacterLevel {
    keen::VersionedData versionData; // Offset: 0
    keen::ecs::EntityId targetEntityId; // Offset: 4
    keen::uint8 level; // Offset: 8
};

struct ecs.AdminPerkAction {
    keen::VersionedData versionData; // Offset: 0
    keen::InventorySlotId inventorySlotId; // Offset: 4
    keen::bool state; // Offset: 12
};

struct ecs.AdminDebugCameraDisplayAction {
    keen::VersionedData versionData; // Offset: 0
    keen::bool enable; // Offset: 2
};

struct ecs.ChangeCustomizationAction {
    keen::InventorySlotId targetSlotId; // Offset: 0
    keen::ItemId itemId; // Offset: 8
    keen::VersionedData versionData; // Offset: 12
};

enum class ecs.FlameAltarActionType {
    Abandon = 0,
    Reclaim = 1,
};

struct ecs.FlameAltarAction {
    keen::ecs::EntityId baseEntityId; // Offset: 0
    keen::VersionedData versionData; // Offset: 4
    keen::ecs::FlameAltarActionType type; // Offset: 6
};

struct ecs.TeleportAction {
    keen::ecs::EntityId target; // Offset: 0
    keen::VersionedData versionData; // Offset: 4
};

struct ecs.UnlockSkillAction {
    keen::SkillNodeId skillId; // Offset: 0
    keen::bool resetSkills; // Offset: 4
    keen::VersionedData versionData; // Offset: 6
};

struct ecs.AdminUnlearnSkillAction {
    keen::SkillNodeId skillId; // Offset: 0
    keen::VersionedData versionData; // Offset: 4
};

struct ecs.TriggerKnowledgeAction {
    keen::LocaTagId dialogOptionId; // Offset: 0
    keen::KnowledgeId knowledgeId; // Offset: 4
    keen::VersionedData versionData; // Offset: 8
};

struct ecs.SetPersonalProgressionAction {
    keen::bool enable; // Offset: 0
    keen::VersionedData versionData; // Offset: 2
};

struct ecs.AmbientHelper {
    keen::AmbientMask ambientMask; // Offset: 0
};

struct ecs.WaypointAction {
    keen::WorldPosition position; // Offset: 0
    keen::bool enable; // Offset: 24
    keen::bool isPing; // Offset: 25
    keen::VersionedData versionData; // Offset: 26
};

struct ecs.SelectDialogOptionAction {
    keen::LocaTagId dialogOptionId; // Offset: 0
    keen::ecs::EntityId targetNpc; // Offset: 4
    keen::VersionedData versionData; // Offset: 8
};

struct ecs.NpcInputAction {
    keen::NpcId targetNpc; // Offset: 0
    keen::float roamingRange; // Offset: 4
    keen::VersionedData versionData; // Offset: 8
};

typedef keen::HashKey32 RecipeId;

struct ecs.CraftRecipeAction {
    keen::ecs::EntityId craftingStationId; // Offset: 0
    keen::RecipeId recipeId; // Offset: 4
    keen::uint16 recipeAmount; // Offset: 8
    keen::VersionedData versionData; // Offset: 10
};

struct ecs.AutomaticTransferAction {
    keen::ecs::EntityId craftingStationId; // Offset: 0
    keen::RecipeId recipeId; // Offset: 4
    keen::ItemId itemId; // Offset: 8
    keen::uint16 amount; // Offset: 12
    keen::VersionedData versionData; // Offset: 14
};

struct ecs.SelectCraftingStationRecipeAction {
    keen::ecs::EntityId craftingStationId; // Offset: 0
    keen::RecipeId recipeId; // Offset: 4
    keen::VersionedData versionData; // Offset: 8
};

struct ecs.PerkUnlockAction {
    keen::VersionedData versionData; // Offset: 0
    keen::InventorySlotId inventorySlotId; // Offset: 4
};

struct ecs.TrashItemAction {
    keen::VersionedData versionData; // Offset: 0
    keen::InventorySlotId inventorySlotId; // Offset: 4
};

enum class ecs.ChangeEquipment {
    Equip = 0,
    Unequip = 1,
};

struct ecs.ChangeEquipmentAction {
    keen::InventorySlotId inventorySlotId; // Offset: 0
    keen::VersionedData versionData; // Offset: 8
    keen::EquipmentSlot equipmentSlot; // Offset: 10
    keen::ecs::ChangeEquipment type; // Offset: 11
};

enum class ecs.SwapEquipmentTarget {
    ActiveEquipment = 0,
    Vanity = 1,
};

struct ecs.SwapEquipmentSetAction {
    keen::ecs::EntityId targetInventoryId; // Offset: 0
    keen::ecs::SwapEquipmentTarget target; // Offset: 4
    keen::VersionedData versionData; // Offset: 6
};

struct ecs.ConsumeItemAction {
    keen::InventorySlotId inventorySlotId; // Offset: 0
    keen::VersionedData versionData; // Offset: 8
};

struct ecs.InspectItemAction {
    keen::InventorySlotId inventorySlotId; // Offset: 0
    keen::VersionedData versionData; // Offset: 8
};

struct ecs.RepairAllItemsAction {
    keen::VersionedData versionData; // Offset: 0
};

struct ecs.RequiredCraftingProp {
    keen::ObjectReference<keen::CraftingPropDefinition> type; // Offset: 0
    keen::CraftingPropId craftingPropId; // Offset: 16
};

enum class ecs.FactoryStationState {
    NoRecipe = 0,
    MissingMaterials = 1,
    Running = 2,
    MissingOutputSpace = 3,
};

struct ecs.FactoryStation {
    keen::ecs::FactoryStationState state; // Offset: 0
    keen::RecipeId runningRecipe; // Offset: 4
    keen::RecipeId nextRecipe; // Offset: 8
    keen::Time recipeStart; // Offset: 16
};

struct ecs.FactoryStationClient {
    keen::SoundContainerReference soundLoopRunning; // Offset: 0
    keen::uint32 soundLoopRunningHandle; // Offset: 16
};

struct ecs.UiBlueprintShapeSelection {
    keen::uint8 selectionIndex; // Offset: 0
    keen::bool isSet; // Offset: 1
};

struct ecs.UiPlayerInput {
    keen::sint8 lootSelectionDelta; // Offset: 0
    keen::sint8 blueprintPageSelectionDelta; // Offset: 1
    keen::sint8 blueprintShapeSelectionDelta; // Offset: 2
    keen::ecs::UiBlueprintShapeSelection blueprintShapeSelection; // Offset: 3
    keen::float32 dismantleHoldProgress; // Offset: 8
    keen::bool canCycleInventoryStock; // Offset: 12
    keen::bool isInventoryStockCyclingDisabled; // Offset: 13
    keen::bool isBlueprintPageSelectionModifierActive; // Offset: 14
    keen::bool isTertiaryActionAllowed; // Offset: 15
    keen::bool showTutorial; // Offset: 16
    keen::bool showInventoryStock; // Offset: 17
    keen::bool showActionbarWheel; // Offset: 18
    keen::bool showQuickEquipWheel; // Offset: 19
    keen::bool jumpToNotification; // Offset: 20
};

struct ecs.ClientOnlyPlayerInput {
    keen::sint8 actionbarSelectionDelta; // Offset: 0
    keen::sint8 inventoryStockCycleDelta; // Offset: 1
    keen::sint8 songSelectionDelta; // Offset: 2
    keen::sint8 zoomInputDelta; // Offset: 3
};

struct ecs.ClientCamera {
    keen::WorldPosition position; // Offset: 0
    keen::Quaternion orientation; // Offset: 24
    keen::float32 distance; // Offset: 40
    keen::float32 fovY; // Offset: 44
    keen::float32 aspectRatio; // Offset: 48
    keen::float32 nearPlane; // Offset: 52
    keen::float32 farPlane; // Offset: 56
};

enum class ecs.ClientPlayerState {
    IsInBlueprintMenu = 0,
    IsInLootingMenu = 1,
    IsInFreeCam = 2,
};

typedef keen::Bitmask8<keen::ecs::ClientPlayerState> ecs.ClientPlayerStateMask;

enum class ecs.PlayerInputType {
    MainhandAction = 0,
    MainhandAction_Release = 1,
    ContextualAction = 2,
    ContextualAction_Tap = 3,
    ContextualAction_Hold = 4,
    CancelAction = 5,
    QuickUse0 = 6,
    QuickUse1 = 7,
    QuickUse2 = 8,
    QuickUse3 = 9,
    QuickUse4 = 10,
    QuickUse5 = 11,
    QuickUse6 = 12,
    QuickUse7 = 13,
    QuickUse0_Release = 14,
    QuickUse1_Release = 15,
    QuickUse2_Release = 16,
    QuickUse3_Release = 17,
    QuickUse4_Release = 18,
    QuickUse5_Release = 19,
    QuickUse6_Release = 20,
    QuickUse7_Release = 21,
    Block = 22,
    Evade = 23,
    Jump = 24,
    Jump_Hold = 25,
    Glider = 26,
    Respawn = 27,
    BuildingUndo = 28,
    BuildingBlueprintSnapping = 29,
    BuildingVoxelGridSnapping = 30,
    LockCombatTarget = 31,
    CombatTargetSelectPrevious = 32,
    CombatTargetSelectNext = 33,
    RangedCombatArm = 34,
    RangedCombatShoot = 35,
    Sprint = 36,
    Sneak = 37,
    Sit = 38,
    Count = 39,
};

typedef keen::Bitmask64<keen::ecs::PlayerInputType> ecs.PlayerDigitalInput;

struct ecs.ClientPlayerInputData {
    keen::ecs::InventoryTransferAction inventoryTransferAction; // Offset: 0
    keen::ecs::ClientCamera camera; // Offset: 32
    keen::ecs::ActionbarSelectionAction actionbarSelectionAction; // Offset: 96
    keen::ecs::SortInventoryAction sortInventoryAction; // Offset: 100
    keen::ecs::SelectSongAction selectSongAction; // Offset: 108
    keen::ecs::InventoryStockCycleAction inventoryStockCycleAction; // Offset: 116
    keen::ecs::CraftRecipeAction craftRecipeAction; // Offset: 124
    keen::ecs::AutomaticTransferAction automaticTransferAction; // Offset: 136
    keen::ecs::SelectCraftingStationRecipeAction selectCraftingStationRecipeAction; // Offset: 152
    keen::ecs::ChangeCustomizationAction changeCustomizationAction; // Offset: 164
    keen::ecs::TeleportAction teleportAction; // Offset: 180
    keen::ecs::UnlockSkillAction unlockSkillAction; // Offset: 188
    keen::ecs::TriggerKnowledgeAction triggerKnowledgeAction; // Offset: 196
    keen::ecs::SetPersonalProgressionAction setPersonalProgressionAction; // Offset: 208
    keen::ecs::SelectDialogOptionAction selectDialogOptionAction; // Offset: 212
    keen::ecs::NpcInputAction npcInputAction; // Offset: 224
    keen::ecs::ChangeEquipmentAction changeEquipmentAction; // Offset: 236
    keen::ecs::SwapEquipmentSetAction swapEquipmentSetAction; // Offset: 248
    keen::ecs::ConsumeItemAction consumeItemAction; // Offset: 256
    keen::ecs::InspectItemAction inspectItemAction; // Offset: 268
    keen::ecs::RepairAllItemsAction repairAllItemsAction; // Offset: 280
    keen::ecs::CreateBuildingItemAction createBuildingItemAction; // Offset: 284
    keen::ecs::CreateNpcItemAction createNpcItemAction; // Offset: 292
    keen::ecs::PerkUnlockAction perkUnlockAction; // Offset: 300
    keen::ecs::TrashItemAction trashItemAction; // Offset: 312
    keen::ecs::FlameAltarAction flameAltarAction; // Offset: 324
    keen::ecs::WaypointAction waypointAction; // Offset: 336
    keen::ecs::ParryAction parryAction; // Offset: 368
    keen::ecs::KickPlayerAction kickPlayerAction; // Offset: 388
    keen::ecs::TwitchDropRewardAction twitchDropRewardAction; // Offset: 396
    keen::Vector2 movementStick; // Offset: 408
    keen::ecs::ContextualVector2 cameraRotationInput; // Offset: 416
    keen::sint16 buildingRotation; // Offset: 428
    keen::uint8 buildingDistance; // Offset: 430
    keen::ecs::ClientPlayerStateMask mask; // Offset: 431
    keen::ecs::PlayerDigitalInput digitalInput; // Offset: 432
    keen::Time respawnActionHoldDuration; // Offset: 440
    keen::Time debugEventTime; // Offset: 448
    keen::Time debugUpdateTime; // Offset: 456
};

struct ecs.AdminClientPlayerInputData {
    keen::ecs::AdminInventoryCreateAction adminInventoryCreateAction; // Offset: 0
    keen::ecs::AdminSpawnCommand adminSpawnCommand; // Offset: 16
    keen::ecs::AdminKillFactionCommand adminKillFaction; // Offset: 44
    keen::ecs::AdminTeleportAction adminTeleport; // Offset: 52
    keen::ecs::AdminApplyInventoryCommand adminApplyInventory; // Offset: 84
    keen::ecs::AdminSetDayTimeAction adminSetDaytime; // Offset: 112
    keen::ecs::AdminDestroyItemAction adminDestroyItemAction; // Offset: 136
    keen::ecs::AdminSetFlameLevel adminSetFlameLevel; // Offset: 148
    keen::ecs::AdminSetCharacterLevel adminSetCharacterLevel; // Offset: 152
    keen::ecs::AdminPerkAction adminPerkAction; // Offset: 164
    keen::ecs::AdminDebugCameraDisplayAction adminDebugCameraDisplayAction; // Offset: 180
    keen::ecs::AdminUnlearnSkillAction adminUnlearnSkillAction; // Offset: 184
    keen::ecs::AdminChangeGameSettingsAction adminChangeGameSettingsAction; // Offset: 192
};

enum class ecs.DoubleInputBindings {
    SprintAndSneak = 0,
    BlockAndEvade = 1,
    UndoAndEvade = 2,
    JumpAndGlider = 3,
    BuildingSnappingAndSitting = 4,
    BuildingMenuAndLockTarget = 5,
    BuildingMenuAndSitting = 6,
};

typedef keen::Bitmask8<keen::ecs::DoubleInputBindings> ecs.DoubleInputBindingsMask;

struct ecs.ClientPlayerInputHistoryEntry {
    keen::uint32 frameTick; // Offset: 0
    keen::ecs::ClientPlayerInputData data; // Offset: 8
};

enum class ecs.PlayerSettingFlags {
    KeepTargetLockWhenSprinting = 0,
    KeepTargetLockWhenInvalid = 1,
    HideHelmet = 2,
    HideGloves = 3,
};

typedef keen::Bitmask8<keen::ecs::PlayerSettingFlags> ecs.PlayerSettingMask;

struct ecs.ClientPlayerSettings {
    keen::AttackDirectionInput attackDirectionInput; // Offset: 0
    keen::ecs::PlayerSettingMask flags; // Offset: 1
};

struct ecs.ClientPlayerInputToggleConfig {
    keen::ecs::PlayerDigitalInput configuredAsToggle; // Offset: 0
};

struct ecs.ClientPlayerInput {
    keen::ecs::ClientPlayerInputData data; // Offset: 0
    keen::ecs::AdminClientPlayerInputData adminCommands; // Offset: 464
    keen::ecs::ClientPlayerInputToggleConfig toggleConfig; // Offset: 792
    keen::ecs::DoubleInputBindingsMask doubleInputBindings; // Offset: 800
    keen::InputMode inputMode; // Offset: 801
    keen::ecs::ClientOnlyPlayerInput clientOnlyPlayerInput; // Offset: 802
    keen::ecs::UiPlayerInput uiPlayerInput; // Offset: 808
};

struct ecs.PlayerInput {
    keen::Time serverTime; // Offset: 0
    keen::ecs::ClientPlayerInputData fromClient; // Offset: 8
    keen::ecs::AdminClientPlayerInputData fromAdminClient; // Offset: 472
    keen::ecs::ClientPlayerInputToggleConfig fromClientToggleConfig; // Offset: 800
    keen::ecs::DoubleInputBindingsMask fromClientDoubleInputBindings; // Offset: 808
    keen::InputMode fromClientInputMode; // Offset: 809
    keen::ecs::ClientPlayerSettings fromClientSettings; // Offset: 810
    keen::bool fromClientIsReadyForGameplay; // Offset: 812
};

struct ecs.ServerInputConsumer {
    keen::ecs::PlayerDigitalInput consumedInputs; // Offset: 0
    keen::ecs::PlayerDigitalInput logicalStates; // Offset: 8
    keen::ecs::PlayerDigitalInput totalPreviousInputs; // Offset: 16
};

struct ecs.ServerConsumedPlayerInput {
    keen::ecs::ServerInputConsumer inputConsumer; // Offset: 0
    keen::VersionedData consumedInventoryTransferAction; // Offset: 24
    keen::VersionedData consumedSortInventoryAction; // Offset: 26
    keen::VersionedData consumedSelectSongAction; // Offset: 28
    keen::VersionedData consumedCreateBuildingItemAction; // Offset: 30
    keen::VersionedData consumedCreateNpcItemAction; // Offset: 32
    keen::VersionedData consumedActionbarSelectionAction; // Offset: 34
    keen::VersionedData consumedInventoryStockCycleAction; // Offset: 36
    keen::VersionedData consumedCraftRecipeAction; // Offset: 38
    keen::VersionedData consumedAutomaticTransferAction; // Offset: 40
    keen::VersionedData consumedSelectCraftingStationRecipeAction; // Offset: 42
    keen::VersionedData consumedChangeCustomizationAction; // Offset: 44
    keen::VersionedData consumedTeleportAction; // Offset: 46
    keen::VersionedData consumedUnlockSkillAction; // Offset: 48
    keen::VersionedData consumedTriggerKnowledgeAction; // Offset: 50
    keen::VersionedData consumedSetPersonalProgressionAction; // Offset: 52
    keen::VersionedData consumedWaypointAction; // Offset: 54
    keen::VersionedData consumedSelectDialogOptionAction; // Offset: 56
    keen::VersionedData consumedNpcInputAction; // Offset: 58
    keen::VersionedData consumedChangeEquipmentAction; // Offset: 60
    keen::VersionedData consumedSwapEquipmentSetAction; // Offset: 62
    keen::VersionedData consumedConsumeItemAction; // Offset: 64
    keen::VersionedData consumedInspectItemAction; // Offset: 66
    keen::VersionedData consumedRepairAllItemsActionn; // Offset: 68
    keen::VersionedData consumedPerkUnlockAction; // Offset: 70
    keen::VersionedData consumedTrashItemAction; // Offset: 72
    keen::VersionedData consumedFlameAltarAction; // Offset: 74
    keen::VersionedData consumedParryAction; // Offset: 76
    keen::VersionedData consumedKickPlayerAction; // Offset: 78
    keen::VersionedData consumedtwitchDropAction; // Offset: 80
    keen::VersionedData consumedAdminInventoryCreateAction; // Offset: 82
    keen::VersionedData consumedAdminSpawnAction; // Offset: 84
    keen::VersionedData consumedAdminKillFactionAction; // Offset: 86
    keen::VersionedData consumedAdminTeleport; // Offset: 88
    keen::VersionedData consumedAdminApplyInventory; // Offset: 90
    keen::VersionedData consumedAdminSetDaytime; // Offset: 92
    keen::VersionedData consumedAdminDestroyItemAction; // Offset: 94
    keen::VersionedData consumedAdminSetFlameLevel; // Offset: 96
    keen::VersionedData consumedAdminSetCharacterLevel; // Offset: 98
    keen::VersionedData consumedAdminPerkAction; // Offset: 100
    keen::VersionedData consumedAdminDebugCameraDisplayAction; // Offset: 102
    keen::VersionedData consumedAdminUnlearnSkillAction; // Offset: 104
    keen::VersionedData consumedAdminChangeGameSettingsAction; // Offset: 106
};

struct ecs.InputRepeater {
    keen::bool isAfterFirstRepetition; // Offset: 0
    keen::Time nextRepeatTime; // Offset: 8
};

typedef keen::StaticArray<keen::ecs::InputRepeater,47> ecs.ClientOnlyPlayerInputRepeater;

enum class ecs.ClientOnlyPlayerInputType {
    ActionbarSwapPage = 0,
    ActionbarPreviousSlot = 1,
    ActionbarNextSlot = 2,
    AmmunitionSelectPrevious = 3,
    AmmunitionSelectNext = 4,
    ShowTutorial = 5,
    BlueprintDistanceIncrease = 6,
    BlueprintDistanceDecrease = 7,
    BlueprintMaterialSelectPrevious = 8,
    BlueprintMaterialSelectNext = 9,
    BlueprintPageSelectPrevious = 10,
    BlueprintPageSelectNext = 11,
    BlueprintShapeSelectPrevious = 12,
    BlueprintShapeSelectNext = 13,
    BlueprintShapeSelect0 = 14,
    BlueprintShapeSelect1 = 15,
    BlueprintShapeSelect2 = 16,
    BlueprintShapeSelect3 = 17,
    BlueprintShapeSelect4 = 18,
    BlueprintShapeSelect5 = 19,
    BlueprintShapeSelect6 = 20,
    BlueprintShapeSelect7 = 21,
    BlueprintShapeSelect8 = 22,
    BlueprintShapeSelect9 = 23,
    BuildingRotateLittleClockwise = 24,
    BuildingRotateLittleCounterClockwise = 25,
    BuildingRotateFarClockwise = 26,
    BuildingRotateFarCounterClockwise = 27,
    LootSelectPrevious = 28,
    LootSelectNext = 29,
    SongSelectOpen = 30,
    SongSelectPrevious = 31,
    SongSelectNext = 32,
    CameraZoomIn = 33,
    CameraZoomOut = 34,
    UiSystemMenu = 35,
    UiInGameMenu = 36,
    UiBackpack = 37,
    UiBuildingMenu = 38,
    UiCharacter = 39,
    UiCrafting = 40,
    UiJournal = 41,
    UiJumpToNotification = 42,
    UiMap = 43,
    UiSkills = 44,
    UiUserFeedback = 45,
    Parry = 46,
    Count = 47,
};

typedef keen::Bitmask64<keen::ecs::ClientOnlyPlayerInputType> ecs.ClientOnlyPlayerDigitalInput;

struct ecs.ClientInputConsumer {
    keen::ecs::ClientOnlyPlayerDigitalInput consumedInputs; // Offset: 0
    keen::ecs::ClientOnlyPlayerDigitalInput logicalStates; // Offset: 8
    keen::ecs::ClientOnlyPlayerInputRepeater inputRepeaters; // Offset: 16
};

struct ecs.PlayerTestInput {
    keen::ecs::PlayerDigitalInput digitalInput; // Offset: 0
    keen::Vector2 movementStick; // Offset: 8
    keen::float3 cameraDirection; // Offset: 16
};

enum class ranged_weapon.State {
    Holster = 0,
    Aim = 1,
    AimAndCharge = 2,
    Fire = 3,
    FireEaseOut = 4,
};

struct ranged_weapon.Input {
    keen::bool aim; // Offset: 0
    keen::bool charge; // Offset: 1
    keen::bool fire; // Offset: 2
};

struct ranged_weapon.WeaponParameters {
    keen::Time chargeDuration; // Offset: 0
    keen::Time fireDuration; // Offset: 8
    keen::bool isChanneling; // Offset: 16
    keen::bool doesNeedAmmunition; // Offset: 17
    keen::bool canQueueFireBeforeFullyCharged; // Offset: 18
    keen::bool restartChargeOnAmmunitionSwitch; // Offset: 19
};

struct ranged_weapon.StateMachine {
    keen::ranged_weapon::State currentState; // Offset: 0
    keen::Time stateStartTime; // Offset: 8
    keen::ranged_weapon::Input previousInput; // Offset: 16
    keen::ranged_weapon::WeaponParameters weaponParameters; // Offset: 24
    keen::bool isInitialUpdate; // Offset: 48
    keen::bool isFireQueued; // Offset: 49
};

enum class ResourceTypes {
    Health = 0,
    Mana = 1,
    Stamina = 2,
    FogResistance = 3,
    Ammunition = 4,
    FoodBuff = 5,
    GenericBuff = 6,
    Debuff = 7,
    RestedBuff = 8,
};

typedef keen::Bitmask16<keen::ResourceTypes> ResourceTypesMask;

struct ecs.RangedWeapon {
    keen::ranged_weapon::StateMachine stateMachine; // Offset: 0
    keen::ecs::PlayerInputType originalTrigger; // Offset: 56
    keen::ecs::PlayerInputType currentTrigger; // Offset: 57
    keen::ItemInstanceInfo triggerWeaponInstance; // Offset: 60
    keen::ItemInstanceInfo triggerAmmunitionInstance; // Offset: 80
    keen::ResourceTypesMask missingResourceMask; // Offset: 100
    keen::Time lastMissingResourceEvent; // Offset: 104
    keen::ItemId lastVisualAmmoItemId; // Offset: 112
    keen::ItemId visualAmmoItemId; // Offset: 116
    keen::ecs::EntityId visualAmmoEntityId; // Offset: 120
    keen::bool shallPlayerTurnTowardsTarget; // Offset: 124
    keen::bool previousSneakState; // Offset: 125
};

struct ecs.NetworkRangedWeapon {
    keen::ranged_weapon::State currentState; // Offset: 0
    keen::ranged_weapon::WeaponParameters weaponParameters; // Offset: 8
    keen::Time stateStartTime; // Offset: 32
    keen::ItemInstanceInfo weaponInstance; // Offset: 40
    keen::ItemId ammunitionItemId; // Offset: 60
    keen::bool shallPlayerTurnTowardsTarget; // Offset: 64
};

struct ecs.ClientRangedWeapon {
    keen::ranged_weapon::State previousState; // Offset: 0
    keen::bool isInitialUpdate; // Offset: 1
};

struct ecs.RangedWeaponRender {
};

struct ecs.SpellChargeSfx {
    keen::SoundContainerReference buildUpChargeSfx; // Offset: 0
    keen::SoundContainerReference sustainChargeSfx; // Offset: 16
    keen::bool hasHandledFullyCharged; // Offset: 32
};

enum class ecs.PlayerFlags {
    IsSpawned = 0,
    InFullScreenUi = 1,
    UiCoverRequest = 2,
    CanTriggerHookShot = 3,
    CanTriggerGlider = 4,
    InBlueprintSnappingMode = 5,
    InVoxelGridSnappingMode = 6,
    WantsToSprint = 7,
    IsSprinting = 8,
    InTargetLockCombatMode = 9,
    QueueFireRangedShot = 10,
    HasRangedWeaponFeedbackBeenSent = 11,
    IsOutsideSafeZone = 12,
    IsInBigDungeon = 13,
    HideHelmet = 14,
    HideGloves = 15,
};

typedef keen::Bitmask16<keen::ecs::PlayerFlags> ecs.PlayerStateMask;

struct ecs.ParryProjectile {
    keen::ecs::EntityId projectileEntityId; // Offset: 0
    keen::actor::SequenceResourceId anticipationSequenceResourceId; // Offset: 4
};

struct ecs.PlayerState {
    keen::actor::StateMask previousActorState; // Offset: 0
    keen::Time lastSprintEndTime; // Offset: 8
    keen::Time lastBlockEndTime; // Offset: 16
    keen::Time noMovementInputDuration; // Offset: 24
    keen::Time outsideSafeZoneCountdown; // Offset: 32
    keen::float32 sprintTurnSpeedFactor; // Offset: 40
    keen::ecs::PlayerStateMask playerStateMask; // Offset: 44
    keen::LocaTagId dungeonZoneMapMarkerId; // Offset: 48
    keen::ecs::PlayerInputType rangedWeaponArmedViaInput; // Offset: 52
    keen::ecs::ParryProjectile parryProjectile; // Offset: 56
};

struct ecs.PlayerTracking {
    keen::Time levelUpDuration; // Offset: 0
    keen::Time playtimeDuration; // Offset: 8
};

struct ecs.PlayerDebugServer {
    keen::Time debugEventTime; // Offset: 0
    keen::Time clientUpdateTime; // Offset: 8
    keen::Time serverRecvTime; // Offset: 16
    keen::Time serverUpdateTime; // Offset: 24
};

struct ecs.PlayerDebugClient {
    keen::Time debugEventTime; // Offset: 0
    keen::Time debugEventDelta; // Offset: 8
    keen::Time debugEventMappingDelta; // Offset: 16
};

struct ecs.ClientPlayerStaminaHints {
    keen::Time firstSprintUtteranceDelay; // Offset: 0
    keen::Time sprintUtteranceInterval; // Offset: 8
    keen::Time nextUtterance; // Offset: 16
};

struct ecs.PlayerQuestProgressionMode {
    keen::bool isInPersonalProgressionMode; // Offset: 0
    keen::uint32 changeCounter; // Offset: 4
};

struct ecs.PlayerPinnedRecipes {
    keen::RecipeId pinnedRecipe; // Offset: 0
    keen::HashKey32 questEntryId; // Offset: 4
};

struct ecs.PlayerWaypoint {
    keen::bool enabled; // Offset: 0
    keen::WorldPosition waypointPosition; // Offset: 8
};

struct ecs.SkillState {
    keen::ecs::EntityId impcatEntity; // Offset: 0
    keen::bool isUnlocked; // Offset: 4
};

typedef keen::uint64 ecs.SkillUnlockMask;

typedef keen::StaticArray<keen::ecs::SkillUnlockMask,4> ecs.UnlockedSkillsMask;

struct ecs.UnlockedSkillNodes {
    keen::StaticArray<keen::SkillNodeId,256> nodes; // Offset: 0
    keen::StaticArray<keen::ecs::EntityId,256> activeSkillImpacts; // Offset: 1024
    keen::uint32 version; // Offset: 2048
};

struct ecs.PlayerSkillsUi {
    keen::ecs::UnlockedSkillsMask skillUnlockMasks; // Offset: 0
};

struct ecs.PlayerGroupMember {
    keen::Time lastUpdateTime; // Offset: 0
    keen::ecs::EntityId entityId; // Offset: 8
};

struct ecs.ServerPlayerGroupMembers {
    keen::StaticArray<keen::ecs::PlayerGroupMember,16> groupMembers; // Offset: 0
};

struct ecs.PickingTarget {
    keen::ecs::QueryId rayQueryId; // Offset: 0
    keen::Time nextUpdate; // Offset: 8
};

enum class ecs.CursorFlag {
    InvalidCursorTransform = 0,
    CursorOutsideBuildingZone = 1,
    CursorInsideFogZone = 2,
    CursorTooFarAway = 3,
    CursorInsideLenientBuildInhibitorZone = 4,
    CursorInsideStrictBuildInhibitorZone = 5,
    MaxAltarCountReached = 6,
    AreaOccupied = 7,
    EnemiesNearby = 8,
    InvalidSurfaceNormal = 9,
    InvalidCursorVoxelMaterial = 10,
    MissingMaterials = 11,
    ItemNotUnlocked = 12,
    NoPermission = 13,
    MaxTameAnimalCountReached = 14,
};

typedef keen::Bitmask16<keen::ecs::CursorFlag> ecs.CursorFlags;

struct ecs.ServerCursor {
    keen::ecs::QueryId rayQueryId; // Offset: 0
    keen::ecs::QueryId placementBlockerQueryId; // Offset: 4
    keen::StaticArray<keen::ecs::QueryId,2> solidCollisionsQueryIds; // Offset: 8
    keen::ecs::RangeQueryId enemiesQueryId; // Offset: 16
    keen::float3 pointerInfoPosition; // Offset: 20
    keen::VoxelMaterialId hoveredVoxelMaterialId; // Offset: 32
    keen::WorldTransform secondaryActionTransform; // Offset: 40
    keen::float randomYawAngleOffset; // Offset: 96
    keen::Time snapToPlaneDelay; // Offset: 104
    keen::ecs::EntityId hoverVoxelBlueprintOverlayEntityId; // Offset: 112
};

struct ecs.ClientServerCursor {
    keen::WorldTransform transform; // Offset: 0
    keen::ecs::EntityId cursorEntityId; // Offset: 56
    keen::ecs::EntityId hoveredEntityId; // Offset: 60
    keen::ecs::EntityId selectedEntityId; // Offset: 64
    keen::ecs::DismantleMethod selectedEntityDismantleMethod; // Offset: 68
    keen::bool isBlueprintSelected; // Offset: 69
    keen::bool isDismantleAllowed; // Offset: 70
    keen::float3 hoverPosition; // Offset: 72
    keen::float3 hoverNormal; // Offset: 84
    keen::ItemInstanceInfo currentBuildingItemInstance; // Offset: 96
    keen::ItemId previousBuildingItemId; // Offset: 116
    keen::float effectivePlacementVolume; // Offset: 120
    keen::float maxPlacementVolume; // Offset: 124
    keen::ecs::CursorFlags cursorFlagsPrimary; // Offset: 128
    keen::ecs::CursorFlags cursorFlagsSecondary; // Offset: 130
    keen::bool wasLastActionSecondary; // Offset: 132
    keen::bool isSnappingToBoxes; // Offset: 133
    keen::bool isNearBuildingZone; // Offset: 134
    keen::bool canUndoBuildingAction; // Offset: 135
};

struct ecs.ClientCursorVfx {
    keen::uint3 position; // Offset: 0
    keen::uint32 fxHandle; // Offset: 12
};

struct ecs.ClientCursor {
    keen::Time hoveredEntityHightlightPhase; // Offset: 0
    keen::ecs::EntityId previousSelectedEntityId; // Offset: 8
    keen::Color previousSelectedEntityTintColor; // Offset: 12
    keen::ItemId previousBuildingItemId; // Offset: 16
    keen::HighlightColorIndex highlightColorValid; // Offset: 20
    keen::HighlightColorIndex highlightColorInvalid; // Offset: 21
    keen::HighlightColorIndex highlightColorMuted; // Offset: 22
    keen::StaticArray<keen::ecs::ClientCursorVfx,256> blueprintHoverVfx; // Offset: 24
};

struct ecs.Terraforming {
    keen::ecs::RangeQueryId snappingQueryId; // Offset: 0
    keen::ecs::RangeQueryId temporaryMiningQueryId; // Offset: 4
};

struct ecs.VfxZone {
};

struct ecs.Destructible {
};

struct ecs.CameraShakeParams {
    keen::float32 trauma; // Offset: 0
};

struct ecs.NotifierComponent {
    keen::ecs::Offset notifierOffset; // Offset: 0
    keen::NotifierReference notifier; // Offset: 40
    keen::ecs::CameraShakeParams cameraShake; // Offset: 56
    keen::SoundContainerReference sfx; // Offset: 60
    keen::VfxReference vfx; // Offset: 76
};

struct ecs.OnCreate {
    keen::AttachmentSlot slot; // Offset: 92
    keen::bool attach; // Offset: 93
};

struct ecs.OnDestroy {
    keen::float32 noiseRange; // Offset: 92
    keen::float3 hitDirection; // Offset: 96
};

struct ecs.SpawnEntityOnDestroy {
    keen::ecs::TemplateReference spawnEntity; // Offset: 0
    keen::bool keepDespawnLink; // Offset: 16
    keen::bool triggered; // Offset: 17
};

struct ecs.DestroyEntityOnParentRespawn {
    keen::bool checkParent; // Offset: 0
};

typedef keen::HashKey32 FogRemovalId;

struct ecs.FogRemovalIdComponent {
    keen::FogRemovalId fogRemovalId; // Offset: 0
};

struct ecs.RemoveFog {
};

enum class ecs.EasingType {
    Linear = 0,
    QuadraticIn = 1,
    CubicIn = 2,
    QuadraticOut = 3,
    CubicOut = 4,
    Count = 5,
};

struct ecs.Dissolve {
    keen::float3 rotationOriginOffset; // Offset: 0
    keen::float32 yOffset; // Offset: 12
    keen::Time duration; // Offset: 16
    keen::float32 rotationAngle; // Offset: 24
    keen::bool calculateOffsets; // Offset: 28
    keen::ecs::EasingType dissolveEasing; // Offset: 29
    keen::ecs::EasingType translationEasing; // Offset: 30
    keen::ecs::EasingType rotationEasing; // Offset: 31
};

struct ecs.DynamicDissolve {
    keen::Time startTime; // Offset: 0
    keen::ecs::EntityId alignmentTarget; // Offset: 8
    keen::bool started; // Offset: 12
};

struct ecs.ClientDissolve {
    keen::uint32 renderModelUpdateCounter; // Offset: 0
    keen::float32 modelCenter; // Offset: 4
    keen::float32 boundingBoxHeight; // Offset: 8
    keen::float32 dissolveEdgeBrightness; // Offset: 12
};

enum class ecs.FadeState {
    Visible = 0,
    FadeIn = 1,
    FadeOut = 2,
    Invisible = 3,
};

struct ecs.Fade {
    keen::Time duration; // Offset: 0
    keen::float3 dissolveMaskOffset; // Offset: 8
    keen::float32 dissolveMaskRadius; // Offset: 20
    keen::float32 dissolveEdgeBrightness; // Offset: 24
    keen::ecs::FadeState initialState; // Offset: 28
};

struct ecs.DynamicFade {
    keen::Time startTime; // Offset: 0
    keen::ecs::FadeState state; // Offset: 8
};

struct ecs.ActorInput {
    keen::animationgraph::StateIdHash defaultAnimationStateId; // Offset: 0
    keen::actor::ActionSequenceTriggerContext triggerContext; // Offset: 8
    keen::uint8 triggerCallCounter; // Offset: 232
    keen::uint32 sequenceTriggerId; // Offset: 236
    keen::float3 desiredLocalMoveInput; // Offset: 240
    keen::float3 desiredWorldMoveInput; // Offset: 252
    keen::float3 desiredWorldLookDirection; // Offset: 264
    keen::ecs::LocomotionSpeedSelector locomotionSpeed; // Offset: 276
    keen::ecs::LocomotionSpeedSelector lastLocomotionSpeed; // Offset: 277
};

struct ecs.FlapSetup {
    keen::Time minFlapDuration; // Offset: 0
    keen::Time maxFlapDuration; // Offset: 8
    keen::Time minFlapPauseDuration; // Offset: 16
    keen::Time maxFlapPauseDuration; // Offset: 24
};

struct ecs.Flying {
    keen::float32 maxAcceleration; // Offset: 0
    keen::actor::ActorSequenceReference startFlyingSequence; // Offset: 4
    keen::actor::ActorSequenceReference stopFlyingSequence; // Offset: 20
    keen::actor::ActorSequenceReference flyingSequence; // Offset: 36
    keen::actor::ActorSequenceReference hoverSequence; // Offset: 52
    keen::actor::ActorSequenceReference flappingSequence; // Offset: 68
    keen::actor::ActorSequenceReference hitInAirSequence; // Offset: 84
    keen::actor::ActorSequenceReference stuckOnGroundSequence; // Offset: 100
    keen::ecs::FlapSetup flapSetup; // Offset: 120
    keen::bool useFlyAnimationHandling; // Offset: 152
    keen::bool fallOnHit; // Offset: 153
    keen::bool fallOnParryStun; // Offset: 154
    keen::bool flyAfterSpawn; // Offset: 155
};

enum class ecs.FlyingState {
    None = 0,
    NotFlying = 1,
    Flying = 2,
    Flapping = 3,
    Hovering = 4,
    StartFlying = 5,
    StopFlying = 6,
    Fall = 7,
    StuckOnGround = 8,
};

struct ecs.DynamicFlying {
    keen::ecs::FlyingState state; // Offset: 0
    keen::Time nextCheckFlappingTime; // Offset: 8
    keen::bool isSequenceHandlingPaused; // Offset: 16
    keen::bool wasSequenceHandlingPaused; // Offset: 17
    keen::bool isFlappingAllowed; // Offset: 18
    keen::bool fallOnDeath; // Offset: 19
};

struct ecs.CSPDummy {
};

struct ecs.SlotAttachmentBase {
    keen::ecs::Offset offset; // Offset: 0
    keen::AttachmentSlot attachmentSlot; // Offset: 40
    keen::ecs::EntityId attachedToEntityId; // Offset: 44
};

struct ecs.ServerSlotAttachment {
};

struct ecs.SlotAttachment {
};

struct ecs.Friction {
    keen::bool isSliding; // Offset: 0
    keen::float32 frictionFactor; // Offset: 4
};

struct ecs.RotationSpeedEntry {
    keen::float32 rotationSpeed; // Offset: 0
    keen::actor::InterpolationMode interpolationMode; // Offset: 4
};

struct ecs.ActorRotation {
    keen::ecs::RotationSpeedEntry standingRotationSpeed; // Offset: 0
    keen::ecs::RotationSpeedEntry movingRotationSpeed; // Offset: 8
    keen::ecs::RotationSpeedEntry runningRotationSpeed; // Offset: 16
    keen::ecs::RotationSpeedEntry slidingRotationSpeed; // Offset: 24
    keen::ecs::RotationSpeedEntry inAirRotationSpeed; // Offset: 32
    keen::ecs::RotationSpeedEntry dodgingAroundTargetRotationSpeed; // Offset: 40
    keen::ecs::RotationSpeedEntry hookPullingRotationSpeed; // Offset: 48
    keen::ecs::RotationSpeedEntry hookSwingingRotationSpeed; // Offset: 56
    keen::ecs::RotationSpeedEntry climbingRotationSpeed; // Offset: 64
    keen::ecs::RotationSpeedEntry gliderRotationSpeed; // Offset: 72
    keen::float32 minLinearAxisRotationAngle; // Offset: 80
};

enum class ecs.LocomotionState {
    Walking = 0,
    Sliding = 1,
    Falling = 2,
    Flying = 3,
    HangGliding = 4,
    HookPulling = 5,
    HookSwinging = 6,
    ClimbingWall = 7,
    ClimbingLadder = 8,
};

enum class ecs.LocomotionFlags {
    LveRunning = 0,
    Sprinting = 1,
    OffBalance = 2,
    MovingTowardsHole = 3,
    AirwolfActive = 4,
    IsUpdraftDepleted = 5,
    WantsToMove = 6,
};

typedef keen::Bitmask8<keen::ecs::LocomotionFlags> ecs.LocomotionMask;

struct ecs.LocomotionAccelerationConfig {
    keen::float32 minTurnAngle; // Offset: 0
    keen::float32 maxWalkAcceleration; // Offset: 4
    keen::float32 maxRunAcceleration; // Offset: 8
    keen::float32 maxSprintAcceleration; // Offset: 12
    keen::float32 groundFrictionSusceptibility; // Offset: 16
};

struct ecs.LocomotionSlideConfig {
    keen::float32 downhillAccelerationFactor; // Offset: 0
    keen::float32 downhillAcceleration; // Offset: 4
    keen::float32 lateralAcceleration; // Offset: 8
    keen::float32 uphillAcceleration; // Offset: 12
    keen::float32 maxUphillSpeed; // Offset: 16
};

struct ecs.LocomotionTurnConfig {
    keen::bool useTurnSequences; // Offset: 0
    keen::Angle minTurnAngle; // Offset: 4
    keen::float32 minVelocity; // Offset: 8
    keen::Time minRequiredVelocityDuration; // Offset: 16
    keen::Time minTimeSinceRequiredVelocityWasReached; // Offset: 24
    keen::actor::ActorSequenceReference leftTurnSequence; // Offset: 32
    keen::actor::ActorSequenceReference rightTurnSequence; // Offset: 48
};

struct ecs.LocomotionAvoidHolesConfig {
    keen::bool avoidHoles; // Offset: 0
    keen::float32 checkLength; // Offset: 4
    keen::float32 minHoleDepth; // Offset: 8
};

struct ecs.Locomotion {
    keen::ecs::LocomotionAccelerationConfig accelerationConfig; // Offset: 0
    keen::ecs::LocomotionSlideConfig slideConfig; // Offset: 20
    keen::ecs::LocomotionTurnConfig turnConfig; // Offset: 40
    keen::ecs::LocomotionAvoidHolesConfig avoidHolesConfig; // Offset: 104
};

enum class ecs.JumpRuntimeType {
    Default = 0,
    Double = 1,
    Sprint = 2,
    Glider = 3,
    HookSwingDefaultExit = 4,
    HookSwingSprintExit = 5,
    LadderClimbing = 6,
    FreeClimbing = 7,
    Slide = 8,
    Attack = 9,
};

struct ecs.GliderTurbulence {
    keen::float3 direction; // Offset: 0
    keen::float32 intensity; // Offset: 12
    keen::Time remainingDuration; // Offset: 16
};

struct ecs.DynamicLocomotion {
    keen::float3 inputVelocity; // Offset: 0
    keen::float3 floorNormal; // Offset: 12
    keen::float3 slopeNormal; // Offset: 24
    keen::actor::MovementFactors movementFactors; // Offset: 36
    keen::float3 rootMotion; // Offset: 48
    keen::animationgraph::RootMotionMask rootMotionMode; // Offset: 60
    keen::ecs::LocomotionState state; // Offset: 61
    keen::Time lastStateSwitchTime; // Offset: 64
    keen::Time slideDetected; // Offset: 72
    keen::Time takeOffTime; // Offset: 80
    keen::Time spheroidCollisionDuration; // Offset: 88
    keen::float32 rotationSpeedFactor; // Offset: 96
    keen::bool isGliderForwardInputDeliberate; // Offset: 100
    keen::bool isNearGround; // Offset: 101
    keen::bool wasTurning; // Offset: 102
    keen::Time sprintJumpRunUpTimer; // Offset: 104
    keen::Time airwolfTimer; // Offset: 112
    keen::ecs::LocomotionMask flags; // Offset: 120
    keen::bool isFastEnoughForTurn; // Offset: 121
    keen::Time speedForTurnSequenceReachedStartTime; // Offset: 128
    keen::Time speedForTurnSequenceReachedEndTime; // Offset: 136
    keen::float slideJumpAirControlSpeed; // Offset: 144
    keen::actor::JumpType jumpType; // Offset: 148
    keen::uint8 jumpCount; // Offset: 149
    keen::WorldPosition previousJumpTakeOffPosition; // Offset: 152
    keen::float airControlMinVelocity; // Offset: 176
    keen::float airControlMaxVelocity; // Offset: 180
    keen::float frictionFactor; // Offset: 184
    keen::float effectiveMovementMod; // Offset: 188
    keen::float gliderUpstreamFactor; // Offset: 192
    keen::ecs::GliderTurbulence gliderTurbulence; // Offset: 200
};

struct ecs.NetworkLocomotion {
    keen::bool hasSlideAnimations; // Offset: 0
    keen::bool hasJumpAnimations; // Offset: 1
    keen::bool hasWalkAnimations; // Offset: 2
    keen::bool hasMoveAnimation; // Offset: 3
    keen::bool leanTowardsMoveDirection; // Offset: 4
    keen::float leanFactor; // Offset: 8
    keen::float maxLeanYawAngle; // Offset: 12
    keen::float maxLeanPitchAngle; // Offset: 16
    keen::float leanFadeOutSpeedFactor; // Offset: 20
    keen::float minLeanYawInterpolationSpeed; // Offset: 24
    keen::float maxLeanYawInterpolationSpeed; // Offset: 28
    keen::float leanYawSpeedInterpolationStartAngle; // Offset: 32
    keen::float leanYawSpeedInterpolationEndAngle; // Offset: 36
    keen::float leanPitchInterpolationSpeed; // Offset: 40
    keen::float leanYawStartAngle; // Offset: 44
    keen::Angle pitchAngleOffset; // Offset: 48
};

struct ecs.DynamicNetworkLocomotion {
    keen::float3 floorNormal; // Offset: 0
    keen::float3 desiredWorldLookDirection; // Offset: 12
    keen::float3 desiredLeanDirection; // Offset: 24
    keen::ecs::LocomotionState state; // Offset: 36
    keen::ecs::LocomotionMask flags; // Offset: 37
    keen::animationgraph::StateIdHash currentIdleAnimation; // Offset: 40
    keen::animationgraph::StateIdHash currentWalkAnimation; // Offset: 44
    keen::float32 gliderTurbulenceScreenShakeIntensity; // Offset: 48
};

struct ecs.ClientLocomotion {
    keen::float32 runSpeed; // Offset: 0
    keen::float32 sprintSpeed; // Offset: 4
    keen::float32 currentLocalRollAngle; // Offset: 8
    keen::float32 currentLocalPitchAngle; // Offset: 12
    keen::float32 currentLocalYawAngle; // Offset: 16
    keen::float32 currentLeanYawAngle; // Offset: 20
    keen::float32 currentLeanPitchAngle; // Offset: 24
    keen::float32 lastAnimationInputSpeed; // Offset: 28
};

struct ecs.GliderUpstreamZone {
};

struct ecs.JumpParameters {
    keen::float32 jumpDistance; // Offset: 0
    keen::float32 jumpHeight; // Offset: 4
    keen::Quaternion launchOffset; // Offset: 8
};

struct ecs.SlopeAlignment {
    keen::float32 defaultLongitudinalFactor; // Offset: 0
    keen::float32 defaultLateralFactor; // Offset: 4
    keen::float32 currentLongitudinalFactor; // Offset: 8
    keen::float32 currentLateralFactor; // Offset: 12
};

struct ecs.BaseActor {
    keen::actor::ActionSequence currentAction; // Offset: 0
    keen::actor::StateMask currentState; // Offset: 2048
    keen::actor::AbilityMask currentAbilityMask; // Offset: 2056
    keen::actor::SequenceRuntimeId sequenceRuntimeId; // Offset: 2064
};

struct ecs.ServerActionSequenceData {
    keen::actor::SequenceRuntimeId sequenceId; // Offset: 0
    keen::actor::SignalStates signalStates; // Offset: 24
    keen::actor::ColliderModeData colliderModeOverride; // Offset: 152
    keen::actor::RotationInterpolation rotationInterpolation; // Offset: 168
    keen::Time rotationInterpolationStartTime; // Offset: 224
    keen::Time rotationInterpolationEndTime; // Offset: 232
    keen::animationgraph::StateIdHash animationStateId; // Offset: 240
    keen::animationgraph::RootMotionMask animationRootMotionMask; // Offset: 244
    keen::ecs::EntityId lastSpawnedEntityId; // Offset: 248
    keen::ecs::EntityId stopEntityId; // Offset: 252
    keen::float3 positionLerpEnd; // Offset: 256
    keen::Time positionLerpDuration; // Offset: 272
    keen::Time positionLerpTime; // Offset: 280
    keen::Quaternion orientationLerpEnd; // Offset: 288
    keen::Time orientationLerpDuration; // Offset: 304
    keen::Time orientationLerpTime; // Offset: 312
    keen::actor::MovementFactors movementFactors; // Offset: 320
    keen::actor::MovementFactors movementFactorsLerpStart; // Offset: 332
    keen::actor::MovementFactors movementFactorsLerpEnd; // Offset: 344
    keen::Time movementFactorsLerpDuration; // Offset: 360
    keen::Time movementFactorsLerpTime; // Offset: 368
    keen::float32 rotationSpeedFactor; // Offset: 376
    keen::float32 rotationFactorLerpStart; // Offset: 380
    keen::float32 rotationFactorLerpEnd; // Offset: 384
    keen::Time rotationFactorLerpDuration; // Offset: 392
    keen::Time rotationFactorLerpTime; // Offset: 400
    keen::float32 gravityModifier; // Offset: 408
    keen::bool isGravityModified; // Offset: 412
};

struct ecs.Actor {
    keen::ecs::ServerActionSequenceData currentServerAction; // Offset: 2088
    keen::actor::ActorSequenceReference deathSequence; // Offset: 2504
    keen::bool deathSequenceWaitsForGroundedState; // Offset: 2520
    keen::bool defaultVisibleState; // Offset: 2521
    keen::bool sendDeathEvent; // Offset: 2522
    keen::actor::SequenceResourceId deathSequenceId; // Offset: 2524
    keen::ecs::ColliderMode currentColliderMode; // Offset: 2528
    keen::actor::RotationInterpolation rotationInterpolation; // Offset: 2532
};

struct ecs.DisableColliderModeChanges {
};

struct ecs.NetworkActor {
    keen::actor::SequenceRuntimeId sequenceRuntimeId; // Offset: 0
    keen::actor::AbilityMask currentAbilityMask; // Offset: 24
    keen::actor::StateMask currentState; // Offset: 32
    keen::ecs::EntityId interactionHostId; // Offset: 40
    keen::StaticArray<keen::ecs::EntityTagReferenceEntry,4> currentActionEntityTags; // Offset: 44
    keen::ItemId usedItemId; // Offset: 108
    keen::actor::ActionSequenceState currentActionState; // Offset: 112
};

struct ecs.ClientActor {
    keen::actor::SequenceRuntimeId lastReceivedSequenceRuntimeId; // Offset: 2088
};

struct ecs.SimpleActorInput {
    keen::actor::ActorSequenceReference sequence; // Offset: 0
    keen::ItemReference usedItem; // Offset: 16
    keen::bool loop; // Offset: 32
};

struct ecs.SimpleToggleActor {
    keen::ecs::SimpleActorInput on; // Offset: 0
    keen::ecs::SimpleActorInput off; // Offset: 36
};

struct ecs.DynamicSimpleToggleActor {
    keen::Time triggerTime; // Offset: 0
};

enum class ecs.TrapState {
    Armed = 0,
    Disarmed = 1,
    Triggered = 2,
};

enum class impact.AttackCategory {
    Melee = 0,
    Ranged = 1,
    Magic = 2,
    Tool = 3,
    Other = 4,
    AoE = 5,
    SkillShot = 6,
};

typedef keen::Bitmask8<keen::impact::AttackCategory> impact.AttackCategoryMask;

struct ecs.SimpleTrapActor {
    keen::ecs::SimpleActorInput onTriggerEnter; // Offset: 0
    keen::ecs::SimpleActorInput onTriggerLeave; // Offset: 36
    keen::ecs::SimpleActorInput onArm; // Offset: 72
    keen::ecs::SimpleActorInput onDisarm; // Offset: 108
    keen::Time triggerCooldownTime; // Offset: 144
    keen::bool triggerOnHit; // Offset: 152
    keen::impact::AttackCategoryMask disabledDamageTypes; // Offset: 153
    keen::animationgraph::StateIdReference idleArmedAnimation; // Offset: 156
    keen::animationgraph::StateIdReference idleDisarmedAnimation; // Offset: 172
};

struct ecs.DynamicSimpleTrapActor {
    keen::Time lastArmedTime; // Offset: 0
    keen::ecs::TrapState state; // Offset: 8
};

struct ecs.TeleportZone {
    keen::ecs::EntityTagReference zoneTag; // Offset: 0
};

struct ecs.TeleportZoneConnection {
    keen::LocaTagId teleporterId; // Offset: 0
    keen::LocaTagId targetTeleporterId; // Offset: 4
};

struct ecs.Teleport {
    keen::WorldTransform targetTransform; // Offset: 0
    keen::ecs::EntityId targetEntityId; // Offset: 56
    keen::bool applied; // Offset: 60
    keen::bool searchBestSpawnPosition; // Offset: 61
};

struct ecs.FallDamage {
    keen::float32 fallDamageStartDistance; // Offset: 0
    keen::float32 fallDamageLethalDistance; // Offset: 4
    keen::actor::ActorSequenceReference fallDamageSequence; // Offset: 8
};

struct ecs.DynamicFallDamage {
    keen::bool wasFalling; // Offset: 0
    keen::bool resetFallAltitudeOnApex; // Offset: 1
    keen::float32 fallStartAltitude; // Offset: 4
    keen::float32 detectedFallDistance; // Offset: 8
    keen::float32 detectedFallDamagePercentage; // Offset: 12
};

struct ecs.ServerCameraControl {
    keen::bool isCameraIdLocked; // Offset: 0
    keen::CameraId lockedCameraId; // Offset: 1
    keen::Time unlockTime; // Offset: 8
    keen::CameraOverride cameraOverride; // Offset: 16
    keen::Time overrideEndTime; // Offset: 24
};

struct ecs.NetworkCameraControl {
    keen::bool isCameraIdLocked; // Offset: 0
    keen::CameraId lockedCameraId; // Offset: 1
    keen::CameraOverride cameraOverride; // Offset: 2
};

struct ecs.ClientCameraControl {
    keen::CameraId activeCameraId; // Offset: 0
    keen::float32 idleCameraTriggerDelay; // Offset: 4
    keen::float32 buildingCameraSwitchDelay; // Offset: 8
    keen::float32 hipfireCameraSwitchDelay; // Offset: 12
    keen::WorldPosition entityCameraPosition; // Offset: 16
    keen::Quaternion entityCameraOrientation; // Offset: 40
};

enum class ecs.LockedTargetFlags {
    Static = 0,
    Updated = 1,
    VelocityUpdated = 2,
    SupportsHardLock = 3,
    WasHit = 4,
};

struct ecs.TargetSelector {
    keen::ecs::RangeQueryId queryId; // Offset: 0
    keen::float32 range; // Offset: 4
    keen::Time time; // Offset: 8
};

enum class ecs.TargetImportance {
    None = 0,
    VeryLow = 1,
    Low = 2,
    Normal = 3,
    High = 4,
    VeryHigh = 5,
};

struct ecs.TargetInfo {
    keen::WorldTransform targetTransform; // Offset: 0
    keen::ecs::Offset targetingOffset; // Offset: 56
    keen::ecs::EntityId targetId; // Offset: 96
    keen::ecs::TargetImportance targetImportance; // Offset: 100
    keen::ecs::ColliderId colliderId; // Offset: 104
    keen::uint16 changeCounter; // Offset: 112
    keen::Bitmask8<keen::ecs::LockedTargetFlags> flags; // Offset: 114
};

struct ecs.SelectedTargets {
    keen::StaticArray<keen::ecs::TargetInfo,16> targets; // Offset: 0
    keen::actor::SequenceResourceId interactionSequencePredictionHelper; // Offset: 1920
};

struct ecs.NetworkSelectedTargets {
    keen::StaticArray<keen::ecs::EntityId,16> targetIds; // Offset: 0
    keen::bool combatTargetSupportsHardLock; // Offset: 64
};

struct ecs.ParentTargets {
};

struct ecs.ServerTarget {
    keen::bool hardLockTarget; // Offset: 0
    keen::ecs::TargetImportance targetImportance; // Offset: 1
};

struct ecs.HardLockTarget {
};

struct ecs.ClearPathToTarget {
    keen::float32 yOffset; // Offset: 0
    keen::ecs::QueryId queryId; // Offset: 4
    keen::bool hasHitSolidCollider; // Offset: 8
    keen::bool hasHitSteeringCollider; // Offset: 9
};

struct ecs.Loot {
    keen::ItemId itemId; // Offset: 0
    keen::bool awaitingDestroy; // Offset: 4
};

struct ecs.Orb {
    keen::NotifierReference pickupNotifier; // Offset: 0
    keen::ecs::TemplateReference pickupTemplate; // Offset: 16
    keen::ImpactProgramReference program; // Offset: 32
    keen::bool awaitingDestroy; // Offset: 48
    keen::SoundContainerReference sfx; // Offset: 52
    keen::VfxReference vfx; // Offset: 68
};

struct ecs.SceneLootNodeId {
    keen::LootContainerId id; // Offset: 0
};

struct ecs.RandomLoot {
    keen::ObjectReference<keen::DefaultLootLabelCollection> defaultLabels; // Offset: 0
};

struct ecs.RandomLootProbability {
    keen::float32 spawnProbability; // Offset: 0
};

struct ecs.RandomLootSlotCount {
    keen::uint8 slotsMin; // Offset: 0
    keen::uint8 slotsMax; // Offset: 1
};

struct ecs.RandomLootContainer {
    keen::uint32 spawnedLootVersion; // Offset: 0
    keen::LootContainerId parentNodeId; // Offset: 4
    keen::LootContainerId defaultLabelsId; // Offset: 8
};

struct ecs.RandomLootPlayerScale {
    keen::uint8 playerCount; // Offset: 0
};

struct ecs.RandomLootLock {
};

struct ecs.PickupLootSlot {
    keen::ecs::TemplateReference genericPickupItem; // Offset: 0
    keen::ecs::EntityId spawnedPickupEntity; // Offset: 16
};

struct ecs.RandomLootInventory {
};

struct ecs.RandomLootOnDestroy {
    keen::bool triggered; // Offset: 0
};

struct ecs.DisableRandomLootOnDestroy {
};

struct ecs.RandomLootEntitySpawner {
    keen::ecs::TemplateReference lootEntity; // Offset: 0
    keen::ecs::EntityId spawnedEntityId; // Offset: 16
};

struct ecs.LocaTagComponent {
    keen::LocaTagReference locaTag; // Offset: 0
};

struct LocaTag {
    keen::string keenglish; // Offset: 0
    keen::string description; // Offset: 8
};

typedef keen::LocaTag ecs.MapMarkerLocaTag;

typedef keen::ObjectReference<keen::MapMarkerType> MapMarkerTypeReference;

struct ecs.MapMarker {
    keen::LocaTagReference markerId; // Offset: 0
    keen::MapMarkerTypeReference markerType; // Offset: 16
    keen::float rangeScale; // Offset: 32
};

enum class ecs.MapMarkerVisibilityType {
    Hidden = 0,
    Hint = 1,
    Visible = 2,
    Completed = 3,
};

typedef keen::Bitmask8<keen::ecs::MapMarkerVisibilityType> ecs.MapMarkerVisibilityStateMask;

struct ecs.MapMarkerVisibilityState {
    keen::ecs::MapMarkerVisibilityType visibility; // Offset: 0
    keen::Time lastChange; // Offset: 8
    keen::uint16 knowledgeChangeCounter; // Offset: 16
};

struct ecs.MapMarkerToggleState {
    keen::ecs::MapMarkerVisibilityStateMask visibilityMap; // Offset: 0
};

struct ecs.Location {
    keen::ecs::LocalPlayerMask isInLocation; // Offset: 0
};

struct ecs.IsPlayerInRange {
    keen::bool onlyPlayer; // Offset: 0
    keen::actor::StateMask ignoreStates; // Offset: 8
    keen::Time updateDelay; // Offset: 16
    keen::float32 deactivateRange; // Offset: 24
    keen::float32 minRange; // Offset: 28
};

struct ecs.DynamicIsPlayerInRange {
    keen::ecs::RangeQueryId queryId; // Offset: 0
    keen::ecs::EntityId closestActorId; // Offset: 4
    keen::Time startTime; // Offset: 8
};

enum class ecs.ToggleType {
    On = 0,
    Off = 1,
};

typedef keen::Bitmask8<keen::ecs::ToggleType> ecs.ToggleMask;

struct ecs.ToggleInShape {
    keen::ecs::ToggleMask ignoreState; // Offset: 0
};

struct ecs.InertialFrame {
    keen::float3 velocity; // Offset: 0
    keen::float3 normal; // Offset: 12
};

struct SlopeDefinition {
    keen::Angle steepFloorAngle; // Offset: 0
    keen::Angle slidingAngle; // Offset: 4
    keen::Angle fallDamageAngle; // Offset: 8
    keen::Angle slidingMaterialMinAngle; // Offset: 12
};

struct ecs.SlopeConfig {
    keen::SlopeDefinition slopeDefinition; // Offset: 0
    keen::ObjectReference<keen::SlopeDefinition> slopeDefinitionObject; // Offset: 16
};

enum class ecs.HookShotType {
    None = 0,
    PullTarget = 1,
    PullSelf = 2,
    SwingSelf = 3,
    Count = 4,
    Auto = 4,
};

struct ecs.PlayerFx {
    keen::ecs::EntityId fxEntityId; // Offset: 0
    keen::ecs::EntityId attachEntityId; // Offset: 4
};

struct ecs.PlayerFxSpawner {
    keen::ecs::PlayerFx hookShotTargetFx; // Offset: 0
    keen::ecs::PlayerFx hookShotRopeFx; // Offset: 8
    keen::ecs::PlayerFx gliderUpstreamFx; // Offset: 16
};

enum class ecs.HookShotState {
    Invalid = 0,
    Enter = 1,
    Update = 2,
    Exit = 3,
};

struct ecs.HookShot {
    keen::ecs::EntityId triggerAnchorEntityId; // Offset: 0
    keen::Time triggerTime; // Offset: 8
    keen::actor::ActionSequenceTrigger sequenceTrigger; // Offset: 16
    keen::ItemInstanceInfo triggerItemInstance; // Offset: 20
    keen::ecs::HookShotType hookShotType; // Offset: 40
    keen::ecs::HookShotState hookShotState; // Offset: 41
    keen::actor::SequenceResourceId sequenceResourceId; // Offset: 44
    keen::actor::SequenceRuntimeId sequenceId; // Offset: 48
    keen::ecs::EntityId anchorEntityId; // Offset: 72
    keen::WorldPosition anchorPosition; // Offset: 80
    keen::float3 hookPullActorTargetOffset; // Offset: 104
    keen::float3 hookPullAnchorNormal; // Offset: 116
    keen::float3 hookPullOriginalVelocity; // Offset: 128
    keen::float3 hookSwingOriginalHorizontalDirection; // Offset: 140
    keen::Time hookSwingEndTime; // Offset: 152
    keen::float32 hookSwingRopeLength; // Offset: 160
    keen::bool isEnemyHookAnchor; // Offset: 164
    keen::bool useHookShotCamera; // Offset: 165
    keen::bool hasTouchedGroundAfterHook; // Offset: 166
};

struct ecs.ClientHookShot {
    keen::Time triggerTime; // Offset: 0
    keen::WorldPosition anchorPosition; // Offset: 8
    keen::bool useHookShotCamera; // Offset: 32
    keen::ecs::HookShotType hookShotType; // Offset: 33
};

struct ecs.HookShotDiscoverMemory {
    keen::StaticArray<keen::ecs::EntityId,16> entityIds; // Offset: 0
    keen::uint16 discoveredMask; // Offset: 64
};

struct ecs.HookShotInteractionOffer {
    keen::WorldTransform targetTransform; // Offset: 0
    keen::float3 actorTargetOffset; // Offset: 56
    keen::uint32 anchorEntityLevel; // Offset: 68
    keen::ecs::HookShotType hookShotType; // Offset: 72
    keen::uint8 index; // Offset: 73
    keen::bool hasPriority; // Offset: 74
};

struct ecs.HookShotTargeting {
    keen::ecs::HookShotInteractionOffer bestInteractionOffer; // Offset: 0
    keen::ecs::HookShotDiscoverMemory discoverMemory; // Offset: 80
};

struct ecs.HookShotAnchor {
    keen::ecs::HookShotType hookShotType; // Offset: 0
    keen::float3 targetOffset; // Offset: 4
};

struct ecs.HookShotAnchorSubEntity {
    keen::ecs::TemplateReference anchorEntityTemplate; // Offset: 0
    keen::ecs::Offset attachmentOffset; // Offset: 16
};

struct ecs.HookPullImpulse {
    keen::ecs::ImpulseData impulseData; // Offset: 0
    keen::ecs::EntityId pullingEntityId; // Offset: 32
};

enum class ecs.ClimbType {
    Invalid = 0,
    Wall = 1,
    Ladder = 2,
};

enum class ecs.ClimbState {
    Invalid = 0,
    Enter = 1,
    Climb = 2,
    Exit = 3,
};

enum class ecs.LadderQueryType {
    StepUp = 0,
    StepDown = 1,
    ExitTop = 2,
    Count = 3,
};

struct ecs.LadderQuery {
    keen::ecs::QueryId queryId; // Offset: 0
    keen::bool isValid; // Offset: 4
    keen::bool enable; // Offset: 5
};

struct ecs.Climb {
    keen::ecs::ClimbType climbType; // Offset: 0
    keen::ecs::ClimbState climbState; // Offset: 1
    keen::float3 climbNormal; // Offset: 4
    keen::Time climbBlockingTimeEnd; // Offset: 16
    keen::StaticArray<keen::ecs::LadderQuery,3> ladderCollisionQueries; // Offset: 24
    keen::ecs::EntityId ladderEntityId; // Offset: 48
    keen::ecs::RangeQueryId laddersQueryId; // Offset: 52
    keen::bool ladderStepPhase; // Offset: 56
};

struct ecs.Ladder {
    keen::float3 topOffset; // Offset: 0
    keen::float3 bottomOffset; // Offset: 12
    keen::float3 normal; // Offset: 24
};

struct ecs.LerpTransformData {
    keen::ecs::LerpTransformTarget target; // Offset: 0
    keen::Time localTime; // Offset: 8
    keen::Time duration; // Offset: 16
};

struct ecs.LerpTransform {
    keen::StaticArray<keen::WorldTransform,3> targetTransforms; // Offset: 0
    keen::ecs::LerpTransformData positionLerpData; // Offset: 168
    keen::ecs::LerpTransformData orientationLerpData; // Offset: 192
};

struct ecs.BasicSpawnerComponent {
    keen::ecs::TemplateReference entityTemplate; // Offset: 0
};

struct ecs.TriggerSpawner {
    keen::bool isTriggered; // Offset: 16
    keen::ecs::EntityId spawnedEntityId; // Offset: 20
    keen::Time spawnTimeout; // Offset: 24
    keen::Time nextAllowedSpawnTime; // Offset: 32
};

struct ecs.TriggerBoxMultiSpawner {
    keen::bool linkDestroyToEventSender; // Offset: 16
    keen::bool randomizeOrientation; // Offset: 17
    keen::Time lastTriggerTime; // Offset: 24
    keen::float32 minDistanceToEventSender; // Offset: 32
};

enum class ecs.SpawnTarget {
    SpawnerCenter = 0,
    Player = 1,
};

enum class ecs.SpawnMode {
    Random = 0,
    Grouped = 1,
};

enum class ecs.SpawnOrientationMode {
    LookAtTarget = 0,
    LookAwayFromTarget = 1,
    LookAtPlayer = 2,
};

enum class ecs.SpawnCondition {
    IsDay = 0,
    IsNight = 1,
};

typedef keen::Bitmask8<keen::ecs::SpawnCondition> ecs.SpawnConditionFlags;

struct ecs.SpawnGroupId {
};

struct ecs.SpawnGroup {
    keen::ObjectReference<keen::ecs::SpawnGroupId> spawnGroupId; // Offset: 0
    keen::uint8 minSpawnAmount; // Offset: 16
    keen::uint8 maxSpawnAmount; // Offset: 17
    keen::float weight; // Offset: 20
};

struct ecs.SpawnerEntry {
    keen::ecs::TemplateReference entityTemplate; // Offset: 0
    keen::ObjectReference<keen::ecs::SpawnGroupId> spawnGroupId; // Offset: 16
    keen::ecs::SpawnConditionFlags spawnConditions; // Offset: 32
    keen::float weight; // Offset: 36
};

struct ecs.SpawnPositionSettings {
    keen::float horizontalSearchDistance; // Offset: 0
    keen::float verticalSearchDistance; // Offset: 4
    keen::float minHorizontalSpace; // Offset: 8
    keen::float minVerticalSpace; // Offset: 12
    keen::ecs::PathNodeRequirements nodeRequirements; // Offset: 16
    keen::ecs::PathGridType pathGridType; // Offset: 20
};

struct ecs.RandomSpawner {
    keen::BlobArray<keen::ecs::SpawnerEntry> spawnEntries; // Offset: 0
    keen::BlobArray<keen::ecs::SpawnGroup> spawnGroups; // Offset: 8
    keen::float32 minSpawnRange; // Offset: 16
    keen::float32 maxSpawnRange; // Offset: 20
    keen::Time initialSpawnTimeout; // Offset: 24
    keen::Time minSpawnTimeout; // Offset: 32
    keen::Time maxSpawnTimeout; // Offset: 40
    keen::uint8 minSpawnAmount; // Offset: 48
    keen::uint8 maxSpawnAmount; // Offset: 49
    keen::Time minSpawnDelay; // Offset: 56
    keen::Time maxSpawnDelay; // Offset: 64
    keen::uint8 maxTotalSpawnCount; // Offset: 72
    keen::bool destroyOnSpawnFinished; // Offset: 73
    keen::ecs::SpawnMode spawnMode; // Offset: 74
    keen::ecs::SpawnTarget spawnTarget; // Offset: 75
    keen::ecs::SpawnOrientationMode spawnOrientationMode; // Offset: 76
    keen::float32 minEntityDistance; // Offset: 80
    keen::float32 maxEntityDistance; // Offset: 84
    keen::float32 maxSpawnAngle; // Offset: 88
    keen::bool waitUntilEntitiesAreDestroyed; // Offset: 92
    keen::bool allowRespawn; // Offset: 93
    keen::bool useKeepAliveConditions; // Offset: 94
    keen::bool searchForGroundPosition; // Offset: 95
    keen::ecs::SpawnPositionSettings spawnPositionSettings; // Offset: 96
    keen::bool spawnAsUnitGroup; // Offset: 120
    keen::bool despawnEntities; // Offset: 121
    keen::bool checkDeathState; // Offset: 122
    keen::float32 conditionalDespawnMinRange; // Offset: 124
    keen::float32 defaultDespawnMinRange; // Offset: 128
    keen::bool useUpScaling; // Offset: 132
    keen::bool useDownScaling; // Offset: 133
    keen::ecs::RandomSpawnerAmount minSpawnerAmount; // Offset: 134
};

struct ecs.RandomSpawnerCommand {
    keen::Time spawnTime; // Offset: 0
    keen::ecs::Transform transform; // Offset: 8
    keen::uint8 spawnEntryIndex; // Offset: 36
    keen::bool isAdditionalScalingCommand; // Offset: 37
};

struct ecs.DynamicRandomSpawner {
    keen::Time nextSpawnTime; // Offset: 0
    keen::ecs::EntityId currentGroupId; // Offset: 8
    keen::StaticArray<keen::ecs::EntityId,8> spawnedEntities; // Offset: 12
    keen::StaticArray<keen::ecs::RandomSpawnerCommand,12> spawnCommands; // Offset: 48
    keen::bool wasSpawnedEntityAlive; // Offset: 528
    keen::bool wasAnySpawnedEntityKilled; // Offset: 529
    keen::uint8 totalSpawnCount; // Offset: 530
    keen::uint8 spawnCommandCount; // Offset: 531
    keen::Time trySpawnDuration; // Offset: 536
};

struct ecs.ConditionalDespawn {
    keen::float32 conditionalDespawnMinRange; // Offset: 0
    keen::float32 defaultDespawnMinRange; // Offset: 4
    keen::ecs::SpawnConditionFlags keepAliveConditions; // Offset: 8
    keen::Time nextQueryUpdateTime; // Offset: 16
};

struct ecs.ClientToggleFromActorState {
    keen::ecs::EntityReferenceType entityReferenceType; // Offset: 0
    keen::actor::StateMask setIf; // Offset: 8
    keen::actor::StateMask setIfNot; // Offset: 16
};

struct ecs.NetworkHealth {
    keen::uint32 health; // Offset: 0
    keen::uint32 healthMax; // Offset: 4
};

struct ecs.NetworkStamina {
    keen::uint16 stamina; // Offset: 0
    keen::uint16 staminaMax; // Offset: 2
};

struct ecs.NetworkLevel {
    keen::uint16 level; // Offset: 0
};

struct ecs.NetworkServerProgress {
    keen::uint16 level; // Offset: 0
    keen::uint16 currentAltarCount; // Offset: 2
    keen::uint16 currentHighestAltarLevel; // Offset: 4
};

struct ecs.BaseAttributesData {
    keen::uint8 strength; // Offset: 0
    keen::uint8 strengthFromSkill; // Offset: 1
    keen::uint8 dexterity; // Offset: 2
    keen::uint8 dexterityFromSkill; // Offset: 3
    keen::uint8 intelligence; // Offset: 4
    keen::uint8 intelligenceFromSkill; // Offset: 5
    keen::uint8 constitution; // Offset: 6
    keen::uint8 constitutionFromSkill; // Offset: 7
    keen::uint8 endurance; // Offset: 8
    keen::uint8 enduranceFromSkill; // Offset: 9
    keen::uint8 spirit; // Offset: 10
    keen::uint8 spiritFromSkill; // Offset: 11
};

struct ecs.ArmorAttributes {
    keen::float32 physicalBlowthrough; // Offset: 0
    keen::float32 magicalBlowthrough; // Offset: 4
    keen::uint16 physicalArmor; // Offset: 8
    keen::uint16 cutArmor; // Offset: 10
    keen::uint16 bluntArmor; // Offset: 12
    keen::uint16 pierceArmor; // Offset: 14
    keen::uint16 magicalArmor; // Offset: 16
    keen::uint16 fireArmor; // Offset: 18
    keen::uint16 iceArmor; // Offset: 20
    keen::uint16 fogArmor; // Offset: 22
    keen::uint16 lightningArmor; // Offset: 24
};

enum class ecs.ReviveState {
    Invalid = 0,
    Reviving = 1,
    GettingRevived = 2,
};

struct ecs.NetworkReviveData {
    keen::ecs::ReviveState state; // Offset: 0
    keen::float duration; // Offset: 4
    keen::float left; // Offset: 8
};

struct ecs.NetworkPlayerAttributes {
    keen::ecs::ArmorAttributes armorAttributes; // Offset: 0
    keen::ecs::BaseAttributesData baseAttributes; // Offset: 28
    keen::ecs::NetworkReviveData revivieData; // Offset: 40
    keen::float32 movementNormal; // Offset: 52
    keen::float32 movementSprint; // Offset: 56
    keen::float32 movementSneak; // Offset: 60
    keen::float32 reviveDuration; // Offset: 64
    keen::float32 reviveHealth; // Offset: 68
    keen::float32 critChance; // Offset: 72
    keen::float32 critChanceMagic; // Offset: 76
    keen::float32 critChanceMelee; // Offset: 80
    keen::float32 critChanceRanged; // Offset: 84
    keen::uint16 critDamageMod; // Offset: 88
    keen::uint16 damageMod; // Offset: 90
    keen::uint16 meleeDamageMod; // Offset: 92
    keen::uint16 rangedDamageMod; // Offset: 94
    keen::uint16 magicDamageMod; // Offset: 96
    keen::uint16 damageModSneak; // Offset: 98
    keen::uint16 damageModMerciless; // Offset: 100
    keen::uint16 damageModBackstab; // Offset: 102
    keen::uint16 damageModSkillshot; // Offset: 104
    keen::uint16 poisonSusceptibility; // Offset: 106
    keen::uint16 health; // Offset: 108
    keen::uint16 healthMax; // Offset: 110
    keen::uint16 healthReg; // Offset: 112
    keen::uint16 healthRegDelay; // Offset: 114
    keen::uint16 stamina; // Offset: 116
    keen::uint16 staminaMax; // Offset: 118
    keen::uint16 staminaReg; // Offset: 120
    keen::uint16 staminaRegDelay; // Offset: 122
    keen::uint16 mana; // Offset: 124
    keen::uint16 manaMax; // Offset: 126
    keen::uint16 manaReg; // Offset: 128
    keen::uint16 manaRegDelay; // Offset: 130
    keen::uint16 bodyHeat; // Offset: 132
    keen::uint16 bodyHeatMax; // Offset: 134
    keen::uint16 bodyHeatReg; // Offset: 136
    keen::uint16 bodyHeatRegDelay; // Offset: 138
    keen::uint16 experience; // Offset: 140
    keen::uint16 experienceRequired; // Offset: 142
    keen::uint16 fogResistance; // Offset: 144
    keen::uint16 fogResistanceMax; // Offset: 146
    keen::uint16 level; // Offset: 148
    keen::uint16 staffDamage; // Offset: 150
    keen::uint16 wandDamage; // Offset: 152
    keen::uint16 oneHandedDamage; // Offset: 154
    keen::uint16 twoHandedDamage; // Offset: 156
    keen::uint16 bowDamage; // Offset: 158
    keen::uint16 daggerDamage; // Offset: 160
    keen::uint16 throwableDamage; // Offset: 162
    keen::uint16 unarmedDamage; // Offset: 164
    keen::uint16 magicalFoeDamage; // Offset: 166
    keen::uint16 meleeFoeDamage; // Offset: 168
    keen::uint16 rangedFoeDamage; // Offset: 170
    keen::uint16 flyingFoeDamage; // Offset: 172
    keen::uint16 skeletonFoeDamage; // Offset: 174
    keen::uint16 healing; // Offset: 176
    keen::uint16 freezingResistance; // Offset: 178
    keen::uint8 comfortLevel; // Offset: 180
};

enum class ecs.GatherResourceType {
    Wood = 0,
    Stone = 1,
};

struct ecs.MiningNode {
    keen::ecs::GatherResourceType resourceType; // Offset: 0
    keen::NotifierReference onResourceDepletion; // Offset: 4
    keen::ecs::Offset offset; // Offset: 20
    keen::SoundContainerReference sfx; // Offset: 60
    keen::VfxReference vfx; // Offset: 76
    keen::uint8 aliveDropCount; // Offset: 92
    keen::uint8 numberOfDrops; // Offset: 93
};

struct ecs.DynamicMiningNode {
    keen::bool isInitialized; // Offset: 0
    keen::bool canBeDestroyed; // Offset: 1
    keen::uint8 remainingDropCount; // Offset: 2
};

struct ecs.WiggleComponent {
    keen::Time startTime; // Offset: 0
    keen::float3 rotationAxis; // Offset: 8
    keen::Time duration; // Offset: 24
    keen::float32 intensity; // Offset: 32
    keen::float32 bounciness; // Offset: 36
};

struct ecs.HealthBasedScale {
    keen::float32 minSize; // Offset: 0
    keen::uint8 percentage; // Offset: 4
};

struct ecs.InventoryEmptyState {
    keen::bool toggleVFX; // Offset: 0
    keen::bool isEmpty; // Offset: 1
};

struct ecs.CopyInventoryEmptyStateFromParent {
};

struct ecs.TransformHistoryEntry {
    keen::uint32 tick; // Offset: 0
    keen::WorldTransform transform; // Offset: 8
};

struct ecs.TransformationHistory {
    keen::StaticArray<keen::ecs::TransformHistoryEntry,60> history; // Offset: 0
    keen::Time lastSampleTime; // Offset: 3840
    keen::uint32 lastIndex; // Offset: 3848
    keen::uint32 maxIndex; // Offset: 3852
};

struct ecs.ServerTransformationHistory {
};

struct ecs.ClientTransformationHistory {
};

struct ecs.GameEvent {
    keen::Time timeStamp; // Offset: 0
};

struct ecs.BaseHitEvent {
    keen::WorldTransform targetTransform; // Offset: 8
    keen::float3 volumeMin; // Offset: 64
    keen::float3 volumeMax; // Offset: 76
    keen::bool hasVolume; // Offset: 88
    keen::float32 miningDamagedVolume; // Offset: 92
    keen::float32 miningRemovedVolume; // Offset: 96
    keen::bool hasMiningVolume; // Offset: 100
    keen::CollisionFeedbackMaterialReference materialA; // Offset: 104
    keen::CollisionFeedbackMaterialReference materialB; // Offset: 120
    keen::float3 position; // Offset: 136
    keen::float3 normal; // Offset: 148
    keen::float3 hitDirection; // Offset: 160
    keen::ecs::EntityId rootSourceId; // Offset: 172
    keen::ecs::EntityId targetId; // Offset: 176
    keen::ecs::HitEventFlagMask flags; // Offset: 180
};

struct impact.ImpactId {
    keen::uint32 id; // Offset: 0
};

enum class impact.PushBackForce {
    None = 0,
    Small = 1,
    Normal = 2,
    Big = 3,
    VeryBig = 4,
    VerySmall = 5,
};

typedef keen::HashKey32 WeaponCategoryId;

struct ecs.HitEvent {
    keen::ecs::EntityId rootTargetId; // Offset: 184
    keen::ecs::EntityId sourceId; // Offset: 188
    keen::ecs::EntityId permissionSourceId; // Offset: 192
    keen::ecs::EntityId weaponPideId; // Offset: 196
    keen::ecs::EntityId armorPideId; // Offset: 200
    keen::float32 hitAngle; // Offset: 204
    keen::float32 range; // Offset: 208
    keen::sint32 healthChange; // Offset: 212
    keen::sint32 staminaChange; // Offset: 216
    keen::float32 aggro; // Offset: 220
    keen::float32 noiseRange; // Offset: 224
    keen::impact::ImpactId impactId; // Offset: 228
    keen::impact::PushBackForce pushBackForce; // Offset: 232
    keen::impact::HitReactionType hitReaction; // Offset: 234
    keen::impact::MajorDirection hitDirectionConfig; // Offset: 236
    keen::impact::AttackCategoryMask attackCategory; // Offset: 237
    keen::WeaponCategoryId weaponCategory; // Offset: 240
    keen::FactionType targetFaction; // Offset: 244
};

struct ecs.HitHistory {
    keen::StaticArray<keen::ecs::HitEvent,10> history; // Offset: 0
    keen::StaticArray<keen::WorldTransform,10> targetTransform; // Offset: 2480
    keen::uint32 lastIndex; // Offset: 3040
    keen::uint32 maxIndex; // Offset: 3044
};

struct ecs.ExperienceSource {
    keen::ecs::EntityId lastHitPlayerId; // Offset: 0
    keen::float xpMod; // Offset: 4
};

struct ecs.FogOfWarDiscovery {
    keen::float32 discoveryRange; // Offset: 0
};

enum class FogType {
    None = 0,
    NoneTemporary = 1,
    Dangerous = 2,
    Death = 3,
};

struct ecs.EnvironmentSensor {
    keen::FogType fogType; // Offset: 0
    keen::TemperatureVoxelType temperature; // Offset: 1
};

struct ecs.ToggleAnimation {
    keen::animationgraph::StateIdReference animationStateOn; // Offset: 0
    keen::animationgraph::StateIdReference animationStateOff; // Offset: 16
};

struct ecs.ToggleOnHit {
    keen::impact::AttackCategoryMask disabledDamageTypes; // Offset: 0
    keen::bool canToggleOn; // Offset: 1
    keen::bool canToggleOff; // Offset: 2
};

struct ecs.LinkToggleStateToSignalState {
    keen::SignalReference signal; // Offset: 0
    keen::bool targetState; // Offset: 16
};

struct ecs.LinkToggleStateToParentSignalState {
    keen::SignalReference signal; // Offset: 0
    keen::bool targetState; // Offset: 16
};

struct ecs.LinkToggleStateToParentToggleState {
    keen::bool targetState; // Offset: 0
};

struct ecs.LinkClientToggleStateToParentToggleState {
    keen::bool targetState; // Offset: 0
};

struct ecs.SendToggleStateToParentToggleState {
};

struct ecs.LinkToggleStateToEnemyPhase {
    keen::ObjectReference<keen::EnemyPhase> phase; // Offset: 0
    keen::bool targetState; // Offset: 16
};

struct ecs.LinkToggleStateToParentEnemyPhase {
    keen::ObjectReference<keen::EnemyPhase> phase; // Offset: 0
    keen::bool targetState; // Offset: 16
};

struct ecs.SignalTransmitter {
    keen::SignalReference signal; // Offset: 0
    keen::SignalId signalId; // Offset: 16
    keen::bool state; // Offset: 20
    keen::bool sendActivatedEvent; // Offset: 21
    keen::bool sendDeactivatedEvent; // Offset: 22
    keen::bool sendResultSignal; // Offset: 23
};

struct ecs.SignalReceiver {
    keen::SignalId signalId; // Offset: 0
    keen::ecs::EntityId lastSenderId; // Offset: 4
    keen::SignalReference signal; // Offset: 8
};

enum class DelayFlags {
    On = 0,
    Off = 1,
};

typedef keen::Bitmask8<keen::DelayFlags> DelayMask;

struct ecs.SignalDelay {
    keen::Time duration; // Offset: 0
    keen::DelayMask filterMask; // Offset: 8
    keen::Time toggleTime; // Offset: 16
    keen::bool nextState; // Offset: 24
    keen::bool initialized; // Offset: 25
};

struct ecs.MagicalBarrier {
};

struct ecs.MagicalBarrierConnection {
    keen::bool initialized; // Offset: 0
    keen::ecs::EntityId barrierEntityId; // Offset: 4
    keen::ecs::EntityId spawnedSubentityId; // Offset: 8
    keen::ObjectReference<keen::ecs::TemplateReference> spawnEntity; // Offset: 12
};

struct ecs.LocalSignalReceiver {
    keen::SignalReference signal; // Offset: 0
};

struct ecs.MultiSignalReceiver {
    keen::bool evaluate; // Offset: 0
    keen::StaticArray<keen::AttributeCommand,32> calculation; // Offset: 4
    keen::StaticArray<keen::SignalId,16> signalIds; // Offset: 132
    keen::StaticArray<keen::bool,16> signalStates; // Offset: 196
    keen::bool receiveActivatedEvent; // Offset: 212
    keen::bool receiveDeactivatedEvent; // Offset: 213
    keen::bool hasEvaluatedToTrueOnce; // Offset: 214
};

struct ecs.MultiSignalReceiverCounter {
    keen::uint8 activeCount; // Offset: 0
    keen::uint8 requiredCount; // Offset: 1
};

struct ecs.LoreReading {
    keen::LocaTagReference description; // Offset: 0
    keen::ItemId displayedItemId; // Offset: 16
    keen::LocaTagReference entryName; // Offset: 20
    keen::LocaTagReference unlockMapMarker; // Offset: 36
    keen::ItemReference displayedItem; // Offset: 52
};

struct ecs.NonModalHint {
    keen::bool hasCloseRangeActivation; // Offset: 0
    keen::float fullTextActivation; // Offset: 4
    keen::LocaTagReference description; // Offset: 8
    keen::bool hasKnowledeRequirement; // Offset: 24
    keen::bool useSceneKnowledgeRequirement; // Offset: 25
    keen::GameKnowledgeRequirement knowledgeRequirement; // Offset: 28
    keen::KnowledgeId queryId; // Offset: 132
};

struct ecs.DynamicNonModalHint {
    keen::bool isActive; // Offset: 0
    keen::bool isInCloseRange; // Offset: 1
    keen::float squaredPlayerDistance; // Offset: 4
};

struct ecs.TargetingTransform {
    keen::AttachmentSlot attachmentSlot; // Offset: 0
    keen::ecs::Offset offset; // Offset: 4
};

struct ecs.UiOffsets {
    keen::ecs::Offset healthBarOffset; // Offset: 0
    keen::ecs::Offset interactionPromptOffset; // Offset: 40
};

struct ecs.Boss {
};

struct ecs.BossHealthBar {
    keen::LocaTagReference displayName; // Offset: 0
    keen::float32 maxPlayerDistance; // Offset: 16
};

struct ecs.BossDisplay {
    keen::ecs::RangeQueryId rangeQueryId; // Offset: 0
    keen::ecs::EntityId bossEntityId; // Offset: 4
    keen::bool displayHealthBar; // Offset: 8
    keen::bool isEngagedWithPlayer; // Offset: 9
    keen::LocaTagId displayName; // Offset: 12
};

struct ecs.BossMusicTag {
    keen::BossMusicType bossMusic; // Offset: 0
};

struct ecs.Faction {
    keen::FactionType faction; // Offset: 0
};

struct ecs.ControlCombatTarget {
    keen::ecs::EntityId targetId; // Offset: 0
    keen::actor::SequenceRuntimeId attackSequenceId; // Offset: 8
};

struct ecs.ItemState {
    keen::InventorySlotId containedInSlotId; // Offset: 0
    keen::ItemId itemId; // Offset: 8
    keen::uint16 baseDamageUi; // Offset: 12
    keen::ItemStateMask itemState; // Offset: 14
    keen::ItemRarity itemRarityUi; // Offset: 15
    keen::uint8 itemLevelUi; // Offset: 16
    keen::uint8 durabilityRatioUi; // Offset: 17
};

enum class ecs.CreateItemLootState {
    Start = 0,
    WaitForInventorySetup = 1,
    WaitForPlayerRevive = 2,
    LootCreated = 3,
};

struct ecs.CreateItemLoot {
    keen::ecs::CreateItemLootState lootCreationState; // Offset: 0
};

struct ecs.ItemEquippedLifetime {
};

struct ecs.SpawnedCollectionItem {
    keen::ItemId itemId; // Offset: 0
    keen::uint32 modelHandle; // Offset: 4
};

struct ecs.ItemCollectionComponent {
    keen::LocaTagReference uiMenuName; // Offset: 0
    keen::LocaTagReference uiSlottingVerb; // Offset: 16
    keen::bool spawnCollectionModels; // Offset: 32
    keen::ObjectReference<keen::ItemCollectionSetup> collection; // Offset: 36
    keen::ObjectReference<keen::ModelHierarchy> hierarchy; // Offset: 52
    keen::ObjectReference<keen::Animation> pose; // Offset: 68
    keen::ObjectReference<keen::ClothCollider> clothColliderReference; // Offset: 84
    keen::BlobArray<keen::ItemCollectionSlotResource> slots; // Offset: 100
    keen::HashKey32 poseId; // Offset: 108
};

struct ecs.DynamicItemCollectionComponent {
    keen::StaticArray<keen::ecs::SpawnedCollectionItem,8> spawnedCollectionItems; // Offset: 0
};

struct ecs.TriggerCollectionCompletionKnowledge {
    keen::KnowledgeId completionKnowledgeId; // Offset: 0
};

struct ecs.MovementSensor {
    keen::ecs::RangeQueryId queryId; // Offset: 0
};

struct ecs.FleeSensor {
    keen::float32 viewConeHalfAngle; // Offset: 0
    keen::float32 alertZoneMediumWidth; // Offset: 4
    keen::float32 originalFleeRadius; // Offset: 8
    keen::float32 fleeRadius; // Offset: 12
    keen::bool checkViewCone; // Offset: 16
    keen::bool checkBackCone; // Offset: 17
    keen::Time ignoreCalmEnemiesUntilTime; // Offset: 24
    keen::ecs::AlertState alertState; // Offset: 32
    keen::ecs::EntityId highestDangerEntityId; // Offset: 36
    keen::WorldPosition highestDangerPosition; // Offset: 40
    keen::bool forceUpdate; // Offset: 64
};

struct ecs.FriendSensor {
    keen::float32 checkRadius; // Offset: 0
    keen::StaticArray<keen::ecs::EntityId,8> friendsInRange; // Offset: 4
};

struct ecs.EnemySensor {
    keen::float32 checkRadius; // Offset: 0
    keen::uint8 enemiesInRange; // Offset: 4
};

struct ecs.CheckLineAboveSensor {
    keen::float32 lineCheckHeightAbove; // Offset: 0
};

struct ecs.SafePlayerPosition {
    keen::Time minSafeDuration; // Offset: 0
    keen::float32 minFallHeight; // Offset: 8
};

struct ecs.DynamicSafePlayerPosition {
    keen::WorldTransform transform; // Offset: 0
    keen::Time currentSafeDuration; // Offset: 56
};

struct ecs.Crafting {
    keen::ObjectReference<keen::WorkshopDefinition> workshop; // Offset: 0
    keen::WorkshopId workshopId; // Offset: 16
};

struct ecs.LevelBasedModel {
    keen::sint32 level; // Offset: 0
    keen::ObjectReference<keen::Model> model; // Offset: 4
};

struct ecs.LevelBasedBuildingRange {
    keen::sint32 level; // Offset: 0
    keen::float3 box; // Offset: 4
};

struct ecs.UpgradableBuildingRange {
};

struct ecs.UpgradeData {
    keen::ecs::TemplateReference upgradeEntity; // Offset: 0
    keen::sint32 level; // Offset: 16
};

struct ecs.Upgrade {
    keen::BlobArray<keen::ecs::UpgradeData> levels; // Offset: 0
};

struct ecs.DynamicUpgrade {
    keen::ecs::EntityId entityId; // Offset: 0
    keen::sint32 spawnedLevel; // Offset: 4
};

struct ecs.StoreAttributes {
    keen::float32 health; // Offset: 0
    keen::float32 stamina; // Offset: 4
    keen::float32 mana; // Offset: 8
    keen::float32 bodyHeat; // Offset: 12
    keen::bool restoreAttributes; // Offset: 16
};

struct ecs.GrassEffector {
};

struct ecs.SnappingBoxWorld {
    keen::ecs::AlignedBox worldBox; // Offset: 0
    keen::ecs::AlignedBox snappingBox; // Offset: 24
    keen::ItemId containedItemId; // Offset: 48
    keen::uint8 version; // Offset: 52
};

struct ecs.SnappingBoxLocal {
    keen::ecs::AlignedBox localBox; // Offset: 0
    keen::ItemId containedItemId; // Offset: 24
};

struct ecs.TemporaryMining {
    keen::int3 voxelPosition; // Offset: 0
    keen::float32 relativeHealth; // Offset: 12
};

struct ecs.ClientCycleInventoryStock {
    keen::uint8 inventoryStockType; // Offset: 0
    keen::bool canCycle; // Offset: 1
    keen::bool isCyclingDisabled; // Offset: 2
    keen::bool showStock; // Offset: 3
};

struct ecs.ClientLineOfSightState {
    keen::ecs::LineOfSightState lineOfSightState; // Offset: 0
};

struct UiNpcRenderingOptions {
    keen::ObjectReference<keen::Model> model; // Offset: 0
    keen::animationgraph::StateIdReference defaultAnimation; // Offset: 16
    keen::animationgraph::StateIdHash defaultAnimationStateId; // Offset: 32
    keen::ObjectReference<keen::AnimationGraph> animationGraph; // Offset: 36
};

struct ecs.NpcSetup {
    keen::LocaTagReference name; // Offset: 0
    keen::bool includeInNpcRegistry; // Offset: 16
    keen::bool isCraftingAssistant; // Offset: 17
    keen::LocaTagReference workshopLabel; // Offset: 20
    keen::CharacterPresetReference preset; // Offset: 36
    keen::GameKnowledgeRequirement unlockRequirement; // Offset: 52
    keen::ItemReference placementItem; // Offset: 156
    keen::UiNpcRenderingOptions uiRendering; // Offset: 172
};

struct ecs.CharacterSetup {
    keen::Gender gender; // Offset: 0
    keen::VoicePackId voicePackId; // Offset: 4
    keen::CharacterPresetId presetId; // Offset: 8
    keen::ItemId hair; // Offset: 12
    keen::ItemId beard; // Offset: 16
    keen::ColorPresetId hairColorId; // Offset: 20
    keen::ColorPresetId beardColorId; // Offset: 24
    keen::PaletteColorId skinColor; // Offset: 28
    keen::PaletteColorId eyeBrowColor; // Offset: 32
    keen::PaletteColorId eyeColor; // Offset: 36
    keen::HashKey32 versionHash; // Offset: 40
};

struct ecs.NewCharacterSetup {
};

struct ecs.EquipmentCheck {
};

struct ecs.PlayerLowHealth {
    keen::Time blendOutDuration; // Offset: 0
    keen::Time lastTriggerTime; // Offset: 8
};

struct ecs.GroundCheck {
    keen::bool groundPositionFound; // Offset: 0
    keen::float3 position; // Offset: 4
    keen::float3 normal; // Offset: 16
    keen::Time nextCheckTime; // Offset: 32
};

struct ecs.ProcShuffleBag {
    keen::uint8 procEarlyCount; // Offset: 0
    keen::uint8 procOnTimeCount; // Offset: 1
    keen::uint8 procLateCount; // Offset: 2
    keen::sint8 nextHitCountOffset; // Offset: 3
};

struct ecs.TerrainLootMemory {
    keen::ecs::ProcShuffleBag procShuffleBag; // Offset: 0
    keen::float32 volume; // Offset: 4
    keen::float32 restVolumeAfterPayout; // Offset: 8
};

struct ecs.BuildingLootMemory {
    keen::uint32 volume; // Offset: 0
};

struct ecs.MinerSkillMemory {
    keen::ecs::ProcShuffleBag procShuffleBag; // Offset: 0
    keen::float32 payoutCounter; // Offset: 4
};

struct ecs.TerraformingLootMemory {
    keen::StaticArray<keen::ecs::TerrainLootMemory,128> terrainMemory; // Offset: 0
    keen::StaticArray<keen::ecs::BuildingLootMemory,128> buildingMemory; // Offset: 1536
    keen::ecs::MinerSkillMemory minerSkillMemory; // Offset: 2048
};

struct ecs.TransformToLoot {
    keen::ecs::Offset vfxOnSpawnOffset; // Offset: 0
    keen::ecs::DefaultInventoryReference defaultInventory; // Offset: 40
    keen::actor::ActorSequenceReference defaultAction; // Offset: 56
    keen::LocaTagReference verbLoca; // Offset: 72
    keen::VfxReference vfxOnSpawn; // Offset: 88
    keen::VfxUserEffectParameterDataBlock vfxParameters; // Offset: 104
    keen::uint8 genericSlotCount; // Offset: 168
    keen::uint8 availableSlotCount; // Offset: 169
    keen::bool keepDefaultInventory; // Offset: 170
    keen::uint32 lootHealth; // Offset: 172
};

struct ecs.PlayerStateIndicatorComponent {
    keen::SoundContainerReference soundContainerLowHealth; // Offset: 0
    keen::SoundContainerReference soundContainerLowFogPower; // Offset: 16
    keen::uint32 sfxLowHealthHandle; // Offset: 32
    keen::uint32 sfxLowFogPowerHandle; // Offset: 36
};

struct ecs.Pacify {
    keen::ecs::RangeQueryId queryId; // Offset: 0
    keen::FactionMask pacifyFactions; // Offset: 4
};

struct ecs.PacifiedState {
    keen::bool canBePacified; // Offset: 0
    keen::bool isPacified; // Offset: 1
    keen::bool wasPacifyAborted; // Offset: 2
    keen::ecs::EntityId pacifiedBy; // Offset: 4
    keen::Time pacifyEndTime; // Offset: 8
};

struct ecs.CallFactionsForHelp {
    keen::float32 callForHelpRange; // Offset: 0
    keen::FactionMask callForHelpFactions; // Offset: 4
    keen::ecs::EntityId currentGuardingEntityId; // Offset: 8
};

struct ecs.DebugCameraDisplay {
    keen::float3x4 transform; // Offset: 0
};

struct ecs.CombatFlags {
    keen::bool immune; // Offset: 0
    keen::bool propagateHits; // Offset: 1
    keen::bool handleHits; // Offset: 2
    keen::bool canBlock; // Offset: 3
    keen::bool ignoreMagic; // Offset: 4
    keen::bool ignoreMelee; // Offset: 5
    keen::bool ignoreRanged; // Offset: 6
    keen::bool ignoreTool; // Offset: 7
    keen::bool ignoreOther; // Offset: 8
    keen::bool ignoreAoE; // Offset: 9
    keen::bool canBeBackstabbed; // Offset: 10
};

struct ecs.ToggleImmunity {
    keen::ecs::ToggleModifier toggleModifier; // Offset: 0
};

struct ecs.RandomOrientation {
    keen::actor::RandomOrientationOffset randomOrientationOffset; // Offset: 0
    keen::bool needsTargetEntity; // Offset: 24
    keen::bool adjustVelocity; // Offset: 25
};

struct ecs.RandomDurationScale {
    keen::float min; // Offset: 0
    keen::float max; // Offset: 4
};

struct ecs.Growth {
    keen::Time minDuration; // Offset: 0
    keen::ecs::RandomDurationScale randomDurationScale; // Offset: 8
    keen::BlobArray<keen::VoxelRequirement> allowedSoil; // Offset: 16
};

struct ecs.GrowthHint {
};

struct ecs.DynamicGrowth {
    keen::Time nextLevelTime; // Offset: 0
};

struct ecs.EntityTagContainer {
    keen::BlobArray<keen::ecs::EntityTagReferenceEntry> tags; // Offset: 0
};

struct ecs.CombatStance {
    keen::Time combatStanceDuration; // Offset: 0
    keen::Time combatStanceEndTime; // Offset: 8
};

struct ecs.BenchmarkPoint {
};

struct ecs.CopyParentDamageSusceptibility {
    keen::bool keepSkillShotAttribute; // Offset: 0
};

enum class ecs.DetachAction {
    None = 0,
    Destroy = 1,
    AddGravity = 2,
};

enum class ecs.AttachmentDirection {
    Down = 0,
    Up = 1,
    Left = 2,
    Right = 3,
    Forward = 4,
    Backward = 5,
};

struct ecs.AttachToSurface {
    keen::ecs::DetachAction detachAction; // Offset: 0
    keen::ecs::DetachAction detachActionInBase; // Offset: 1
    keen::ecs::AttachmentDirection attachDirection; // Offset: 2
    keen::float searchLength; // Offset: 4
    keen::ecs::ColliderMask colliderMask; // Offset: 8
    keen::float yOffset; // Offset: 12
    keen::bool spawnFalling; // Offset: 16
};

struct ecs.DynamicAttachToSurface {
    keen::Time searchStartTime; // Offset: 0
    keen::Time nextCheckTime; // Offset: 8
    keen::ecs::EntityId attachmentContainerId; // Offset: 16
    keen::bool hasFoundContainer; // Offset: 20
    keen::bool shouldDestroy; // Offset: 21
    keen::bool hasAddedGravity; // Offset: 22
};

struct ecs.DangerousArea {
    keen::float32 range; // Offset: 0
};

struct ecs.DangerSensor {
    keen::float32 checkRadius; // Offset: 0
};

struct ecs.DynamicDangerSensor {
    keen::bool hasFoundDangerousEntity; // Offset: 0
    keen::ecs::RangeQueryId queryId; // Offset: 4
};

struct ecs.CopyParentLevel {
};

struct ecs.ServerSubmerge {
    keen::float submergeDepth; // Offset: 0
    keen::float maxMaterialSubmergeDepth; // Offset: 4
    keen::float lerpStartValue; // Offset: 8
    keen::float lerpEndValue; // Offset: 12
    keen::Time lerpDuration; // Offset: 16
    keen::Time lerpTime; // Offset: 24
};

struct ecs.NetworkSubmerge {
    keen::float submergeDepth; // Offset: 0
};

struct ecs.ClientSubmerge {
    keen::float submergeDepth; // Offset: 0
    keen::float interpolationSource; // Offset: 4
    keen::float interpolationTarget; // Offset: 8
    keen::uint32 interpolationNewestTick; // Offset: 12
};

struct ecs.SongState {
    keen::Time joinTime; // Offset: 0
    keen::Time songStartTime; // Offset: 8
    keen::SongId songId; // Offset: 16
    keen::uint16 songClusterId; // Offset: 20
};

struct ecs.CustomPlayerString {
    keen::CustomStringId stringId; // Offset: 0
};

struct ecs.SongSelection {
    keen::SongId selectedSongId; // Offset: 0
};

struct ecs.Extinguish {
    keen::SoundContainerReference extinguishSfx; // Offset: 0
};

struct ecs.DynamicExtinguish {
    keen::Time extinguishDetectionTime; // Offset: 0
    keen::Time lastToggle; // Offset: 8
    keen::float32 extinguishValue; // Offset: 16
    keen::bool switchedToggleOff; // Offset: 20
};

struct ecs.ClientExtinguish {
    keen::Time lastNotifyTime; // Offset: 0
    keen::float32 visualizedExtinguishValue; // Offset: 8
};

struct ecs.PackedExtinguish {
    keen::Time lastToggleTime; // Offset: 0
    keen::float32 extinguishValue; // Offset: 8
    keen::bool switchedToggleOff; // Offset: 12
};

struct ecs.FoodBait {
};

struct ecs.RayCastSpawner {
    keen::ecs::TemplateReference spawnTemplate; // Offset: 0
    keen::ecs::Offset rayOffset; // Offset: 16
    keen::float requiredDistanceToSpawnEntity; // Offset: 56
    keen::Time minLifeTime; // Offset: 64
    keen::Time maxLifeTime; // Offset: 72
};

struct ecs.DynamicRayCastSpawner {
    keen::WorldPosition lastSpawnPosition; // Offset: 0
};

struct ecs.WaterSurfaceFX {
    keen::VfxReference standingVfx; // Offset: 0
    keen::VfxReference movingVfx; // Offset: 16
    keen::SoundContainerReference waterSfx; // Offset: 32
    keen::uint32 vfxHandle; // Offset: 48
    keen::uint32 sfxHandle; // Offset: 52
    keen::float3 previousPlayerPosition; // Offset: 56
    keen::bool playerWasMoving; // Offset: 68
};

struct ecs.MoveColliderWithRay {
    keen::float targetLength; // Offset: 0
    keen::Time increaseLengthDuration; // Offset: 8
};

struct ecs.DynamicMoveColliderWithRay {
    keen::Time startTime; // Offset: 0
};

struct ecs.WaterDispenser {
    keen::bool visualOnly; // Offset: 0
};

struct ecs.WaterDrain {
};

enum class GameMessageChannelId {
    Login = 0,
    ServerInfo = 1,
    VoxelWorld = 2,
    EcsClient = 3,
    EcsPrediction = 4,
    Input = 5,
    SaveGame = 6,
    Knowledge = 7,
    Debug = 8,
    EcsReset = 9,
    VoiceChat = 10,
    CustomPlayerStrings = 11,
    Water = 12,
    TwitchDrop = 13,
    Weather = 14,
};

enum class GameMessageLoginType {
    Login = 0,
    SystemsReady = 1,
    GameplayReady = 2,
    Logout = 3,
};

enum class GameMessageLoginErrors {
    Authentication = 0,
    Version = 1,
    Full = 2,
    Shutdown = 3,
    SaveDataIssue = 4,
    Generic = 5,
};

enum class GameMessageLoginResult {
    Ok = 0,
    Failed = 1,
};

struct DaytimeSync {
    keen::Time ecsTime; // Offset: 0
    keen::Time gameTime; // Offset: 8
    keen::float32 gameTimeScale; // Offset: 16
};

struct DebugMessage {
    keen::float3 cameraTarget; // Offset: 0
};

struct KnownUserData {
    keen::CharacterId characterId; // Offset: 0
    keen::BaseId baseId; // Offset: 16
};

struct KnownUsers {
    keen::uint32 version; // Offset: 0
    keen::BlobArray<keen::KnownUserData> users; // Offset: 4
};

enum class BaseState {
    Default = 0,
    Abandoned = 1,
};

struct EntitySaveData {
    keen::WorldTransform transform; // Offset: 0
    keen::bool forcedSave; // Offset: 56
    keen::BlobArray<keen::uint8> entityData; // Offset: 60
};

struct BaseSaveData {
    keen::Guid baseId; // Offset: 0
    keen::AxisAlignedBox buildZone; // Offset: 16
    keen::BlobArray<keen::uint8> voxel; // Offset: 48
    keen::BlobArray<keen::uint8> water; // Offset: 56
};

struct ServerSaveGame {
    keen::uint32 version; // Offset: 0
    keen::BlobArray<keen::BaseSaveData> bases; // Offset: 4
    keen::BlobArray<keen::EntitySaveData> entities; // Offset: 12
    keen::BlobArray<keen::uint8> progressEntity; // Offset: 20
    keen::BlobArray<keen::uint8> entitySerializationContext; // Offset: 28
    keen::Time playTime; // Offset: 40
};

enum class ServerSaveGameVersion {
    V_0 = 0,
    V_1 = 1,
    V_2 = 2,
    V_3_FirstWorldOffset = 3,
    V_4_DeduplicateEntitiesOnLoad = 4,
    V_5_UnlockWorldDialogKnowledge = 5,
    V_6_KnowledgeRename = 6,
    V_7_Water = 7,
};

struct ExtendedServerSaveGame {
    keen::uint32 version; // Offset: 0
    keen::uint32 sceneOffsetChangeCounter; // Offset: 4
    keen::Time dayTime; // Offset: 8
};

enum class ExtendedServerSaveGameVersion {
    V_0 = 0,
    V_1_DayTime = 1,
};

enum class ecs.GameSettingsPreset {
    Default = 0,
    Relaxed = 1,
    Hard = 2,
    Survival = 3,
    Custom = 4,
};

struct ServerSaveGameMeta {
    keen::uint32 version; // Offset: 0
    keen::CalendarTimeStamp lastPlayTime; // Offset: 8
    keen::uint32 progressLevel; // Offset: 16
    keen::string name; // Offset: 20
    keen::Time playTime; // Offset: 32
    keen::ecs::GameSettingsPreset gameSettingsPreset; // Offset: 40
};

struct UnlockedItemKnowledgeSave {
    keen::uint32 version; // Offset: 0
    keen::ItemId itemId; // Offset: 4
    keen::ItemKnowledgeMask knowledge; // Offset: 8
};

struct CustomMapMarkerArray {
    keen::BlobArray<keen::CustomMapMarker> mapMarkers; // Offset: 0
};

struct CharacterSaveGameEntry {
    keen::string name; // Offset: 0
    keen::CharacterId id; // Offset: 8
    keen::CharacterId cloudId; // Offset: 24
    keen::CalendarTimeStamp lastPlayTime; // Offset: 40
    keen::uint32 version; // Offset: 48
    keen::uint32 level; // Offset: 52
    keen::CharacterStateMask stateMask; // Offset: 56
    keen::CustomMapMarkerArray customMapMarker; // Offset: 60
    keen::BlobArray<keen::uint8> data; // Offset: 68
};

struct ItemColorSetupInternal {
    keen::ColorCombinationResource colorIds; // Offset: 0
    keen::bool isSet; // Offset: 12
};

struct OutfitItemData {
    keen::ItemId itemId; // Offset: 0
    keen::ItemColorSetupInternal colors; // Offset: 4
};

struct OutfitArray {
    keen::StaticArray<keen::OutfitItemData,24> data; // Offset: 0
};

struct CharacterOutfit {
    keen::uint32 version; // Offset: 0
    keen::OutfitArray items; // Offset: 4
    keen::ecs::CharacterSetup setup; // Offset: 484
};

struct old_saves.v6.BaseSaveDataV6 {
    keen::Guid baseId; // Offset: 0
    keen::AxisAlignedBox buildZone; // Offset: 16
    keen::WorldTransform DEPRECATEDtransform; // Offset: 48
    keen::BlobArray<keen::uint8> voxel; // Offset: 104
};

struct old_saves.v6.ServerSaveGameV6 {
    keen::uint32 version; // Offset: 0
    keen::BlobArray<keen::old_saves::v6::BaseSaveDataV6> bases; // Offset: 4
    keen::BlobArray<keen::EntitySaveData> entities; // Offset: 12
    keen::BlobArray<keen::uint8> progressEntity; // Offset: 20
    keen::BlobArray<keen::uint8> entitySerializationContext; // Offset: 28
    keen::Time playTime; // Offset: 40
};

struct ecs.CameraShake {
    keen::float32 trauma; // Offset: 8
    keen::float3 position; // Offset: 12
    keen::ecs::EntityId triggerId; // Offset: 24
};

struct ecs.CameraShakeImpulse {
    keen::float3 impulse; // Offset: 8
    keen::float additionalTrauma; // Offset: 20
    keen::Time duration; // Offset: 24
    keen::ecs::EntityId triggerId; // Offset: 32
};

struct ecs.UiCurrentLocationEvent {
    keen::LocaTagId location; // Offset: 8
};

struct ecs.UiNegativeFeedbackEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::LocaTagReference messageLocaTag; // Offset: 12
};

struct ecs.UiInsufficientResourcesEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::InventorySlotId itemSlotId; // Offset: 12
    keen::ResourceTypesMask flags; // Offset: 20
};

struct ecs.UiResourcesFullEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::ecs::EntityId buffEntityId; // Offset: 12
    keen::InventorySlotId itemSlotId; // Offset: 16
    keen::ResourceTypesMask flags; // Offset: 24
};

struct ecs.AppliedBuffEvent {
    keen::ecs::EntityId targetEntityId; // Offset: 8
    keen::BuffSlotType slotType; // Offset: 12
    keen::uint32 slotTypeCount; // Offset: 16
};

struct ecs.UiInventoryStockCycleEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::bool selectionResult; // Offset: 12
};

struct ecs.UiBuildingEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::bool isUndoAction; // Offset: 12
    keen::bool isSuccessful; // Offset: 13
};

struct ecs.UiItemTriggerFailedEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::InventorySlotId itemSlotId; // Offset: 12
    keen::EquipmentSlotType equipmentSlotType; // Offset: 20
};

struct ecs.UnlockSkillEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::SkillNodeId skillId; // Offset: 12
};

struct ecs.UnlearnSkillEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::SkillNodeId skillId; // Offset: 12
};

struct ecs.UnlockPerkEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::InventorySlotId slotId; // Offset: 12
};

struct ecs.TrashItemEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::InventorySlotId slotId; // Offset: 12
};

struct ecs.SelectDialogOptionEvent {
    keen::ecs::EntityId interactingEntityId; // Offset: 8
    keen::LocaTagId selectedOptionId; // Offset: 12
    keen::KnowledgeId knowledgeId; // Offset: 16
};

struct ecs.NpcInputEvent {
    keen::NpcId npcId; // Offset: 8
    keen::float roamingRange; // Offset: 12
};

struct ecs.TriggerKnowledgeUiEvent {
    keen::KnowledgeId knowledgeId; // Offset: 8
};

struct ecs.SetPersonalQuestProgressionEvent {
    keen::bool enable; // Offset: 8
};

struct ecs.ServerSelectDialogOptionEvent {
    keen::ecs::EntityId npcEntity; // Offset: 8
    keen::ecs::EntityId playerEntity; // Offset: 12
    keen::LocaTagId selectedOptionId; // Offset: 16
};

struct ecs.BuildingPlaceEvent {
    keen::float3 position; // Offset: 8
    keen::float4 orientation; // Offset: 20
    keen::float3 volumeMin; // Offset: 36
    keen::float3 volumeMax; // Offset: 48
    keen::CollisionFeedbackMaterialReference material; // Offset: 60
    keen::ItemId trackingItemId; // Offset: 76
};

struct ecs.BuildingPickUpEvent {
    keen::float3 position; // Offset: 8
    keen::float4 orientation; // Offset: 20
    keen::float3 volumeMin; // Offset: 36
    keen::float3 volumeMax; // Offset: 48
    keen::CollisionFeedbackMaterialReference material; // Offset: 60
};

struct ecs.BuildingTearDownEvent {
    keen::float3 position; // Offset: 8
    keen::float4 orientation; // Offset: 20
    keen::float3 volumeMin; // Offset: 36
    keen::float3 volumeMax; // Offset: 48
    keen::CollisionFeedbackMaterialReference material; // Offset: 60
};

struct ecs.ProhibitedHit {
    keen::CollisionFeedbackMaterialReference materialA; // Offset: 8
    keen::CollisionFeedbackMaterialReference materialB; // Offset: 24
    keen::float3 position; // Offset: 40
    keen::float3 normal; // Offset: 52
    keen::ecs::EntityId rootSourceId; // Offset: 64
    keen::ecs::EntityId targetId; // Offset: 68
};

struct ecs.TerraformingHitEvent {
    keen::float32 range; // Offset: 184
};

enum class ecs.HitCandidateType {
    Entity = 0,
    Terrain = 1,
    Building = 2,
};

struct ecs.HitCandidate {
    keen::float3 sourceVelocity; // Offset: 248
    keen::WorldTransform sourceTransform; // Offset: 264
    keen::sint32 sourceManaCost; // Offset: 320
    keen::ecs::HitCandidateType candidateType; // Offset: 324
    keen::bool propagate; // Offset: 325
    keen::bool sendHitEvent; // Offset: 326
    keen::bool ignoreConsecutiveHits; // Offset: 327
};

struct ecs.ResourceCandidate {
    keen::ecs::EntityId targetEntityId; // Offset: 8
    keen::HashKey32 attributeId; // Offset: 12
    keen::sint32 change; // Offset: 16
};

struct ecs.ResourceChange {
    keen::uint32 gain; // Offset: 0
    keen::uint32 loss; // Offset: 4
};

struct ecs.ResourceChangeEvent {
    keen::ecs::EntityId targetEntityId; // Offset: 8
    keen::ecs::ResourceChange healthChange; // Offset: 12
    keen::ecs::ResourceChange manaChange; // Offset: 20
    keen::ecs::ResourceChange staminaChange; // Offset: 28
};

struct ecs.EnemyAttackStartedEvent {
    keen::ecs::EntityId attackerId; // Offset: 8
    keen::ecs::EntityId targetId; // Offset: 12
};

struct ecs.CallForHelpEvent {
    keen::ecs::EntityId noticingEntityId; // Offset: 8
    keen::float3 noticingEntityPosition; // Offset: 12
    keen::ecs::EntityId noticedEntityId; // Offset: 24
    keen::float3 noticedEntityPosition; // Offset: 28
    keen::float32 radius; // Offset: 40
    keen::bool checkSight; // Offset: 44
    keen::FactionMask factions; // Offset: 46
};

struct ecs.EnemyIsHelpingEvent {
    keen::ecs::EntityId helpingEntityId; // Offset: 8
    keen::ecs::EntityId targetEntityId; // Offset: 12
};

struct ecs.GenericEnemyEvent {
    keen::ecs::EntityId enemyEntityId; // Offset: 8
    keen::ecs::EnemyEventType eventType; // Offset: 12
};

struct ecs.NoiseEvent {
    keen::ecs::EntityId senderId; // Offset: 8
    keen::float3 position; // Offset: 12
    keen::float32 range; // Offset: 24
};

struct ecs.ChildDestroyed {
    keen::ecs::EntityId childId; // Offset: 8
    keen::ecs::EntityId parentId; // Offset: 12
};

struct ecs.PickupEvent {
    keen::float3 position; // Offset: 8
    keen::ItemId itemId; // Offset: 20
    keen::uint32 itemCount; // Offset: 24
    keen::ecs::EntityId pickedUpByEntityId; // Offset: 28
    keen::ecs::EntityId pickedUpFromEntityId; // Offset: 32
    keen::InventorySlotId targetSlotId; // Offset: 36
};

enum class InventoryCategory {
    Invalid = 0,
    Customization = 1,
    Equipment = 2,
    Currency = 3,
    Generic = 4,
    Virtual = 5,
};

typedef keen::Bitmask8<keen::InventoryCategory> InventoryCategoryMask;

struct ecs.InventoryFull {
    keen::ecs::EntityId pickedUpById; // Offset: 8
    keen::ecs::EntityId pickedUpFromId; // Offset: 12
    keen::InventoryCategoryMask mask; // Offset: 16
};

struct ecs.XPGainedEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::uint32 amount; // Offset: 12
    keen::ExperienceSourceType source; // Offset: 16
};

struct ecs.PuzzleCompletedEvent {
    keen::StaticArray<keen::ecs::EntityId,16> clusterPlayerEntityIds; // Offset: 8
};

struct ecs.LevelUpEvent {
    keen::WorldPosition position; // Offset: 8
    keen::ecs::EntityId playerEntityId; // Offset: 32
    keen::Time duration; // Offset: 40
    keen::sint32 level; // Offset: 48
};

struct ecs.AcceptOfferedInteractionEvent {
    keen::ecs::EntityId guestEntityId; // Offset: 8
    keen::ecs::EntityId hostEntityId; // Offset: 12
    keen::uint32 offerId; // Offset: 16
};

struct ecs.InteractionAcceptedEvent {
    keen::ecs::EntityId guestEntityId; // Offset: 8
    keen::ecs::EntityId hostEntityId; // Offset: 12
    keen::uint32 offerId; // Offset: 16
};

struct ecs.SetToggleStateEvent {
    keen::ecs::EntityId senderId; // Offset: 8
    keen::SignalId signalId; // Offset: 12
    keen::bool newState; // Offset: 16
};

struct ecs.ToggleInteractionEvent {
    keen::ecs::EntityId guestId; // Offset: 8
    keen::ecs::EntityId hostId; // Offset: 12
    keen::uint32 offerId; // Offset: 16
};

struct ecs.ActionbarSelectionEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::ActionbarSlotSelection selectedIndex; // Offset: 12
};

struct ecs.InventoryStockSelectionEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::uint8 inventoryStockType; // Offset: 12
    keen::ItemId selectedItemId; // Offset: 16
};

struct ecs.ChangeEquipmentEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::InventorySlotId inventorySlotId; // Offset: 12
    keen::EquipmentSlot equipmentSlot; // Offset: 20
    keen::ecs::ChangeEquipment type; // Offset: 21
};

struct ecs.SwapEquipmentSetEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::ecs::EntityId targetInventoryId; // Offset: 12
    keen::ecs::SwapEquipmentTarget type; // Offset: 16
};

struct ecs.HandleEquipmentSlotChangedEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::EquipmentSlot equipmentSlot; // Offset: 12
};

struct ecs.ConsumeItemEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::InventorySlotId inventorySlotId; // Offset: 12
};

struct ecs.InspectItemEvent {
    keen::InventorySlotId inventorySlotId; // Offset: 8
    keen::ecs::EntityId playerEntityId; // Offset: 16
};

struct ecs.UiCreateBuildingItemEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::ActionbarSlotSelection selectedIndex; // Offset: 12
    keen::ItemId itemId; // Offset: 16
};

struct ecs.UiCreateNpcItemEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::ItemId itemId; // Offset: 12
};

struct ecs.TeleportPlayerEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::ecs::EntityId targetEntityId; // Offset: 12
    keen::float3 targetWorldPosition; // Offset: 16
};

struct ecs.TransferItemToInventoryEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::ecs::EntityId targetInventoryId; // Offset: 12
    keen::InventorySlotId targetSlotId; // Offset: 16
    keen::ecs::EntityId sourceInventoryId; // Offset: 24
    keen::InventorySlotId sourceSlotId; // Offset: 28
    keen::InventoryActionType type; // Offset: 36
    keen::ecs::TransferItemToInventoryFlags flags; // Offset: 37
    keen::uint16 amount; // Offset: 38
};

struct ecs.SortInventoryEvent {
    keen::ecs::EntityId targetInventoryId; // Offset: 8
};

struct ecs.LootInteractionEvent {
    keen::ecs::EntityId guestId; // Offset: 8
    keen::ecs::EntityId hostId; // Offset: 12
    keen::uint32 offerId; // Offset: 16
    keen::bool lootAll; // Offset: 20
    keen::bool forAllPlayers; // Offset: 21
    keen::StaticArray<keen::KnowledgeId,8> knowledgeIds; // Offset: 24
};

struct ecs.UiCraftRecipeEvent {
    keen::ecs::EntityId craftingOperatorId; // Offset: 8
    keen::ecs::EntityId craftingStationId; // Offset: 12
    keen::RecipeId recipeId; // Offset: 16
    keen::uint16 recipeAmount; // Offset: 20
};

struct ecs.UiAutomaticTransferEvent {
    keen::ecs::EntityId craftingOperatorId; // Offset: 8
    keen::ecs::EntityId craftingStationId; // Offset: 12
    keen::RecipeId recipeId; // Offset: 16
    keen::ItemId itemId; // Offset: 20
    keen::uint16 amount; // Offset: 24
};

struct ecs.UiSelectCraftingStationRecipeEvent {
    keen::ecs::EntityId craftingOperatorId; // Offset: 8
    keen::ecs::EntityId craftingStationId; // Offset: 12
    keen::RecipeId recipeId; // Offset: 16
};

struct ecs.CraftRecipeEvent {
    keen::ecs::EntityId craftingOperatorId; // Offset: 8
    keen::ecs::EntityId craftingStationId; // Offset: 12
    keen::RecipeId recipeId; // Offset: 16
    keen::uint16 recipeAmount; // Offset: 20
};

struct ecs.CraftRecipeSuccessEvent {
    keen::WorkshopId workshopId; // Offset: 8
    keen::RecipeId recipeId; // Offset: 12
};

struct ecs.UiPinRecipeEvent {
    keen::RecipeId recipeId; // Offset: 8
    keen::bool pinRecipe; // Offset: 12
};

struct ecs.UiWaypointEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::WorldPosition position; // Offset: 16
    keen::bool enable; // Offset: 40
};

struct ecs.UiPingEvent {
    keen::ecs::EntityId senderEntityId; // Offset: 8
    keen::WorldPosition position; // Offset: 16
};

struct ecs.UiPingInputEvent {
};

typedef keen::HashKey32 MapMarkerTypeId;

struct ecs.UiAddMapMarkerEvent {
    keen::WorldPosition position; // Offset: 8
    keen::uint8 colorScheme; // Offset: 32
    keen::MapMarkerTypeId type; // Offset: 36
};

struct ecs.UiRemoveMapMarkerEvent {
    keen::uint32 handle; // Offset: 8
};

struct ecs.ChangeCustomizationEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::InventorySlotId targetSlotId; // Offset: 12
    keen::ItemId itemId; // Offset: 20
};

struct ecs.OpenHudScreenEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::ecs::EntityId interactionHostId; // Offset: 12
    keen::HudScreenType screen; // Offset: 16
};

struct ecs.KillFaction {
    keen::FactionMask factionMask; // Offset: 8
    keen::uint32 playerMask; // Offset: 12
};

struct ecs.StartFlyingEvent {
    keen::ecs::EntityId targetId; // Offset: 8
};

struct ecs.StopFlyingEvent {
    keen::ecs::EntityId targetId; // Offset: 8
};

struct ecs.EnterFlyingStateEvent {
    keen::ecs::EntityId targetId; // Offset: 8
};

struct ecs.SyncedAttackEvent {
    keen::ecs::EntityId attackerEntityId; // Offset: 8
    keen::ecs::EntityId targetEntityId; // Offset: 12
    keen::Time resolveTime; // Offset: 16
    keen::ecs::SyncedAttackType type; // Offset: 24
};

struct ecs.SyncedSequenceEvent {
    keen::ecs::EntityId entityId; // Offset: 8
    keen::ecs::EntityId triggeringEntityId; // Offset: 12
    keen::actor::ActorSequenceReference sequence; // Offset: 16
};

struct ecs.VisceralAttackExecutedEvent {
    keen::ecs::EntityId attackerId; // Offset: 8
    keen::ecs::EntityId targetId; // Offset: 12
};

struct ecs.OnDestroyNotifyEvent {
    keen::WorldTransform transform; // Offset: 8
    keen::Guid type; // Offset: 64
    keen::float3 hitDirection; // Offset: 80
};

enum class ecs.NotifyEventType {
    Normal = 0,
    Sfx = 1,
    Vfx = 2,
};

struct ecs.NotifyEvent {
    keen::ecs::Offset offset; // Offset: 8
    keen::WorldTransform transform; // Offset: 48
    keen::VfxUserEffectParameterDataBlock vfxParameters; // Offset: 104
    keen::ecs::EntityId sourceEntityId; // Offset: 168
    keen::actor::SequenceRuntimeId sequenceId; // Offset: 176
    keen::uint32 slot; // Offset: 200
    keen::Guid typeGuid; // Offset: 204
    keen::ecs::NotifyEventType type; // Offset: 220
    keen::bool attach; // Offset: 221
    keen::bool canBeCanceled; // Offset: 222
};

struct ecs.NotifyEnvFxEvent {
    keen::Guid eventGuid; // Offset: 8
    keen::EnvironmentEffectType environmentEffectType; // Offset: 24
    keen::ecs::EntityId sourceEntityId; // Offset: 28
    keen::AttachmentSlot slot; // Offset: 32
    keen::ecs::Offset offset; // Offset: 36
    keen::bool attach; // Offset: 76
    keen::float32 rayOffsetY; // Offset: 80
    keen::float32 rayLength; // Offset: 84
};

struct ecs.FootDown {
    keen::EnvironmentEffectType environmentEffectType; // Offset: 8
    keen::ecs::EntityId sourceEntityId; // Offset: 12
    keen::AttachmentSlot slot; // Offset: 16
    keen::ecs::Offset offset; // Offset: 20
};

struct ecs.FoleyEnvEvent {
    keen::Guid eventGuid; // Offset: 8
    keen::FoleyType foleyFxType; // Offset: 24
    keen::ecs::EntityId sourceEntityId; // Offset: 28
};

struct ecs.RegisterControlledCombatTargetEvent {
    keen::ecs::EntityId attackerId; // Offset: 8
    keen::ecs::EntityId targetId; // Offset: 12
};

struct ecs.UnregisterControlledCombatTargetEvent {
    keen::ecs::EntityId attackerId; // Offset: 8
    keen::ecs::EntityId targetId; // Offset: 12
};

struct ecs.LoreRead {
    keen::LocaTagId locaTag; // Offset: 8
    keen::ecs::EntityId playerEntityId; // Offset: 12
};

struct ecs.ItemUsed {
    keen::ItemId itemId; // Offset: 8
    keen::ecs::EntityId playerEntityId; // Offset: 12
};

struct ecs.StartPlaySongEvent {
    keen::ecs::EntityId playerId; // Offset: 8
    keen::SongId songId; // Offset: 12
};

enum class ecs.SequenceTerminationReason {
    Finished = 0,
    AbortedDefault = 1,
    AbortedDeath = 2,
    AbortedMovement = 3,
    AbortedInteract = 4,
    AbortedFollowUp = 5,
    AbortedExternalOverride = 6,
    AbortedStopEntity = 7,
};

struct ecs.ItemKnowledgeGained {
    keen::ItemId itemId; // Offset: 8
    keen::ecs::EntityId playerEntityId; // Offset: 12
    keen::ItemKnowledgeMask gainedKnowledge; // Offset: 16
};

struct ecs.KnowledgeTriggerEvent {
    keen::KnowledgeId knowledgeId; // Offset: 8
    keen::ecs::EntityId playerEntityId; // Offset: 12
    keen::bool removeKnowledge; // Offset: 16
};

struct ecs.KnowledgeUnlockedEvent {
    keen::KnowledgeId knowledgeId; // Offset: 8
    keen::ecs::EntityId playerEntityId; // Offset: 12
};

enum class ecs.KnowledgeType {
    None = 0,
    Dialog = 1,
    JournalEntry = 2,
    JournalCompletion = 3,
    Recipe = 4,
    MapMarker = 5,
    NpcUnlock = 6,
};

struct ecs.KnowledgeGained {
    keen::ecs::KnowledgeType targetType; // Offset: 8
    keen::WorkshopId workshopId; // Offset: 12
    keen::NpcId npcId; // Offset: 16
    keen::RecipeId recipeId; // Offset: 20
    keen::JournalEntryId journalId; // Offset: 24
    keen::ecs::EntityId mapMarkerEntityId; // Offset: 28
};

struct ecs.ParryEvent {
    keen::ecs::EntityId attackerEntityId; // Offset: 8
    keen::ecs::EntityId blockerEntityId; // Offset: 12
    keen::sint32 staminaDrain; // Offset: 16
};

struct ecs.CookingEvent {
    keen::ecs::Offset attachmentOffset; // Offset: 8
    keen::ecs::EntityId cookedEntityId; // Offset: 48
    keen::ItemId itemId; // Offset: 52
    keen::AttachmentSlot attachmentSlot; // Offset: 56
    keen::bool burned; // Offset: 57
};

struct ecs.PlayerBaseChangeEvent {
    keen::CharacterId playerCharacterId; // Offset: 8
    keen::BaseId baseId; // Offset: 24
};

struct ecs.KickPlayerEvent {
    keen::ecs::EntityId playerToKick; // Offset: 8
};

struct ecs.FlameAltarEvent {
    keen::ecs::EntityId playerEntityId; // Offset: 8
    keen::ecs::EntityId baseEntityId; // Offset: 12
    keen::ecs::FlameAltarActionType type; // Offset: 16
};

struct ecs.EntityDiedEvent {
    keen::ecs::EntityId deadEntityId; // Offset: 8
};

struct ecs.ActivateFactionPacifyEvent {
    keen::ecs::EntityId entityId; // Offset: 8
    keen::FactionType faction; // Offset: 12
};

struct ecs.ActivateFactionCallForHelpEvent {
    keen::ecs::EntityId entityId; // Offset: 8
    keen::FactionType faction; // Offset: 12
};

struct ecs.StartGuardingEvent {
    keen::ecs::EntityId guardingEntityId; // Offset: 8
    keen::ecs::EntityId guardedEntityId; // Offset: 12
};

struct ecs.StopGuardingEvent {
    keen::ecs::EntityId guardingEntityId; // Offset: 8
    keen::ecs::EntityId guardedEntityId; // Offset: 12
};

struct ecs.DestroyedWithoutSurfaceEvent {
    keen::WorldTransform transform; // Offset: 8
    keen::ecs::EntityId entityId; // Offset: 64
    keen::CollisionFeedbackMaterialReference material; // Offset: 68
};

struct ecs.TransformedToLootEvent {
    keen::ecs::EntityId entityId; // Offset: 8
    keen::VfxUserEffectParameterDataBlock overwriteVfxParameters; // Offset: 12
    keen::bool useVfxDefaultParameters; // Offset: 76
};

struct ecs.GameSettingsChangedEvent {
    keen::ecs::GameSettings newSettings; // Offset: 8
};

struct ecs.SetEnemyVariableEvent {
    keen::ecs::EntityId enemyId; // Offset: 8
    keen::enemy01::EnemyVariableReference variable; // Offset: 12
    keen::bool state; // Offset: 28
};

struct ecs.UiWorldEvent {
    keen::HashKey32 worldEventId; // Offset: 8
};

struct ecs.DebugHitRequest {
    keen::ecs::EntityId targetEntityId; // Offset: 0
    keen::WorldTransform sourceTransform; // Offset: 8
    keen::impact::MajorDirection majorHitDirection; // Offset: 64
};

struct ecs.DebugHitResult {
    keen::float3 hitPosition; // Offset: 0
    keen::float3 hitNormal; // Offset: 12
    keen::float3 hitDirection; // Offset: 24
    keen::float32 hitAngle; // Offset: 36
    keen::bool hit; // Offset: 40
};

struct GuidRegistryResource {
    keen::BlobArray<keen::Guid> guids; // Offset: 0
};

enum class impact.ImpactFilter {
    Player = 0,
    Enemy = 1,
};

enum class impact.AttackFlags {
    CanBeBlocked = 0,
};

struct impact.DamageData {
};

struct impact.DamageConfig {
};

struct impact.SphereColliderConfig {
};

struct impact.ImpactQueryResult {
    keen::ecs::EntityId entityId; // Offset: 0
    keen::float3 position; // Offset: 4
    keen::float3 normal; // Offset: 16
    keen::ecs::QueryResultFlags flags; // Offset: 28
};

enum class impact.Flags {
    Initialized = 0,
    Executed = 1,
    CleanupDone = 2,
    Halt = 3,
    Error = 4,
    Result_DestroyEntity = 5,
};

struct impact.DebugServerImpactMessage {
    keen::impact::ImpactId id; // Offset: 0
};

struct impact.DebugImpactRequestMessage {
    keen::Guid impactGuid; // Offset: 0
};

struct impact.DebugImpcatState {
    keen::uint16 rPC; // Offset: 0
    keen::uint16 rSP; // Offset: 2
    keen::uint16 rFP; // Offset: 4
    keen::Bitmask8<keen::impact::Flags> flags; // Offset: 6
    keen::BlobArray<keen::uint32> stack; // Offset: 8
    keen::BlobArray<keen::uint8> data; // Offset: 16
};

struct impact.DebugImpactFunctionCall {
    keen::uint16 pc; // Offset: 0
    keen::impact::DebugImpcatState beforeUpdate; // Offset: 4
    keen::impact::DebugImpcatState afterUpdate; // Offset: 28
};

struct impact.DebugImpactData {
    keen::ecs::EntityId rootId; // Offset: 0
    keen::impact::DebugImpcatState beforeUpdate; // Offset: 4
    keen::impact::DebugImpcatState afterUpdate; // Offset: 28
    keen::BlobArray<keen::impact::DebugImpactFunctionCall> calls; // Offset: 52
    keen::BlobArray<keen::uint16> programCounter; // Offset: 60
    keen::BlobArray<keen::Guid> appliedConfigurations; // Offset: 68
};

struct impact.DebugImpact {
    keen::Guid impactId; // Offset: 0
    keen::uint32 tick; // Offset: 16
    keen::ecs::EntityId impactEntityId; // Offset: 20
    keen::impact::DebugImpactData data; // Offset: 24
};

enum class ImpactOps {
    INVALID = 0,
    IADD = 1,
    ISUB = 2,
    IMUL = 3,
    IDIV = 4,
    ILT = 5,
    IEQ = 6,
    ILEQ = 7,
    BR = 8,
    BRT = 9,
    BRF = 10,
    ICONST = 11,
    ICONST0 = 12,
    ICONST1 = 13,
    INC = 14,
    DEC = 15,
    COPY = 16,
    DUP = 17,
    CALL = 18,
    ECALL = 19,
    RET = 20,
    LOAD = 21,
    GLOAD = 22,
    STORE = 23,
    GSTORE = 24,
    LTIME = 25,
    TIMEFF = 26,
    POP = 27,
    RVM = 28,
    DSELF = 29,
    HALT = 30,
};

enum class impact.ImpcatValueNumberFormat {
    Normal = 0,
    Percentage = 1,
    Duration = 2,
    Numberless = 3,
};

typedef keen::ObjectReference<keen::impact::ConfigId> impact.ConfigIdReference;

struct impact.ImpactConfig {
    keen::LocaTagReference locaTag; // Offset: 0
    keen::bool isSigned; // Offset: 16
    keen::impact::ImpcatValueNumberFormat valueFormat; // Offset: 17
    keen::impact::ConfigIdReference id; // Offset: 20
    keen::HashKey32 configId; // Offset: 36
    keen::HashKey32 type; // Offset: 40
    keen::Guid configGuid; // Offset: 44
    keen::Guid objectId; // Offset: 60
};

struct impact.BuffImpactConfig {
    keen::BuffTypeReference value; // Offset: 76
};

struct impact.EnemyVariableImpactConfig {
    keen::enemy01::EnemyVariableReference value; // Offset: 76
};

struct impact_nodes.ImpactNode {
    keen::Vector2 uiPosition; // Offset: 0
};

struct impact_nodes.ImpactValueNode {
    keen::impact::ConfigIdReference id; // Offset: 8
    keen::LocaTagReference locaTag; // Offset: 24
    keen::bool isSigned; // Offset: 40
    keen::impact::ImpcatValueNumberFormat valueFormat; // Offset: 41
    keen::Guid objectId; // Offset: 44
};

struct impact_nodes.BuffValueNode {
    keen::BuffTypeReference value; // Offset: 60
};

struct impact_nodes.ImpactExecutableNode {
};

struct impact_nodes.ApplyBuff {
    keen::BuffTypeReference buffInput; // Offset: 8
    keen::ecs::EntityId targetEntityId; // Offset: 24
    keen::impact::DamageSetup damageSetup; // Offset: 28
    keen::Time durationInput; // Offset: 80
};

struct impact_nodes.ImpactBranchNode {
};

struct impact_nodes.ImpactNodeExecutionBranch {
};

struct impact_nodes.IfBranchNode {
    keen::bool negate; // Offset: 8
    keen::impact_nodes::ImpactNodeExecutionBranch ifBranch; // Offset: 9
    keen::impact_nodes::ImpactNodeExecutionBranch elseBranch; // Offset: 10
};

struct impact_nodes.HasBuffNode {
    keen::BuffTypeReference buffInput; // Offset: 12
    keen::ecs::EntityId targetEntityId; // Offset: 28
};

struct impact_nodes.RemoveBuff {
    keen::BuffTypeReference buffInput; // Offset: 8
    keen::ecs::EntityId targetEntityId; // Offset: 24
    keen::bool wasRemoved; // Offset: 28
};

struct ecs.ImpactHierarchy {
    keen::ecs::EntityId parentImpactId; // Offset: 0
    keen::ecs::EntityId rootImpactId; // Offset: 4
    keen::ecs::EntityId weaponPideId; // Offset: 8
    keen::ecs::EntityId permissionCheckId; // Offset: 12
};

struct ecs.ImpactItemConfig {
    keen::ItemInstanceInfo usedItem; // Offset: 0
    keen::ItemInstanceInfo ammunitionItem; // Offset: 20
    keen::PerkId usedPerkId; // Offset: 40
};

struct ecs.SequenceEventCollider {
    keen::actor::SequenceResourceId sequenceId; // Offset: 0
    keen::Guid eventGuid; // Offset: 4
};

struct ecs.SequenceEventImpactConfig {
    keen::actor::SequenceResourceId sequenceId; // Offset: 0
    keen::Guid eventGuid; // Offset: 4
};

struct ecs.ImpactConfiguration {
    keen::impact::Configurations configValues; // Offset: 0
    keen::impact::DamageDistribution damageDistribution; // Offset: 8
    keen::bool damageDistributionIsSet; // Offset: 60
};

struct ecs.ImpactDirection {
    keen::impact::MajorDirection direction; // Offset: 0
};

struct ecs.Impact {
    keen::ImpactProgramReference program; // Offset: 0
    keen::impact::ImpactId impactId; // Offset: 16
};

struct ecs.ImpactHalted {
};

typedef keen::uint32 ImpactCommand;

enum class TerraformingType {
    Remove = 0,
    Add = 1,
    Flatten = 2,
    FlattenHorizontal = 3,
};

enum class WeaponCategoryType {
    OneHandAxe = 0,
    OneHandClub = 1,
    OneHandSword = 2,
    RangedBow = 3,
    RangedStaff = 4,
    RangedWand = 5,
    TwoHandAxe = 6,
    TwoHandClub = 7,
    TwoHandHammer = 8,
    UnarmedFists = 9,
    Throwable = 10,
    Dagger = 11,
};

typedef keen::Bitmask16<keen::WeaponCategoryType> WeaponCategoryTypeMask;

enum class VisceralAttackType {
    Invalid = 0,
    Sneak = 1,
    Merciless = 2,
};

typedef keen::HashKey32 impact.ProgramId;

typedef keen::HashKey32 impact.VariableTypeId;

struct impact.ConfigId {
};

typedef keen::HashKey32 impact.ConfigIdHash;

struct impact.ConfigIdCollection {
};

struct impact.ConfigValueId {
    keen::uint32 value; // Offset: 0
};

struct impact.TypedValue32 {
};

struct impact.FloatImpactConfig {
    keen::float32 value; // Offset: 76
};

struct impact.Uint32ImpactConfig {
    keen::uint32 value; // Offset: 76
};

struct impact.Sint32ImpactConfig {
    keen::sint32 value; // Offset: 76
};

struct impact.BoolImpactConfig {
    keen::bool value; // Offset: 76
};

struct impact.Float2ImpactConfig {
    keen::float2 value; // Offset: 76
};

struct impact.Float3ImpactConfig {
    keen::float3 value; // Offset: 76
};

struct impact.Float4ImpactConfig {
    keen::float4 value; // Offset: 76
};

struct impact.TemplateImpactConfig {
    keen::ecs::TemplateReference value; // Offset: 76
};

struct impact.EntityTagImpactConfig {
    keen::ecs::EntityTagReference value; // Offset: 76
};

struct impact.MaterialImpactConfig {
    keen::CollisionFeedbackMaterialReference value; // Offset: 76
};

struct impact.TimeImpactConfig {
    keen::Time value; // Offset: 80
};

struct impact.FactionImpactConfig {
    keen::FactionType value; // Offset: 76
};

struct impact.AttributeReferenceConfig {
    keen::AttributeReference value; // Offset: 76
};

struct impact.VisceralAttackTypeConfig {
    keen::VisceralAttackType value; // Offset: 76
};

struct impact.DamageTerraformingSetup {
    keen::sint32 softDamage; // Offset: 0
    keen::sint32 slightlyHardDamage; // Offset: 4
    keen::sint32 moderatelyHardDamage; // Offset: 8
    keen::sint32 hardDamage; // Offset: 12
    keen::sint32 veryHardDamage; // Offset: 16
};

struct impact.DamageTerraformingRuntimeSetup {
    keen::float32 woodDamageMod; // Offset: 20
    keen::float32 stoneDamageMod; // Offset: 24
    keen::float32 metalDamageMod; // Offset: 28
};

struct impact.DamageTerraformingSetupConfig {
    keen::impact::DamageTerraformingSetup value; // Offset: 76
};

struct impact.ArmorDistribution {
    keen::float32 physical; // Offset: 0
    keen::float32 blunt; // Offset: 4
    keen::float32 pierce; // Offset: 8
    keen::float32 cut; // Offset: 12
    keen::float32 magical; // Offset: 16
    keen::float32 fire; // Offset: 20
    keen::float32 ice; // Offset: 24
    keen::float32 fog; // Offset: 28
    keen::float32 lightning; // Offset: 32
};

struct impact.TerraformingTypeConfig {
    keen::TerraformingType value; // Offset: 76
};

enum class impact.DamageTypeNew {
    Physical_Cut = 0,
    Physical_Pierce = 1,
    Physical_Blunt = 2,
    Magical_Fire = 3,
    Magical_Ice = 4,
    Magical_Fog = 5,
    Magical_Lightning = 6,
    Healing = 7,
    Poison = 8,
    Wood = 9,
    Stone = 10,
    Metal = 11,
    Explosion = 12,
};

struct impact.AttackCategoryMaskConfig {
    keen::impact::AttackCategoryMask value; // Offset: 76
};

typedef keen::ObjectReference<keen::WeaponCategory> WeaponCategoryReference;

struct impact.WeaponCategoryConfig {
    keen::WeaponCategoryReference value; // Offset: 76
};

struct impact.MajorDirectionConfig {
    keen::impact::MajorDirection value; // Offset: 76
};

struct impact.HitReactionTypeConfig {
    keen::impact::HitReactionType value; // Offset: 76
};

struct impact.PushBackForceConfig {
    keen::impact::PushBackForce value; // Offset: 76
};

enum class impact.EventStream {
    OnCollision = 0,
    OnHit = 1,
    OnParry = 2,
    OnFootDown = 3,
};

typedef keen::Bitmask8<keen::impact::EventStream> impact.EventStreamMask;

struct ImpactUiValue {
    keen::LocaTagId locaId; // Offset: 0
    keen::bool isSigned; // Offset: 4
    keen::impact::ImpcatValueNumberFormat valueFormat; // Offset: 5
    keen::sint32 value; // Offset: 8
};

typedef keen::ObjectReference<keen::impact_nodes::ImpactNode> impact_nodes.NodeReference;

struct impact_nodes.ResetPoint {
};

struct impact_nodes.TerraformingTypeValueNode {
    keen::TerraformingType value; // Offset: 60
};

struct impact_nodes.ExecutionLink {
    keen::impact_nodes::NodeReference startNode; // Offset: 0
    keen::BlobString startElementName; // Offset: 16
    keen::impact_nodes::NodeReference endNode; // Offset: 24
};

struct impact_nodes.DataLink {
    keen::impact_nodes::NodeReference ownerNodeId; // Offset: 0
    keen::BlobString ownerMemberName; // Offset: 16
    keen::impact_nodes::NodeReference accessorNodeId; // Offset: 24
    keen::BlobString accessorMemberName; // Offset: 40
};

struct impact_nodes.FloatValueNode {
    keen::float32 value; // Offset: 60
};

struct impact_nodes.Uint32ValueNode {
    keen::uint32 value; // Offset: 60
};

struct impact_nodes.Sint32ValueNode {
    keen::sint32 value; // Offset: 60
};

struct impact_nodes.BoolValueNode {
    keen::bool value; // Offset: 60
};

struct impact_nodes.Float2ValueNode {
    keen::float2 value; // Offset: 60
};

struct impact_nodes.Float3ValueNode {
    keen::float3 value; // Offset: 60
};

struct impact_nodes.Float4ValueNode {
    keen::float4 value; // Offset: 60
};

struct impact_nodes.TemplateValueNode {
    keen::ecs::TemplateReference value; // Offset: 60
};

struct impact_nodes.EntityTagValueNode {
    keen::ecs::EntityTagReference value; // Offset: 60
};

struct impact_nodes.MaterialValueNode {
    keen::CollisionFeedbackMaterialReference value; // Offset: 60
};

struct impact_nodes.TimeValueNode {
    keen::Time value; // Offset: 64
};

struct impact_nodes.FactionValueNode {
    keen::FactionType value; // Offset: 60
};

struct impact_nodes.AttributeReferenceValueNode {
    keen::AttributeReference value; // Offset: 60
};

struct impact_nodes.DamageSetupValueNode {
    keen::impact::DamageSetup value; // Offset: 60
};

struct impact_nodes.DamageTerraformingSetupValueNode {
    keen::impact::DamageTerraformingSetup value; // Offset: 60
};

struct impact_nodes.AttackCategoryMaskValueNode {
    keen::impact::AttackCategoryMask value; // Offset: 60
};

struct impact_nodes.WeaponCategoryValueNode {
    keen::WeaponCategoryReference value; // Offset: 60
};

struct impact_nodes.MajorDirectionValueNode {
    keen::impact::MajorDirection value; // Offset: 60
};

struct impact_nodes.HitReactionTypeValueNode {
    keen::impact::HitReactionType value; // Offset: 60
};

struct impact_nodes.PushBackForceValueNode {
    keen::impact::PushBackForce value; // Offset: 60
};

struct impact_nodes.VisceralAttackTypeValueNode {
    keen::VisceralAttackType value; // Offset: 60
};

struct impact_nodes.HaltNode {
};

struct impact_nodes.DestroySelfNode {
};

struct impact_nodes.ResetNode {
};

struct impact_nodes.RVM {
};

struct impact_nodes.GetParent {
    keen::ecs::EntityId entityId; // Offset: 8
};

struct impact_nodes.GetRoot {
    keen::ecs::EntityId entityId; // Offset: 8
};

struct impact_nodes.GetEntityParent {
    keen::ecs::EntityId entityId; // Offset: 8
};

struct impact_nodes.GetHitTarget {
    keen::ecs::EntityId entityId; // Offset: 8
    keen::ecs::EntityId hitEntityId; // Offset: 12
};

struct impact_nodes.GetLockedTarget {
    keen::ecs::TargetType type; // Offset: 8
    keen::ecs::EntityId entityId; // Offset: 12
    keen::ecs::EntityId targetId; // Offset: 16
};

struct impact_nodes.GetSelf {
    keen::ecs::EntityId entityId; // Offset: 8
};

struct impact_nodes.GetTransform {
    keen::ecs::EntityId entityId; // Offset: 8
    keen::WorldTransform transform; // Offset: 16
    keen::float3 position; // Offset: 72
};

struct impact_nodes.GetSlotTransform {
    keen::AttachmentSlot slot; // Offset: 8
    keen::ecs::EntityId entityId; // Offset: 12
    keen::WorldTransform transform; // Offset: 16
    keen::float3 position; // Offset: 72
};

struct impact_nodes.ConsumeItem {
    keen::ecs::EntityId entityId; // Offset: 8
};

struct impact_nodes.ApplyOffset {
    keen::WorldTransform transform; // Offset: 8
    keen::float3 localOffset; // Offset: 64
    keen::float3 worldOffset; // Offset: 76
    keen::float4 orientationOffset; // Offset: 88
    keen::WorldTransform result; // Offset: 104
};

struct impact_nodes.StartQuery {
    keen::WorldTransform transform; // Offset: 8
    keen::float32 range; // Offset: 64
    keen::float3 offset; // Offset: 68
    keen::ecs::QueryId queryId; // Offset: 80
    keen::ecs::ColliderFlags colliderFlag; // Offset: 84
    keen::bool sortByDistance; // Offset: 86
};

struct impact_nodes.StopQuery {
    keen::ecs::QueryId queryId; // Offset: 8
};

struct impact_nodes.FetchAttribute {
    keen::AttributeReference attributeRef; // Offset: 8
    keen::ecs::EntityId entityId; // Offset: 24
    keen::impact::TypedValue32 value; // Offset: 28
};

struct impact_nodes.SetAttribute {
    keen::AttributeReference attributeRef; // Offset: 8
    keen::ecs::EntityId entityId; // Offset: 24
    keen::impact::TypedValue32 value; // Offset: 28
};

enum class impact_nodes.ValuesMathOperator {
    Add = 0,
    Sub = 1,
    Mul = 2,
    Div = 3,
};

struct impact_nodes.ApplyChange {
    keen::AttributeReference attributeRef; // Offset: 8
    keen::ecs::EntityId entityId; // Offset: 24
    keen::AttributeReference attributeRefInput; // Offset: 28
    keen::impact_nodes::ValuesMathOperator operation; // Offset: 44
    keen::impact::TypedValue32 valueStorage; // Offset: 45
    keen::bool valueStorageSign; // Offset: 46
    keen::impact::TypedValue32 value; // Offset: 47
};

struct impact_nodes.ChangeAttribute {
    keen::AttributeReference attributeRef; // Offset: 8
    keen::ecs::EntityId entityId; // Offset: 24
    keen::AttributeReference attributeRefInput; // Offset: 28
    keen::impact_nodes::ValuesMathOperator operation; // Offset: 44
    keen::impact::TypedValue32 valueStorage; // Offset: 45
    keen::impact::TypedValue32 value; // Offset: 46
};

struct impact_nodes.AddValues {
    keen::impact_nodes::ValuesMathOperator op; // Offset: 8
    keen::impact::TypedValue32 valueA; // Offset: 9
    keen::impact::TypedValue32 valueB; // Offset: 10
    keen::impact::TypedValue32 result; // Offset: 11
};

struct impact_nodes.SubValues {
    keen::impact_nodes::ValuesMathOperator op; // Offset: 8
    keen::impact::TypedValue32 valueA; // Offset: 9
    keen::impact::TypedValue32 valueB; // Offset: 10
    keen::impact::TypedValue32 result; // Offset: 11
};

struct impact_nodes.MulValues {
    keen::impact_nodes::ValuesMathOperator op; // Offset: 8
    keen::impact::TypedValue32 valueA; // Offset: 9
    keen::impact::TypedValue32 valueB; // Offset: 10
    keen::impact::TypedValue32 result; // Offset: 11
};

struct impact_nodes.DivValues {
    keen::impact_nodes::ValuesMathOperator op; // Offset: 8
    keen::impact::TypedValue32 valueA; // Offset: 9
    keen::impact::TypedValue32 valueB; // Offset: 10
    keen::impact::TypedValue32 result; // Offset: 11
};

struct impact_nodes.Normalize {
    keen::float3 input; // Offset: 8
    keen::float3 result; // Offset: 20
};

struct impact_nodes.SetLength {
    keen::float3 input; // Offset: 8
    keen::float32 length; // Offset: 20
    keen::float3 result; // Offset: 24
};

struct impact_nodes.GetLength {
    keen::float3 input; // Offset: 8
    keen::float32 result; // Offset: 20
};

struct impact_nodes.SpawnEntity {
    keen::bool breakImpactHierarchy; // Offset: 8
    keen::ecs::TemplateReference templateInput; // Offset: 12
    keen::WorldTransform transform; // Offset: 32
    keen::float3 position; // Offset: 88
    keen::float3 velocity; // Offset: 100
    keen::ecs::EntityId targetEntityId; // Offset: 112
    keen::ecs::EntityId parentEntityId; // Offset: 116
    keen::uint32 levelOverride; // Offset: 120
    keen::FactionType factionOverride; // Offset: 124
    keen::ecs::EntityId entityId; // Offset: 128
};

struct impact_nodes.CreateDamageSetup {
    keen::sint32 physicalCutDamage; // Offset: 8
    keen::sint32 physicalPierceDamage; // Offset: 12
    keen::sint32 physicalBluntDamage; // Offset: 16
    keen::sint32 magicalFireDamage; // Offset: 20
    keen::sint32 magicalIceDamage; // Offset: 24
    keen::sint32 magicalFogDamage; // Offset: 28
    keen::sint32 magicalFogLightning; // Offset: 32
    keen::sint32 healing; // Offset: 36
    keen::sint32 poisonDamage; // Offset: 40
    keen::sint32 woodDamage; // Offset: 44
    keen::sint32 stoneDamage; // Offset: 48
    keen::sint32 metalDamage; // Offset: 52
    keen::sint32 explosionDamage; // Offset: 56
    keen::impact::DamageSetup damageSetup; // Offset: 60
};

struct impact_nodes.ApplyDamage {
    keen::ecs::EntityId sourceId; // Offset: 12
    keen::ecs::EntityId targetId; // Offset: 16
    keen::float3 hitPosition; // Offset: 20
    keen::float3 hitNormal; // Offset: 32
    keen::impact::MajorDirection hitDirection; // Offset: 44
    keen::float32 attackMod; // Offset: 48
    keen::float32 attackStaminaMod; // Offset: 52
    keen::float32 noiseRange; // Offset: 56
    keen::sint32 manaCost; // Offset: 60
    keen::AttributeRootReference damageScaleAttribute; // Offset: 64
    keen::impact::PushBackForce pushBack; // Offset: 80
    keen::impact::HitReactionType hitReaction; // Offset: 82
    keen::impact::DamageSetup damageSetup; // Offset: 84
    keen::impact::AttackCategoryMask attackCategory; // Offset: 136
    keen::WeaponCategoryReference weaponCategory; // Offset: 140
    keen::CollisionFeedbackMaterialReference materialId; // Offset: 156
    keen::bool canBeBlocked; // Offset: 172
    keen::bool canCrit; // Offset: 173
    keen::VisceralAttackType visceralAttackType; // Offset: 174
    keen::bool ignoreConsecutiveHits; // Offset: 175
    keen::bool pusbackDirectionOverride; // Offset: 176
    keen::bool wasBlocked; // Offset: 177
};

struct impact_nodes.GetConsecutiveHitCount {
    keen::uint32 count; // Offset: 8
};

struct impact_nodes.IsConsecutiveHit {
    keen::ecs::EntityId entityId; // Offset: 12
};

struct impact_nodes.IsSkillUnlocked {
    keen::ecs::EntityId entityId; // Offset: 12
    keen::skilltree_nodes::NodeReference skill; // Offset: 16
};

struct impact_nodes.ClearConsecutiveHits {
    keen::Time clearInterval; // Offset: 8
};

struct impact_nodes.GetCursorTransform {
    keen::ecs::EntityId playerId; // Offset: 8
    keen::WorldTransform transform; // Offset: 16
};

struct impact_nodes.Terraforming {
    keen::ecs::EntityId playerId; // Offset: 8
    keen::WorldTransform transform; // Offset: 16
    keen::TerraformingType terraformingType; // Offset: 72
    keen::impact::DamageTerraformingSetup damageTerraformingSetup; // Offset: 76
    keen::CollisionFeedbackMaterialReference materialId; // Offset: 96
    keen::float32 rangeDefault; // Offset: 112
    keen::float32 rangeAdd; // Offset: 116
    keen::float32 rangeFlatten; // Offset: 120
};

struct impact_nodes.GetQueryResultCount {
    keen::ecs::QueryId queryId; // Offset: 8
    keen::uint32 count; // Offset: 12
};

struct impact_nodes.FetchQueryResult {
    keen::ecs::QueryId queryId; // Offset: 8
    keen::uint32 index; // Offset: 12
    keen::ecs::EntityId otherEntity; // Offset: 16
    keen::float3 hitPosition; // Offset: 20
    keen::float3 hitNormal; // Offset: 32
    keen::bool hit; // Offset: 44
    keen::bool queryNew; // Offset: 45
    keen::bool updateNew; // Offset: 46
};

struct impact_nodes.SetTransform {
    keen::WorldTransform transform; // Offset: 8
};

struct impact_nodes.GetOnCollisionEventCount {
    keen::uint32 count; // Offset: 8
};

struct impact_nodes.Wait {
    keen::Time durationInput; // Offset: 8
};

struct impact_nodes.FetchOnCollisionEvent {
    keen::uint32 index; // Offset: 12
    keen::bool ignoreSameRoot; // Offset: 16
    keen::bool ignoreWeakspots; // Offset: 17
    keen::ecs::EntityId otherEntity; // Offset: 20
    keen::ecs::EntityId otherEntityRoot; // Offset: 24
    keen::bool combatCollider; // Offset: 28
    keen::float3 position; // Offset: 32
    keen::float3 normal; // Offset: 44
    keen::bool isWeakSpot; // Offset: 56
};

struct impact_nodes.TriggerNoise {
    keen::float3 position; // Offset: 8
    keen::float32 range; // Offset: 20
};

struct impact_nodes.PacifyFaction {
    keen::FactionType faction; // Offset: 8
};

struct impact_nodes.CallFactionForHelp {
    keen::FactionType faction; // Offset: 8
};

struct impact_nodes.RandomBranchNode {
    keen::float32 chance; // Offset: 12
};

struct impact_nodes.RandomValueNode {
    keen::float32 value; // Offset: 8
};

struct impact_nodes.ForEach {
    keen::impact_nodes::ImpactNodeExecutionBranch doBranch; // Offset: 8
    keen::uint32 index; // Offset: 12
    keen::uint32 count; // Offset: 16
};

struct impact_nodes.WhileLoopBranchNode {
    keen::impact_nodes::ImpactNodeExecutionBranch doBranch; // Offset: 8
    keen::uint32 index; // Offset: 12
};

struct impact_nodes.OnEvent {
    keen::impact::EventStream eventType; // Offset: 8
    keen::impact::EventStream eventStream; // Offset: 9
};

struct impact_nodes.FilterRandom {
    keen::impact::EventStream eventStream; // Offset: 8
    keen::uint32 count; // Offset: 12
};

struct impact_nodes.FilterFriends {
    keen::impact::EventStream eventStream; // Offset: 8
    keen::bool invert; // Offset: 9
};

struct impact_nodes.FilterSameRoot {
    keen::impact::EventStream eventStream; // Offset: 8
    keen::bool invert; // Offset: 9
};

struct impact_nodes.FilterRootEntity {
    keen::impact::EventStream eventStream; // Offset: 8
    keen::bool invert; // Offset: 9
};

struct impact_nodes.FilterFaction {
    keen::impact::EventStream eventStream; // Offset: 8
    keen::FactionMask faction; // Offset: 10
};

struct impact_nodes.FilterConsecutiveHits {
    keen::impact::EventStream eventStream; // Offset: 8
};

struct impact_nodes.FilterEntityTag {
    keen::impact::EventStream eventStream; // Offset: 8
    keen::ecs::EntityTagReference entityTag; // Offset: 12
    keen::bool invert; // Offset: 28
};

struct impact_nodes.ForEachCollisionInStream {
    keen::impact::EventStream eventStream; // Offset: 16
    keen::ecs::EntityId otherEntity; // Offset: 20
    keen::ecs::EntityId otherRootEntity; // Offset: 24
    keen::float3 position; // Offset: 28
    keen::float3 normal; // Offset: 40
    keen::WorldTransform transform; // Offset: 56
    keen::uint32 voxelMaterial; // Offset: 112
    keen::bool isCombatTarget; // Offset: 116
    keen::bool isWeakSpot; // Offset: 117
};

struct impact_nodes.ForEachFootDownInStream {
    keen::impact::EventStream eventStream; // Offset: 16
    keen::float3 position; // Offset: 20
    keen::float3 normal; // Offset: 32
};

struct impact_nodes.IsStreamEmpty {
    keen::impact::EventStream eventStream; // Offset: 12
};

struct impact_nodes.GetStreamEventCount {
    keen::impact::EventStream eventStream; // Offset: 8
    keen::uint32 count; // Offset: 12
};

struct impact_nodes.ForEachCollision {
    keen::ecs::EntityId otherEntity; // Offset: 16
    keen::float3 position; // Offset: 20
    keen::float3 normal; // Offset: 32
};

struct impact_nodes.ForEachHitEvent {
    keen::bool wasParried; // Offset: 16
    keen::bool wasBlocked; // Offset: 17
    keen::bool wasBlockBroken; // Offset: 18
    keen::bool wasBackstab; // Offset: 19
    keen::bool wasCrit; // Offset: 20
    keen::bool wasImmune; // Offset: 21
    keen::bool wasKillingBlow; // Offset: 22
    keen::bool wasVisceral; // Offset: 23
    keen::bool wasWeakspot; // Offset: 24
    keen::bool wasSkillShot; // Offset: 25
    keen::FactionType targetFaction; // Offset: 26
    keen::impact::AttackCategoryMask attackCategory; // Offset: 27
    keen::WeaponCategoryReference weaponCategory; // Offset: 28
    keen::ecs::EntityId rootEntity; // Offset: 44
    keen::ecs::EntityId sourceEntity; // Offset: 48
    keen::ecs::EntityId targetRootEntity; // Offset: 52
    keen::ecs::EntityId targetEntity; // Offset: 56
    keen::ecs::EntityId weaponEntity; // Offset: 60
    keen::float3 position; // Offset: 64
    keen::float3 normal; // Offset: 76
    keen::sint32 healthChange; // Offset: 88
    keen::sint32 staminaChange; // Offset: 92
};

struct impact_nodes.SendBaseHitEvent {
    keen::float3 position; // Offset: 8
    keen::float3 normal; // Offset: 20
    keen::CollisionFeedbackMaterialReference impactMaterial; // Offset: 32
    keen::uint32 voxelMaterial; // Offset: 48
    keen::ecs::EntityId targetId; // Offset: 52
};

struct impact_nodes.ForEachParryEvent {
    keen::ecs::EntityId blockerId; // Offset: 16
    keen::ecs::EntityId attackerId; // Offset: 20
    keen::sint32 staminaDrain; // Offset: 24
};

struct impact_nodes.ForEachItemInBackpack {
    keen::ecs::EntityId ownerId; // Offset: 16
    keen::ecs::EntityId pideId; // Offset: 20
};

struct impact_nodes.BoolIfBranchNode {
    keen::bool value; // Offset: 12
};

enum class impact_nodes.ValuesCompareOperator {
    Equal = 0,
    Less = 1,
};

struct impact_nodes.IsEqual {
    keen::impact_nodes::ValuesCompareOperator op; // Offset: 12
    keen::impact::TypedValue32 valueA; // Offset: 13
    keen::impact::TypedValue32 valueB; // Offset: 14
};

struct impact_nodes.IsLess {
    keen::impact_nodes::ValuesCompareOperator op; // Offset: 12
    keen::impact::TypedValue32 valueA; // Offset: 13
    keen::impact::TypedValue32 valueB; // Offset: 14
};

struct impact_nodes.IsInState {
    keen::ecs::EntityId entityId; // Offset: 12
    keen::actor::StateFlag state; // Offset: 16
};

struct impact_nodes.HasFaction {
    keen::ecs::EntityId entityId; // Offset: 12
    keen::FactionMask faction; // Offset: 16
};

struct impact_nodes.HasEntityTag {
    keen::ecs::EntityId entityId; // Offset: 12
    keen::ecs::EntityTagReference entityTag; // Offset: 16
};

struct impact_nodes.IsValidEntity {
    keen::ecs::EntityId entityId; // Offset: 12
};

struct impact_nodes.IsInsideBox {
    keen::WorldTransform transform; // Offset: 16
    keen::float3 position; // Offset: 72
    keen::float3 box; // Offset: 84
    keen::float3 boxOffset; // Offset: 96
};

struct impact_nodes.HasAttackCategory {
    keen::impact::AttackCategoryMask categoryMask; // Offset: 12
    keen::impact::AttackCategoryMask contains; // Offset: 13
    keen::bool matchAll; // Offset: 14
};

struct impact_nodes.HasWeaponCategory {
    keen::WeaponCategoryReference weaponCategory; // Offset: 12
    keen::WeaponCategoryReference requiredCategory; // Offset: 28
};

struct impact_nodes.HasWeaponCategoryType {
    keen::WeaponCategoryReference weaponCategory; // Offset: 12
    keen::WeaponCategoryTypeMask allowedCategories; // Offset: 28
};

struct impact_nodes.GetWeaponVisualEntityId {
    keen::ecs::EntityId entityId; // Offset: 8
};

struct impact_nodes.IsSameEntity {
    keen::ecs::EntityId entityAId; // Offset: 12
    keen::ecs::EntityId entityBId; // Offset: 16
};

struct impact_nodes.IsEnemy {
    keen::ecs::EntityId entityAId; // Offset: 12
    keen::ecs::EntityId entityBId; // Offset: 16
};

struct impact_nodes.IsFriend {
    keen::ecs::EntityId entityAId; // Offset: 12
    keen::ecs::EntityId entityBId; // Offset: 16
};

struct impact_nodes.GetEnemyCountInRange {
    keen::ecs::EntityId entityId; // Offset: 8
    keen::uint32 count; // Offset: 12
};

struct impact_nodes.SetEnemyVariable {
    keen::ecs::EntityId entityId; // Offset: 8
    keen::enemy01::EnemyVariableReference variable; // Offset: 12
    keen::bool state; // Offset: 28
};

struct ImpactDefinition {
};

struct ImpactVariable {
    keen::HashKey32 name; // Offset: 0
    keen::HashKey32 configId; // Offset: 4
    keen::HashKey32 type; // Offset: 8
    keen::uint16 size; // Offset: 12
    keen::uint16 offsetInBytes; // Offset: 14
    keen::BlobString dbgName; // Offset: 16
};

struct ImpactProgram {
    keen::impact::ProgramId id; // Offset: 0
    keen::Guid programGuid; // Offset: 4
    keen::uint16 stackSize; // Offset: 20
    keen::impact::EventStreamMask usedStreams; // Offset: 22
    keen::BlobArray<keen::ImpactCommand> code; // Offset: 24
    keen::BlobArray<keen::ImpactCommand> codeShutdown; // Offset: 32
    keen::BlobArray<keen::ImpactVariable> dataLayout; // Offset: 40
    keen::BlobArray<keen::uint8> data; // Offset: 48
};

struct ImpactConfigInfoEntry {
    keen::string nodeName; // Offset: 0
    keen::HashKey32 name; // Offset: 8
    keen::HashKey32 configId; // Offset: 12
    keen::HashKey32 type; // Offset: 16
};

struct ExecutionInfo {
    keen::Guid nodeId; // Offset: 0
    keen::BlobArray<keen::ExecutionInfo> branch; // Offset: 16
};

struct ImpactFunctionCallDebugInfo {
    keen::string nodeName; // Offset: 0
    keen::Guid nodeId; // Offset: 8
    keen::uint16 pc; // Offset: 24
};

struct ImpactInfo {
    keen::Guid programGuid; // Offset: 0
    keen::uint32 cmdCount; // Offset: 16
    keen::BlobArray<keen::ImpactConfigInfoEntry> configs; // Offset: 20
    keen::BlobArray<keen::ExecutionInfo> programFlow; // Offset: 28
    keen::BlobArray<keen::ImpactVariable> dataLayout; // Offset: 36
    keen::BlobArray<keen::ImpactFunctionCallDebugInfo> debugInfo; // Offset: 44
    keen::BlobArray<keen::ImpactFunctionCallDebugInfo> shutdownlDebugInfo; // Offset: 52
};

struct ImpactConfigData {
    keen::impact::Configurations configValues; // Offset: 0
};

struct ImpactSubDirectory {
};

struct ImpactDirectory {
};

struct ImpactRegistryResource {
    keen::BlobArray<keen::ImpactProgramReference> programs; // Offset: 0
};

enum class CelestialBodyDirection {
    Clockwise = 0,
    Counterclockwise = 1,
};

struct CelestialBodySetup {
    keen::float32 riseAngle; // Offset: 0
    keen::float32 setAngle; // Offset: 4
    keen::float32 zenithAngle; // Offset: 8
    keen::CelestialBodyDirection direction; // Offset: 12
};

struct IngameTimeConfig {
    keen::Time dayStart; // Offset: 0
    keen::Time dayEnd; // Offset: 8
    keen::CelestialBodySetup sunSetup; // Offset: 16
    keen::CelestialBodySetup moonSetup; // Offset: 32
};

struct IngameTimeSpan {
    keen::Time start; // Offset: 0
    keen::Time end; // Offset: 8
};

enum class input_mapping.PresetId {
    Custom = 0,
    PresetA = 1,
    PresetB = 2,
    Default = 1,
    MaxKeyboardMousePreset = 1,
    MaxGamepadPreset = 2,
};

enum class input_mapping.ControlOperationType {
    Invalid = 0,
    Key = 1,
    MouseButton = 2,
    MouseWheel = 3,
    MouseMove = 4,
    GamepadButton = 5,
    Axis = 6,
    AnalogStick = 7,
};

enum class input_mapping.InputModality {
    Press = 0,
    Tap = 1,
    Hold = 2,
    Release = 3,
};

enum class input_mapping.AxisDirection {
    Invalid = 0,
    PositiveX = 1,
    NegativeX = 2,
    PositiveY = 3,
    NegativeY = 4,
};

enum class input_mapping.runtime.GameplayAction {
    MovementLeft = 0,
    MovementRight = 1,
    MovementUp = 2,
    MovementDown = 3,
    CameraLeft = 4,
    CameraRight = 5,
    CameraUp = 6,
    CameraDown = 7,
    CameraZoomIn = 8,
    CameraZoomOut = 9,
    MainhandAction = 10,
    MainhandAction_Release = 11,
    ContextualAction = 12,
    ContextualAction_Tap = 13,
    ContextualAction_Hold = 14,
    CancelAction = 15,
    AmmunitionSelectPrevious = 16,
    AmmunitionSelectNext = 17,
    ShowTutorial = 18,
    BlueprintDistanceIncrease = 19,
    BlueprintDistanceDecrease = 20,
    BlueprintMaterialSelectPrevious = 21,
    BlueprintMaterialSelectNext = 22,
    BlueprintPageSelectPrevious = 23,
    BlueprintPageSelectNext = 24,
    BlueprintShapeSelectPrevious = 25,
    BlueprintShapeSelectNext = 26,
    BlueprintShapeSelect0 = 27,
    BlueprintShapeSelect1 = 28,
    BlueprintShapeSelect2 = 29,
    BlueprintShapeSelect3 = 30,
    BlueprintShapeSelect4 = 31,
    BlueprintShapeSelect5 = 32,
    BlueprintShapeSelect6 = 33,
    BlueprintShapeSelect7 = 34,
    BlueprintShapeSelect8 = 35,
    BlueprintShapeSelect9 = 36,
    QuickUse0 = 37,
    QuickUse1 = 38,
    QuickUse2 = 39,
    QuickUse3 = 40,
    QuickUse4 = 41,
    QuickUse5 = 42,
    QuickUse6 = 43,
    QuickUse7 = 44,
    QuickUse0_Release = 45,
    QuickUse1_Release = 46,
    QuickUse2_Release = 47,
    QuickUse3_Release = 48,
    QuickUse4_Release = 49,
    QuickUse5_Release = 50,
    QuickUse6_Release = 51,
    QuickUse7_Release = 52,
    Block = 53,
    Evade = 54,
    Jump = 55,
    Jump_Hold = 56,
    Glider = 57,
    Respawn = 58,
    ShowActionbarWheel = 59,
    ActionbarSwapPage = 60,
    ActionbarPreviousSlot = 61,
    ActionbarNextSlot = 62,
    LootSelectPrevious = 63,
    LootSelectNext = 64,
    SongSelectOpen = 65,
    SongSelectPrevious = 66,
    SongSelectNext = 67,
    BuildingRotateLittleClockwise = 68,
    BuildingRotateLittleCounterClockwise = 69,
    BuildingRotateFarClockwise = 70,
    BuildingRotateFarCounterClockwise = 71,
    BuildingUndo = 72,
    BuildingBlueprintSnapping = 73,
    BuildingVoxelGridSnapping = 74,
    LockCombatTarget = 75,
    CombatTargetSelectPrevious = 76,
    CombatTargetSelectNext = 77,
    RangedCombatArm = 78,
    RangedCombatShoot = 79,
    Sprint = 80,
    Sneak = 81,
    Sit = 82,
    UiSystemMenu = 83,
    UiInGameMenu = 84,
    UiBackpack = 85,
    UiBuildingMenu = 86,
    UiCharacter = 87,
    UiCrafting = 88,
    UiJournal = 89,
    UiJumpToNotification = 90,
    UiMap = 91,
    UiSkills = 92,
    UiUserFeedback = 93,
    Count = 94,
};

enum class input_mapping.config.GameplayAction {
    MovementLeft = 0,
    MovementRight = 1,
    MovementUp = 2,
    MovementDown = 3,
    CameraLeft = 4,
    CameraRight = 5,
    CameraUp = 6,
    CameraDown = 7,
    CameraZoomIn = 8,
    CameraZoomOut = 9,
    MainhandAction = 10,
    ContextualAction = 11,
    CancelAction = 12,
    AmmunitionSelectPrevious = 13,
    AmmunitionSelectNext = 14,
    ShowTutorial = 15,
    BlueprintDistanceIncrease = 16,
    BlueprintDistanceDecrease = 17,
    BlueprintMaterialSelectPrevious = 18,
    BlueprintMaterialSelectNext = 19,
    BlueprintPageSelectPrevious = 20,
    BlueprintPageSelectNext = 21,
    BlueprintShapeSelectPrevious = 22,
    BlueprintShapeSelectNext = 23,
    BlueprintShapeSelect0 = 24,
    BlueprintShapeSelect1 = 25,
    BlueprintShapeSelect2 = 26,
    BlueprintShapeSelect3 = 27,
    BlueprintShapeSelect4 = 28,
    BlueprintShapeSelect5 = 29,
    BlueprintShapeSelect6 = 30,
    BlueprintShapeSelect7 = 31,
    BlueprintShapeSelect8 = 32,
    BlueprintShapeSelect9 = 33,
    QuickUse0 = 34,
    QuickUse1 = 35,
    QuickUse2 = 36,
    QuickUse3 = 37,
    QuickUse4 = 38,
    QuickUse5 = 39,
    QuickUse6 = 40,
    QuickUse7 = 41,
    Block = 42,
    Evade = 43,
    Jump = 44,
    Glider = 45,
    Respawn = 46,
    ShowActionbarWheel = 47,
    ActionbarSwapPage = 48,
    ActionbarPreviousSlot = 49,
    ActionbarNextSlot = 50,
    SongSelectOpen = 51,
    SongSelectPrevious = 52,
    SongSelectNext = 53,
    BuildingRotateLittleClockwise = 54,
    BuildingRotateLittleCounterClockwise = 55,
    BuildingRotateFarClockwise = 56,
    BuildingRotateFarCounterClockwise = 57,
    BuildingUndo = 58,
    BuildingSnapping = 59,
    LockCombatTarget = 60,
    CombatTargetSelectPrevious = 61,
    CombatTargetSelectNext = 62,
    RangedCombatArm = 63,
    RangedCombatShoot = 64,
    Sprint = 65,
    Sneak = 66,
    Sit = 67,
    UiSystemMenu = 68,
    UiInGameMenu = 69,
    UiBackpack = 70,
    UiBuildingMenu = 71,
    UiCharacter = 72,
    UiCrafting = 73,
    UiJournal = 74,
    UiJumpToNotification = 75,
    UiMap = 76,
    UiSkills = 77,
    UiUserFeedback = 78,
    Count = 79,
};

struct input_mapping.serialize.ControlOperation {
    keen::input_mapping::ControlOperationType type; // Offset: 0
    keen::string id; // Offset: 4
    keen::input_mapping::AxisDirection axis; // Offset: 12
};

struct input_mapping.serialize.ControlOperationCombo {
    keen::input_mapping::serialize::ControlOperation operation; // Offset: 0
    keen::BlobArray<keen::input_mapping::serialize::ControlOperation> modifiers; // Offset: 16
};

struct input_mapping.serialize.KeyboardMouseAction {
    keen::input_mapping::serialize::ControlOperationCombo primary; // Offset: 0
    keen::input_mapping::serialize::ControlOperationCombo secondary; // Offset: 24
    keen::input_mapping::InputModality modality; // Offset: 48
    keen::bool toggle; // Offset: 49
};

struct input_mapping.serialize.GamepadAction {
    keen::input_mapping::serialize::ControlOperationCombo primary; // Offset: 0
    keen::input_mapping::serialize::ControlOperationCombo secondary; // Offset: 24
    keen::input_mapping::InputModality modality; // Offset: 48
    keen::bool toggle; // Offset: 49
};

struct input_mapping.serialize.ActionInputBinding {
    keen::BlobString gameplay; // Offset: 0
    keen::input_mapping::serialize::KeyboardMouseAction keyboardMouse; // Offset: 8
    keen::input_mapping::serialize::GamepadAction gamepad; // Offset: 60
};

struct input_mapping.serialize.InputBindings {
    keen::input_mapping::PresetId customKeyboardMouseBasePresetId; // Offset: 0
    keen::input_mapping::PresetId customGamepadBasePresetId; // Offset: 1
    keen::BlobArray<keen::input_mapping::serialize::ActionInputBinding> bindings; // Offset: 4
};

enum class input_mapping.runtime.ContextualVector2Context {
    PositionDelta = 0,
    Velocity = 1,
};

struct input_mapping.runtime.ContextualVector2 {
    keen::input_mapping::runtime::ContextualVector2Context context; // Offset: 0
    keen::Vector2 value; // Offset: 4
};

struct ecs.InteractionQuery {
    keen::ecs::RangeQueryId queryId; // Offset: 0
    keen::float32 queryRadius; // Offset: 4
    keen::float3 queryOffset; // Offset: 8
};

struct ecs.ClientInteractionQuery {
    keen::uint32 nearestOfferedInteractionOfferId; // Offset: 0
    keen::ecs::SpecialInteraction specialInteraction; // Offset: 4
};

struct ecs.InteractionAcceptData {
    keen::ecs::EntityId guestId; // Offset: 0
    keen::InventorySlotId usedItem; // Offset: 4
    keen::uint32 offerId; // Offset: 12
};

struct ecs.InteractionOffer {
    keen::actor::ActorSequenceReference defaultAction; // Offset: 0
    keen::LocaTagReference verbLoca; // Offset: 16
    keen::LocaTagReference lastVerbLoca; // Offset: 32
    keen::LocaTagReference overrideVerbLoca; // Offset: 48
    keen::actor::SequenceResourceId overrideSequence; // Offset: 64
    keen::ecs::InteractionAcceptData lastAttemptData; // Offset: 68
    keen::ecs::InteractionAcceptData lastAcceptData; // Offset: 84
    keen::Time lastAcceptTime; // Offset: 104
    keen::uint32 offerId; // Offset: 112
    keen::LocaTagId verbId; // Offset: 116
    keen::bool isColliderDirty; // Offset: 120
    keen::bool isOffered; // Offset: 121
    keen::bool reduceInteractionWeight; // Offset: 122
};

struct ecs.ClientInteractionOffer {
    keen::LocaTagId verbId; // Offset: 0
    keen::ecs::EntityId lastAcceptionId; // Offset: 4
    keen::bool isOffered; // Offset: 8
};

enum class ecs.InteractionLockFlag {
    Consume = 0,
    DestroyLock = 1,
};

typedef keen::Bitmask8<keen::ecs::InteractionLockFlag> ecs.InteractionLockMask;

struct ecs.InteractionLock {
    keen::ItemReference requiredItemRef; // Offset: 0
    keen::ItemId requiredItem; // Offset: 16
    keen::PlayerPermissionsMask requiredPermission; // Offset: 20
    keen::ecs::InteractionLockMask lockMask; // Offset: 21
    keen::actor::ActorSequenceReference successfulAttempt; // Offset: 24
    keen::actor::ActorSequenceReference failedAttempt; // Offset: 40
    keen::bool destroy; // Offset: 56
};

struct ecs.LootRefill {
    keen::ItemReference lootableItemRef; // Offset: 0
    keen::uint32 refillCount; // Offset: 16
    keen::uint32 maxCount; // Offset: 20
};

struct ecs.InteractionLootRefill {
    keen::Time waitTime; // Offset: 0
    keen::LocaTagReference verbLoca; // Offset: 8
    keen::actor::ActorSequenceReference defaultSequence; // Offset: 24
    keen::BlobArray<keen::ecs::LootRefill> items; // Offset: 40
};

struct ecs.DynamicInteractionLootRefill {
    keen::Time nextRefill; // Offset: 0
};

struct ecs.ClientInteractionLock {
    keen::Guid failedAttempt; // Offset: 0
    keen::Guid successfulAttempt; // Offset: 16
    keen::ItemId requiredItem; // Offset: 32
    keen::uint32 offerId; // Offset: 36
    keen::PlayerPermissionsMask requiredPermission; // Offset: 40
};

struct ecs.InteractionKnowledgeLock {
    keen::ecs::ToggleModifier modifier; // Offset: 0
    keen::bool useSpawnKnowledgeRequirement; // Offset: 1
    keen::GameKnowledgeRequirement unlockRequiement; // Offset: 4
    keen::KnowledgeId queryId; // Offset: 108
};

struct ecs.ClientInteractionToState {
};

struct ecs.InteractionPause {
    keen::Time timeout; // Offset: 0
};

struct ecs.RemoveInteractionOnEmptyInventory {
};

enum class ecs.DirectionalState {
    Idle = 0,
    Front = 1,
    Back = 2,
};

struct ecs.DirectionalInteractionSetup {
    keen::bool backToIdle; // Offset: 0
    keen::LocaTagReference verb; // Offset: 4
    keen::actor::ActorSequenceReference sequence; // Offset: 20
    keen::animationgraph::StateIdReference animationState; // Offset: 36
};

struct ecs.DirectionalInteraction {
    keen::ecs::DirectionalState state; // Offset: 0
    keen::ecs::DirectionalInteractionSetup idleState; // Offset: 4
    keen::ecs::DirectionalInteractionSetup frontInteraction; // Offset: 56
    keen::ecs::DirectionalInteractionSetup backInteraction; // Offset: 108
};

struct ecs.InteractionToggle {
    keen::LocaTagReference offToOnVerb; // Offset: 0
    keen::actor::ActorSequenceReference offToOnSequence; // Offset: 16
    keen::LocaTagReference onToOffVerb; // Offset: 32
    keen::actor::ActorSequenceReference onToOffSequence; // Offset: 48
};

struct ecs.CraftingInteraction {
    keen::CraftingPropMask craftingPropsInRange; // Offset: 0
    keen::uint32 nextRecipeComfortRequirement; // Offset: 8
    keen::ObjectReference<keen::WorkshopDefinition> workshop; // Offset: 12
    keen::WorkshopId workshopId; // Offset: 28
};

struct ecs.ClientCraftingInteraction {
    keen::CraftingPropMask craftingPropsInRange; // Offset: 0
    keen::uint32 nextRecipeComfortRequirement; // Offset: 8
    keen::WorkshopId workshopId; // Offset: 12
};

struct ecs.InteractionAttachment {
    keen::ecs::Offset guestOffset; // Offset: 0
    keen::Time lastAttachTime; // Offset: 40
};

struct ecs.InteractionAttachmentGuest {
    keen::ecs::EntityId lastHostEntityId; // Offset: 0
};

struct ItemData {
    keen::uint32 count; // Offset: 0
    keen::ecs::EntityId pide; // Offset: 4
};

struct ItemStack {
    keen::ItemId id; // Offset: 0
    keen::ItemData data; // Offset: 4
};

struct ecs.DefaultInventoryDirectory {
};

struct ecs.DefaultInventoryEntry {
    keen::ItemReference item; // Offset: 0
    keen::uint32 count; // Offset: 16
};

struct ecs.RandomDefaultInventoryEntry {
    keen::ItemReference item; // Offset: 0
    keen::uint32 countMin; // Offset: 16
    keen::uint32 countMax; // Offset: 20
    keen::float spawnProbability; // Offset: 24
};

struct ecs.WeightedDefaultInventoryEntry {
    keen::float weight; // Offset: 28
};

struct ecs.RandomDefaultInventoryEntrySelector {
};

struct ecs.DefaultInventorySetup {
};

struct ecs.ItemStackInfoResource {
    keen::ItemReference itemRef; // Offset: 0
    keen::ItemId item; // Offset: 16
    keen::uint32 countMin; // Offset: 20
    keen::uint32 countMax; // Offset: 24
    keen::float spawnProbability; // Offset: 28
};

struct ecs.ItemStackInfoResourceWeighted {
    keen::float weight; // Offset: 32
};

struct ecs.DefaultInventoryEntrySelectorResource {
    keen::BlobArray<keen::ecs::ItemStackInfoResourceWeighted> selectionCandidates; // Offset: 0
};

struct ecs.DefaultInventoryResource {
    keen::BlobArray<keen::ecs::ItemStackInfoResource> stacks; // Offset: 0
    keen::BlobArray<keen::ecs::DefaultInventoryEntrySelectorResource> stackSelectors; // Offset: 8
};

struct ecs.DefaultInventory {
    keen::ecs::DefaultInventoryReference defaultInventory; // Offset: 0
    keen::bool keepOnRandomLoot; // Offset: 16
    keen::bool applied; // Offset: 17
};

struct ecs.DefaultInventoryOverrides {
    keen::ecs::DefaultInventoryReference slot1; // Offset: 0
    keen::ecs::DefaultInventoryReference slot2; // Offset: 16
    keen::ecs::DefaultInventoryReference slot3; // Offset: 32
};

struct ecs.AffectedByIncreasedPickupSkill {
};

struct ecs.AdditionalMaterialLoot {
    keen::ItemId additionalItemId; // Offset: 0
};

struct ecs.InventoryLink {
    keen::ecs::EntityId entityId; // Offset: 0
    keen::InventoryCategory category; // Offset: 4
};

enum class ecs.InventoryFlags {
    IsPlayer = 0,
    IsNpc = 1,
    ShowContentPreview = 2,
};

typedef keen::Bitmask8<keen::ecs::InventoryFlags> ecs.InventorySetupMask;

struct ecs.InventorySetup {
    keen::StaticArray<keen::ecs::EntityId,16> linksEntities; // Offset: 0
    keen::StaticArray<keen::InventoryCategory,16> linksCategories; // Offset: 64
    keen::ecs::InventorySetupMask inventoryFlags; // Offset: 80
    keen::uint8 genericSlotCount; // Offset: 81
    keen::uint8 availableSlotCount; // Offset: 82
    keen::bool isInitialized; // Offset: 83
};

struct ecs.InventorySetupInit {
};

struct ecs.Inventory {
    keen::StaticArray<keen::ItemStack,8> slots; // Offset: 0
};

struct ecs.InventoryCraftingStock {
};

struct ecs.ResourceNodeDropInfo {
    keen::ecs::TemplateReference entity; // Offset: 0
    keen::ItemReference item; // Offset: 16
    keen::uint8 stackAmount; // Offset: 32
    keen::float32 weight; // Offset: 36
};

struct ecs.ResourceNodePickupDrops {
    keen::ecs::TemplateReference pickupItemReference; // Offset: 0
    keen::BlobArray<keen::ecs::ResourceNodeDropInfo> drops; // Offset: 16
    keen::uint8 numberOfDrops; // Offset: 24
    keen::float32 dropWhileAlivePercentage; // Offset: 28
    keen::bool dropInWorld; // Offset: 32
    keen::float32 yOffsetMin; // Offset: 36
    keen::float32 yOffsetMax; // Offset: 40
    keen::float32 dropRadiusMin; // Offset: 44
    keen::float32 dropRadiusMax; // Offset: 48
    keen::float32 velocityMin; // Offset: 52
    keen::float32 velocityMax; // Offset: 56
};

struct ecs.MiningNodeKnowledge {
    keen::bool useSpawnTriggerKnowledge; // Offset: 0
    keen::ObjectReference<keen::PlayerKnowledgeObject> knowledgeNode; // Offset: 4
    keen::bool unlockForGroup; // Offset: 20
};

struct ecs.PickupItem {
    keen::ItemId itemId; // Offset: 0
    keen::ItemReference item; // Offset: 4
    keen::uint32 level; // Offset: 20
    keen::ItemRarity rarity; // Offset: 24
    keen::uint16 pickupAmount; // Offset: 26
};

struct ecs.PickupItemModelSetup {
};

struct ecs.DestroyOnLoot {
    keen::Time despawnTime; // Offset: 0
    keen::NotifierReference vfxOnDestroy; // Offset: 8
    keen::ecs::Offset offset; // Offset: 24
    keen::bool isActive; // Offset: 64
    keen::bool shouldDestroy; // Offset: 65
    keen::SoundContainerReference sfx; // Offset: 68
    keen::VfxReference vfx; // Offset: 84
};

struct ecs.DestroyOnLootActivated {
};

struct ecs.AddDestructibleOnLoot {
    keen::uint32 health; // Offset: 0
};

enum class ItemCategory {
    Customization = 0,
    Equipment = 1,
    Weapons = 2,
    Tools = 3,
    Instrument = 4,
    BuildTools = 5,
    Consumables = 6,
    Ammunition = 7,
    Materials = 8,
    Blueprints = 9,
    Currency = 10,
    Collectibles = 11,
    AnimalFood = 12,
    PetFood = 13,
};

typedef keen::Bitmask16<keen::ItemCategory> ItemCategoryMask;

enum class CrosshairType {
    None = 0,
    Bow = 1,
    Wand = 2,
    Staff_Directional = 3,
    Staff_Area = 4,
    Building = 5,
    Terraforming = 6,
};

typedef keen::Bitmask8<keen::ItemRarity> ItemRarityMask;

enum class ItemFlag {
    HasKnowledgeUnlocks = 0,
    HasPIDE = 1,
    IsContainer = 2,
    IsBlueprint = 3,
    IsTerraformer = 4,
    IsNpc = 5,
    IsCookable = 6,
    IsAnimal = 7,
    IsAnimalBait = 8,
    CanTriggerCooking = 9,
    TwitchDrop = 10,
    CommerceItem = 11,
};

typedef keen::Bitmask16<keen::ItemFlag> ItemFlags;

struct ItemTag {
    keen::LocaTagReference label; // Offset: 0
};

typedef keen::ObjectReference<keen::ItemTag> ItemTagReference;

struct ItemTagWeight {
    keen::ItemTagReference tag; // Offset: 0
    keen::uint32 nominator; // Offset: 16
    keen::uint32 denominator; // Offset: 20
};

struct ItemTagInfo {
    keen::Guid tagGuid; // Offset: 0
    keen::LocaTagId labelId; // Offset: 16
};

struct ItemTagInfoList {
    keen::BlobArray<keen::ItemTagInfo> itemTags; // Offset: 0
};

enum class SnappingToggleMode {
    Disabled = 0,
    VoxelGrid = 1,
    SnappingBoxes = 2,
};

struct ChangeVoxelData {
    keen::bool isBuildingVoxel; // Offset: 0
    keen::ObjectReference<keen::SolidVoxelMaterial> placeVoxelMaterial; // Offset: 4
    keen::uint8 placeVoxelMaterialId; // Offset: 20
};

enum class CameraDistance {
    Near = 0,
    Medium = 1,
    Far = 2,
};

struct CameraDistanceOverride {
    keen::CameraDistance distance; // Offset: 0
    keen::bool override; // Offset: 1
};

enum class BuildingCameraMode {
    Orbit = 0,
    Free = 1,
    FreeHorizontalWhileUsing = 2,
};

struct CursorFxConfig {
    keen::SoundContainerReference loopedSfx; // Offset: 0
    keen::SoundContainerReference oneShotSfx; // Offset: 16
    keen::VfxReference oneShotVfx; // Offset: 32
    keen::ecs::Offset oneShotVfxOffset; // Offset: 48
    keen::VfxUserEffectParameterDataBlock vfxParameters; // Offset: 88
    keen::sint32 vfxParameterOffset_boundingBoxMin; // Offset: 152
    keen::sint32 vfxParameterOffset_boundingBoxMax; // Offset: 156
};

struct GliderConfig {
    keen::float32 accelerationForward; // Offset: 0
    keen::float32 airResistanceLongitudinal; // Offset: 4
    keen::float32 airResistanceLateral; // Offset: 8
    keen::float32 airResistanceVertical; // Offset: 12
    keen::float32 yawAngleSpeed; // Offset: 16
    keen::float32 pitchAngleSpeed; // Offset: 20
    keen::float32 rollAngleSpeed; // Offset: 24
};

enum class InventoryStockType {
    Arrow = 0,
    Spell = 1,
    TerrainMaterial = 2,
    BlueprintMaterial_Default = 3,
    BlueprintMaterial_Roof = 4,
    Count = 5,
};

enum class AttachDirection {
    Floor = 0,
    Wall = 1,
    Ceiling = 2,
};

enum class AttachAngleRange {
    Disabled = 0,
    Narrow = 1,
    Wide = 2,
};

struct AttachAngleConfig {
    keen::AttachAngleRange ceilingAngle; // Offset: 0
    keen::AttachAngleRange wallAngle; // Offset: 1
    keen::AttachAngleRange floorAngle; // Offset: 2
    keen::AttachDirection defaultAttachDirection; // Offset: 3
    keen::AttachDirection secondaryAttachDirection; // Offset: 4
    keen::bool hasSecondaryAttachDirection; // Offset: 5
    keen::bool forceUprightNormal; // Offset: 6
};

struct VoxelRequirement {
    keen::ObjectReference<keen::SolidVoxelMaterial> soil; // Offset: 0
    keen::VoxelMaterialId soilMaterialId; // Offset: 16
    keen::float factor; // Offset: 20
};

struct VoxelRequirementInfo {
    keen::BlobArray<keen::VoxelRequirement> requirements; // Offset: 0
};

struct CursorActionConfig {
    keen::bool snapPositionToAddableVoxel; // Offset: 0
    keen::bool snapPositionToRemovableVoxel; // Offset: 1
};

struct CursorConfig {
    keen::ecs::TemplateReference customCursorEntity; // Offset: 0
    keen::bool autoCenterPivot; // Offset: 16
    keen::float3 pivotOffset; // Offset: 20
    keen::bool allowSnapToSnappingBoxes; // Offset: 32
    keen::bool forceSnapPositionToVoxelGrid; // Offset: 33
    keen::bool snapOrientationToVoxelGrid; // Offset: 34
    keen::bool snapToCenterWhenSmallerThanVoxel; // Offset: 35
    keen::bool smoothOutTerrainNormal; // Offset: 36
    keen::bool alwaysFacePlayer; // Offset: 37
    keen::bool addRandomYawAngleOffset; // Offset: 38
    keen::CursorActionConfig primaryActionConfig; // Offset: 39
    keen::AttachAngleConfig attachAngleConfig; // Offset: 41
    keen::bool checkRequiredMaterialsOnPrimaryAction; // Offset: 48
    keen::CursorActionConfig secondaryActionConfig; // Offset: 49
    keen::AttachAngleConfig attachAngleConfigSecondary; // Offset: 51
    keen::bool checkRequiredMaterialsOnSecondaryAction; // Offset: 58
    keen::bool useSphereCast; // Offset: 59
    keen::bool keepSnappedToPlane; // Offset: 60
    keen::bool checkBuildZoneEnemies; // Offset: 61
    keen::bool checkSurfaceTopology; // Offset: 62
    keen::BlobArray<keen::VoxelRequirement> allowedVoxels; // Offset: 64
    keen::bool highlightHoveredEntity; // Offset: 72
    keen::bool showVoxelBlock; // Offset: 73
    keen::CursorFxConfig addFxConfig; // Offset: 76
    keen::CursorFxConfig subFxConfig; // Offset: 236
    keen::ObjectReference<keen::Model> defaultCursorStaticModel; // Offset: 396
    keen::ObjectReference<keen::Model> defaultCursorSkinnedModel; // Offset: 412
    keen::ObjectReference<keen::VfxDefinition> defaultCursorVfx; // Offset: 428
};

struct VoxelSnappingConfigOld {
    keen::uint3 snapBoxOffsetMin; // Offset: 0
    keen::uint3 snapBoxOffsetMax; // Offset: 12
    keen::uint8 basementHeight; // Offset: 24
};

struct EquipmentModel {
    keen::BlendShapeMask mask; // Offset: 0
    keen::ObjectReference<keen::Model> model; // Offset: 4
};

enum class SequenceRequirments {
    Combat_Target = 0,
    Combat_Target_Static = 1,
    Combat_Target_Not_Static = 2,
    IsAboveTarget = 3,
    IsEvading = 4,
    IsAirborne = 5,
    HasNpcTarget = 6,
};

typedef keen::Bitmask16<keen::SequenceRequirments> SequenceRequirmentMask;

enum class KnowledgeTriggerType {
    World = 0,
    Player = 1,
    Item = 2,
};

struct GameKnowledgeTrigger {
    keen::KnowledgeTriggerType triggerType; // Offset: 0
    keen::ObjectReference<keen::WorldKnowledgeObject> unlockKnowledge; // Offset: 4
    keen::ObjectReference<keen::PlayerKnowledgeObject> playerKnowledge; // Offset: 20
    keen::ItemKnowledgeTrigger itemKnowledge; // Offset: 36
    keen::bool useWorldItemKnowledge; // Offset: 37
    keen::ObjectReference<keen::ItemInfo> item; // Offset: 40
};

struct ItemSequence {
    keen::actor::SequenceResourceId sequenceId; // Offset: 0
    keen::actor::ActorSequenceReference sequence; // Offset: 4
    keen::actor::ActionSequenceTrigger triggeredBy; // Offset: 20
    keen::SequenceRequirmentMask requirements; // Offset: 22
    keen::skilltree_nodes::NodeReference requiredSkill; // Offset: 24
    keen::ecs::SpecialInteraction specialInteractionType; // Offset: 40
    keen::ItemReference costOverride; // Offset: 44
    keen::bool triggerKnowledge; // Offset: 60
    keen::GameKnowledgeTrigger knowledgeTrigger; // Offset: 64
    keen::HashKey32 triggerKnowledgeId; // Offset: 120
    keen::ecs::EntityTagReference sequenceEntityTag; // Offset: 124
    keen::BlobArray<keen::ecs::EntityTagReferenceEntry> combinedEntityTags; // Offset: 140
};

struct UiActionHints {
    keen::LocaTagReference primaryAction; // Offset: 0
    keen::LocaTagReference secondaryAction; // Offset: 16
    keen::LocaTagReference tertiaryAction; // Offset: 32
    keen::input_mapping::runtime::GameplayAction tertiaryGameplayAction; // Offset: 48
    keen::bool alwaysShow; // Offset: 49
};

struct EquipmentSetup {
    keen::EquipmentSlotType slot; // Offset: 0
    keen::bool repeatActionWhenPressed; // Offset: 1
    keen::ecs::EntityTagReference itemSequencesEntityTag; // Offset: 4
    keen::BlendShapeMask blendShapeMask; // Offset: 20
    keen::VisualEquipmentMask hideMask; // Offset: 24
    keen::ImpactEquipmentMask disableMask; // Offset: 28
    keen::ecs::TemplateReference impactEntity; // Offset: 32
    keen::ImpactProgramReference program; // Offset: 48
    keen::ecs::TemplateReference visualEntity; // Offset: 64
    keen::ObjectReference<keen::Model> visualModel; // Offset: 80
    keen::PrimaryAnimationSet primaryAnimationSet; // Offset: 96
    keen::SecondaryAnimationSet secondaryAnimationSet; // Offset: 97
    keen::CrosshairType crosshairType; // Offset: 98
    keen::CursorConfig cursorConfig; // Offset: 100
    keen::ObjectReference<keen::Model> cursorModel; // Offset: 544
    keen::ObjectReference<keen::Model> cursorSkinnedModel; // Offset: 560
    keen::ObjectReference<keen::VfxDefinition> cursorVfx; // Offset: 576
    keen::CameraDistanceOverride cameraDistanceOverride; // Offset: 592
    keen::BuildingCameraMode buildingCameraMode; // Offset: 594
    keen::float32 defaultVerticalPlacementOffset; // Offset: 596
    keen::float32 maxTiltAngle; // Offset: 600
    keen::float32 maxDistance; // Offset: 604
    keen::ecs::TemplateReference placedEntity; // Offset: 608
    keen::float3 placementAABBmin; // Offset: 624
    keen::float3 placementAABBmax; // Offset: 636
    keen::float3 snappingAABBmin; // Offset: 648
    keen::float3 snappingAABBmax; // Offset: 660
    keen::BlobArray<keen::ecs::ColliderResourceData> placementColliders; // Offset: 672
    keen::ecs::TriggerShapes placementNoBuildZones; // Offset: 680
    keen::BuffTypeReference appliedBuff; // Offset: 688
    keen::BuffTypeReference appliedDebuff; // Offset: 704
    keen::bool allowPlacementBelowFog; // Offset: 720
    keen::InhibitBuildingCheck checkInhibitBuild; // Offset: 721
    keen::bool buildZoneRequired; // Offset: 722
    keen::bool requiresAltarSlot; // Offset: 723
    keen::BlobArray<keen::RecipeItemStackResource> requiredCraftingIngredients; // Offset: 724
    keen::float3 placedEntityLocalSpawnVelocity; // Offset: 732
    keen::ChangeVoxelData voxelData; // Offset: 744
    keen::ObjectReference<keen::VoxelObjectDefinition> voxelObject; // Offset: 768
    keen::ObjectReference<keen::TerrainVoxelObjectDefinition> terrainVoxelObject; // Offset: 784
    keen::VoxelSnappingConfigOld voxelSnappingConfig; // Offset: 800
    keen::ObjectReference<keen::VoxelBlueprintConfig> voxelBlueprintConfig; // Offset: 828
    keen::ObjectReference<keen::VoxelBlueprintMaterialPool> voxelBlueprintMaterialPool; // Offset: 844
    keen::sint8 voxelObjectMaterialOverride; // Offset: 860
    keen::BlobArray<keen::EquipmentModel> visualModels; // Offset: 864
    keen::GliderConfig gliderConfig; // Offset: 872
    keen::TerraformingType terraformingType; // Offset: 900
};

typedef keen::Bitmask8<keen::ItemKnowledgeTrigger> ItemKnowledgeTriggerMask;

struct ItemKnowledgeBase {
    keen::ItemKnowledgeTriggerMask trigger; // Offset: 0
    keen::LocaTagReference triggerTag; // Offset: 4
};

struct ItemKnowledgeName {
    keen::NameLocaTag tag; // Offset: 20
};

struct ItemKnowledgeDescription {
    keen::DescriptionLocaTag tag; // Offset: 20
};

struct ItemKnowledgeLore {
    keen::LoreLocaTag tag; // Offset: 20
};

struct ItemKnowledgeRecipe {
    keen::bool unused; // Offset: 20
};

struct ItemLevelRange {
    keen::uint32 minLevel; // Offset: 0
    keen::uint32 maxLevel; // Offset: 4
};

struct StackSizeRange {
    keen::uint16 minStackSize; // Offset: 0
    keen::uint16 maxStackSize; // Offset: 2
};

struct ItemCommerceLink {
    keen::CommerceProductReference product; // Offset: 0
    keen::CommerceProductId id; // Offset: 16
    keen::bool isSet; // Offset: 20
};

struct ItemDamageSetup {
    keen::float32 speedMod; // Offset: 0
    keen::float32 dmgMod; // Offset: 4
    keen::impact::DamageDistribution distribution; // Offset: 8
    keen::bool isSet; // Offset: 60
};

struct ItemPermissionSetup {
    keen::PlayerPermissionsMask permissions; // Offset: 0
    keen::bool isSet; // Offset: 1
};

struct ItemArmorSetup {
    keen::impact::ArmorDistribution distribution; // Offset: 0
    keen::bool isSet; // Offset: 36
};

struct ItemBlockSetup {
    keen::float quality; // Offset: 0
    keen::bool isSet; // Offset: 4
};

struct ItemScaledCostSetup {
    keen::float staminaMod; // Offset: 0
    keen::bool isSet; // Offset: 4
};

struct ItemFuelData {
    keen::Time burnTime; // Offset: 0
    keen::uint32 energyOutput; // Offset: 8
    keen::bool isSet; // Offset: 12
};

struct ItemColorCombination {
    keen::ColorCombinationReference combination; // Offset: 0
};

struct ItemComfortSetup {
    keen::uint32 comfortAmount; // Offset: 0
};

struct ItemInfoExposure {
    keen::bool enable; // Offset: 0
    keen::float exposure; // Offset: 4
};

enum class ItemClassAlignmentType {
    None = 0,
    Warrior = 1,
    Mage = 2,
    Ranger = 3,
};

typedef keen::ObjectReference<keen::Perk> PerkReference;

struct ItemCollectionInfo {
    keen::bool isOverrideModelSet; // Offset: 0
    keen::ObjectReference<keen::Model> overrideModel; // Offset: 4
    keen::ecs::Offset overrideModelOffset; // Offset: 20
    keen::BlobArray<keen::ItemCollectionId> categories; // Offset: 60
};

struct ItemInfo {
    keen::ItemId itemId; // Offset: 0
    keen::Guid objectId; // Offset: 4
    keen::uint16 maxStackSize; // Offset: 20
    keen::bool generateRarity; // Offset: 22
    keen::ItemRarity rarity; // Offset: 23
    keen::ItemRarityMask disableRarityGeneration; // Offset: 24
    keen::StackSizeRange randomLootStackRange; // Offset: 26
    keen::BlobArray<keen::PickupModelOverride> overridePickupModels; // Offset: 32
    keen::ecs::TemplateReference overridePickupEntity; // Offset: 40
    keen::NotifierReference pickupFx; // Offset: 56
    keen::NameLocaTag name; // Offset: 72
    keen::CaptionLocaTag caption; // Offset: 88
    keen::DescriptionLocaTag description; // Offset: 104
    keen::LoreLocaTag lore; // Offset: 120
    keen::UiActionHints uiActionHints; // Offset: 136
    keen::ItemCategory category; // Offset: 188
    keen::AmmunitionType ammunitionType; // Offset: 189
    keen::WeaponCategoryReference weaponCategoryReference; // Offset: 192
    keen::ItemClassAlignmentType itemClassAlignment; // Offset: 208
    keen::MidiInstrumentType midiInstrumentType; // Offset: 209
    keen::EquipmentSetup equipment; // Offset: 212
    keen::BlobArray<keen::ItemSequence> sequences; // Offset: 1116
    keen::ecs::TemplateReference pidEntity; // Offset: 1124
    keen::ObjectReference<keen::ItemInfo> exchangeOnBroken; // Offset: 1140
    keen::ImageReference iconImage; // Offset: 1156
    keen::ObjectReference<keen::Model> iconModel; // Offset: 1172
    keen::ObjectReference<keen::ItemIconScene> iconScene; // Offset: 1188
    keen::ecs::Offset iconRenderOffset; // Offset: 1204
    keen::float32 iconRenderCookingScale; // Offset: 1244
    keen::float32 iconRenderGlobalScale; // Offset: 1248
    keen::ItemInfoExposure overrideSceneExposure; // Offset: 1252
    keen::bool fitToItemModelBoundingBox; // Offset: 1260
    keen::ItemFlags flags; // Offset: 1262
    keen::bool overrideKnowledgeGeneration; // Offset: 1264
    keen::Bitmask16<keen::ItemKnowledgeTrigger> generateKnowledge; // Offset: 1266
    keen::BlobArray<keen::ItemTagWeight> tags; // Offset: 1268
    keen::BlobArray<keen::ImpactUiValue> uiValues; // Offset: 1276
    keen::BlobArray<keen::ImpactUiValue> uiBuffValues; // Offset: 1284
    keen::impact::Configurations impactValues; // Offset: 1292
    keen::StaticArray<keen::PerkReference,5> perkReferences; // Offset: 1300
    keen::ItemLevelRange itemLevelRange; // Offset: 1380
    keen::ItemDamageSetup damageSetup; // Offset: 1388
    keen::ItemArmorSetup armorSetup; // Offset: 1452
    keen::ItemFuelData fuelSetup; // Offset: 1496
    keen::ItemBlockSetup blockSetup; // Offset: 1512
    keen::ItemScaledCostSetup scaledCostSetup; // Offset: 1520
    keen::ItemCommerceLink commerceLink; // Offset: 1528
    keen::ItemPermissionSetup permissionSetup; // Offset: 1552
    keen::ItemColorSetupInternal itemPaletteColorSetup; // Offset: 1556
    keen::ItemCollectionInfo collectionInfo; // Offset: 1572
    keen::ItemComfortSetup comfortSetup; // Offset: 1640
    keen::BlobString debugName; // Offset: 1644
};

struct ItemConvertInfo {
    keen::BlobString name; // Offset: 0
    keen::Guid id; // Offset: 8
    keen::BlobArray<keen::BlobVariant<keen::ItemKnowledgeBase>> knowledge; // Offset: 24
    keen::Guid visualModelGuid; // Offset: 32
    keen::BlobArray<keen::EquipmentModel> visualModels; // Offset: 48
    keen::VisualEquipmentMask hideMask; // Offset: 56
    keen::BlendShapeMask allowedBlendShapeMask; // Offset: 60
    keen::BlendShapeMask setBlendShapeMask; // Offset: 64
    keen::ColorCombination colorCombination; // Offset: 68
    keen::Guid voxelMaterialGuid; // Offset: 116
    keen::bool isDevItem; // Offset: 132
};

struct GameKnowledgeGenerationScope {
    keen::Bitmask16<keen::ItemKnowledgeTrigger> knowledgeTypes; // Offset: 0
};

struct ItemSubDirectory {
};

struct ItemRarityDropSettings {
    keen::float32 common; // Offset: 0
    keen::float32 uncommon; // Offset: 4
    keen::float32 rare; // Offset: 8
    keen::float32 legendary; // Offset: 12
};

struct WeaponCategory {
    keen::LocaTagReference locaTag; // Offset: 0
    keen::AttributeReference damageMod; // Offset: 16
    keen::WeaponCategoryType categoryType; // Offset: 32
    keen::ItemClassAlignmentType classType; // Offset: 33
    keen::float32 cameraTraumaVerySmall; // Offset: 36
    keen::float32 cameraTraumaSmall; // Offset: 40
    keen::float32 cameraTraumaNormal; // Offset: 44
    keen::float32 cameraTraumaBig; // Offset: 48
    keen::float32 cameraTraumaVeryBig; // Offset: 52
    keen::float32 cameraImpulseStrength; // Offset: 56
    keen::Time cameraImpulseDuration; // Offset: 64
};

struct WeaponCategoryResource {
    keen::Guid guid; // Offset: 0
    keen::WeaponCategory weaponCategory; // Offset: 16
};

struct WeaponCategoryDirectory {
};

struct ItemDirectory {
    keen::ObjectReference<keen::ItemIconScene> defaultIconScene; // Offset: 0
    keen::ItemRarityDropSettings rarityDropWeights; // Offset: 16
    keen::float weaponArmorRatio; // Offset: 32
    keen::ObjectReference<keen::WeaponCategoryDirectory> weaponCategoryDirectory; // Offset: 36
};

struct WeaponCategoryDirectoryResource {
    keen::BlobArray<keen::WeaponCategoryResource> weaponCategories; // Offset: 0
};

struct ItemRegistryResource {
    keen::BlobArray<keen::ItemReference> itemRefs; // Offset: 0
    keen::BlobArray<keen::ItemTagInfo> itemTags; // Offset: 8
    keen::BlobArray<keen::WeaponCategoryResource> weaponCategories; // Offset: 16
    keen::BlobArray<keen::BlobString> dbgNames; // Offset: 24
};

struct ItemIconRegistryEntryResource {
    keen::Guid guid; // Offset: 0
    keen::UiTextureResource uiTexture; // Offset: 16
};

struct ItemIconRegistryResource {
    keen::BlobArray<keen::ItemIconRegistryEntryResource> icons; // Offset: 0
};

struct DevItemRegistryResource {
};

struct ItemKnowledgeLock {
    keen::LocaTagId unlockedLocaId; // Offset: 0
    keen::LocaTagId keyLocaId; // Offset: 4
    keen::ItemKnowledgeTriggerMask unlockTrigger; // Offset: 8
};

struct ItemKnowledge {
    keen::ItemId itemId; // Offset: 0
    keen::ItemKnowledgeMask lockedKnowledgeMask; // Offset: 4
    keen::ItemKnowledgeLock nameLock; // Offset: 8
    keen::ItemKnowledgeLock descriptionLock; // Offset: 20
    keen::ItemKnowledgeLock loreLock; // Offset: 32
    keen::ItemKnowledgeLock recipeLock; // Offset: 44
};

struct ItemKnowledgeResource {
    keen::BlobArray<keen::ItemKnowledge> knowledgeArray; // Offset: 0
};

struct PickupFxConfig {
    keen::SoundContainerReference sfx; // Offset: 0
    keen::VfxReference vfx; // Offset: 16
};

struct PickupModelOverride {
    keen::ObjectReference<keen::Model> model; // Offset: 0
};

struct PickupEntityOverride {
    keen::ecs::TemplateReference entity; // Offset: 0
};

struct ItemCollectionOptionBase {
};

struct ItemCollectionCategoryReference {
    keen::ObjectReference<keen::ItemCollectionCategory> category; // Offset: 0
};

struct ItemCollectionModelOverride {
    keen::ObjectReference<keen::Model> model; // Offset: 0
    keen::ecs::Offset modelOffset; // Offset: 16
};

struct VoxelBlueprintItem {
    keen::ItemId itemId; // Offset: 0
    keen::uint3 size; // Offset: 4
    keen::BlobArray<keen::uint8> data; // Offset: 16
    keen::bool isDataCompressed; // Offset: 24
};

struct VoxelBlueprintItemRegistryResource {
    keen::BlobArray<keen::VoxelBlueprintItem> blueprintItems; // Offset: 0
};

struct ItemPropsForPropTestResource {
    keen::BlobArray<keen::Guid> propItems; // Offset: 0
};

struct ItemCollectionDirectory {
};

struct ItemCollectionSubDirectory {
};

struct ItemCollectionSetup {
    keen::ObjectReference<keen::ModelHierarchy> hierarchy; // Offset: 0
    keen::ObjectReference<keen::WorldKnowledgeObject> completionKnowledge; // Offset: 16
};

struct ItemCollectionSlot {
    keen::string jointName; // Offset: 0
    keen::ecs::Offset offset; // Offset: 8
};

struct ItemCollectionSlotId {
    keen::ObjectReference<keen::ItemInfo> itemId; // Offset: 48
};

struct ItemCollectionSlotCategory {
    keen::ObjectReference<keen::ItemCollectionCategory> category; // Offset: 48
};

struct ItemCollectionSlotEquipment {
    keen::EquipmentSlot equipmentSlot; // Offset: 48
};

struct ItemCollectionResource {
    keen::BlobArray<keen::ItemCollectionSlotResource> slots; // Offset: 0
    keen::KnowledgeId completionKnowledgeId; // Offset: 8
};

struct ItemCollectionSlotResource {
    keen::ItemCollectionId collectionId; // Offset: 0
    keen::ecs::Offset offset; // Offset: 4
    keen::ItemId itemId; // Offset: 44
    keen::ItemCollectionId collectionCategoryId; // Offset: 48
    keen::EquipmentSlot equipmentSlot; // Offset: 52
};

struct ItemCollectionCategoryDirectory {
};

struct ItemCollectionCategory {
};

struct SceneScatterData {
    keen::ObjectReference<keen::ScatterSet3> scatterSet; // Offset: 0
    keen::uint2 start; // Offset: 16
    keen::uint2 size; // Offset: 24
    keen::bool disable; // Offset: 32
    keen::bool writeDebug; // Offset: 33
};

enum class WorldDistributionTypeFlag {
    Flubber = 0,
    Blub = 1,
    Perry = 2,
};

typedef keen::Bitmask8<keen::WorldDistributionTypeFlag> WorldDistributionTypeFlags;

struct SceneResetPlayersOutOfBounds {
    keen::float32 marginHorizontal; // Offset: 0
    keen::float32 marginVertical; // Offset: 4
    keen::BlobArray<keen::ScenePlayableAreaBox> playableAreas; // Offset: 8
};

struct Scene {
    keen::ObjectReference<keen::VoxelWorldObject> voxelWorld; // Offset: 0
    keen::uint2 worldSize; // Offset: 16
    keen::int3 worldOrigin; // Offset: 24
    keen::ObjectReference<keen::Ibl> ibl; // Offset: 36
    keen::float32 iblIntensity; // Offset: 52
    keen::ObjectReference<keen::render::AtmosphereParameters> atmosphere; // Offset: 56
    keen::Biome biome; // Offset: 72
    keen::ObjectReference<keen::BiomeMap> biomeMap; // Offset: 76
    keen::SceneScatterData scatterData; // Offset: 92
    keen::bool limitMacroScattering; // Offset: 128
    keen::uint2 macroScatterStart; // Offset: 132
    keen::uint2 macroScatterSize; // Offset: 140
    keen::bool disableVoxelBrushDisplacement; // Offset: 148
    keen::WorldDistributionTypeFlags distributionTypeFlags; // Offset: 149
    keen::bool isTestScene; // Offset: 150
    keen::float32 distantObjectSize; // Offset: 152
    keen::uint32 moveVersion; // Offset: 156
    keen::SceneResetPlayersOutOfBounds resetPlayersOutOfBounds; // Offset: 160
};

struct ItemIconScene {
    keen::float32 fixedExposure; // Offset: 176
};

enum class WorldTransformFlag {
    Translation = 0,
    Orientation = 1,
    UniformScale = 2,
    NonUniformScale = 3,
};

typedef keen::Bitmask8<keen::WorldTransformFlag> WorldTransformFlags;

enum class ContentPass {
    ManualPois = 0,
    LargeStamps = 1,
    PrioPois = 2,
    FillPois = 3,
    DecoStamps = 4,
    Enemies = 5,
};

struct SceneObject {
    keen::WorldTransform worldTransform; // Offset: 0
    keen::WorldTransformFlags worldTransformFlags; // Offset: 56
    keen::ContentPass contentPass; // Offset: 57
};

struct SceneCamera {
    keen::BlobString name; // Offset: 64
    keen::Guid guid; // Offset: 72
    keen::float32 nearClip; // Offset: 88
    keen::float32 farClip; // Offset: 92
    keen::float32 fovY; // Offset: 96
};

struct ItemIconSceneCamera {
};

struct ItemIconSceneSun {
    keen::HdrColorRgb color; // Offset: 64
};

struct SceneBaseLight {
    keen::HdrColorRgb color; // Offset: 64
};

struct ScenePointLight {
    keen::float32 radius; // Offset: 80
    keen::bool castShadows; // Offset: 84
};

struct ItemIconScenePointLight {
};

struct CameraData {
    keen::float32 nearClip; // Offset: 0
    keen::float32 farClip; // Offset: 4
    keen::float32 fovY; // Offset: 8
};

struct render.AtmosphereParameters {
    keen::float32 planetRadius; // Offset: 0
    keen::ColorRgb rayleighScattering; // Offset: 4
    keen::float32 rayleighDensity; // Offset: 16
    keen::ColorRgb ozoneExtinction; // Offset: 20
    keen::float32 ozoneDensity; // Offset: 32
    keen::float32 rayleightDistribution; // Offset: 36
    keen::float32 mieScattering; // Offset: 40
    keen::float32 mieExtinction; // Offset: 44
    keen::float32 mieDensity; // Offset: 48
    keen::float32 mieDistribution; // Offset: 52
    keen::float32 mieG; // Offset: 56
    keen::FloatRange yRange; // Offset: 60
};

struct ItemIconSceneInfo {
    keen::CameraData camera; // Offset: 0
    keen::WorldTransform cameraTransform; // Offset: 16
    keen::ObjectReference<keen::IblResource> ibl; // Offset: 72
    keen::render::AtmosphereParameters atmosphereParameters; // Offset: 88
    keen::float32 fixedExposure; // Offset: 156
    keen::float32 iblIntensity; // Offset: 160
    keen::float32 sunAzimuth; // Offset: 164
    keen::float32 sunElevation; // Offset: 168
    keen::float3 sunColor; // Offset: 172
    keen::BlobArray<keen::RenderLight> lights; // Offset: 184
    keen::BlobArray<keen::WorldTransform> lightsTransform; // Offset: 192
};

struct JournalDirectory {
};

struct JournalSubDirectory {
};

struct JournalLoreCategory {
    keen::LocaTagReference categoryName; // Offset: 0
};

struct JournalCollectionBase {
    keen::LocaTagReference name; // Offset: 0
    keen::LocaTagReference referencedDocumentName; // Offset: 16
    keen::uint32 priority; // Offset: 32
};

struct JournalCollection {
};

enum class QuestSourceType {
    None = 0,
    Flame = 1,
    Blacksmith = 2,
    Alchemist = 3,
    Huntress = 4,
    Farmer = 5,
    Carpenter = 6,
    CryptKeeper = 7,
    Bard = 8,
};

enum class QuestType {
    Auto = 0,
    WorldQuest = 1,
    PlayerQuest = 2,
};

struct JournalQuestReward {
};

struct JournalItemReward {
    keen::ItemReference item; // Offset: 0
};

struct JournalExperienceReward {
    keen::ObjectReference<keen::ExperienceBalanceValue> experience; // Offset: 0
};

struct CompletableJournalCollection {
    keen::QuestSourceType questSource; // Offset: 36
    keen::QuestType type; // Offset: 37
};

struct TutorialJournalCollection {
};

struct JournalEntryBase {
    keen::LocaTagReference name; // Offset: 0
    keen::LocaTagReference text; // Offset: 16
    keen::LocaTagReference mapMarkerReference; // Offset: 32
    keen::ObjectReference<keen::ItemInfo> itemIcon; // Offset: 48
};

struct JournalEntry {
};

struct CompletableJournalEntry {
};

struct TutorialJournalEntry {
};

struct JournalCompletionRequirement {
};

struct JournalEntryResource {
    keen::JournalEntryId entryId; // Offset: 0
    keen::LocaTagId name; // Offset: 4
    keen::LocaTagId text; // Offset: 8
    keen::LocaTagId mapMarkerReference; // Offset: 12
    keen::ItemId itemIconId; // Offset: 16
    keen::KnowledgeId knowledgeRequirement; // Offset: 20
    keen::KnowledgeId completionRequirement; // Offset: 24
};

struct JournalCollectionResource {
    keen::JournalEntryId entryId; // Offset: 0
    keen::LocaTagId loreCategory; // Offset: 4
    keen::LocaTagId name; // Offset: 8
    keen::LocaTagId referencedDocumentName; // Offset: 12
    keen::uint32 priority; // Offset: 16
    keen::bool isTutorial; // Offset: 20
    keen::BlobArray<keen::JournalEntryResource> entries; // Offset: 24
};

struct QuestRewardResource {
    keen::ItemReference itemRef; // Offset: 0
    keen::ItemId itemId; // Offset: 16
    keen::HashKey32 experienceValueId; // Offset: 20
};

struct JournalQuestResource {
    keen::QuestSourceType source; // Offset: 32
    keen::QuestType type; // Offset: 33
    keen::bool unlockForAllPlayers; // Offset: 34
    keen::BlobArray<keen::QuestRewardResource> rewards; // Offset: 36
};

struct JournalRegistryResource {
    keen::BlobArray<keen::JournalQuestResource> quests; // Offset: 0
    keen::BlobArray<keen::JournalCollectionResource> collections; // Offset: 8
};

struct ecs.KnowledgeTrigger {
    keen::StaticArray<keen::HashKey32,8> knowledgeIds; // Offset: 0
    keen::bool canActivate; // Offset: 32
    keen::bool canDeactivate; // Offset: 33
};

struct SubEntityKnowledgeQuery {
    keen::KnowledgeId knowledgeQueryId; // Offset: 0
    keen::Guid subEntityTemplate; // Offset: 4
    keen::HashKey32 uiWorldEventId; // Offset: 20
};

struct ecs.KnowledgeQuery {
    keen::HashKey32 knowledgeId; // Offset: 0
    keen::HashKey32 uiWorldEventId; // Offset: 4
    keen::bool wasEventTriggered; // Offset: 8
    keen::StaticArray<keen::SubEntityKnowledgeQuery,4> subEntityQueries; // Offset: 12
};

struct ecs.MapMarkerUnlockRequirements {
    keen::GameKnowledgeRequirement hintState; // Offset: 0
    keen::GameKnowledgeRequirement visibleState; // Offset: 104
    keen::bool hasCompletedState; // Offset: 208
    keen::GameKnowledgeRequirement completedState; // Offset: 212
    keen::KnowledgeId hintStateQueryId; // Offset: 316
    keen::KnowledgeId visibleStateQueryId; // Offset: 320
    keen::KnowledgeId completedStateQueryId; // Offset: 324
};

struct ecs.KnowledgeTriggerToggle {
};

struct ecs.KnowledgeTriggerRange {
};

struct ecs.KnowledgeTriggerOnKill {
    keen::bool useSceneKnowledgeTrigger; // Offset: 0
    keen::bool unlockForGroup; // Offset: 1
    keen::GameKnowledgeTrigger triggerKnowledge; // Offset: 4
    keen::KnowledgeId triggerKnowledgeId; // Offset: 60
};

struct ecs.KnowledgeUiWorldEvent {
    keen::ObjectReference<keen::FbUiWorldEvent> triggerEvent; // Offset: 0
};

struct LootTreeNodeIntermediate {
    keen::Guid objectId; // Offset: 0
    keen::HashKey32 nodeId; // Offset: 16
    keen::HashKey32 parentId; // Offset: 20
    keen::uint32 potentialSlots; // Offset: 24
    keen::uint32 potentialChildSlots; // Offset: 28
};

struct LootTreeIntermediate {
    keen::BlobArray<keen::LootTreeNodeIntermediate> nodes; // Offset: 0
};

struct LootNodeResource {
    keen::HashKey32 nodeId; // Offset: 0
    keen::HashKey32 parentId; // Offset: 4
};

struct LootContainerResource {
    keen::uint32 lootSettingsIndex; // Offset: 8
};

enum class LootModifierMode {
    Set = 0,
    Add = 1,
    Multiply = 2,
    None = 3,
};

struct LootModifierValue {
    keen::LootModifierMode mode; // Offset: 0
    keen::float32 value; // Offset: 4
};

struct LootModifierInfo {
    keen::LootModifierValue level; // Offset: 0
    keen::LootModifierValue levelOffset; // Offset: 8
    keen::float32 levelOffsetRangeMin; // Offset: 16
    keen::float32 levelOffsetRangeMax; // Offset: 20
    keen::StaticArray<keen::LootModifierValue,5> rarities; // Offset: 24
};

struct LootSettingsResource {
    keen::LootModifierInfo modifier; // Offset: 0
    keen::BlobArray<keen::LootTagInfo> tags; // Offset: 64
};

struct SceneRandomLootResource {
    keen::BlobArray<keen::LootSettingsResource> lootSettings; // Offset: 0
    keen::BlobArray<keen::SpecialItemInfo> specialItems; // Offset: 8
    keen::BlobArray<keen::LootNodeResource> lootNodes; // Offset: 16
    keen::BlobArray<keen::LootContainerResource> lootContainer; // Offset: 24
};

struct LootDistributionBaseNode {
    keen::Guid objectId; // Offset: 0
    keen::BlobArray<keen::LootTagInfo> tags; // Offset: 16
    keen::LootModifierInfo modifier; // Offset: 24
    keen::uint32 potentialSlots; // Offset: 88
    keen::uint32 potentialChildSlots; // Offset: 92
};

struct LootDistributionTreeNode {
    keen::HashKey32 nodeId; // Offset: 96
    keen::HashKey32 parentId; // Offset: 100
    keen::BlobArray<keen::LootDistributionTreeNode> childNodes; // Offset: 104
};

struct LootContainerInfo {
    keen::LootContainerId id; // Offset: 96
    keen::LootContainerId parentId; // Offset: 100
};

struct SpecialItemInfo {
    keen::HashKey32 nodeId; // Offset: 0
    keen::ItemId itemId; // Offset: 4
    keen::bool checkItemLabels; // Offset: 8
    keen::uint8 amount; // Offset: 9
};

struct LootDistributionTreeResource {
    keen::BlobArray<keen::SpecialItemInfo> specialItems; // Offset: 112
};

struct EntityRandomLootInfo {
    keen::bool isLootEntity; // Offset: 0
    keen::uint32 potentialSlotCount; // Offset: 4
};

struct SceneWhiteboxLootInfo {
    keen::HashKey32 lootNodeId; // Offset: 0
    keen::LootContainerInfo lootContainer; // Offset: 4
};

struct SceneWhiteboxLootInfos {
    keen::BlobArray<keen::SceneWhiteboxLootInfo> lootContainer; // Offset: 0
};

struct LootSlotInfo {
    keen::ItemId itemId; // Offset: 0
    keen::uint16 stackSize; // Offset: 4
    keen::ItemRarity rarity; // Offset: 6
    keen::uint32 level; // Offset: 8
};

struct LootContainerFillInfo {
    keen::uint8 version; // Offset: 0
    keen::uint8 filledSlots; // Offset: 1
    keen::StaticArray<keen::LootSlotInfo,16> slots; // Offset: 4
};

struct ImportantLootSlotInfo {
    keen::uint32 importantItemIndex; // Offset: 0
    keen::ItemId itemId; // Offset: 4
};

struct ImportantLootContainerFillInfo {
    keen::uint8 filledSlots; // Offset: 0
    keen::StaticArray<keen::ImportantLootSlotInfo,16> slots; // Offset: 4
};

struct LootModifierBase {
    keen::LootModifierMode mode; // Offset: 0
};

struct LootModifierAmount {
    keen::float32 amount; // Offset: 4
};

struct LootModifierRarity {
    keen::ItemRarity rarity; // Offset: 1
    keen::float32 weight; // Offset: 4
};

struct LootModifierItemValue {
    keen::float32 min; // Offset: 4
    keen::float32 max; // Offset: 8
};

struct LootModifierLevelOffset {
    keen::float32 value; // Offset: 4
};

struct LootModifierLevelOffsetRange {
    keen::float32 min; // Offset: 4
    keen::float32 max; // Offset: 8
};

struct RandomLootItem {
    keen::ItemReference item; // Offset: 0
    keen::uint8 amount; // Offset: 16
    keen::bool checkItemLabels; // Offset: 17
};

struct RandomLootItemInfo {
    keen::ItemId itemId; // Offset: 0
    keen::ItemReference itemRef; // Offset: 4
    keen::uint8 amount; // Offset: 20
    keen::bool checkItemLabels; // Offset: 21
};

struct LootTagInfo {
    keen::HashKey32 tagId; // Offset: 0
    keen::float32 weight; // Offset: 4
    keen::Guid guid; // Offset: 8
};

struct ObjectLootSettings {
    keen::LootModifierInfo modifier; // Offset: 0
    keen::BlobArray<keen::LootTagInfo> tags; // Offset: 64
    keen::BlobArray<keen::RandomLootItemInfo> specialItems; // Offset: 72
};

enum class ShufflebagItemType {
    None = 0,
    Weapon = 1,
    Armor = 2,
};

struct ItemLabelGroupResource {
    keen::BlobArray<keen::LootTagInfo> labels; // Offset: 0
    keen::BlobArray<keen::ItemLabelGroupResource> childGroups; // Offset: 8
};

struct LootableItemInfo {
    keen::ItemId itemId; // Offset: 0
    keen::ItemRarityMask rarities; // Offset: 4
    keen::bool useUiRarity; // Offset: 5
    keen::ItemRarity uiRarity; // Offset: 6
    keen::ItemLabelGroupResource labelGroups; // Offset: 8
    keen::uint16 stackSizeMin; // Offset: 24
    keen::uint16 stackSizeMax; // Offset: 26
    keen::uint16 stackSizeMaxScaled; // Offset: 28
    keen::bool stackSizeScalable; // Offset: 30
    keen::ShufflebagItemType shufflebagType; // Offset: 31
    keen::bool hasWeaponCategory; // Offset: 32
    keen::WeaponCategoryType weaponCategoryType; // Offset: 33
    keen::EquipmentSlotType armorCategoryType; // Offset: 34
    keen::ItemClassAlignmentType classAlignmentType; // Offset: 35
};

struct LootableItemsResource {
    keen::StaticArray<keen::float32,5> globalRarityDropRates; // Offset: 0
    keen::float32 weaponArmorRatio; // Offset: 20
    keen::BlobArray<keen::LootableItemInfo> items; // Offset: 24
    keen::uint64 itemClassCategoryMask; // Offset: 32
    keen::uint64 weaponCategoryMask; // Offset: 40
    keen::uint64 armorCategoryMask; // Offset: 48
};

struct DefaultLootLabelCollectionResource {
    keen::BlobArray<keen::DefaultLootSettingsResource> lootSettings; // Offset: 0
};

struct DefaultLootSettingsResource {
    keen::LootContainerId id; // Offset: 72
};

struct DistributionLootSceneInput {
    keen::Guid scatterSetId; // Offset: 0
    keen::LootModifierInfo modifier; // Offset: 16
    keen::BlobArray<keen::LootTagInfo> tags; // Offset: 80
    keen::BlobString lootIdsInput; // Offset: 88
    keen::BlobString lootTreeInput; // Offset: 96
};

struct DistributionLootConverterParameters {
    keen::BlobArray<keen::DistributionLootSceneInput> lootSceneInputs; // Offset: 0
};

struct DebugItemDropInfo {
    keen::ItemId itemId; // Offset: 0
    keen::float32 weight; // Offset: 4
};

struct DebugLootSceneInfoMessage {
    keen::Guid sceneId; // Offset: 0
};

struct DebugLootContainerInfoMessage {
    keen::HashKey32 nodeId; // Offset: 0
    keen::BlobArray<keen::ItemId> droppedItems; // Offset: 4
    keen::float32 weightSum; // Offset: 12
    keen::LootModifierInfo modifierInfo; // Offset: 16
    keen::BlobArray<keen::LootTagInfo> tags; // Offset: 80
    keen::BlobArray<keen::DebugItemDropInfo> possibleItems; // Offset: 88
};

struct RegisteredLootContainerParams {
    keen::LootContainerId containerId; // Offset: 0
    keen::LootContainerId parentNodeId; // Offset: 4
    keen::HashKey32 labelDefinitionsId; // Offset: 8
    keen::float baseProbability; // Offset: 12
    keen::uint8 slotsMin; // Offset: 16
    keen::uint8 slotsMax; // Offset: 17
    keen::BlobOptional<keen::uint32> level; // Offset: 20
};

struct DebugRegisteredLootContainerMessage {
    keen::BlobArray<keen::RegisteredLootContainerParams> registeredContainer; // Offset: 0
};

struct DebugTrackLootContainerMessage {
    keen::bool isLootContainer; // Offset: 0
    keen::HashKey32 nodeId; // Offset: 4
};

struct DebugRefreshLootMessage {
    keen::HashKey32 nodeId; // Offset: 0
};

struct GroupedItemLabels {
};

typedef keen::uint64 LabelMask;

enum class MarkerTypeSorting {
    None = 0,
    FlameRelated = 1,
    Dungeons = 2,
    Locations = 3,
    CustomMarker = 4,
};

struct MapMarkerType {
    keen::MapMarkerTypeId markerId; // Offset: 0
    keen::UiTexture icon; // Offset: 4
    keen::float32 iconDisplaySize; // Offset: 52
    keen::bool isHighlightable; // Offset: 56
    keen::bool isFastTravelDestination; // Offset: 57
    keen::bool showAboveFogOfWar; // Offset: 58
    keen::bool showLabel; // Offset: 59
    keen::bool showRange; // Offset: 60
    keen::bool isCustomMarkerType; // Offset: 61
    keen::bool canBeFiltered; // Offset: 62
    keen::MarkerTypeSorting sortingCategory; // Offset: 63
    keen::uint8 minimizeAboveZoomStep; // Offset: 64
    keen::uint8 hideAboveZoomStep; // Offset: 65
    keen::Color minimizedColor; // Offset: 68
    keen::bool scaleWithZoom; // Offset: 72
};

struct MapMarkerRegistryTool {
};

struct MapMarkerRegistryResource {
    keen::BlobArray<keen::MapMarkerType> mapMarkers; // Offset: 0
    keen::UiTexturePreload texturePreload; // Offset: 8
};

struct CustomMapMarker {
    keen::WorldPosition position; // Offset: 0
    keen::uint8 colorScheme; // Offset: 24
    keen::MapMarkerTypeId type; // Offset: 28
};

enum class npc.HappinessRequirement {
    Sheltered = 0,
    Bed = 1,
    Food = 2,
};

typedef keen::Bitmask8<keen::npc::HappinessRequirement> npc.HapinessMask;

struct npc.IdleSequenceSetup {
    keen::Time minSequenceCooldown; // Offset: 0
    keen::Time maxSequenceCooldown; // Offset: 8
};

typedef keen::uint8 player_bases.BaseIndex;

struct npc.PlacedNpcInfo {
    keen::player_bases::BaseIndex baseIndex; // Offset: 0
    keen::ecs::EntityId entityId; // Offset: 4
    keen::npc::HapinessMask happiness; // Offset: 8
};

enum class active_npc.State {
    Invalid = 0,
    Start = 1,
    FindBed = 2,
    Idle = 3,
    DecideTask = 4,
    FindTarget = 5,
    GoToTarget = 6,
    Work = 7,
    Roam = 8,
    Sleep = 9,
    Sitting = 10,
    Inspecting = 11,
    Eating = 12,
    FinishTask = 13,
};

enum class active_npc.StateCondition {
    IsFinished = 0,
    HasFailed = 1,
};

enum class active_npc.Decision {
    None = 0,
    WantsToWork = 1,
    WantsToRoam = 2,
    WantsToSitDown = 3,
    WantsToInspect = 4,
    WantsToSleep = 5,
    WantsToEat = 6,
    WantsToIdle = 7,
};

enum class active_npc.NpcType {
    None = 0,
    TownFolk = 1,
    Alchemist = 2,
    Bard = 3,
    Blacksmith = 4,
    Carpenter = 5,
    CryptKeeper = 6,
    Hunter = 7,
    Farmer = 8,
};

struct active_npc.DecisionSetup {
    keen::float idleWeight; // Offset: 0
    keen::float inspectWeight; // Offset: 4
    keen::float sitWeight; // Offset: 8
    keen::float roamWeight; // Offset: 12
    keen::float workWeight; // Offset: 16
};

struct active_npc.IdleSetup {
    keen::Time minDuration; // Offset: 0
    keen::Time maxDuration; // Offset: 8
};

struct active_npc.SearchTargetSetup {
    keen::float32 targetRadius; // Offset: 0
    keen::float32 bedRadius; // Offset: 4
};

struct active_npc.WorkSetup {
    keen::Time minDuration; // Offset: 0
    keen::Time maxDuration; // Offset: 8
};

struct active_npc.TargetSetup {
    keen::bool isFarmland; // Offset: 0
    keen::bool isBed; // Offset: 1
    keen::bool isCraftingStation; // Offset: 2
    keen::bool isSeating; // Offset: 3
    keen::bool isFood; // Offset: 4
    keen::bool isInteresting; // Offset: 5
};

struct ecs.NpcDialog {
    keen::bool isFlame; // Offset: 0
    keen::ObjectReference<keen::NpcDialogDefinition> dialog; // Offset: 4
    keen::NpcDialogResource dialogResource; // Offset: 20
    keen::LocaTagReference interactionVerbLoca; // Offset: 104
};

struct ecs.DynamicNpcDialog {
    keen::uint16 syncedKnowledgeQueryCounter; // Offset: 0
};

struct ecs.NpcDialogPartner {
    keen::bool isInGreetingRange; // Offset: 0
    keen::Time lastGreetingTime; // Offset: 8
};

struct ecs.NpcState {
    keen::actor::ActorSequenceReference defaultGreetingSequence; // Offset: 0
    keen::actor::ActorSequenceReference attentionGreetingSequence; // Offset: 16
    keen::actor::TurnSetup turnSetup; // Offset: 32
    keen::npc::IdleSequenceSetup idleSetup; // Offset: 104
    keen::npc::HapinessMask hapinessMask; // Offset: 120
    keen::float32 minDistanceToPlayer; // Offset: 124
};

typedef keen::uint64 ecs.PlayerMask;

enum class ecs.NpcInteractionState {
    IsTurning = 0,
    IsGreeting = 1,
    IsCloseToPlayer = 2,
    IsPlayingSequence = 3,
};

typedef keen::Bitmask8<keen::ecs::NpcInteractionState> ecs.NpcInteractionStates;

struct ecs.DynamicNpcState {
    keen::LocaTagId lastSelectedDialogId; // Offset: 0
    keen::ecs::EntityId lastInteractingEntityId; // Offset: 4
    keen::bool dialogSequenceActive; // Offset: 8
    keen::Time nextGreetingTime; // Offset: 16
    keen::Time lastLookAtPlayerTime; // Offset: 24
    keen::Time nextLookAtPlayerTime; // Offset: 32
    keen::Time remainingNextSequenceTime; // Offset: 40
    keen::StaticArray<keen::ecs::QueryId,16> queryIds; // Offset: 48
    keen::ecs::PlayerMask playersInSight; // Offset: 112
    keen::ecs::PlayerMask greetedPlayers; // Offset: 120
    keen::bool isInitialized; // Offset: 128
    keen::bool isSpawning; // Offset: 129
    keen::Quaternion revertToRotation; // Offset: 132
};

struct ecs.ActiveNpcState {
    keen::NpcId npcId; // Offset: 0
    keen::actor::ActorSequenceReference sitSequence; // Offset: 4
    keen::actor::ActorSequenceReference sleepSequence; // Offset: 20
    keen::actor::ActorSequenceReference inspectSequence; // Offset: 36
    keen::active_npc::NpcType npcType; // Offset: 52
    keen::active_npc::DecisionSetup decisionSetup; // Offset: 56
    keen::active_npc::IdleSetup idleSetup; // Offset: 80
    keen::active_npc::RoamingSetup roamingSetup; // Offset: 96
    keen::active_npc::MovementSetup movementSetup; // Offset: 108
    keen::active_npc::WorkSetup workSetup; // Offset: 120
    keen::active_npc::SleepSetup sleepSetup; // Offset: 136
    keen::active_npc::SearchTargetSetup searchTargetSetup; // Offset: 152
    keen::active_npc::PathNodeSetup pathNodeSetup; // Offset: 160
};

struct ecs.DynamicActiveNpcState {
    keen::active_npc::State state; // Offset: 0
    keen::active_npc::State previousState; // Offset: 1
    keen::active_npc::Decision decision; // Offset: 2
    keen::npc::HapinessMask happiness; // Offset: 3
    keen::bool wasPaused; // Offset: 4
};

struct ecs.NPCMovement {
    keen::Time duration; // Offset: 0
    keen::float3 movement; // Offset: 8
};

struct ecs.NpcCommon {
    keen::ecs::NpcInteractionStates interactionStates; // Offset: 0
    keen::Time stateTimer; // Offset: 8
    keen::Time currentStateDuration; // Offset: 16
    keen::Time stuckTime; // Offset: 24
    keen::Time stuckTimeOut; // Offset: 32
    keen::ecs::RangeQueryId queryId; // Offset: 40
    keen::ecs::EntityId closestPlayerId; // Offset: 44
    keen::ecs::EntityId currentTargetId; // Offset: 48
    keen::ecs::EntityId bedId; // Offset: 52
    keen::ecs::EntityId previousTargetId; // Offset: 56
    keen::float sleepTime; // Offset: 60
    keen::float wakeUpTime; // Offset: 64
    keen::float closestPlayerDistance; // Offset: 68
    keen::float squaredDistanceToTarget; // Offset: 72
    keen::float3 currentTargetPosition; // Offset: 76
    keen::StaticArray<keen::ecs::NPCMovement,60> history; // Offset: 88
    keen::uint8 historyIndex; // Offset: 1528
    keen::Guid currentSequenceId; // Offset: 1532
    keen::bool useReducedRoamingSpace; // Offset: 1548
    keen::bool shouldBeMoving; // Offset: 1549
    keen::uint8 unstuckTries; // Offset: 1550
    keen::uint8 stateFailures; // Offset: 1551
};

struct ecs.ActiveNpcStateSaved {
    keen::float3 spawnPosition; // Offset: 0
    keen::bool overrideRoamingRange; // Offset: 12
    keen::float roamingRange; // Offset: 16
    keen::WorldPosition teleportPositionAfterFinishing; // Offset: 24
};

struct ecs.ClientActiveNpcState {
    keen::ecs::EntityId bedId; // Offset: 0
    keen::npc::HapinessMask happiness; // Offset: 4
    keen::float roamingRange; // Offset: 8
};

struct ecs.StoreAssociatedNpcIds {
    keen::bool initialized; // Offset: 0
    keen::StaticArray<keen::NpcId,2> npcIds; // Offset: 4
};

struct ecs.ActiveNpcTarget {
    keen::active_npc::TargetSetup setup; // Offset: 0
    keen::active_npc::NpcType npcType; // Offset: 6
    keen::NpcId associatedNpc; // Offset: 8
    keen::ecs::Offset targetOffset; // Offset: 12
};

struct ecs.ClientActiveNpcTarget {
    keen::NpcId associatedNpc; // Offset: 0
    keen::bool isBed; // Offset: 4
};

struct ecs.NpcSequenceEntry {
    keen::actor::ActorSequenceReference sequence; // Offset: 0
};

struct ecs.BaseNpcSequences {
    keen::BlobArray<keen::ecs::NpcSequenceEntry> sequences; // Offset: 0
};

struct ecs.NpcIdleSequences {
};

struct ecs.NpcWorkSequences {
};

struct ecs.NpcActionSequences {
    keen::ecs::NpcIdleSequences idleSequences; // Offset: 0
    keen::ecs::NpcWorkSequences workSequences; // Offset: 8
};

struct NpcResource {
    keen::NpcId id; // Offset: 0
    keen::LocaTagId name; // Offset: 4
    keen::bool isCraftingAssistant; // Offset: 8
    keen::KnowledgeId unlockRequirement; // Offset: 12
    keen::WorkshopId workshopId; // Offset: 16
    keen::LocaTagId workshopLabel; // Offset: 20
    keen::ItemId itemId; // Offset: 24
    keen::ItemReference itemRef; // Offset: 28
    keen::CharacterPresetReference characterPresetReference; // Offset: 44
    keen::CharacterPresetId characterPresetId; // Offset: 60
    keen::UiNpcRenderingOptions uiRendering; // Offset: 64
    keen::BlobString debugName; // Offset: 116
};

struct NpcCollection {
    keen::BlobArray<keen::NpcResource> npcs; // Offset: 0
};

struct ecs.PathFinder {
    keen::ecs::PathGridDistance horizontalStartSearchRadius; // Offset: 0
    keen::ecs::PathGridDistance verticalStartSearchRadius; // Offset: 4
    keen::ecs::PathfindingSettings settings; // Offset: 8
};

struct ecs.DynamicPathFinder {
    keen::Time lastQueryTime; // Offset: 0
    keen::float3 targetPosition; // Offset: 8
    keen::float3 lastStartPosition; // Offset: 20
    keen::float3 lastTargetPosition; // Offset: 32
    keen::uint32 lastKeepDistance; // Offset: 44
    keen::HashKey32 lastParametersHash; // Offset: 48
    keen::float32 lastMaxTargetNodeDistance; // Offset: 52
    keen::ecs::PathQueryId queryId; // Offset: 56
    keen::uint32 keepDistance; // Offset: 60
    keen::ecs::PathGridDistance horizontalSearchRadius; // Offset: 64
    keen::ecs::PathGridDistance verticalSearchRadius; // Offset: 68
    keen::ecs::PathGridType gridType; // Offset: 72
    keen::bool keepLastResults; // Offset: 73
    keen::ecs::PathQueryCheck pathQueryCheck; // Offset: 74
    keen::ecs::EntityId freePathCheckIgnoreEntityId; // Offset: 76
    keen::ecs::PathGridDistance minHorizontalSpace; // Offset: 80
    keen::ecs::PathGridDistance minVerticalSpace; // Offset: 84
    keen::float32 maxTargetNodeDistance; // Offset: 88
    keen::uint32 maxWalkDistance; // Offset: 92
    keen::ecs::PathQueryTargetType targetType; // Offset: 96
    keen::uint32 maxIterations; // Offset: 100
    keen::float2 horizontalKeepDistanceDirection; // Offset: 104
    keen::float3 freePathCheckPosition; // Offset: 112
    keen::bool enableAdditionalSpaceSearch; // Offset: 124
    keen::bool enableJumpUp; // Offset: 125
    keen::bool enableJumpDown; // Offset: 126
    keen::bool canOpenDoors; // Offset: 127
    keen::uint8 maxJumpUpHeight; // Offset: 128
    keen::uint8 maxJumpDownHeight; // Offset: 129
    keen::bool enforceUpdate; // Offset: 130
    keen::bool ignoreWalkableColliders; // Offset: 131
    keen::bool ignoreMovingObjects; // Offset: 132
    keen::ecs::PathGridDistance minTargetHorizontalSpace; // Offset: 136
    keen::ecs::PathNodeRequirements pathNodeRequirements; // Offset: 140
    keen::ecs::PathNodeCostFactors pathNodeCostFactors; // Offset: 144
    keen::float32 horizontalDistanceCostFactor; // Offset: 196
    keen::bool checkFreePathToTarget; // Offset: 200
    keen::bool ignoreNodesCloseToHole; // Offset: 201
};

enum class ecs.PathWalkerState {
    Idle = 0,
    WaitingForQuery = 1,
    Walking = 2,
    TurnBeforeJump = 3,
    WalkToJumpPoint = 4,
    JumpUp = 5,
    JumpDown = 6,
    TargetReached = 7,
    TargetNotReachable = 8,
    Stuck = 9,
    Turn = 10,
    Teleporting = 11,
    WalkToDoor = 12,
    OpenDoor = 13,
};

struct ecs.PathWalkerTurnSettings {
    keen::float turnToNextWayPointMinDistanceWalk; // Offset: 0
    keen::float turnToNextWayPointMinDistanceRun; // Offset: 4
};

struct ecs.PathWalker {
    keen::actor::ActorSequenceReference jumpSequence; // Offset: 0
    keen::actor::ActorSequenceReference openDoorSequence; // Offset: 16
    keen::bool usePathFinding; // Offset: 32
    keen::actor::ActorSequenceReference teleportSequence; // Offset: 36
    keen::float32 jumpMoveSpeed; // Offset: 52
    keen::float32 horizontalRadius; // Offset: 56
    keen::float32 verticalRadius; // Offset: 60
    keen::ecs::PathNodeRequirements pathNodeRequirements; // Offset: 64
    keen::ecs::PathWalkerTurnSettings turnSettings; // Offset: 68
};

struct ecs.DynamicPathWalker {
    keen::float3 targetPosition; // Offset: 0
    keen::uint32 upateCounter; // Offset: 12
    keen::uint32 pathIndex; // Offset: 16
    keen::ecs::PathWalkerState state; // Offset: 20
    keen::float3 lookAtTarget; // Offset: 24
    keen::bool lookAtMovementTarget; // Offset: 36
    keen::bool setDesiredWorldLookDirection; // Offset: 37
    keen::uint32 keepDistance; // Offset: 40
    keen::ecs::PathGridDistance horizontalSearchRadius; // Offset: 44
    keen::ecs::PathGridDistance verticalSearchRadius; // Offset: 48
    keen::float32 maxArriveWaypointDistance; // Offset: 52
    keen::float32 maxArriveTargetDistance; // Offset: 56
    keen::bool shouldOverrideMinArriveDistance; // Offset: 60
    keen::float32 overrideMinArriveDistance; // Offset: 64
    keen::bool shouldOverrideMinTurnDistance; // Offset: 68
    keen::float32 overrideMinTurnDistance; // Offset: 72
    keen::Time stuckTime; // Offset: 80
    keen::bool keepLastResults; // Offset: 88
    keen::ecs::PathQueryCheck pathQueryCheck; // Offset: 89
    keen::ecs::EntityId freePathCheckIgnoreEntityId; // Offset: 92
    keen::ecs::PathGridDistance minHorizontalSpace; // Offset: 96
    keen::ecs::PathGridDistance minVerticalSpace; // Offset: 100
    keen::Time standingDuration; // Offset: 104
    keen::Time walkingDuration; // Offset: 112
    keen::float32 maxTargetNodeDistance; // Offset: 120
    keen::uint32 maxWalkDistance; // Offset: 124
    keen::ecs::PathQueryTargetType targetType; // Offset: 128
    keen::float32 closestWaypointSquareDistance; // Offset: 132
    keen::uint32 maxIterations; // Offset: 136
    keen::float32 currentPathLengthToTarget; // Offset: 140
    keen::float2 horizontalKeepDistanceDirection; // Offset: 144
    keen::float3 freePathCheckPosition; // Offset: 152
    keen::float3 lastReachedTarget; // Offset: 164
    keen::bool isWalkingActive; // Offset: 176
    keen::bool enableAdditionalSpaceSearch; // Offset: 177
    keen::bool enableJumpUp; // Offset: 178
    keen::bool enableJumpDown; // Offset: 179
    keen::bool canOpenDoors; // Offset: 180
    keen::uint8 maxJumpUpHeight; // Offset: 181
    keen::uint8 maxJumpDownHeight; // Offset: 182
    keen::Time lastEnforceUpdateTime; // Offset: 184
    keen::bool useTurnSequences; // Offset: 192
    keen::actor::SequenceRuntimeId turnSequenceId; // Offset: 200
    keen::actor::SequenceRuntimeId teleportSequenceId; // Offset: 224
    keen::actor::SequenceRuntimeId openDoorSequenceId; // Offset: 248
    keen::ecs::PathGridDistance minTargetHorizontalSpace; // Offset: 272
    keen::bool enableTeleportMovement; // Offset: 276
    keen::bool ignoreWalkableColliders; // Offset: 277
    keen::ecs::PathNodeCostFactors pathNodeCostFactors; // Offset: 280
    keen::float32 horizontalDistanceCostFactor; // Offset: 332
    keen::bool checkFreePathToTarget; // Offset: 336
    keen::ecs::PathNodeRequirements pathNodeRequirementsOverride; // Offset: 338
    keen::bool useNodeRequirementsOverride; // Offset: 342
    keen::bool ignoreMovingObjects; // Offset: 343
    keen::bool tryToReachTargetAsCloseAsPossible; // Offset: 344
    keen::bool ignoreNodesCloseToHole; // Offset: 345
};

enum class ecs.PathGridInteractionObjectType {
    Door = 0,
    MovingObject = 1,
};

struct ecs.PathGridInteraction {
    keen::ecs::PathGridInteractionObjectType interactionObjectType; // Offset: 0
};

struct ecs.DynamicPathGridInteraction {
    keen::bool isRegistered; // Offset: 0
};

struct ecs.PathFinderTester {
};

enum class ecs.PathFindingMarkerType {
    Start = 0,
    Target = 1,
};

enum class ecs.PathFindingMarkerTestMode {
    PathFound = 0,
    NoPathFound = 1,
};

enum class ecs.PathFindingMarkerTestState {
    NotStarted = 0,
    Running = 1,
    Finished = 2,
    Failed = 3,
};

struct ecs.PathFindingTestMarker {
    keen::ecs::PathFindingMarkerType type; // Offset: 0
    keen::ecs::PathFindingMarkerTestMode testMode; // Offset: 1
    keen::ecs::PathFindingMarkerTestState state; // Offset: 2
    keen::ecs::PathQueryId queryId; // Offset: 4
};

struct PerkDamageModifier {
    keen::impact::DamageDistribution distribution; // Offset: 0
    keen::bool isSet; // Offset: 52
};

enum class PerkConfig {
    MaxPerksPerItem = 5,
};

struct Perk {
    keen::NameLocaTag name; // Offset: 0
    keen::DescriptionLocaTag description; // Offset: 16
    keen::UiTexture icon; // Offset: 32
    keen::ImpactProgramReference impact; // Offset: 80
    keen::bool simpleAttributeBuff; // Offset: 96
    keen::BlobArray<keen::ImpactUiValue> uiValues; // Offset: 100
    keen::impact::Configurations impactValues; // Offset: 108
    keen::PerkDamageModifier damageModifier; // Offset: 116
    keen::ItemArmorSetup perkArmorSetup; // Offset: 172
    keen::string debugName; // Offset: 212
};

struct PerkSubDirectory {
};

struct PerkDirectory {
};

struct PerkCollectionResource {
    keen::BlobArray<keen::PerkReference> perks; // Offset: 0
};

enum class RecipeLevelRequirement {
    None = 0,
    LevelEqual = 1,
    LevelGreaterOrEqual = 2,
};

struct RecipeItemStack {
    keen::ItemReference item; // Offset: 0
    keen::uint32 count; // Offset: 16
};

struct RecipeInputList {
};

struct RecipeOutputList {
};

struct RequiredProp {
    keen::ObjectReference<keen::CraftingPropDefinition> craftingProp; // Offset: 0
};

struct Recipe {
    keen::NameLocaTag name; // Offset: 0
    keen::DescriptionLocaTag description; // Offset: 16
    keen::LoreLocaTag lore; // Offset: 32
    keen::bool showIsNewLabel; // Offset: 48
    keen::bool useCustomCompletionRequirement; // Offset: 49
    keen::GameKnowledgeRequirement completionRequirement; // Offset: 52
    keen::bool requiresSheltered; // Offset: 156
    keen::ObjectReference<keen::WorkshopDefinition> workshopReference; // Offset: 160
    keen::RecipeLevelRequirement levelRequirement; // Offset: 176
    keen::uint32 level; // Offset: 180
    keen::RecipeLevelRequirement comfortLevelRequirement; // Offset: 184
    keen::uint32 comfortLevel; // Offset: 188
    keen::RecipeLevelRequirement serverProgressLevelRequirement; // Offset: 192
    keen::uint32 serverProgressLevel; // Offset: 196
    keen::uint32 requiredHappyNpcCount; // Offset: 200
    keen::uint32 requiredEnergy; // Offset: 204
    keen::Time craftingDuration; // Offset: 208
    keen::bool isUpgrade; // Offset: 216
};

struct RecipeList {
    keen::ObjectReference<keen::CraftingWorkshopDirectory> workshopDirectory; // Offset: 0
};

struct RecipeInfo {
    keen::RecipeId recipeId; // Offset: 0
    keen::WorkshopId workshopId; // Offset: 4
    keen::BlobArray<keen::RecipeItemStackResource> input; // Offset: 8
    keen::BlobArray<keen::RecipeItemStackResource> output; // Offset: 16
    keen::bool requiresSheltered; // Offset: 24
    keen::bool showIsImportantLabel; // Offset: 25
    keen::RecipeLevelRequirement levelRequirement; // Offset: 26
    keen::uint32 level; // Offset: 28
    keen::RecipeLevelRequirement comfortLevelRequirement; // Offset: 32
    keen::uint32 comfortLevel; // Offset: 36
    keen::RecipeLevelRequirement serverProgressLevelRequirement; // Offset: 40
    keen::uint32 serverProgressLevel; // Offset: 44
    keen::uint32 requiredHappyNpcCount; // Offset: 48
    keen::uint32 requiredEnergy; // Offset: 52
    keen::Time craftingDuration; // Offset: 56
    keen::bool isCookingRecipe; // Offset: 64
    keen::bool isUpgrade; // Offset: 65
    keen::BlobArray<keen::CraftingPropId> requiredProps; // Offset: 68
    keen::CraftingPropMask requiredPropsMask; // Offset: 80
    keen::KnowledgeId knowledgeRequirement; // Offset: 88
    keen::KnowledgeId recipeInspectedKnowledgeId; // Offset: 92
    keen::KnowledgeId recipeCraftedKnowledgeId; // Offset: 96
    keen::KnowledgeId completionRequirementId; // Offset: 100
    keen::NameLocaTag recipeName; // Offset: 104
    keen::BlobString debugName; // Offset: 120
};

struct RecipeRegistryResource {
    keen::BlobArray<keen::RecipeInfo> recipes; // Offset: 0
};

typedef keen::HashKey32 SkillNodeLinkId;

struct ecs.SkillIdComponent {
    keen::SkillNodeId skillId; // Offset: 0
};

enum class SkillNodeType {
    Root = 0,
    Attribute = 1,
    ActiveSkill = 2,
    PassiveSkill = 3,
    MartyrSkill = 4,
};

enum class ClassType {
    Warrior = 0,
    Mage = 1,
    Ranger = 2,
    Neutral = 3,
};

struct SkillTreeNodeLink {
    keen::SkillNodeLinkId id; // Offset: 0
    keen::SkillNodeId sourceNode; // Offset: 4
    keen::SkillNodeId targetNode; // Offset: 8
    keen::bool isBidirectional; // Offset: 12
};

struct SkillTreeNode {
    keen::SkillNodeId id; // Offset: 0
    keen::SkillNodeType type; // Offset: 4
    keen::float2 uiPosition; // Offset: 8
    keen::uint16 costs; // Offset: 16
    keen::LocaTagId name; // Offset: 20
    keen::LocaTagId description; // Offset: 24
    keen::ClassType classAlignment; // Offset: 28
    keen::ItemReference activeSkillUnlockRef; // Offset: 32
    keen::ItemId activeSkillUnlock; // Offset: 48
    keen::UiTexture iconInactive; // Offset: 52
    keen::UiTexture iconActive; // Offset: 100
    keen::ImpactProgramReference impactReference; // Offset: 148
    keen::BlobArray<keen::ImpactUiValue> uiValues; // Offset: 164
    keen::impact::Configurations configValues; // Offset: 172
    keen::bool isDeactivatedForEarlyAccess; // Offset: 180
    keen::BlobArray<keen::SkillNodeLinkId> incomingLinks; // Offset: 184
    keen::BlobArray<keen::SkillNodeLinkId> outgoingLinks; // Offset: 192
};

typedef keen::ObjectReference<keen::SkillTreeNode> SkillTreeNodeReference;

struct SkillTreeResource {
    keen::BlobArray<keen::SkillTreeNode> nodes; // Offset: 0
    keen::BlobArray<keen::SkillTreeNodeLink> links; // Offset: 8
};

struct SkillTreeDefinition {
};

struct skilltree_nodes.Node {
    keen::Vector2 uiPosition; // Offset: 0
    keen::NameLocaTag name; // Offset: 8
    keen::DescriptionLocaTag description; // Offset: 24
    keen::ImageReference iconInactive; // Offset: 40
    keen::ImageReference iconActive; // Offset: 56
    keen::uint16 costs; // Offset: 72
    keen::ClassType classAlignment; // Offset: 74
    keen::bool isDeactivatedForEarlyAccess; // Offset: 75
};

struct skilltree_nodes.StartingNode {
};

struct skilltree_nodes.AbilityNode {
    keen::ItemReference abilityItem; // Offset: 76
    keen::ImpactProgramReference impactReference; // Offset: 92
    keen::impact::Configurations configValues; // Offset: 108
};

struct skilltree_nodes.AttributeNode {
    keen::ImpactProgramReference impactReference; // Offset: 76
    keen::impact::Configurations configValues; // Offset: 92
};

struct skilltree_nodes.PassiveNode {
    keen::ImpactProgramReference impactReference; // Offset: 76
    keen::impact::Configurations configValues; // Offset: 92
};

struct skilltree_nodes.MartyrNode {
    keen::ImpactProgramReference impactReference; // Offset: 76
    keen::impact::Configurations configValues; // Offset: 92
};

struct skilltree_nodes.SkillTreeLink {
    keen::skilltree_nodes::NodeReference startNode; // Offset: 0
    keen::BlobString startElementName; // Offset: 16
    keen::skilltree_nodes::NodeReference endNode; // Offset: 24
};

struct ecs.SteeringLocomotion {
    keen::bool setRotationFlag; // Offset: 0
    keen::bool clearVelocity; // Offset: 1
    keen::bool slowDownIfMovementAngleIsTooBig; // Offset: 2
    keen::float32 maxRunAngle; // Offset: 4
    keen::float32 maxMovementAngle; // Offset: 8
    keen::bool isCloseToHole; // Offset: 12
    keen::Time lastHookedTime; // Offset: 16
};

struct ecs.SteeringAgent {
    keen::ecs::RangeQueryId queryId; // Offset: 0
    keen::bool active; // Offset: 4
    keen::float3 desiredVelocity; // Offset: 8
    keen::float32 currentVelocityWeight; // Offset: 20
    keen::float32 desiredVelocityWeight; // Offset: 24
    keen::float3 velocity; // Offset: 28
    keen::float32 maxSpeed; // Offset: 40
    keen::float32 maxForce; // Offset: 44
    keen::float32 maxAcceleration; // Offset: 48
    keen::float32 mass; // Offset: 52
    keen::float32 separationRange; // Offset: 56
    keen::uint8 priority; // Offset: 60
    keen::ecs::EntityId ignoredEntity; // Offset: 64
};

struct ecs.SteeringBehavior {
    keen::float3 steeringForce; // Offset: 0
};

struct ecs.SteeringBehavior_Seek {
};

struct ecs.SteeringBehavior_Flee {
    keen::float32 viewConeHalfAngle; // Offset: 12
    keen::float32 fleeRadius; // Offset: 16
    keen::bool checkViewCone; // Offset: 20
};

struct ecs.SteeringBehavior_Separation {
    keen::bool enabled; // Offset: 12
    keen::Time forceActiveDuration; // Offset: 16
};

struct ecs.SteeringBehavior_LookAhead {
    keen::Time lastQueryTime; // Offset: 16
    keen::Angle lookAheadAngle; // Offset: 24
    keen::float lookAheadDistance; // Offset: 28
};

struct ecs.SteeringBehavior_ObstacleAvoidance {
    keen::ecs::QueryId queryId; // Offset: 12
    keen::Time lastCheckTime; // Offset: 16
    keen::float32 minHeightDiff; // Offset: 24
};

struct ecs.SteeringBehavior_Cohesion {
};

struct ecs.SteeringBehavior_Alignment {
};

struct ecs.SteeringAnimator {
    keen::animationgraph::StateIdReference idleAnimation; // Offset: 0
    keen::animationgraph::StateIdReference walkAnimation; // Offset: 16
};

struct ToolTerraformingEfficiency {
    keen::ItemReference toolItem; // Offset: 0
    keen::float32 efficiency; // Offset: 16
};

struct ConditionalVoxelMaterialBuffType {
    keen::float minSubmergePercentage; // Offset: 0
    keen::BuffTypeReference buffType; // Offset: 4
};

typedef keen::uint8 TerrainMaterialType;

struct TerrainMaterialId {
    keen::TerrainMaterialType value; // Offset: 0
};

struct TerrainTerraformingConfig {
    keen::TerrainMaterialId terrainMaterial; // Offset: 0
    keen::ItemReference terrainItem; // Offset: 4
    keen::HardnessCategory hardness; // Offset: 20
    keen::uint32 terrainPerLootItemExchangeRate; // Offset: 24
    keen::sint32 healthPoints; // Offset: 28
    keen::bool canBeFlattened; // Offset: 32
    keen::bool isSlidingMaterial; // Offset: 33
    keen::Guid experienceGainGuid; // Offset: 36
    keen::CollisionFeedbackMaterialReference collisionFeedbackMaterial; // Offset: 52
    keen::PropDamageSusceptibility damageSusceptibility; // Offset: 68
    keen::BuffTypeReference buffReference; // Offset: 72
    keen::BlobArray<keen::ConditionalVoxelMaterialBuffType> conditionalBuffTypes; // Offset: 88
    keen::bool isDangerous; // Offset: 96
    keen::float frictionFactor; // Offset: 100
    keen::float maxSubmergeDepth; // Offset: 104
    keen::float minSubmergePercentage; // Offset: 108
    keen::float maxSubmergePercentage; // Offset: 112
    keen::Guid entityTag; // Offset: 116
    keen::ecs::PathNodeType pathNodeType; // Offset: 132
};

typedef keen::uint8 BuildingMaterialType;

struct BuildingMaterialId {
    keen::BuildingMaterialType value; // Offset: 0
};

struct BuildingTerraformingConfig {
    keen::BuildingMaterialId buildingMaterial; // Offset: 0
    keen::ItemReference materialItem; // Offset: 4
    keen::HardnessCategory hardness; // Offset: 20
    keen::uint32 blocksPerLootItemExchangeRate; // Offset: 24
    keen::sint32 healthPoints; // Offset: 28
    keen::KnowledgeId knowledgeId; // Offset: 32
    keen::Guid experienceGainGuid; // Offset: 36
    keen::CollisionFeedbackMaterialReference collisionFeedbackMaterial; // Offset: 52
    keen::PropDamageSusceptibility damageSusceptibility; // Offset: 68
    keen::BuffTypeReference buffReference; // Offset: 72
    keen::BlobArray<keen::ConditionalVoxelMaterialBuffType> conditionalBuffTypes; // Offset: 88
    keen::bool isDangerous; // Offset: 96
    keen::float frictionFactor; // Offset: 100
    keen::float maxSubmergeDepth; // Offset: 104
    keen::float minSubmergePercentage; // Offset: 108
    keen::float maxSubmergePercentage; // Offset: 112
    keen::Guid entityTag; // Offset: 116
    keen::ecs::PathNodeType pathNodeType; // Offset: 132
};

struct TerraformingEfficiencyRegistryResource {
    keen::BlobArray<keen::TerrainTerraformingConfig> terrainConfigs; // Offset: 0
    keen::BlobArray<keen::BuildingTerraformingConfig> buildingConfigs; // Offset: 8
};

typedef keen::HashKey32 TwitchDropId;

struct TwitchDropItem {
    keen::ItemReference item; // Offset: 0
};

struct TwitchDrop {
};

struct TwitchDropSubDirectory {
};

struct TwitchDropDirectory {
};

struct TwitchDropResource {
    keen::TwitchDropId dropId; // Offset: 0
    keen::BlobArray<keen::ItemId> items; // Offset: 4
    keen::BlobArray<keen::ItemReference> itemRefs; // Offset: 12
    keen::string debugName; // Offset: 20
    keen::Guid debugId; // Offset: 28
};

struct TwitchDropCollection {
    keen::BlobArray<keen::TwitchDropResource> drops; // Offset: 0
};

typedef keen::HashKey32 VoxelBlueprintId;

typedef keen::HashKey32 VoxelBlueprintMaterialPoolId;

struct VoxelSnappingRule {
    keen::BlobArray<keen::ObjectReference<keen::VoxelBlueprintConfig>> snappingTargets; // Offset: 0
    keen::BlobArray<keen::ObjectReference<keen::VoxelBlueprintConfig>> excludeSnappingTargets; // Offset: 8
    keen::uint8 maxHorizontalDistance; // Offset: 16
    keen::uint8 maxVerticalDistance; // Offset: 17
    keen::bool snapHorizontally; // Offset: 18
    keen::bool snapVertically; // Offset: 19
    keen::bool aboveAdjacent; // Offset: 20
    keen::bool aboveEnclosing; // Offset: 21
    keen::bool belowAdjacent; // Offset: 22
    keen::bool belowEnclosing; // Offset: 23
    keen::bool directionalHorizontalSnapping; // Offset: 24
    keen::bool sideAdjacent; // Offset: 25
    keen::bool sideEnclosing; // Offset: 26
    keen::bool lenghtwiseAdjacent; // Offset: 27
    keen::bool lenghtwiseEnclosing; // Offset: 28
    keen::bool crosswiseAdjacent; // Offset: 29
    keen::bool crosswiseEnclosing; // Offset: 30
    keen::BlobString debugName; // Offset: 32
};

struct VoxelBlueprintMaterial {
    keen::ObjectReference<keen::ItemInfo> materialItem; // Offset: 0
};

struct VoxelBlueprintConfigSnapping {
    keen::BlobArray<keen::VoxelSnappingRule> rules; // Offset: 0
};

struct VoxelBlueprintMaterialPool {
    keen::EquipmentSlot equipmentSlot; // Offset: 0
    keen::VoxelBlueprintMaterialPoolId poolId; // Offset: 4
    keen::BlobArray<keen::ItemId> materials; // Offset: 8
    keen::BlobString debugName; // Offset: 16
};

struct VoxelBlueprintConfig {
    keen::VoxelBlueprintConfigSnapping snappingConfig; // Offset: 0
    keen::BlobString debugName; // Offset: 8
};

struct VoxelBlueprintRegistryFolder {
};

struct VoxelBlueprintMaterialPoolRegistryFolder {
};

struct VoxelBlueprintMaterialPoolRegistryResource {
    keen::BlobArray<keen::VoxelBlueprintMaterialPool> materialPools; // Offset: 0
};

enum class VoxelScatterImageMode {
    HigherThan = 0,
    SurfaceMaterial = 1,
    AboveFog = 2,
};

enum class VoxelScatterImageContentPass {
    ManualPois = 0,
    LargeStamps = 1,
    PrioPois = 2,
    FillPois = 3,
    DecoStamps = 4,
    Enemies = 5,
    Final = 6,
};

struct AbstractScatterImage {
};

struct VoxelScatterImage {
    keen::ObjectReference<keen::Scene> scene; // Offset: 0
    keen::VoxelScatterImageContentPass contentPass; // Offset: 16
    keen::uint32 upscaleFactor; // Offset: 20
    keen::VoxelScatterImageMode mode; // Offset: 24
    keen::float32 referenceHeight; // Offset: 28
    keen::ObjectReference<keen::SolidVoxelMaterial> referenceMaterial; // Offset: 32
};

enum class ecs.GameSettingsVersion {
    V_0 = 0,
    V_1 = 1,
    V_2 = 2,
    V_3 = 3,
    V_4_HungerDuration = 4,
    V_5_EnumStrings = 5,
    V_6_PlayerBodyHeat = 6,
    V_7_GliderTurbulences = 7,
    V_8_WeatherFrequency = 8,
    V_9_TamingStartleRepercussion = 9,
};

struct ecs.GameSettingsPresetConfig {
    keen::ecs::GameSettingsPreset presetId; // Offset: 0
    keen::ecs::GameSettings settings; // Offset: 8
};

struct GameSettingsPresetsResource {
    keen::ecs::GameSettings minValues; // Offset: 0
    keen::ecs::GameSettings maxValues; // Offset: 128
    keen::BlobArray<keen::ecs::GameSettingsPresetConfig> presets; // Offset: 256
};

enum class G38TestState {
    Invalid = 0,
    Setup = 1,
    Running = 2,
    Cleanup = 3,
    Finished = 4,
};

struct G38TestResult {
    keen::string name; // Offset: 0
    keen::string program; // Offset: 8
    keen::Time duration; // Offset: 16
    keen::ErrorId error; // Offset: 24
};

struct G38TestSummary {
    keen::uint32 count; // Offset: 0
    keen::uint32 failed; // Offset: 4
};

struct G38TestReport {
    keen::CalendarTimeStamp date; // Offset: 0
    keen::G38TestSummary summary; // Offset: 8
    keen::BlobArray<keen::G38TestResult> testResults; // Offset: 16
};

typedef keen::LocaTagReference UiLocaTagReference;

struct FbUiLocaCraftingWorkshops {
    keen::UiLocaTagReference player; // Offset: 0
    keen::UiLocaTagReference alchemist; // Offset: 16
    keen::UiLocaTagReference blacksmith; // Offset: 32
    keen::UiLocaTagReference carpenter; // Offset: 48
    keen::UiLocaTagReference workbench; // Offset: 64
    keen::UiLocaTagReference grindingWheel; // Offset: 80
    keen::UiLocaTagReference oven; // Offset: 96
    keen::UiLocaTagReference campfireBarbecue; // Offset: 112
    keen::UiLocaTagReference anvil; // Offset: 128
    keen::UiLocaTagReference distillery; // Offset: 144
    keen::UiLocaTagReference furnace; // Offset: 160
    keen::UiLocaTagReference mortar; // Offset: 176
    keen::UiLocaTagReference sketches; // Offset: 192
    keen::UiLocaTagReference flameAltar; // Offset: 208
};

struct FbUiLocaCraftingCategories {
    keen::UiLocaTagReference untaggedRecipeSet; // Offset: 0
    keen::UiLocaTagReference customization; // Offset: 16
    keen::UiLocaTagReference equipment; // Offset: 32
    keen::UiLocaTagReference weapons; // Offset: 48
    keen::UiLocaTagReference tools; // Offset: 64
    keen::UiLocaTagReference buildTools; // Offset: 80
    keen::UiLocaTagReference consumables; // Offset: 96
    keen::UiLocaTagReference ammunition; // Offset: 112
    keen::UiLocaTagReference materials; // Offset: 128
    keen::UiLocaTagReference blueprints; // Offset: 144
    keen::UiLocaTagReference currency; // Offset: 160
    keen::UiLocaTagReference collectible; // Offset: 176
    keen::UiLocaTagReference genericItem; // Offset: 192
};

struct FbUiLocaCrafting {
    keen::FbUiLocaCraftingWorkshops workshops; // Offset: 0
    keen::FbUiLocaCraftingCategories categories; // Offset: 224
    keen::UiLocaTagReference browserPinned; // Offset: 432
    keen::UiLocaTagReference toggleDirectoryFilter; // Offset: 448
    keen::UiLocaTagReference itemViewerNoRecipeHint; // Offset: 464
    keen::UiLocaTagReference requirementHeader; // Offset: 480
    keen::UiLocaTagReference ingredientsHeader; // Offset: 496
    keen::UiLocaTagReference emptyMenuHintShort; // Offset: 512
    keen::UiLocaTagReference emptyMenuHintLong; // Offset: 528
    keen::UiLocaTagReference automatedCraftingStatusWaiting; // Offset: 544
    keen::UiLocaTagReference automatedCraftingStatusRunning; // Offset: 560
    keen::UiLocaTagReference automatedCraftingStatusPaused; // Offset: 576
    keen::UiLocaTagReference automatedCraftingInsufficientMaterials; // Offset: 592
    keen::UiLocaTagReference automatedCraftingAmountCraftableStacks; // Offset: 608
    keen::UiLocaTagReference automatedCraftingStart; // Offset: 624
    keen::UiLocaTagReference automatedCraftingResume; // Offset: 640
    keen::UiLocaTagReference automatedCraftingStop; // Offset: 656
    keen::UiLocaTagReference automatedCraftingStopUnavailable; // Offset: 672
    keen::UiLocaTagReference automatedCraftingPaused; // Offset: 688
    keen::UiLocaTagReference automatedCraftingIdle; // Offset: 704
    keen::UiLocaTagReference automatedCraftingWorking; // Offset: 720
    keen::UiLocaTagReference automatedCraftingStorageFull; // Offset: 736
    keen::UiLocaTagReference automatedCraftingQueued; // Offset: 752
    keen::UiLocaTagReference automatedCraftingInsufficientMaterialsHint; // Offset: 768
    keen::UiLocaTagReference automatedCraftingStorageFullHint; // Offset: 784
    keen::UiLocaTagReference automatedCraftingSourceMaterials; // Offset: 800
    keen::UiLocaTagReference changeRecipeHint; // Offset: 816
    keen::UiLocaTagReference factoryNoRecipesAvailable; // Offset: 832
    keen::UiLocaTagReference factoryMagicChestNoRecipesAvailable; // Offset: 848
    keen::UiLocaTagReference factoryShowCurrentProduction; // Offset: 864
    keen::UiLocaTagReference craftingItemInInventory; // Offset: 880
    keen::UiLocaTagReference noUpgradableItems; // Offset: 896
    keen::UiLocaTagReference noIngredientMissing; // Offset: 912
    keen::UiLocaTagReference ingredientsMissing; // Offset: 928
    keen::UiLocaTagReference ingredientsNeeds; // Offset: 944
    keen::UiLocaTagReference availableOutputs; // Offset: 960
    keen::UiLocaTagReference selected; // Offset: 976
    keen::UiLocaTagReference recipeViewerTabIngredients; // Offset: 992
    keen::UiLocaTagReference recipeViewerTabRecipe; // Offset: 1008
    keen::UiLocaTagReference recipeViewerTabItem; // Offset: 1024
};

struct FbUiLocaItemEquipmentSlots {
    keen::UiLocaTagReference armourHead; // Offset: 0
    keen::UiLocaTagReference armourUpperBody; // Offset: 16
    keen::UiLocaTagReference armourArms; // Offset: 32
    keen::UiLocaTagReference armourLowerBody; // Offset: 48
    keen::UiLocaTagReference armourFeet; // Offset: 64
    keen::UiLocaTagReference armourAccessory; // Offset: 80
    keen::UiLocaTagReference armourRing; // Offset: 96
    keen::UiLocaTagReference armourShield; // Offset: 112
    keen::UiLocaTagReference vanityHead; // Offset: 128
    keen::UiLocaTagReference vanityUpperBody; // Offset: 144
    keen::UiLocaTagReference vanityArms; // Offset: 160
    keen::UiLocaTagReference vanityLowerBody; // Offset: 176
    keen::UiLocaTagReference vanityFeet; // Offset: 192
    keen::UiLocaTagReference hookshot; // Offset: 208
    keen::UiLocaTagReference glider; // Offset: 224
    keen::UiLocaTagReference meleeWeapon; // Offset: 240
    keen::UiLocaTagReference midRangeWeapon; // Offset: 256
    keen::UiLocaTagReference rangedWeapon; // Offset: 272
    keen::UiLocaTagReference arrow; // Offset: 288
    keen::UiLocaTagReference spell; // Offset: 304
    keen::UiLocaTagReference backpackExtender; // Offset: 320
};

struct FbUiLocaPunctuations {
    keen::LocaTag plusSign; // Offset: 0
    keen::LocaTag minusSign; // Offset: 16
    keen::LocaTag multiplySign; // Offset: 32
    keen::UiLocaTagReference decimalSeparator; // Offset: 48
    keen::UiLocaTagReference thousandsSeparator; // Offset: 64
    keen::LocaTag exclamationMark; // Offset: 80
    keen::LocaTag questionMark; // Offset: 96
    keen::LocaTag questionMarkTriple; // Offset: 112
    keen::LocaTag bulletDot; // Offset: 128
    keen::LocaTag emDash; // Offset: 144
    keen::UiLocaTagReference action1AndAction2; // Offset: 160
};

struct FbUiLocaGeneric {
    keen::UiLocaTagReference timeUnitsAbbreviations; // Offset: 0
    keen::UiLocaTagReference milliseconds; // Offset: 16
    keen::UiLocaTagReference inactiveState; // Offset: 32
};

struct FbUiLocaInput {
    keen::UiLocaTagReference unassigned; // Offset: 0
    keen::UiLocaTagReference invalidStick; // Offset: 16
    keen::UiLocaTagReference leftMouseButton; // Offset: 32
    keen::UiLocaTagReference rightMouseButton; // Offset: 48
    keen::UiLocaTagReference middleMouseButton; // Offset: 64
    keen::UiLocaTagReference mouse4; // Offset: 80
    keen::UiLocaTagReference mouse5; // Offset: 96
    keen::UiLocaTagReference mouseWheelLeft; // Offset: 112
    keen::UiLocaTagReference mouseWheelRight; // Offset: 128
    keen::UiLocaTagReference mouseWheelUp; // Offset: 144
    keen::UiLocaTagReference mouseWheelDown; // Offset: 160
    keen::UiLocaTagReference mouseMoveLeft; // Offset: 176
    keen::UiLocaTagReference mouseMoveRight; // Offset: 192
    keen::UiLocaTagReference mouseMoveUp; // Offset: 208
    keen::UiLocaTagReference mouseMoveDown; // Offset: 224
};

struct FbUiLocaAttributeInfo {
    keen::UiLocaTagReference label; // Offset: 0
    keen::UiLocaTagReference alternativeLabel; // Offset: 16
    keen::UiLocaTagReference tooltip; // Offset: 32
    keen::float32 impliedBaseMultiplier; // Offset: 48
    keen::float32 relativeToValue; // Offset: 52
};

struct FbUiLocaAttributes {
    keen::UiLocaTagReference attributeMenuHeader; // Offset: 0
    keen::UiLocaTagReference subTabBasics; // Offset: 16
    keen::UiLocaTagReference groupFoundation; // Offset: 32
    keen::UiLocaTagReference groupPrimary; // Offset: 48
    keen::UiLocaTagReference groupSecondary; // Offset: 64
    keen::UiLocaTagReference groupVital; // Offset: 80
    keen::UiLocaTagReference groupCombat; // Offset: 96
    keen::UiLocaTagReference groupFogSurvival; // Offset: 112
    keen::UiLocaTagReference groupMain; // Offset: 128
    keen::UiLocaTagReference groupRegeneration; // Offset: 144
    keen::UiLocaTagReference groupProtection; // Offset: 160
    keen::UiLocaTagReference groupMovement; // Offset: 176
    keen::UiLocaTagReference groupDamage; // Offset: 192
    keen::UiLocaTagReference groupWeaponDamage; // Offset: 208
    keen::UiLocaTagReference groupEnemyDamage; // Offset: 224
    keen::UiLocaTagReference groupMisc; // Offset: 240
    keen::UiLocaTagReference valueExplainer; // Offset: 256
    keen::UiLocaTagReference valueExplainerWithBuff; // Offset: 272
    keen::FbUiLocaAttributeInfo health; // Offset: 288
    keen::FbUiLocaAttributeInfo mana; // Offset: 344
    keen::FbUiLocaAttributeInfo stamina; // Offset: 400
    keen::FbUiLocaAttributeInfo fogResistance; // Offset: 456
    keen::FbUiLocaAttributeInfo fogResistanceDuration; // Offset: 512
    keen::FbUiLocaAttributeInfo fogResistanceDurationMax; // Offset: 568
    keen::FbUiLocaAttributeInfo freezeResistance; // Offset: 624
    keen::FbUiLocaAttributeInfo bodyHeat; // Offset: 680
    keen::FbUiLocaAttributeInfo strength; // Offset: 736
    keen::FbUiLocaAttributeInfo dexterity; // Offset: 792
    keen::FbUiLocaAttributeInfo intelligence; // Offset: 848
    keen::FbUiLocaAttributeInfo constitution; // Offset: 904
    keen::FbUiLocaAttributeInfo endurance; // Offset: 960
    keen::FbUiLocaAttributeInfo spirit; // Offset: 1016
    keen::FbUiLocaAttributeInfo healthRegeneration; // Offset: 1072
    keen::FbUiLocaAttributeInfo healthRegenerationDelay; // Offset: 1128
    keen::FbUiLocaAttributeInfo manaRegeneration; // Offset: 1184
    keen::FbUiLocaAttributeInfo manaRegenerationDelay; // Offset: 1240
    keen::FbUiLocaAttributeInfo staminaRegeneration; // Offset: 1296
    keen::FbUiLocaAttributeInfo staminaRegenerationDelay; // Offset: 1352
    keen::FbUiLocaAttributeInfo bodyHeatRegeneration; // Offset: 1408
    keen::FbUiLocaAttributeInfo bodyHeatRegenerationDelay; // Offset: 1464
    keen::FbUiLocaAttributeInfo baseMovementSpeed; // Offset: 1520
    keen::FbUiLocaAttributeInfo sprintMovementSpeed; // Offset: 1576
    keen::FbUiLocaAttributeInfo sneakMovementSpeed; // Offset: 1632
    keen::FbUiLocaAttributeInfo critChanceMelee; // Offset: 1688
    keen::FbUiLocaAttributeInfo critChanceMagical; // Offset: 1744
    keen::FbUiLocaAttributeInfo critChanceRanged; // Offset: 1800
    keen::FbUiLocaAttributeInfo skillShotDamage; // Offset: 1856
    keen::FbUiLocaAttributeInfo staffDamage; // Offset: 1912
    keen::FbUiLocaAttributeInfo wandDamage; // Offset: 1968
    keen::FbUiLocaAttributeInfo oneHandDamage; // Offset: 2024
    keen::FbUiLocaAttributeInfo daggerDamage; // Offset: 2080
    keen::FbUiLocaAttributeInfo twoHandDamage; // Offset: 2136
    keen::FbUiLocaAttributeInfo bowDamage; // Offset: 2192
    keen::FbUiLocaAttributeInfo throwableDamage; // Offset: 2248
    keen::FbUiLocaAttributeInfo unarmedDamage; // Offset: 2304
    keen::FbUiLocaAttributeInfo foeMagicalDamage; // Offset: 2360
    keen::FbUiLocaAttributeInfo foeMeleeDamage; // Offset: 2416
    keen::FbUiLocaAttributeInfo foeRangedDamage; // Offset: 2472
    keen::FbUiLocaAttributeInfo foeFlyingDamage; // Offset: 2528
    keen::FbUiLocaAttributeInfo foeSkeletonDamage; // Offset: 2584
    keen::FbUiLocaAttributeInfo healing; // Offset: 2640
    keen::FbUiLocaAttributeInfo reviveDuration; // Offset: 2696
    keen::FbUiLocaAttributeInfo reviveHealth; // Offset: 2752
    keen::FbUiLocaAttributeInfo lifeSteal; // Offset: 2808
    keen::FbUiLocaAttributeInfo restedDurationBonus; // Offset: 2864
    keen::FbUiLocaAttributeInfo offenseBackstab; // Offset: 2920
    keen::FbUiLocaAttributeInfo offenseCritical; // Offset: 2976
    keen::FbUiLocaAttributeInfo offenseCritChance; // Offset: 3032
    keen::FbUiLocaAttributeInfo damageMelee; // Offset: 3088
    keen::FbUiLocaAttributeInfo damageSpell; // Offset: 3144
    keen::FbUiLocaAttributeInfo damageRanged; // Offset: 3200
    keen::FbUiLocaAttributeInfo blockAttribute; // Offset: 3256
    keen::FbUiLocaAttributeInfo parryAttribute; // Offset: 3312
    keen::FbUiLocaAttributeInfo resistancePhysical; // Offset: 3368
    keen::FbUiLocaAttributeInfo resistancePhysicalCut; // Offset: 3424
    keen::FbUiLocaAttributeInfo resistancePhysicalPierce; // Offset: 3480
    keen::FbUiLocaAttributeInfo resistancePhysicalBlunt; // Offset: 3536
    keen::FbUiLocaAttributeInfo resistanceMagical; // Offset: 3592
    keen::FbUiLocaAttributeInfo resistanceMagicalFire; // Offset: 3648
    keen::FbUiLocaAttributeInfo resistanceMagicalIce; // Offset: 3704
    keen::FbUiLocaAttributeInfo resistanceMagicalFog; // Offset: 3760
    keen::FbUiLocaAttributeInfo resistanceMagicalLightning; // Offset: 3816
    keen::FbUiLocaAttributeInfo poisonSusceptibility; // Offset: 3872
    keen::FbUiLocaAttributeInfo sneakAttack; // Offset: 3928
    keen::FbUiLocaAttributeInfo mercilessAttack; // Offset: 3984
    keen::FbUiLocaAttributeInfo ambushAttack; // Offset: 4040
    keen::UiLocaTagReference numberExplanation; // Offset: 4096
};

struct FbUiLocaPerkAttributes {
    keen::UiLocaTagReference damagePhysicalCut; // Offset: 0
    keen::UiLocaTagReference damagePhysicalPierce; // Offset: 16
    keen::UiLocaTagReference damagePhysicalBlunt; // Offset: 32
    keen::UiLocaTagReference damagePoison; // Offset: 48
    keen::UiLocaTagReference damageMagicalFire; // Offset: 64
    keen::UiLocaTagReference damageMagicalIce; // Offset: 80
    keen::UiLocaTagReference damageMagicalFog; // Offset: 96
    keen::UiLocaTagReference damageMagicalLightning; // Offset: 112
    keen::UiLocaTagReference resistancePhysicalCut; // Offset: 128
    keen::UiLocaTagReference resistancePhysicalPierce; // Offset: 144
    keen::UiLocaTagReference resistancePhysicalBlunt; // Offset: 160
    keen::UiLocaTagReference resistanceMagicalFire; // Offset: 176
    keen::UiLocaTagReference resistanceMagicalIce; // Offset: 192
    keen::UiLocaTagReference resistanceMagicalFog; // Offset: 208
    keen::UiLocaTagReference resistanceMagicalLightning; // Offset: 224
};

struct FbUiNpcNames {
    keen::UiLocaTagReference flame; // Offset: 0
    keen::UiLocaTagReference alchemist; // Offset: 16
    keen::UiLocaTagReference blacksmith; // Offset: 32
    keen::UiLocaTagReference hunter; // Offset: 48
    keen::UiLocaTagReference farmer; // Offset: 64
    keen::UiLocaTagReference carpenter; // Offset: 80
    keen::UiLocaTagReference cryptKeeper; // Offset: 96
    keen::UiLocaTagReference bard; // Offset: 112
};

struct FbUiLocaRpgTerms {
    keen::FbUiNpcNames npcNames; // Offset: 0
    keen::UiLocaTagReference entityLevel; // Offset: 128
    keen::UiLocaTagReference genericLevelWithArgument; // Offset: 144
    keen::UiLocaTagReference characterLevel; // Offset: 160
    keen::UiLocaTagReference experiencePoints; // Offset: 176
    keen::UiLocaTagReference experiencePointsShort; // Offset: 192
    keen::UiLocaTagReference experiencePointsRequired; // Offset: 208
    keen::FbUiLocaAttributes attributes; // Offset: 224
    keen::FbUiLocaPerkAttributes perkAttributes; // Offset: 4336
    keen::UiLocaTagReference durabilityGeneric; // Offset: 4576
    keen::UiLocaTagReference damagePhysicalCut; // Offset: 4592
    keen::UiLocaTagReference damagePhysicalPierce; // Offset: 4608
    keen::UiLocaTagReference damagePhysicalBlunt; // Offset: 4624
    keen::UiLocaTagReference damageMagicalFire; // Offset: 4640
    keen::UiLocaTagReference damageMagicalIce; // Offset: 4656
    keen::UiLocaTagReference damageMagicalFog; // Offset: 4672
    keen::UiLocaTagReference damageMagicalLightning; // Offset: 4688
    keen::UiLocaTagReference damageHealing; // Offset: 4704
    keen::UiLocaTagReference damagePoison; // Offset: 4720
    keen::UiLocaTagReference bowDamageBase; // Offset: 4736
    keen::UiLocaTagReference bowDamageNoBonus; // Offset: 4752
    keen::UiLocaTagReference bowDamagePhysicalCut; // Offset: 4768
    keen::UiLocaTagReference bowDamagePhysicalPierce; // Offset: 4784
    keen::UiLocaTagReference bowDamagePhysicalBlunt; // Offset: 4800
    keen::UiLocaTagReference bowDamageMagicalFire; // Offset: 4816
    keen::UiLocaTagReference bowDamageMagicalIce; // Offset: 4832
    keen::UiLocaTagReference bowDamageMagicalFog; // Offset: 4848
    keen::UiLocaTagReference bowDamageMagicalLightning; // Offset: 4864
    keen::UiLocaTagReference bowDamageHealing; // Offset: 4880
    keen::UiLocaTagReference bowDamagePoison; // Offset: 4896
    keen::UiLocaTagReference armorResistanceCutShort; // Offset: 4912
    keen::UiLocaTagReference armorResistancePierceShort; // Offset: 4928
    keen::UiLocaTagReference armorResistanceBluntShort; // Offset: 4944
    keen::UiLocaTagReference armorResistanceFireShort; // Offset: 4960
    keen::UiLocaTagReference armorResistanceIceShort; // Offset: 4976
    keen::UiLocaTagReference armorResistanceFogShort; // Offset: 4992
    keen::UiLocaTagReference armorResistanceLightningShort; // Offset: 5008
    keen::UiLocaTagReference rarityUndefined; // Offset: 5024
    keen::UiLocaTagReference rarityCommon; // Offset: 5040
    keen::UiLocaTagReference rarityUncommon; // Offset: 5056
    keen::UiLocaTagReference rarityRare; // Offset: 5072
    keen::UiLocaTagReference rarityEpic; // Offset: 5088
    keen::UiLocaTagReference rarityLegendary; // Offset: 5104
    keen::UiLocaTagReference rarityVanity; // Offset: 5120
    keen::UiLocaTagReference restedBuffNone; // Offset: 5136
    keen::UiLocaTagReference restedBuffCharging; // Offset: 5152
    keen::UiLocaTagReference restedBuffActive; // Offset: 5168
    keen::UiLocaTagReference restedBuffGenericDescription; // Offset: 5184
    keen::UiLocaTagReference comfortLevel; // Offset: 5200
    keen::UiLocaTagReference comfort; // Offset: 5216
    keen::UiLocaTagReference statusSitting; // Offset: 5232
    keen::UiLocaTagReference statusSheltered; // Offset: 5248
    keen::UiLocaTagReference statusSleeping; // Offset: 5264
    keen::UiLocaTagReference statusInCombat; // Offset: 5280
    keen::UiLocaTagReference statusWarmth; // Offset: 5296
    keen::UiLocaTagReference statusShelteredBed; // Offset: 5312
    keen::UiLocaTagReference statusSittingDesc; // Offset: 5328
    keen::UiLocaTagReference statusShelteredDesc; // Offset: 5344
    keen::UiLocaTagReference statusSleepingDesc; // Offset: 5360
    keen::UiLocaTagReference statusWarmthDesc; // Offset: 5376
    keen::UiLocaTagReference statusSittingNot; // Offset: 5392
    keen::UiLocaTagReference statusShelteredNot; // Offset: 5408
    keen::UiLocaTagReference statusInCombatNot; // Offset: 5424
    keen::UiLocaTagReference statusWarmthNot; // Offset: 5440
    keen::UiLocaTagReference foodTypeAlreadyActive; // Offset: 5456
    keen::UiLocaTagReference foodSlotsAllOccupied; // Offset: 5472
    keen::UiLocaTagReference npcProps; // Offset: 5488
    keen::UiLocaTagReference npcUndiscoveredName; // Offset: 5504
    keen::UiLocaTagReference npcUndiscoveredDescription; // Offset: 5520
};

struct FbUiLocaHudBuildFeedback {
    keen::UiLocaTagReference cursorOutsideBuildZone; // Offset: 0
    keen::UiLocaTagReference cursorInsideFogZone; // Offset: 16
    keen::UiLocaTagReference cursorTooFarAway; // Offset: 32
    keen::UiLocaTagReference cursorInsideLenientBuildInhibitor; // Offset: 48
    keen::UiLocaTagReference cursorInsideStrictBuildInhibitor; // Offset: 64
    keen::UiLocaTagReference maxAltarCountReached; // Offset: 80
    keen::UiLocaTagReference maxAltarCountUpgradeHint; // Offset: 96
    keen::UiLocaTagReference maxAltarCountLimitHint; // Offset: 112
    keen::UiLocaTagReference maxTameAnimalCountReached; // Offset: 128
    keen::UiLocaTagReference enemiesNearby; // Offset: 144
    keen::UiLocaTagReference areaOccupied; // Offset: 160
    keen::UiLocaTagReference invalidSurfaceNormal; // Offset: 176
    keen::UiLocaTagReference invalidCursorVoxelMaterial; // Offset: 192
    keen::UiLocaTagReference missingMaterials; // Offset: 208
    keen::UiLocaTagReference noPermission; // Offset: 224
    keen::UiLocaTagReference assignNpcToBed; // Offset: 240
    keen::UiLocaTagReference hintNpcNotPlaced; // Offset: 256
    keen::UiLocaTagReference bedUnoccupied; // Offset: 272
    keen::UiLocaTagReference bedOccupiedBy; // Offset: 288
    keen::UiLocaTagReference bedTooFarAway; // Offset: 304
    keen::UiLocaTagReference useStaffToAssignBed; // Offset: 320
};

struct FbUiLocaHudItemUseMessages {
    keen::UiLocaTagReference hookshotUseFail; // Offset: 0
    keen::UiLocaTagReference doorOpenFail; // Offset: 16
    keen::UiLocaTagReference gliderUseFail; // Offset: 32
    keen::UiLocaTagReference gliderUseHint; // Offset: 48
    keen::UiLocaTagReference itemMovedToEquipmentSlotByUsing; // Offset: 64
    keen::UiLocaTagReference itemFailedInsufficientStamina; // Offset: 80
};

struct FbUiLocaHitEventLabels {
    keen::UiLocaTagReference crit; // Offset: 0
    keen::UiLocaTagReference backstab; // Offset: 16
    keen::UiLocaTagReference weakspot; // Offset: 32
    keen::UiLocaTagReference immune; // Offset: 48
    keen::UiLocaTagReference ineffective; // Offset: 64
    keen::UiLocaTagReference resist; // Offset: 80
};

struct FbUiLocaTutorialHints {
    keen::UiLocaTagReference quickbuilderMaterialHint; // Offset: 0
    keen::UiLocaTagReference quickbuilderShapeHint; // Offset: 16
    keen::UiLocaTagReference quickbuilderTabsHint; // Offset: 32
    keen::UiLocaTagReference quickbuilderShapeSelectionHint; // Offset: 48
    keen::UiLocaTagReference cookingTutorialHint; // Offset: 64
    keen::UiLocaTagReference craftingRecipeList; // Offset: 80
    keen::UiLocaTagReference craftingRecipeCategories; // Offset: 96
    keen::UiLocaTagReference craftingRecipeSeries; // Offset: 112
    keen::UiLocaTagReference craftingIngredients; // Offset: 128
    keen::UiLocaTagReference craftingPinRecipe; // Offset: 144
    keen::UiLocaTagReference craftingTabs; // Offset: 160
    keen::UiLocaTagReference npcCraftingTabs; // Offset: 176
    keen::UiLocaTagReference enhancingItemList; // Offset: 192
    keen::UiLocaTagReference enhancingPerks; // Offset: 208
    keen::UiLocaTagReference enhancingCurrency; // Offset: 224
    keen::UiLocaTagReference factoryInventory; // Offset: 240
    keen::UiLocaTagReference factoryRecipes; // Offset: 256
    keen::UiLocaTagReference factoryFillIngredients; // Offset: 272
    keen::UiLocaTagReference factoryInputHints; // Offset: 288
    keen::UiLocaTagReference factoryStart; // Offset: 304
    keen::UiLocaTagReference actionbarTutorial1; // Offset: 320
    keen::UiLocaTagReference actionbarTutorial2; // Offset: 336
    keen::UiLocaTagReference summoningStaffTutorialNpcTypes; // Offset: 352
    keen::UiLocaTagReference summoningStaffTutorialPlacing; // Offset: 368
    keen::UiLocaTagReference summoningStaffRoamingRange; // Offset: 384
    keen::UiLocaTagReference flameUpgradeHappyNpc; // Offset: 400
    keen::UiLocaTagReference nextHint; // Offset: 416
};

struct FbUiLocaHudXpSources {
    keen::UiLocaTagReference xpSourceQuest; // Offset: 0
    keen::UiLocaTagReference xpSourceCombat; // Offset: 16
    keen::UiLocaTagReference xpSourceLore; // Offset: 32
    keen::UiLocaTagReference xpSourceExploration; // Offset: 48
    keen::UiLocaTagReference xpSourceMining; // Offset: 64
};

struct FbUiLocaHudHappinessDialog {
    keen::UiLocaTagReference missingBedDialogText; // Offset: 0
    keen::UiLocaTagReference missingBedDialogLabel; // Offset: 16
    keen::UiLocaTagReference missingShelterDialogText; // Offset: 32
    keen::UiLocaTagReference missingShelterDialogLabel; // Offset: 48
    keen::UiLocaTagReference missingFoodDialogText; // Offset: 64
    keen::UiLocaTagReference missingFoodDialogLabel; // Offset: 80
};

struct FbUiLocaHudTemperature {
    keen::UiLocaTagReference resistanceBuffLabel; // Offset: 0
    keen::UiLocaTagReference resistanceLowWarning; // Offset: 16
    keen::UiLocaTagReference deadlyDebuffLabel; // Offset: 32
    keen::UiLocaTagReference deadlyDebuffWarning; // Offset: 48
};

struct FbUiLocaHud {
    keen::FbUiLocaHudBuildFeedback buildFeedback; // Offset: 0
    keen::FbUiLocaHudItemUseMessages itemUseMessages; // Offset: 336
    keen::FbUiLocaHitEventLabels hitEventLabels; // Offset: 432
    keen::FbUiLocaTutorialHints tutorialHints; // Offset: 528
    keen::FbUiLocaHudXpSources xpSources; // Offset: 960
    keen::FbUiLocaHudHappinessDialog missingHappinessDialogOptions; // Offset: 1040
    keen::UiLocaTagReference nightSpeed; // Offset: 1136
    keen::FbUiLocaHudTemperature freezing; // Offset: 1152
    keen::FbUiLocaHudTemperature extremeHeat; // Offset: 1216
    keen::UiLocaTagReference gameProgressSummaryTitle; // Offset: 1280
    keen::UiLocaTagReference ammoLabelNoneEquipped; // Offset: 1296
    keen::UiLocaTagReference quickBuilderPreUseHint; // Offset: 1312
    keen::UiLocaTagReference buildTooltipQuickBuilderInit; // Offset: 1328
    keen::UiLocaTagReference buildTooltipChangeBlueprint; // Offset: 1344
    keen::UiLocaTagReference buildTooltipChangeShovelAction; // Offset: 1360
    keen::UiLocaTagReference buildTooltipChangeNpc; // Offset: 1376
    keen::UiLocaTagReference buildTooltipChangeMaterial; // Offset: 1392
    keen::UiLocaTagReference buildTooltipRotate90; // Offset: 1408
    keen::UiLocaTagReference buildTooltipRotate; // Offset: 1424
    keen::UiLocaTagReference buildTooltipAreaActions; // Offset: 1440
    keen::UiLocaTagReference buildTooltipUseSnapping; // Offset: 1456
    keen::UiLocaTagReference cursorHintSnappingActive; // Offset: 1472
    keen::UiLocaTagReference cursorHintSnappingReady; // Offset: 1488
    keen::UiLocaTagReference cursorHintSnappingOff; // Offset: 1504
    keen::UiLocaTagReference buildTooltipMultiToolMaterialHeader; // Offset: 1520
    keen::UiLocaTagReference buildTooltipMultiToolMaterialActionLabel; // Offset: 1536
    keen::UiLocaTagReference leaveNpcConversation; // Offset: 1552
    keen::UiLocaTagReference messageFastTravelUnlock; // Offset: 1568
    keen::UiLocaTagReference messageNpcFound; // Offset: 1584
    keen::UiLocaTagReference messageSpecialLootAcquired; // Offset: 1600
    keen::UiLocaTagReference messageLevelUp; // Offset: 1616
    keen::UiLocaTagReference messageFlameLevelUp; // Offset: 1632
    keen::UiLocaTagReference messageAllItemsRepaired; // Offset: 1648
    keen::UiLocaTagReference messagePinnedRecipeReady; // Offset: 1664
    keen::UiLocaTagReference messageMagicBarrierUnlocked; // Offset: 1680
    keen::UiLocaTagReference messageDoorUnlocked; // Offset: 1696
    keen::UiLocaTagReference messageSecretDoorUnlocked; // Offset: 1712
    keen::UiLocaTagReference messageNewTwitchDropUnlocked; // Offset: 1728
    keen::UiLocaTagReference knowledgeNotificationGeneral; // Offset: 1744
    keen::UiLocaTagReference knowledgeNotificationMap; // Offset: 1760
    keen::UiLocaTagReference knowledgeNotificationJournal; // Offset: 1776
    keen::UiLocaTagReference knowledgeNotificationNewTutorial; // Offset: 1792
    keen::UiLocaTagReference knowledgeNotificationNewLoreDocument; // Offset: 1808
    keen::UiLocaTagReference knowledgeNotificationNewLorePage; // Offset: 1824
    keen::UiLocaTagReference knowledgeNotificationNewQuest; // Offset: 1840
    keen::UiLocaTagReference knowledgeNotificationUpdatedQuest; // Offset: 1856
    keen::UiLocaTagReference knowledgeNotificationJournalCompleted; // Offset: 1872
    keen::UiLocaTagReference knowledgeNotificationCrafting; // Offset: 1888
    keen::UiLocaTagReference knowledgeNotificationIngredientKnowledge; // Offset: 1904
    keen::UiLocaTagReference knowledgeNotificationNpcDialog; // Offset: 1920
    keen::UiLocaTagReference priorityJournalEntryPrompt; // Offset: 1936
    keen::UiLocaTagReference priorityJournalEntryPromptNoBinding; // Offset: 1952
    keen::UiLocaTagReference priorityJournalLocationReached; // Offset: 1968
    keen::UiLocaTagReference interactionItemRequirementHeader; // Offset: 1984
    keen::UiLocaTagReference backpackFullMessage; // Offset: 2000
    keen::UiLocaTagReference storageFullMessage; // Offset: 2016
    keen::UiLocaTagReference compassWaypointReached; // Offset: 2032
    keen::UiLocaTagReference compassWaypointReachedAbove; // Offset: 2048
    keen::UiLocaTagReference compassWaypointReachedBelow; // Offset: 2064
    keen::UiLocaTagReference compassInFog; // Offset: 2080
    keen::UiLocaTagReference compassInDeadlyFog; // Offset: 2096
    keen::UiLocaTagReference compassEarlyFogWarning; // Offset: 2112
    keen::UiLocaTagReference compassFogWarning; // Offset: 2128
    keen::UiLocaTagReference staminaMax; // Offset: 2144
    keen::UiLocaTagReference restedBuffConditionHeader; // Offset: 2160
    keen::UiLocaTagReference markersAdded; // Offset: 2176
    keen::UiLocaTagReference entriesLogged; // Offset: 2192
    keen::UiLocaTagReference entriesCompleted; // Offset: 2208
    keen::UiLocaTagReference oneRecipeLearned; // Offset: 2224
    keen::UiLocaTagReference recipesLearned; // Offset: 2240
    keen::UiLocaTagReference recipesLearnedPersonal; // Offset: 2256
    keen::UiLocaTagReference readyToCraft; // Offset: 2272
    keen::UiLocaTagReference readyToCraftPinned; // Offset: 2288
    keen::UiLocaTagReference loading; // Offset: 2304
    keen::UiLocaTagReference reviving; // Offset: 2320
    keen::UiLocaTagReference beingRevived; // Offset: 2336
    keen::UiLocaTagReference canBeRevived; // Offset: 2352
    keen::UiLocaTagReference craftableAmount; // Offset: 2368
    keen::UiLocaTagReference emptyHint; // Offset: 2384
    keen::UiLocaTagReference inventoryCount; // Offset: 2400
    keen::UiLocaTagReference serverPerformanceBad; // Offset: 2416
    keen::UiLocaTagReference serverPerformanceBadHost; // Offset: 2432
    keen::UiLocaTagReference serverPerformanceBadDesc; // Offset: 2448
    keen::UiLocaTagReference serverPerformanceBadDescHost; // Offset: 2464
    keen::UiLocaTagReference serverPerformanceCritical; // Offset: 2480
    keen::UiLocaTagReference serverPerformanceCriticalHost; // Offset: 2496
    keen::UiLocaTagReference serverPerformanceCriticalDesc; // Offset: 2512
    keen::UiLocaTagReference serverPerformanceCriticalDescHost; // Offset: 2528
    keen::UiLocaTagReference currentServerPerformance; // Offset: 2544
    keen::UiLocaTagReference currentServerPerformanceHost; // Offset: 2560
    keen::UiLocaTagReference flameUpgradeBaseLabel; // Offset: 2576
    keen::UiLocaTagReference personalProgressionModeHint; // Offset: 2592
    keen::UiLocaTagReference allMissedWorldQuestsCompletedMessage; // Offset: 2608
    keen::UiLocaTagReference interactionNoPermission; // Offset: 2624
    keen::UiLocaTagReference itemUseNoPermission; // Offset: 2640
    keen::UiLocaTagReference currentSongPlayingHint; // Offset: 2656
    keen::UiLocaTagReference tamingTutorialTitle; // Offset: 2672
    keen::UiLocaTagReference tamingTutorialStep1; // Offset: 2688
    keen::UiLocaTagReference tamingTutorialStep2; // Offset: 2704
    keen::UiLocaTagReference tamingTutorialStep3; // Offset: 2720
    keen::UiLocaTagReference tamingTutorialStep4; // Offset: 2736
};

struct FbUiLocaMenuFlameAltar {
    keen::UiLocaTagReference menuHeader; // Offset: 0
    keen::UiLocaTagReference altarLevelLabel; // Offset: 16
    keen::UiLocaTagReference altarRangeLabel; // Offset: 32
    keen::UiLocaTagReference motherflameLevelLabel; // Offset: 48
    keen::UiLocaTagReference lastPlayed; // Offset: 64
    keen::UiLocaTagReference altarRange; // Offset: 80
    keen::UiLocaTagReference flameUpgradeMaxAltarCountLabel; // Offset: 96
    keen::UiLocaTagReference flameUpgradeAttributeBonusLabel; // Offset: 112
    keen::UiLocaTagReference flameUpgradeFogResistanceLabel; // Offset: 128
    keen::UiLocaTagReference flameUpgradeFogResistanceLevel; // Offset: 144
    keen::UiLocaTagReference flameUpgradeFogResistanceDuration; // Offset: 160
    keen::UiLocaTagReference flameCodexDesc; // Offset: 176
    keen::UiLocaTagReference flameCodexUpgradeHeader; // Offset: 192
    keen::UiLocaTagReference tileAltarUpgradeMainText; // Offset: 208
    keen::UiLocaTagReference tileAltarUpgradeSecondaryText; // Offset: 224
    keen::UiLocaTagReference tileMotherflameUpgradeMainText; // Offset: 240
    keen::UiLocaTagReference tileMotherflameUpgradeSecondaryText; // Offset: 256
    keen::UiLocaTagReference tileReviveNpcMainText; // Offset: 272
    keen::UiLocaTagReference tileReviveNpcSecondaryText; // Offset: 288
    keen::UiLocaTagReference tileRespecMainText; // Offset: 304
    keen::UiLocaTagReference tileRespecSecondaryText; // Offset: 320
    keen::UiLocaTagReference respecDescription; // Offset: 336
    keen::UiLocaTagReference actionRespecSkills; // Offset: 352
    keen::UiLocaTagReference actionDeactivate; // Offset: 368
    keen::UiLocaTagReference actionDeactivateSecondaryText; // Offset: 384
    keen::UiLocaTagReference actionReactivate; // Offset: 400
    keen::UiLocaTagReference deactivateAltarDesc; // Offset: 416
    keen::UiLocaTagReference inactiveStateDesc; // Offset: 432
    keen::UiLocaTagReference reactivationProhibited; // Offset: 448
    keen::UiLocaTagReference altarUpgradeRecipeHeader; // Offset: 464
    keen::UiLocaTagReference motherflameUpgradeRecipeHeader; // Offset: 480
    keen::UiLocaTagReference actionAltarUpgrade; // Offset: 496
    keen::UiLocaTagReference actionMotherflameUpgrade; // Offset: 512
    keen::UiLocaTagReference npcReviveSubheader; // Offset: 528
    keen::UiLocaTagReference deactivationExplanation; // Offset: 544
    keen::UiLocaTagReference noPermissionHintGeneral; // Offset: 560
    keen::UiLocaTagReference noAltarUpgradePermission; // Offset: 576
    keen::UiLocaTagReference noFlameUpgradePermission; // Offset: 592
    keen::UiLocaTagReference noExtinguishAltarPermission; // Offset: 608
    keen::UiLocaTagReference shelteredBedsRequirement; // Offset: 624
};

struct FbUiLocaMenuPregame {
    keen::UiLocaTagReference mainMenuPlay; // Offset: 0
    keen::UiLocaTagReference mainMenuJoinSessionHeader; // Offset: 16
    keen::UiLocaTagReference mainMenuInviteHeader; // Offset: 32
    keen::UiLocaTagReference mainMenuInviteAccept; // Offset: 48
    keen::UiLocaTagReference mainMenuInviteDecline; // Offset: 64
    keen::UiLocaTagReference mainMenuJoinSessionFallbackName; // Offset: 80
    keen::UiLocaTagReference mainMenuCredits; // Offset: 96
    keen::UiLocaTagReference mainMenuQuit; // Offset: 112
    keen::UiLocaTagReference mainMenuGPUDriverWarning; // Offset: 128
    keen::UiLocaTagReference thankYouClosedBeta; // Offset: 144
    keen::UiLocaTagReference steamCallToAction; // Offset: 160
    keen::UiLocaTagReference discordCallToAction; // Offset: 176
    keen::UiLocaTagReference characterSelectionEnterVerb; // Offset: 192
    keen::UiLocaTagReference characterSelectionHeaderCreate; // Offset: 208
    keen::UiLocaTagReference characterSelectionHeaderSelect; // Offset: 224
    keen::UiLocaTagReference characterSelectionEmptySlotHint; // Offset: 240
    keen::UiLocaTagReference characterDeletionConfirmHeader; // Offset: 256
    keen::UiLocaTagReference characterBackupRestoreDialogHeader; // Offset: 272
    keen::UiLocaTagReference characterBackupRestoreDataLabel; // Offset: 288
    keen::UiLocaTagReference characterBackupRestoreButtonLabel; // Offset: 304
    keen::UiLocaTagReference playSelectionHeader; // Offset: 320
    keen::UiLocaTagReference playSelectionRecent; // Offset: 336
    keen::UiLocaTagReference playSelectionJoin; // Offset: 352
    keen::UiLocaTagReference playSelectionJoinDescription; // Offset: 368
    keen::UiLocaTagReference playSelectionJoinHeader; // Offset: 384
    keen::UiLocaTagReference playSelectionHostPublic; // Offset: 400
    keen::UiLocaTagReference playSelectionHostPublicDescription; // Offset: 416
    keen::UiLocaTagReference playSelectionHostPublicHeader; // Offset: 432
    keen::UiLocaTagReference playSelectionPrivate; // Offset: 448
    keen::UiLocaTagReference playSelectionPrivateDescription; // Offset: 464
    keen::UiLocaTagReference playSelectionPrivateHeader; // Offset: 480
    keen::UiLocaTagReference party; // Offset: 496
    keen::UiLocaTagReference filterFriends; // Offset: 512
    keen::UiLocaTagReference filterDedicatedServer; // Offset: 528
    keen::UiLocaTagReference filterEmpty; // Offset: 544
    keen::UiLocaTagReference filterName; // Offset: 560
    keen::UiLocaTagReference filterPassword; // Offset: 576
    keen::UiLocaTagReference filterFreeSlots; // Offset: 592
    keen::UiLocaTagReference filterNameHeader; // Offset: 608
    keen::UiLocaTagReference sessionSearchEmptyResult; // Offset: 624
    keen::UiLocaTagReference sessionSearchOngoing; // Offset: 640
    keen::UiLocaTagReference errorServerNotFound; // Offset: 656
    keen::UiLocaTagReference errorServerNotFoundDesc; // Offset: 672
    keen::UiLocaTagReference serverFound; // Offset: 688
    keen::UiLocaTagReference noSessionsMatchingFilter; // Offset: 704
    keen::UiLocaTagReference enterGridSelection; // Offset: 720
    keen::UiLocaTagReference playVoiceSample; // Offset: 736
    keen::UiLocaTagReference customizationOptionNone; // Offset: 752
    keen::UiLocaTagReference customizationBodyType; // Offset: 768
    keen::UiLocaTagReference customizationPreset; // Offset: 784
    keen::UiLocaTagReference customizationSkinColor; // Offset: 800
    keen::UiLocaTagReference customizationEyeColor; // Offset: 816
    keen::UiLocaTagReference customizationEyeBrowColor; // Offset: 832
    keen::UiLocaTagReference customizationHair; // Offset: 848
    keen::UiLocaTagReference customizationHairColor; // Offset: 864
    keen::UiLocaTagReference customizationBeard; // Offset: 880
    keen::UiLocaTagReference customizationBeardColor; // Offset: 896
    keen::UiLocaTagReference customizationVoice; // Offset: 912
    keen::UiLocaTagReference customizationName; // Offset: 928
    keen::UiLocaTagReference customizationCharacter; // Offset: 944
    keen::UiLocaTagReference customizationNameAndFinish; // Offset: 960
    keen::UiLocaTagReference customizationResetPreset; // Offset: 976
    keen::UiLocaTagReference customizationFinish; // Offset: 992
    keen::UiLocaTagReference refresh; // Offset: 1008
    keen::UiLocaTagReference newGame; // Offset: 1024
    keen::UiLocaTagReference unnamed; // Offset: 1040
    keen::UiLocaTagReference create; // Offset: 1056
    keen::UiLocaTagReference edit; // Offset: 1072
    keen::UiLocaTagReference configure; // Offset: 1088
    keen::UiLocaTagReference myWorld; // Offset: 1104
    keen::UiLocaTagReference editWorldSave; // Offset: 1120
    keen::UiLocaTagReference configureWorldSave; // Offset: 1136
    keen::UiLocaTagReference deleteWorld; // Offset: 1152
    keen::UiLocaTagReference deleteWorldDesc; // Offset: 1168
    keen::UiLocaTagReference maxWorldCountReached; // Offset: 1184
    keen::UiLocaTagReference worldSaveNameTitle; // Offset: 1200
    keen::UiLocaTagReference gameSettings; // Offset: 1216
    keen::UiLocaTagReference sessionVisibility; // Offset: 1232
    keen::UiLocaTagReference joinGame; // Offset: 1248
    keen::UiLocaTagReference publicGame; // Offset: 1264
    keen::UiLocaTagReference privateGame; // Offset: 1280
    keen::UiLocaTagReference sessionVisibiltyFriends; // Offset: 1296
    keen::UiLocaTagReference sessionVisibiltyPublic; // Offset: 1312
    keen::UiLocaTagReference hidePasswordInput; // Offset: 1328
    keen::UiLocaTagReference setPasswordProtection; // Offset: 1344
    keen::UiLocaTagReference hostHintHasNoPassword; // Offset: 1360
    keen::UiLocaTagReference hostSettings; // Offset: 1376
    keen::UiLocaTagReference hostStartDialogHeader; // Offset: 1392
    keen::UiLocaTagReference hostStartButton; // Offset: 1408
    keen::UiLocaTagReference worldNameEmptyProhibited; // Offset: 1424
    keen::UiLocaTagReference noPassword; // Offset: 1440
    keen::UiLocaTagReference sessionPassword; // Offset: 1456
    keen::UiLocaTagReference rolePassword; // Offset: 1472
    keen::UiLocaTagReference setPassword; // Offset: 1488
    keen::UiLocaTagReference removePassword; // Offset: 1504
    keen::UiLocaTagReference enterPasswordHeader; // Offset: 1520
    keen::UiLocaTagReference sessionSize; // Offset: 1536
    keen::UiLocaTagReference maxPlayerCount; // Offset: 1552
    keen::UiLocaTagReference serverFilter; // Offset: 1568
    keen::UiLocaTagReference availableServer; // Offset: 1584
    keen::UiLocaTagReference serverName; // Offset: 1600
    keen::UiLocaTagReference hostedBy; // Offset: 1616
    keen::UiLocaTagReference currentSessionSize; // Offset: 1632
    keen::UiLocaTagReference sessionSizeWarning; // Offset: 1648
    keen::UiLocaTagReference enterPassword; // Offset: 1664
    keen::UiLocaTagReference searchIPv4; // Offset: 1680
    keen::UiLocaTagReference addToFavourite; // Offset: 1696
    keen::UiLocaTagReference renameCharacter; // Offset: 1712
    keen::UiLocaTagReference legalLine; // Offset: 1728
    keen::UiLocaTagReference gportalLogoDesc; // Offset: 1744
    keen::UiLocaTagReference gportalLink; // Offset: 1760
    keen::UiLocaTagReference versionText; // Offset: 1776
    keen::UiLocaTagReference preload; // Offset: 1792
    keen::UiLocaTagReference compilingShaders; // Offset: 1808
    keen::UiLocaTagReference addServerCaption; // Offset: 1824
    keen::UiLocaTagReference serverDidNotResponde; // Offset: 1840
    keen::UiLocaTagReference serverDidResponde; // Offset: 1856
    keen::UiLocaTagReference inviteBuildVersionWarningLocalOld; // Offset: 1872
    keen::UiLocaTagReference inviteBuildVersionWarningInviteOld; // Offset: 1888
    keen::UiLocaTagReference serverSettingsRolesHeader; // Offset: 1904
    keen::UiLocaTagReference serverSettingsRolesExplanation; // Offset: 1920
    keen::UiLocaTagReference serverSettingsSelectedSavegameHeader; // Offset: 1936
    keen::UiLocaTagReference serverSettingsRoleDisabled; // Offset: 1952
    keen::UiLocaTagReference serverSettingsRolePublic; // Offset: 1968
    keen::UiLocaTagReference serverSettingsAllRolesDisabledWarning; // Offset: 1984
    keen::UiLocaTagReference serverRolePermissionsHeader; // Offset: 2000
    keen::UiLocaTagReference serverRoleSupressed; // Offset: 2016
    keen::UiLocaTagReference serverRolesInvalidHint; // Offset: 2032
    keen::UiLocaTagReference warningHostSettingsNotConfigured; // Offset: 2048
    keen::UiLocaTagReference warningServerRoleSupressed; // Offset: 2064
    keen::UiLocaTagReference warningServerRoleSamePassword; // Offset: 2080
    keen::UiLocaTagReference warningPublicServerRole; // Offset: 2096
    keen::UiLocaTagReference warningAdminPasswordRequired; // Offset: 2112
    keen::UiLocaTagReference warningFriendPasswordRequired; // Offset: 2128
    keen::UiLocaTagReference warningNoPasswordPublic; // Offset: 2144
    keen::UiLocaTagReference forceAllowPublicFriendRole; // Offset: 2160
    keen::UiLocaTagReference rolePasswordHeader; // Offset: 2176
    keen::UiLocaTagReference changePassword; // Offset: 2192
    keen::UiLocaTagReference publicRole; // Offset: 2208
    keen::UiLocaTagReference protectedRole; // Offset: 2224
    keen::UiLocaTagReference disabled; // Offset: 2240
    keen::UiLocaTagReference joinWithoutPw; // Offset: 2256
    keen::UiLocaTagReference optionalPwHint; // Offset: 2272
};

struct FbUiLocaMenuSystem {
    keen::UiLocaTagReference returnToGame; // Offset: 0
    keen::UiLocaTagReference returnToPregame; // Offset: 16
    keen::UiLocaTagReference showServerRole; // Offset: 32
    keen::UiLocaTagReference quitToDesktop; // Offset: 48
    keen::UiLocaTagReference networkQuality; // Offset: 64
    keen::UiLocaTagReference latencyValue; // Offset: 80
    keen::UiLocaTagReference shaderCompileProgress; // Offset: 96
    keen::UiLocaTagReference feedbackPopupHint; // Offset: 112
    keen::UiLocaTagReference feedbackIssue; // Offset: 128
    keen::UiLocaTagReference feedbackIssueLink; // Offset: 144
    keen::UiLocaTagReference bugReport; // Offset: 160
    keen::UiLocaTagReference bugReportLink; // Offset: 176
    keen::UiLocaTagReference discordServer; // Offset: 192
    keen::UiLocaTagReference discordServerLink; // Offset: 208
    keen::UiLocaTagReference connectTwitch; // Offset: 224
    keen::UiLocaTagReference connectTwitchLink; // Offset: 240
    keen::UiLocaTagReference steamWishlist; // Offset: 256
    keen::UiLocaTagReference steamWishlistLink; // Offset: 272
    keen::UiLocaTagReference watermarkLabel; // Offset: 288
    keen::UiLocaTagReference watermarkBetaLabel; // Offset: 304
    keen::UiLocaTagReference watermarkSecondLine; // Offset: 320
    keen::UiLocaTagReference watermarkF1Hint; // Offset: 336
    keen::UiLocaTagReference hours; // Offset: 352
    keen::UiLocaTagReference minutes; // Offset: 368
    keen::UiLocaTagReference gamePaused; // Offset: 384
};

struct FbUiLocaMenuBindingsReset {
    keen::UiLocaTagReference resetHeader; // Offset: 0
    keen::UiLocaTagReference resetDescription; // Offset: 16
    keen::UiLocaTagReference presetChangeHeader; // Offset: 32
    keen::UiLocaTagReference presetChangeDescription; // Offset: 48
    keen::UiLocaTagReference presetChangeConfirmButton; // Offset: 64
};

struct FbUiLongDocParagraph {
    keen::UiLocaTagReference locaTag; // Offset: 0
    keen::UiLocaTagReference hyperLink; // Offset: 16
};

struct FbUiLocaTagDifficultySettings {
    keen::UiLocaTagReference presetDefault; // Offset: 0
    keen::UiLocaTagReference presetDefaultDesc; // Offset: 16
    keen::UiLocaTagReference presetSurvivalist; // Offset: 32
    keen::UiLocaTagReference presetSurvivalistDesc; // Offset: 48
    keen::UiLocaTagReference presetBuilders; // Offset: 64
    keen::UiLocaTagReference presetBuildersDesc; // Offset: 80
    keen::UiLocaTagReference presetCombatChallenge; // Offset: 96
    keen::UiLocaTagReference presetCombatChallengeDesc; // Offset: 112
    keen::UiLocaTagReference presetCustom; // Offset: 128
    keen::UiLocaTagReference presetCustomDesc; // Offset: 144
    keen::UiLocaTagReference enemySettingsHeader; // Offset: 160
    keen::UiLocaTagReference enemyDamage; // Offset: 176
    keen::UiLocaTagReference enemyDamageDesc; // Offset: 192
    keen::UiLocaTagReference enemyHealth; // Offset: 208
    keen::UiLocaTagReference enemyHealthDesc; // Offset: 224
    keen::UiLocaTagReference enemyStamina; // Offset: 240
    keen::UiLocaTagReference enemyStaminaDesc; // Offset: 256
    keen::UiLocaTagReference enemyPerceptionRange; // Offset: 272
    keen::UiLocaTagReference enemyPerceptionRangeDesc; // Offset: 288
    keen::UiLocaTagReference enemyAttackSimultaneous; // Offset: 304
    keen::UiLocaTagReference enemyAttackSimultaneousDesc; // Offset: 320
    keen::UiLocaTagReference enemyAttackFrequency; // Offset: 336
    keen::UiLocaTagReference enemyAttackFrequencyDesc; // Offset: 352
    keen::UiLocaTagReference pacifyEnemies; // Offset: 368
    keen::UiLocaTagReference pacifyEnemiesDesc; // Offset: 384
    keen::UiLocaTagReference enemySpawnerAmount; // Offset: 400
    keen::UiLocaTagReference enemySpawnerAmountDesc; // Offset: 416
    keen::UiLocaTagReference enemySpawnerAmountFew; // Offset: 432
    keen::UiLocaTagReference enemySpawnerAmountNormal; // Offset: 448
    keen::UiLocaTagReference enemySpawnerAmountMore; // Offset: 464
    keen::UiLocaTagReference enemySpawnerAmountMany; // Offset: 480
    keen::UiLocaTagReference bossHealth; // Offset: 496
    keen::UiLocaTagReference bossHealthDesc; // Offset: 512
    keen::UiLocaTagReference bossDamage; // Offset: 528
    keen::UiLocaTagReference bossDamageDesc; // Offset: 544
    keen::UiLocaTagReference playerHealth; // Offset: 560
    keen::UiLocaTagReference playerHealthDesc; // Offset: 576
    keen::UiLocaTagReference playerMana; // Offset: 592
    keen::UiLocaTagReference playerManaDesc; // Offset: 608
    keen::UiLocaTagReference playerStamina; // Offset: 624
    keen::UiLocaTagReference playerStaminaDesc; // Offset: 640
    keen::UiLocaTagReference otherSettingsHeader; // Offset: 656
    keen::UiLocaTagReference xpGainMining; // Offset: 672
    keen::UiLocaTagReference xpGainMiningDesc; // Offset: 688
    keen::UiLocaTagReference xpGainQuests; // Offset: 704
    keen::UiLocaTagReference xpGainQuestsDesc; // Offset: 720
    keen::UiLocaTagReference xpGainCombat; // Offset: 736
    keen::UiLocaTagReference xpGainCombatDesc; // Offset: 752
    keen::UiLocaTagReference shroudTime; // Offset: 768
    keen::UiLocaTagReference shroudTimeDesc; // Offset: 784
    keen::UiLocaTagReference productionSpeed; // Offset: 800
    keen::UiLocaTagReference productionSpeedDesc; // Offset: 816
    keen::UiLocaTagReference plantGrowSpeed; // Offset: 832
    keen::UiLocaTagReference plantGrowSpeedDesc; // Offset: 848
    keen::UiLocaTagReference weaponUpgradeCosts; // Offset: 864
    keen::UiLocaTagReference weaponUpgradeCostsDesc; // Offset: 880
    keen::UiLocaTagReference perkUpgradeRecyclingFactor; // Offset: 896
    keen::UiLocaTagReference perkUpgradeRecyclingFactorDesc; // Offset: 912
    keen::UiLocaTagReference backpackDeathBehaviour; // Offset: 928
    keen::UiLocaTagReference backpackDeathBehaviourDesc; // Offset: 944
    keen::UiLocaTagReference backpackDeathBehaviourKeepAll; // Offset: 960
    keen::UiLocaTagReference backpackDeathBehaviourDefault; // Offset: 976
    keen::UiLocaTagReference backpackDeathBehaviourLoseAll; // Offset: 992
    keen::UiLocaTagReference durabilityEnabled; // Offset: 1008
    keen::UiLocaTagReference durabilityEnabledDesc; // Offset: 1024
    keen::UiLocaTagReference durabilityScaling; // Offset: 1040
    keen::UiLocaTagReference durabilityScalingDesc; // Offset: 1056
    keen::UiLocaTagReference worldRefreshTime; // Offset: 1072
    keen::UiLocaTagReference worldRefreshTimeDesc; // Offset: 1088
    keen::UiLocaTagReference dayDuration; // Offset: 1104
    keen::UiLocaTagReference dayDurationDesc; // Offset: 1120
    keen::UiLocaTagReference nightDuration; // Offset: 1136
    keen::UiLocaTagReference nightDurationDesc; // Offset: 1152
    keen::UiLocaTagReference foodDuration; // Offset: 1168
    keen::UiLocaTagReference foodDurationDesc; // Offset: 1184
    keen::UiLocaTagReference foodSurvival; // Offset: 1200
    keen::UiLocaTagReference foodSurvivalDesc; // Offset: 1216
    keen::UiLocaTagReference starvingTime; // Offset: 1232
    keen::UiLocaTagReference starvingTimeDesc; // Offset: 1248
    keen::UiLocaTagReference weatherFrequency; // Offset: 1264
    keen::UiLocaTagReference weatherFrequencyDesc; // Offset: 1280
    keen::UiLocaTagReference enableGliderTurbulences; // Offset: 1296
    keen::UiLocaTagReference enableGliderTurbulencesDesc; // Offset: 1312
    keen::UiLocaTagReference tamingStartleRepercussion; // Offset: 1328
    keen::UiLocaTagReference tamingStartleRepercussionDesc; // Offset: 1344
    keen::UiLocaTagReference bodyHeat; // Offset: 1360
    keen::UiLocaTagReference bodyHeatDesc; // Offset: 1376
    keen::UiLocaTagReference miningDamage; // Offset: 1392
    keen::UiLocaTagReference miningDamageDesc; // Offset: 1408
    keen::UiLocaTagReference lootAmount; // Offset: 1424
    keen::UiLocaTagReference lootAmountDesc; // Offset: 1440
    keen::UiLocaTagReference resourcesHeader; // Offset: 1456
    keen::UiLocaTagReference xpModsHeader; // Offset: 1472
    keen::UiLocaTagReference survivalHeader; // Offset: 1488
    keen::UiLocaTagReference playerHeader; // Offset: 1504
    keen::UiLocaTagReference selectedLabel; // Offset: 1520
};

struct FbUiLocaMenuSettings {
    keen::UiLocaTagReference tabGame; // Offset: 0
    keen::UiLocaTagReference tabDisplay; // Offset: 16
    keen::UiLocaTagReference tabSound; // Offset: 32
    keen::UiLocaTagReference tabAccessibility; // Offset: 48
    keen::UiLocaTagReference tabControls; // Offset: 64
    keen::UiLocaTagReference tabLegal; // Offset: 80
    keen::BlobArray<keen::FbUiLongDocParagraph> privacyPolicyParagraphs; // Offset: 96
    keen::UiLocaTagReference settingAuto; // Offset: 104
    keen::UiLocaTagReference settingOff; // Offset: 120
    keen::UiLocaTagReference settingOn; // Offset: 136
    keen::UiLocaTagReference settingBoost; // Offset: 152
    keen::UiLocaTagReference settingLowest; // Offset: 168
    keen::UiLocaTagReference settingLow; // Offset: 184
    keen::UiLocaTagReference settingMedium; // Offset: 200
    keen::UiLocaTagReference settingHigh; // Offset: 216
    keen::UiLocaTagReference settingUltra; // Offset: 232
    keen::UiLocaTagReference settingPerformance; // Offset: 248
    keen::UiLocaTagReference settingBalance; // Offset: 264
    keen::UiLocaTagReference settingQuality; // Offset: 280
    keen::UiLocaTagReference settingUltraQuality; // Offset: 296
    keen::UiLocaTagReference settingUltraPerformance; // Offset: 312
    keen::UiLocaTagReference settingNative; // Offset: 328
    keen::UiLocaTagReference settingRare; // Offset: 344
    keen::UiLocaTagReference settingNormal; // Offset: 360
    keen::UiLocaTagReference settingOften; // Offset: 376
    keen::UiLocaTagReference settingKeepProgress; // Offset: 392
    keen::UiLocaTagReference settingLoseSomeProgress; // Offset: 408
    keen::UiLocaTagReference settingLoseAllProgress; // Offset: 424
    keen::UiLocaTagReference difficultyLabel; // Offset: 440
    keen::UiLocaTagReference difficultyEasy; // Offset: 456
    keen::UiLocaTagReference difficultyDefault; // Offset: 472
    keen::UiLocaTagReference difficultyHard; // Offset: 488
    keen::UiLocaTagReference difficultyVeryHard; // Offset: 504
    keen::UiLocaTagReference difficultyCustom; // Offset: 520
    keen::UiLocaTagReference controlsSectionKeyboardMouse; // Offset: 536
    keen::UiLocaTagReference controlsSectionGamepad; // Offset: 552
    keen::UiLocaTagReference mouseCameraSmoothing; // Offset: 568
    keen::UiLocaTagReference cameraSensitivity; // Offset: 584
    keen::UiLocaTagReference aimingSensitivity; // Offset: 600
    keen::UiLocaTagReference cameraInversion; // Offset: 616
    keen::UiLocaTagReference cameraInversionValueNone; // Offset: 632
    keen::UiLocaTagReference cameraInversionValueX; // Offset: 648
    keen::UiLocaTagReference cameraInversionValueY; // Offset: 664
    keen::UiLocaTagReference cameraInversionValueXY; // Offset: 680
    keen::UiLocaTagReference actionDirection; // Offset: 696
    keen::UiLocaTagReference actionDirectionDesc; // Offset: 712
    keen::UiLocaTagReference cameraDirection; // Offset: 728
    keen::UiLocaTagReference characterDirection; // Offset: 744
    keen::UiLocaTagReference controlsKeyboardMouseBindingsButton; // Offset: 760
    keen::UiLocaTagReference controlsGamepadBindingsButton; // Offset: 776
    keen::UiLocaTagReference controlScheme; // Offset: 792
    keen::UiLocaTagReference controlSchemePresetA; // Offset: 808
    keen::UiLocaTagReference controlSchemePresetB; // Offset: 824
    keen::UiLocaTagReference controlSchemeCustom; // Offset: 840
    keen::UiLocaTagReference controlSchemeEdit; // Offset: 856
    keen::UiLocaTagReference controlSchemeCreate; // Offset: 872
    keen::UiLocaTagReference controlSchemeCreateDescription; // Offset: 888
    keen::UiLocaTagReference controlSchemeResetButton; // Offset: 904
    keen::FbUiLocaMenuBindingsReset controlSchemeResetDialog; // Offset: 920
    keen::UiLocaTagReference bindingEntryChange; // Offset: 1000
    keen::UiLocaTagReference bindingEntryUndo; // Offset: 1016
    keen::UiLocaTagReference bindingEntryReset; // Offset: 1032
    keen::UiLocaTagReference bindingEntryDelete; // Offset: 1048
    keen::UiLocaTagReference bindingEntryCustomize; // Offset: 1064
    keen::UiLocaTagReference bindingEntryRemapPrompt; // Offset: 1080
    keen::UiLocaTagReference warningHeader; // Offset: 1096
    keen::UiLocaTagReference warningCriticalDescription; // Offset: 1112
    keen::UiLocaTagReference warningRecommendedDescription; // Offset: 1128
    keen::UiLocaTagReference warningContinueEdit; // Offset: 1144
    keen::UiLocaTagReference warningUsePreset; // Offset: 1160
    keen::UiLocaTagReference warningUseIncompleteBindings; // Offset: 1176
    keen::UiLocaTagReference bindingCategoryMovements; // Offset: 1192
    keen::UiLocaTagReference bindingCategoryBasicActions; // Offset: 1208
    keen::UiLocaTagReference bindingCategoryCamera; // Offset: 1224
    keen::UiLocaTagReference bindingCategoryActionBar; // Offset: 1240
    keen::UiLocaTagReference bindingCategoryCombat; // Offset: 1256
    keen::UiLocaTagReference bindingCategoryShortcuts; // Offset: 1272
    keen::UiLocaTagReference bindingCategoryBuildings; // Offset: 1288
    keen::UiLocaTagReference bindingCategoryUserInterface; // Offset: 1304
    keen::UiLocaTagReference invalidBindingInput; // Offset: 1320
    keen::UiLocaTagReference useAnalogStickHint; // Offset: 1336
    keen::UiLocaTagReference searchKey; // Offset: 1352
    keen::UiLocaTagReference pressKey; // Offset: 1368
    keen::UiLocaTagReference inputKeyToSearch; // Offset: 1384
    keen::UiLocaTagReference clearSearch; // Offset: 1400
    keen::UiLocaTagReference volumeMaster; // Offset: 1416
    keen::UiLocaTagReference volumeMusic; // Offset: 1432
    keen::UiLocaTagReference volumeUi; // Offset: 1448
    keen::UiLocaTagReference volumeGame; // Offset: 1464
    keen::UiLocaTagReference volumeVoices; // Offset: 1480
    keen::UiLocaTagReference audioReverb; // Offset: 1496
    keen::UiLocaTagReference muteInBackground; // Offset: 1512
    keen::UiLocaTagReference monitor; // Offset: 1528
    keen::UiLocaTagReference displayMode; // Offset: 1544
    keen::UiLocaTagReference windowed; // Offset: 1560
    keen::UiLocaTagReference fullscreen; // Offset: 1576
    keen::UiLocaTagReference resolution; // Offset: 1592
    keen::UiLocaTagReference renderScale; // Offset: 1608
    keen::UiLocaTagReference vsync; // Offset: 1624
    keen::UiLocaTagReference sleepInBackground; // Offset: 1640
    keen::UiLocaTagReference pointLightShadows; // Offset: 1656
    keen::UiLocaTagReference fov; // Offset: 1672
    keen::UiLocaTagReference brightness; // Offset: 1688
    keen::UiLocaTagReference gamma; // Offset: 1704
    keen::UiLocaTagReference contrast; // Offset: 1720
    keen::UiLocaTagReference sharpness; // Offset: 1736
    keen::UiLocaTagReference quality; // Offset: 1752
    keen::UiLocaTagReference qualityPreset; // Offset: 1768
    keen::UiLocaTagReference custom; // Offset: 1784
    keen::UiLocaTagReference antialiasing; // Offset: 1800
    keen::UiLocaTagReference shadowQuality; // Offset: 1816
    keen::UiLocaTagReference contactShadows; // Offset: 1832
    keen::UiLocaTagReference fsr2Quality; // Offset: 1848
    keen::UiLocaTagReference fsr3Quality; // Offset: 1864
    keen::UiLocaTagReference dlssQuality; // Offset: 1880
    keen::UiLocaTagReference nvReflexQuality; // Offset: 1896
    keen::UiLocaTagReference reflections; // Offset: 1912
    keen::UiLocaTagReference fogQuality; // Offset: 1928
    keen::UiLocaTagReference volumetricShadowQuality; // Offset: 1944
    keen::UiLocaTagReference textureResolution; // Offset: 1960
    keen::UiLocaTagReference textureFiltering; // Offset: 1976
    keen::UiLocaTagReference ssao; // Offset: 1992
    keen::UiLocaTagReference distantObjects; // Offset: 2008
    keen::UiLocaTagReference decoObjects; // Offset: 2024
    keen::UiLocaTagReference detailScattering; // Offset: 2040
    keen::UiLocaTagReference voxelMeshing; // Offset: 2056
    keen::UiLocaTagReference tessellation; // Offset: 2072
    keen::UiLocaTagReference indirectLighting; // Offset: 2088
    keen::UiLocaTagReference antialiasingFxaa; // Offset: 2104
    keen::UiLocaTagReference antialiasingFsr2; // Offset: 2120
    keen::UiLocaTagReference antialiasingFsr3; // Offset: 2136
    keen::UiLocaTagReference antialiasingDlss; // Offset: 2152
    keen::UiLocaTagReference antialiasingDlaa; // Offset: 2168
    keen::UiLocaTagReference language; // Offset: 2184
    keen::UiLocaTagReference resolutionValue; // Offset: 2200
    keen::UiLocaTagReference nativeResolutionValue; // Offset: 2216
    keen::UiLocaTagReference vsyncIntervalValue; // Offset: 2232
    keen::UiLocaTagReference renderScaleDescription; // Offset: 2248
    keen::UiLocaTagReference antialiasingDescription; // Offset: 2264
    keen::UiLocaTagReference fsr2Description; // Offset: 2280
    keen::UiLocaTagReference fsr3Description; // Offset: 2296
    keen::UiLocaTagReference dlssDescription; // Offset: 2312
    keen::UiLocaTagReference nvReflexDescription; // Offset: 2328
    keen::UiLocaTagReference shadowsDescription; // Offset: 2344
    keen::UiLocaTagReference contactShadowsDescription; // Offset: 2360
    keen::UiLocaTagReference reflectionsDescription; // Offset: 2376
    keen::UiLocaTagReference fogQualityDescription; // Offset: 2392
    keen::UiLocaTagReference volShadowDescription; // Offset: 2408
    keen::UiLocaTagReference ssaoDescription; // Offset: 2424
    keen::UiLocaTagReference indirectLightingDescription; // Offset: 2440
    keen::UiLocaTagReference useCharacterNameDescription; // Offset: 2456
    keen::UiLocaTagReference gameplaySectionCamera; // Offset: 2472
    keen::UiLocaTagReference gameplaySectionCombat; // Offset: 2488
    keen::UiLocaTagReference gameplaySectionUI; // Offset: 2504
    keen::UiLocaTagReference cameraDistance; // Offset: 2520
    keen::UiLocaTagReference idleCameraMovement; // Offset: 2536
    keen::UiLocaTagReference idleCameraMovementDescription; // Offset: 2552
    keen::UiLocaTagReference reduceDynamicCameraMovement; // Offset: 2568
    keen::UiLocaTagReference reduceDynamicCameraMovementDescription; // Offset: 2584
    keen::UiLocaTagReference dynamicCameraGlider; // Offset: 2600
    keen::UiLocaTagReference dynamicCameraCombat; // Offset: 2616
    keen::UiLocaTagReference dynamicCameraGrapplingHook; // Offset: 2632
    keen::UiLocaTagReference dynamicCameraCampfire; // Offset: 2648
    keen::UiLocaTagReference screenShake; // Offset: 2664
    keen::UiLocaTagReference screenShakeStrength; // Offset: 2680
    keen::UiLocaTagReference displayDamageNumbers; // Offset: 2696
    keen::UiLocaTagReference displayDamagePropertyTexts; // Offset: 2712
    keen::UiLocaTagReference keepTargetLockWhenSprinting; // Offset: 2728
    keen::UiLocaTagReference autoChangeTargetLockOnKill; // Offset: 2744
    keen::UiLocaTagReference textScale; // Offset: 2760
    keen::UiLocaTagReference hudAspectRatioLimit; // Offset: 2776
    keen::UiLocaTagReference hudAspectRatioLimitNone; // Offset: 2792
    keen::UiLocaTagReference hideHUD; // Offset: 2808
    keen::UiLocaTagReference showHUD; // Offset: 2824
    keen::UiLocaTagReference hideHelmet; // Offset: 2840
    keen::UiLocaTagReference hideGloves; // Offset: 2856
    keen::UiLocaTagReference showRarityIcons; // Offset: 2872
    keen::UiLocaTagReference useCharacterName; // Offset: 2888
    keen::UiLocaTagReference confirmDeletionByRarity; // Offset: 2904
    keen::UiLocaTagReference confirmDeletionByRarityDescription; // Offset: 2920
    keen::UiLocaTagReference rarityAndAbove; // Offset: 2936
    keen::UiLocaTagReference hideSmallSpiders; // Offset: 2952
    keen::UiLocaTagReference controllerButtonStyle; // Offset: 2968
    keen::UiLocaTagReference controllerDiagramPageGeneral; // Offset: 2984
    keen::UiLocaTagReference controllerDiagramPageBuilding; // Offset: 3000
    keen::FbUiLocaTagDifficultySettings difficulty; // Offset: 3016
};

struct FbUiUserPermissions {
    keen::UiLocaTagReference kickBanPermissionDesc; // Offset: 0
    keen::UiLocaTagReference accessInventoriesPermissionDesc; // Offset: 16
    keen::UiLocaTagReference editBasePermissionDesc; // Offset: 32
    keen::UiLocaTagReference extendBasePermissionDesc; // Offset: 48
};

struct FbUiLocaMenuJournal {
    keen::UiLocaTagReference emptyMenuHintShort; // Offset: 0
    keen::UiLocaTagReference emptyMenuHintLong; // Offset: 16
};

struct FbUiLocaMenus {
    keen::FbUiLocaMenuPregame pregame; // Offset: 0
    keen::FbUiLocaMenuSystem system; // Offset: 2288
    keen::FbUiLocaMenuSettings settings; // Offset: 2688
    keen::FbUiUserPermissions userPermissions; // Offset: 7240
    keen::FbUiLocaMenuFlameAltar flameAltar; // Offset: 7304
    keen::FbUiLocaMenuJournal journal; // Offset: 7944
    keen::UiLocaTagReference menuHeaderFallbackCollection; // Offset: 7976
    keen::UiLocaTagReference menuHeaderFallbackFoodStorage; // Offset: 7992
    keen::UiLocaTagReference menuHeaderSkillTree; // Offset: 8008
    keen::UiLocaTagReference menuHeaderCharacterCustomization; // Offset: 8024
    keen::UiLocaTagReference menuHeaderCharacterCreation; // Offset: 8040
    keen::UiLocaTagReference menuHeaderStorageChest; // Offset: 8056
    keen::UiLocaTagReference menuHeaderLootEntity; // Offset: 8072
    keen::UiLocaTagReference menuHeaderSystem; // Offset: 8088
    keen::UiLocaTagReference bpMenuGettingReady; // Offset: 8104
    keen::UiLocaTagReference bpMenuSectionActiveBlueprint; // Offset: 8120
    keen::UiLocaTagReference bpMenuSectionAvailableBlueprints; // Offset: 8136
    keen::UiLocaTagReference bpMenuSectionMaterials; // Offset: 8152
    keen::UiLocaTagReference bpMenuShapeBarExpansionHint; // Offset: 8168
    keen::UiLocaTagReference bpMenuSubCategorySingleBlock; // Offset: 8184
    keen::UiLocaTagReference bpMenuSubCategoryNonRoof; // Offset: 8200
    keen::UiLocaTagReference bpMenuSubCategoryNonRoof_4m; // Offset: 8216
    keen::UiLocaTagReference bpMenuSubCategoryRoof; // Offset: 8232
    keen::UiLocaTagReference bpMenuSubCategoryRoof_4m; // Offset: 8248
    keen::UiLocaTagReference bpMenuSubCategoryTerrain; // Offset: 8264
    keen::UiLocaTagReference terraformerMenuSectionActiveTool; // Offset: 8280
    keen::UiLocaTagReference terraformerMenuSectionAvailableTool; // Offset: 8296
    keen::UiLocaTagReference npcSideMenuSectionActiveTool; // Offset: 8312
    keen::UiLocaTagReference npcSideMenuSectionAvailableTool; // Offset: 8328
    keen::UiLocaTagReference npcSideMenuNoAvailableNpcs; // Offset: 8344
    keen::UiLocaTagReference npcSideMenuRoamingRange; // Offset: 8360
    keen::UiLocaTagReference npcSideMenuRoamingRangeLabel; // Offset: 8376
    keen::UiLocaTagReference dialogNoChatterHint; // Offset: 8392
    keen::UiLocaTagReference repairNotAvailableHint; // Offset: 8408
    keen::UiLocaTagReference craftingTabManual; // Offset: 8424
    keen::UiLocaTagReference craftingTabRepair; // Offset: 8440
    keen::UiLocaTagReference craftingTabRecycling; // Offset: 8456
    keen::UiLocaTagReference craftingTabUpgrade; // Offset: 8472
    keen::UiLocaTagReference playerEntryFallback; // Offset: 8488
    keen::UiLocaTagReference itemPerksHeader; // Offset: 8504
    keen::UiLocaTagReference itemPerksAttributeGeneric; // Offset: 8520
    keen::UiLocaTagReference flame; // Offset: 8536
    keen::UiLocaTagReference theFlame; // Offset: 8552
    keen::UiLocaTagReference activeAltars; // Offset: 8568
    keen::UiLocaTagReference mapNpcUnplacedHint; // Offset: 8584
    keen::UiLocaTagReference attributeValueExplainShort; // Offset: 8600
    keen::UiLocaTagReference attributeValueExplainLong; // Offset: 8616
    keen::UiLocaTagReference resistanceAttributeBonusTooltip; // Offset: 8632
    keen::UiLocaTagReference susceptibilityAttributeTooltip; // Offset: 8648
    keen::UiLocaTagReference page; // Offset: 8664
    keen::UiLocaTagReference pageNavigation; // Offset: 8680
    keen::UiLocaTagReference pagesUnlocked; // Offset: 8696
    keen::UiLocaTagReference rewards; // Offset: 8712
    keen::UiLocaTagReference activeQuest; // Offset: 8728
    keen::UiLocaTagReference fastTravelDisabled; // Offset: 8744
    keen::UiLocaTagReference fastTravelDisabledFalling; // Offset: 8760
    keen::UiLocaTagReference objective; // Offset: 8776
    keen::UiLocaTagReference location; // Offset: 8792
    keen::UiLocaTagReference completed; // Offset: 8808
    keen::UiLocaTagReference documentItem; // Offset: 8824
    keen::UiLocaTagReference loreCategoryUnsorted; // Offset: 8840
    keen::UiLocaTagReference loreCategoryUndiscovered; // Offset: 8856
    keen::UiLocaTagReference noUncompletedQuestsHint; // Offset: 8872
    keen::UiLocaTagReference noCompletedQuestsHint; // Offset: 8888
    keen::UiLocaTagReference customMapMarkerLabel; // Offset: 8904
    keen::UiLocaTagReference tombstoneLabel; // Offset: 8920
    keen::UiLocaTagReference missedWorldQuestsMapHint; // Offset: 8936
    keen::UiLocaTagReference questCategoryActive; // Offset: 8952
    keen::UiLocaTagReference questCategoryInactive; // Offset: 8968
    keen::UiLocaTagReference nextQuestHintDocName; // Offset: 8984
    keen::UiLocaTagReference nextQuestHintPageName; // Offset: 9000
    keen::UiLocaTagReference nextQuestHintText; // Offset: 9016
    keen::UiLocaTagReference kickPlayerPopupHeader; // Offset: 9032
    keen::UiLocaTagReference kickPlayerPopupContent; // Offset: 9048
    keen::UiLocaTagReference currentPlayerPermissionHeader; // Offset: 9064
    keen::UiLocaTagReference nextQuestHintTheFlame; // Offset: 9080
    keen::UiLocaTagReference songSelectionHeader; // Offset: 9096
    keen::UiLocaTagReference showDetailedDiffucultySettings; // Offset: 9112
    keen::UiLocaTagReference difficultySettingsReadOnlyExplanation; // Offset: 9128
    keen::UiLocaTagReference difficultySettingsReadOnlyExplanationDedicatedServer; // Offset: 9144
    keen::UiLocaTagReference twitchDropsHeader; // Offset: 9160
    keen::UiLocaTagReference twitchDropsNoUnlocks; // Offset: 9176
    keen::UiLocaTagReference npcStatusBed; // Offset: 9192
    keen::UiLocaTagReference npcStatusFood; // Offset: 9208
    keen::UiLocaTagReference collectionDisplayedHeader; // Offset: 9224
    keen::UiLocaTagReference collectionAvailableItemsHeader; // Offset: 9240
    keen::UiLocaTagReference collectionAvailableItemsSubHeader; // Offset: 9256
    keen::UiLocaTagReference collectionNoAvailableItemsHint; // Offset: 9272
    keen::UiLocaTagReference npcCraftingLabel; // Offset: 9288
    keen::UiLocaTagReference npcAssistantLabel; // Offset: 9304
    keen::UiLocaTagReference npcTownsfolkLabel; // Offset: 9320
    keen::UiLocaTagReference basesInfoAnimalsHungry; // Offset: 9336
    keen::UiLocaTagReference basesInfoAnimalsBeds; // Offset: 9352
    keen::UiLocaTagReference basesInfoAnimalsBedsObstructed; // Offset: 9368
    keen::UiLocaTagReference basesGenericLabel; // Offset: 9384
    keen::UiLocaTagReference altarGenericLabel; // Offset: 9400
};

struct FbUiLocaEquipmentMenu {
    keen::UiLocaTagReference mainHand; // Offset: 0
    keen::UiLocaTagReference shield; // Offset: 16
    keen::UiLocaTagReference rangedWeapon; // Offset: 32
    keen::UiLocaTagReference arrow; // Offset: 48
    keen::UiLocaTagReference spell; // Offset: 64
    keen::UiLocaTagReference backpackExtender; // Offset: 80
    keen::UiLocaTagReference climbTool; // Offset: 96
    keen::UiLocaTagReference hookshot; // Offset: 112
    keen::UiLocaTagReference glider; // Offset: 128
    keen::UiLocaTagReference accessory0; // Offset: 144
    keen::UiLocaTagReference accessory1; // Offset: 160
    keen::UiLocaTagReference ring0; // Offset: 176
    keen::UiLocaTagReference ring1; // Offset: 192
    keen::UiLocaTagReference head; // Offset: 208
    keen::UiLocaTagReference upperBody; // Offset: 224
    keen::UiLocaTagReference arms; // Offset: 240
    keen::UiLocaTagReference lowerBody; // Offset: 256
    keen::UiLocaTagReference boots; // Offset: 272
    keen::UiLocaTagReference attributes; // Offset: 288
    keen::UiLocaTagReference status; // Offset: 304
    keen::UiLocaTagReference attributeTileMainhandDamage; // Offset: 320
    keen::UiLocaTagReference attributeTileRangedEquipmentDamage; // Offset: 336
    keen::UiLocaTagReference attributeTileShieldDefense; // Offset: 352
    keen::UiLocaTagReference attributeTileBackpackExtender; // Offset: 368
    keen::UiLocaTagReference attributeTilePrompt; // Offset: 384
    keen::UiLocaTagReference statusTilePrompt; // Offset: 400
    keen::UiLocaTagReference attributeSectionMain; // Offset: 416
    keen::UiLocaTagReference attributeSectionOffense; // Offset: 432
    keen::UiLocaTagReference attributeSectionDefense; // Offset: 448
    keen::UiLocaTagReference attributeBonusHint; // Offset: 464
    keen::UiLocaTagReference attributeTooltipHint; // Offset: 480
    keen::UiLocaTagReference statusNothingHintCondensed; // Offset: 496
    keen::UiLocaTagReference statusNothingHint; // Offset: 512
    keen::UiLocaTagReference statusSectionFood; // Offset: 528
    keen::UiLocaTagReference statusSectionRest; // Offset: 544
    keen::UiLocaTagReference statusFoodEmptyHint; // Offset: 560
    keen::UiLocaTagReference statusRestConditionHeader; // Offset: 576
    keen::UiLocaTagReference statusRestConditionSitOrShelter; // Offset: 592
    keen::UiLocaTagReference statusRestComfortHeader; // Offset: 608
    keen::UiLocaTagReference statusRestComfortLevel; // Offset: 624
    keen::UiLocaTagReference statusRestComfortLevelNumbered; // Offset: 640
    keen::UiLocaTagReference statusRestComfortCondition; // Offset: 656
    keen::UiLocaTagReference statusBuffs; // Offset: 672
    keen::UiLocaTagReference statusDebuffs; // Offset: 688
    keen::UiLocaTagReference statusPlayerState; // Offset: 704
    keen::UiLocaTagReference noDebuffActive; // Offset: 720
    keen::UiLocaTagReference noBuffActive; // Offset: 736
    keen::UiLocaTagReference noPlayerStateActive; // Offset: 752
    keen::UiLocaTagReference equipped; // Offset: 768
    keen::UiLocaTagReference available; // Offset: 784
    keen::UiLocaTagReference slotContentNone; // Offset: 800
    keen::UiLocaTagReference vanityModePrompt; // Offset: 816
    keen::UiLocaTagReference vanityModeGearSection; // Offset: 832
    keen::UiLocaTagReference vanityModeVisualSection; // Offset: 848
    keen::UiLocaTagReference vanityModeHideSlotAction; // Offset: 864
    keen::UiLocaTagReference equipmentUsedAsVanityHint; // Offset: 880
};

struct FbUiLocaInventory {
    keen::UiLocaTagReference actionBar; // Offset: 0
    keen::UiLocaTagReference actionBarCurrent; // Offset: 16
    keen::UiLocaTagReference mainTabBackpack; // Offset: 32
    keen::UiLocaTagReference mainTabEquipment; // Offset: 48
    keen::UiLocaTagReference mainTabCrafting; // Offset: 64
    keen::UiLocaTagReference mainTabJournal; // Offset: 80
    keen::UiLocaTagReference mainTabMap; // Offset: 96
    keen::UiLocaTagReference mainTabSkillTree; // Offset: 112
    keen::UiLocaTagReference mainTabSettings; // Offset: 128
    keen::UiLocaTagReference mainTabStore; // Offset: 144
    keen::UiLocaTagReference giftingMenuTitle; // Offset: 160
    keen::UiLocaTagReference giftingLimitationHint; // Offset: 176
    keen::UiLocaTagReference giftingActionHeader; // Offset: 192
    keen::UiLocaTagReference giftingAmountOne; // Offset: 208
    keen::UiLocaTagReference giftingAmountHalf; // Offset: 224
    keen::UiLocaTagReference giftingAmountAll; // Offset: 240
    keen::UiLocaTagReference giftingAmountAdjust; // Offset: 256
    keen::UiLocaTagReference giftingTargetStatusCanReceive; // Offset: 272
    keen::UiLocaTagReference giftingTargetStatusDead; // Offset: 288
    keen::UiLocaTagReference giftingTargetStatusOutOfRange; // Offset: 304
    keen::UiLocaTagReference giftingTargetStatusBackpackFull; // Offset: 320
    keen::UiLocaTagReference giftingTarget; // Offset: 336
    keen::UiLocaTagReference giftingTargetMissingHint; // Offset: 352
    keen::UiLocaTagReference giftingActionConfirm; // Offset: 368
    keen::UiLocaTagReference giftingStackNew; // Offset: 384
    keen::UiLocaTagReference giftingStackOriginal; // Offset: 400
    keen::UiLocaTagReference giftedLootLogEntryHint; // Offset: 416
    keen::UiLocaTagReference splitStackNew; // Offset: 432
    keen::UiLocaTagReference splitStackOriginal; // Offset: 448
    keen::UiLocaTagReference deletionConfirmMessage; // Offset: 464
    keen::UiLocaTagReference deletionConfirmSuppression; // Offset: 480
    keen::UiLocaTagReference deletionConfirmSettingHint; // Offset: 496
    keen::UiLocaTagReference salvagingConfirmMessage; // Offset: 512
    keen::UiLocaTagReference highlightIsCurrentItemHint; // Offset: 528
    keen::UiLocaTagReference codexTileClues; // Offset: 544
    keen::UiLocaTagReference codexTileLore; // Offset: 560
    keen::UiLocaTagReference codexTilePinnedRecipe; // Offset: 576
    keen::UiLocaTagReference codexTileRecipeBook; // Offset: 592
    keen::UiLocaTagReference codexTileTutorials; // Offset: 608
    keen::UiLocaTagReference codexPageNotDiscovered; // Offset: 624
    keen::UiLocaTagReference journalCompletedSectionLabel; // Offset: 640
    keen::UiLocaTagReference journalWorldQuestSectionLabel; // Offset: 656
    keen::UiLocaTagReference journalMissedWorldQuestSectionLabel; // Offset: 672
    keen::UiLocaTagReference journalPersonalQuestSectionLabel; // Offset: 688
    keen::UiLocaTagReference journalCompletedSectionDesc; // Offset: 704
    keen::UiLocaTagReference journalWorldQuestSectionDesc; // Offset: 720
    keen::UiLocaTagReference journalMissedWorldQuestSectionDesc; // Offset: 736
    keen::UiLocaTagReference journalPersonalQuestSectionDesc; // Offset: 752
    keen::UiLocaTagReference codexTileMotherflame; // Offset: 768
    keen::UiLocaTagReference codexTileNpcs; // Offset: 784
    keen::UiLocaTagReference codexTileSurvivors; // Offset: 800
    keen::UiLocaTagReference codexTileTownfolk; // Offset: 816
    keen::UiLocaTagReference codexTileBases; // Offset: 832
    keen::UiLocaTagReference codexTileGroupPersonal; // Offset: 848
    keen::UiLocaTagReference codexTileGroupWorld; // Offset: 864
    keen::UiLocaTagReference freeWaypointLabel; // Offset: 880
    keen::UiLocaTagReference mapNodeIsWaypointHint; // Offset: 896
    keen::UiLocaTagReference noItemSelectedHint; // Offset: 912
    keen::UiLocaTagReference noSlotInBackpackHint; // Offset: 928
    keen::UiLocaTagReference skillpointLabelAvailable; // Offset: 944
    keen::UiLocaTagReference skillpointLabelInUse; // Offset: 960
    keen::UiLocaTagReference skillpointLabelRefund; // Offset: 976
    keen::UiLocaTagReference skilltreeNodeUnlocked; // Offset: 992
    keen::UiLocaTagReference skilltreeNodeOutOfRange; // Offset: 1008
    keen::UiLocaTagReference skilltreeNodeFutureContent; // Offset: 1024
    keen::UiLocaTagReference skilltreeNodeActivated; // Offset: 1040
    keen::UiLocaTagReference cookingHintRelease; // Offset: 1056
    keen::UiLocaTagReference cookingHintHold; // Offset: 1072
    keen::UiLocaTagReference sortStacksFromInventory; // Offset: 1088
    keen::UiLocaTagReference sortStacksToInventory; // Offset: 1104
    keen::UiLocaTagReference takeStacks; // Offset: 1120
    keen::UiLocaTagReference depositStacks; // Offset: 1136
    keen::UiLocaTagReference takeAll; // Offset: 1152
    keen::UiLocaTagReference depositAll; // Offset: 1168
    keen::UiLocaTagReference sortInventory; // Offset: 1184
    keen::UiLocaTagReference sortStorage; // Offset: 1200
    keen::UiLocaTagReference magicChestTab; // Offset: 1216
    keen::UiLocaTagReference magicChestAddOne; // Offset: 1232
    keen::UiLocaTagReference magicChestAddStack; // Offset: 1248
    keen::UiLocaTagReference magicChestAddAll; // Offset: 1264
    keen::UiLocaTagReference feedingStationStackAdditionMaxPossible; // Offset: 1280
    keen::UiLocaTagReference factoryAddIngredientsOne; // Offset: 1296
    keen::UiLocaTagReference factoryAddIngredientsMultiple; // Offset: 1312
    keen::UiLocaTagReference itemNoTwitchPermission; // Offset: 1328
    keen::UiLocaTagReference twitchItemLabel; // Offset: 1344
    keen::FbUiLocaEquipmentMenu equipmentMenu; // Offset: 1360
};

struct FbUiLocaBuildVerbs {
    keen::UiLocaTagReference genericAction; // Offset: 0
    keen::UiLocaTagReference blockAction; // Offset: 16
    keen::UiLocaTagReference blueprintAction; // Offset: 32
    keen::UiLocaTagReference propAction; // Offset: 48
    keen::UiLocaTagReference terraformAddAction; // Offset: 64
    keen::UiLocaTagReference terraformFlattenAction; // Offset: 80
    keen::UiLocaTagReference terraformRemoveAction; // Offset: 96
};

struct FbUiLocaGameplayActionLabels {
    keen::UiLocaTagReference locomotionMoveLeft; // Offset: 0
    keen::UiLocaTagReference locomotionMoveRight; // Offset: 16
    keen::UiLocaTagReference locomotionMoveForward; // Offset: 32
    keen::UiLocaTagReference locomotionMoveBackward; // Offset: 48
    keen::UiLocaTagReference locomotionMove; // Offset: 64
    keen::UiLocaTagReference cameraRotateLeft; // Offset: 80
    keen::UiLocaTagReference cameraRotateRight; // Offset: 96
    keen::UiLocaTagReference cameraRotateUp; // Offset: 112
    keen::UiLocaTagReference cameraRotateDown; // Offset: 128
    keen::UiLocaTagReference cameraRotate; // Offset: 144
    keen::UiLocaTagReference cameraZoomIn; // Offset: 160
    keen::UiLocaTagReference cameraZoomOut; // Offset: 176
    keen::UiLocaTagReference mainHandAction; // Offset: 192
    keen::UiLocaTagReference contextualAction; // Offset: 208
    keen::UiLocaTagReference cancelAction; // Offset: 224
    keen::UiLocaTagReference ammunitionSelectPrevious; // Offset: 240
    keen::UiLocaTagReference ammunitionSelectNext; // Offset: 256
    keen::UiLocaTagReference blueprintDistanceIncrease; // Offset: 272
    keen::UiLocaTagReference blueprintDistanceDecrease; // Offset: 288
    keen::UiLocaTagReference blueprintMaterialSelectPrevious; // Offset: 304
    keen::UiLocaTagReference blueprintMaterialSelectNext; // Offset: 320
    keen::UiLocaTagReference blueprintPageSelectPrevious; // Offset: 336
    keen::UiLocaTagReference blueprintPageSelectNext; // Offset: 352
    keen::UiLocaTagReference blueprintShapeSelectPrevious; // Offset: 368
    keen::UiLocaTagReference blueprintShapeSelectNext; // Offset: 384
    keen::UiLocaTagReference actionBarSlot1; // Offset: 400
    keen::UiLocaTagReference actionBarSlot2; // Offset: 416
    keen::UiLocaTagReference actionBarSlot3; // Offset: 432
    keen::UiLocaTagReference actionBarSlot4; // Offset: 448
    keen::UiLocaTagReference actionBarSlot5; // Offset: 464
    keen::UiLocaTagReference actionBarSlot6; // Offset: 480
    keen::UiLocaTagReference actionBarSlot7; // Offset: 496
    keen::UiLocaTagReference actionBarSlot8; // Offset: 512
    keen::UiLocaTagReference actionBarSlot9; // Offset: 528
    keen::UiLocaTagReference actionBarSlot10; // Offset: 544
    keen::UiLocaTagReference actionBarWheel; // Offset: 560
    keen::UiLocaTagReference actionBarSwapPage; // Offset: 576
    keen::UiLocaTagReference actionBarSwapPageVerbOnly; // Offset: 592
    keen::UiLocaTagReference actionBarSlotPrevious; // Offset: 608
    keen::UiLocaTagReference actionBarSlotNext; // Offset: 624
    keen::UiLocaTagReference guardAndParry; // Offset: 640
    keen::UiLocaTagReference guard; // Offset: 656
    keen::UiLocaTagReference parry; // Offset: 672
    keen::UiLocaTagReference locomotionSprint; // Offset: 688
    keen::UiLocaTagReference locomotionEvade; // Offset: 704
    keen::UiLocaTagReference locomotionJump; // Offset: 720
    keen::UiLocaTagReference locomotionSneak; // Offset: 736
    keen::UiLocaTagReference locomotionSit; // Offset: 752
    keen::UiLocaTagReference locomotionGlide; // Offset: 768
    keen::UiLocaTagReference locomotionHookshot; // Offset: 784
    keen::UiLocaTagReference respawn; // Offset: 800
    keen::UiLocaTagReference buildingUndo; // Offset: 816
    keen::UiLocaTagReference buildingDismantle; // Offset: 832
    keen::UiLocaTagReference buildingDismantlePickup; // Offset: 848
    keen::UiLocaTagReference buildingDismantleNotPossible; // Offset: 864
    keen::UiLocaTagReference animalPickupNotPossible; // Offset: 880
    keen::UiLocaTagReference buildingSnapping; // Offset: 896
    keen::UiLocaTagReference transformRotateClockwiseSmall; // Offset: 912
    keen::UiLocaTagReference transformRotateClockwiseBig; // Offset: 928
    keen::UiLocaTagReference transformRotateCounterClockwiseSmall; // Offset: 944
    keen::UiLocaTagReference transformRotateCounterClockwiseBig; // Offset: 960
    keen::UiLocaTagReference transformChangeAngleClockwise; // Offset: 976
    keen::UiLocaTagReference transformChangeAngleCounterClockwise; // Offset: 992
    keen::UiLocaTagReference combatTargetLock; // Offset: 1008
    keen::UiLocaTagReference combatTargetLeft; // Offset: 1024
    keen::UiLocaTagReference combatTargetRight; // Offset: 1040
    keen::UiLocaTagReference rangedCombatReady; // Offset: 1056
    keen::UiLocaTagReference rangedCombatShoot; // Offset: 1072
    keen::UiLocaTagReference songSelectOpen; // Offset: 1088
    keen::UiLocaTagReference songSelectPrevious; // Offset: 1104
    keen::UiLocaTagReference songSelectNext; // Offset: 1120
    keen::UiLocaTagReference systemMenuOpen; // Offset: 1136
    keen::UiLocaTagReference playerMenuOpen; // Offset: 1152
    keen::UiLocaTagReference playerMenuBackpack; // Offset: 1168
    keen::UiLocaTagReference playerMenuEquipmentAndStats; // Offset: 1184
    keen::UiLocaTagReference playerMenuWorld; // Offset: 1200
    keen::UiLocaTagReference playerMenuJournal; // Offset: 1216
    keen::UiLocaTagReference playerMenuCrafting; // Offset: 1232
    keen::UiLocaTagReference playerMenuSkills; // Offset: 1248
    keen::UiLocaTagReference goToCurrentNotificationTab; // Offset: 1264
    keen::UiLocaTagReference hudMenuBlueprints; // Offset: 1280
    keen::UiLocaTagReference inputModalityTap; // Offset: 1296
    keen::UiLocaTagReference inputModalityHold; // Offset: 1312
    keen::UiLocaTagReference inputModalityRelease; // Offset: 1328
    keen::UiLocaTagReference inputModalityToggle; // Offset: 1344
    keen::UiLocaTagReference assignBedHint; // Offset: 1360
    keen::FbUiLocaBuildVerbs buildVerbs; // Offset: 1376
};

struct FbUiLocaUiActionLabels {
    keen::UiLocaTagReference recipeUpgrade; // Offset: 0
    keen::UiLocaTagReference repairItem; // Offset: 16
    keen::UiLocaTagReference confirm; // Offset: 32
    keen::UiLocaTagReference finish; // Offset: 48
    keen::UiLocaTagReference cancel; // Offset: 64
    keen::UiLocaTagReference back; // Offset: 80
    keen::UiLocaTagReference openHint; // Offset: 96
    keen::UiLocaTagReference close; // Offset: 112
    keen::UiLocaTagReference leave; // Offset: 128
    keen::UiLocaTagReference join; // Offset: 144
    keen::UiLocaTagReference changeGeneric; // Offset: 160
    keen::UiLocaTagReference secondaryAction; // Offset: 176
    keen::UiLocaTagReference tertiaryAction; // Offset: 192
    keen::UiLocaTagReference moveObject; // Offset: 208
    keen::UiLocaTagReference changeTab; // Offset: 224
    keen::UiLocaTagReference navigationMove; // Offset: 240
    keen::UiLocaTagReference navigationScroll; // Offset: 256
    keen::UiLocaTagReference previousPage; // Offset: 272
    keen::UiLocaTagReference nextPage; // Offset: 288
    keen::UiLocaTagReference mapZoom; // Offset: 304
    keen::UiLocaTagReference mapFastTravel; // Offset: 320
    keen::UiLocaTagReference mapSnapToWaypoint; // Offset: 336
    keen::UiLocaTagReference mapSnapToPlayerPos; // Offset: 352
    keen::UiLocaTagReference mapSnapToHomeBase; // Offset: 368
    keen::UiLocaTagReference mapLocateGeneric; // Offset: 384
    keen::UiLocaTagReference mapWorldSidebar; // Offset: 400
    keen::UiLocaTagReference mapPlayersSidebar; // Offset: 416
    keen::UiLocaTagReference mapFilterSidebar; // Offset: 432
    keen::UiLocaTagReference mapFilterFocusType; // Offset: 448
    keen::UiLocaTagReference clearMapFilter; // Offset: 464
    keen::UiLocaTagReference mapGotoJournal; // Offset: 480
    keen::UiLocaTagReference gotoReferencedJournalPage; // Offset: 496
    keen::UiLocaTagReference gotoReferencedLorePage; // Offset: 512
    keen::UiLocaTagReference gotoReferencedQuestPage; // Offset: 528
    keen::UiLocaTagReference mapActions; // Offset: 544
    keen::UiLocaTagReference mapSetWaypoint; // Offset: 560
    keen::UiLocaTagReference mapSetAsWaypoint; // Offset: 576
    keen::UiLocaTagReference mapRemoveWaypoint; // Offset: 592
    keen::UiLocaTagReference mapSendPing; // Offset: 608
    keen::UiLocaTagReference codexShowOnMap; // Offset: 624
    keen::UiLocaTagReference placeNpcInWorld; // Offset: 640
    keen::UiLocaTagReference itemViewerVisibilityToggle; // Offset: 656
    keen::UiLocaTagReference backpackUseItem; // Offset: 672
    keen::UiLocaTagReference backpackActions; // Offset: 688
    keen::UiLocaTagReference backpackSplitStack; // Offset: 704
    keen::UiLocaTagReference backpackDeleteItem; // Offset: 720
    keen::UiLocaTagReference backpackSalvageItem; // Offset: 736
    keen::UiLocaTagReference splitStackAdjustMin; // Offset: 752
    keen::UiLocaTagReference splitStackAdjustDecrement; // Offset: 768
    keen::UiLocaTagReference splitStackAdjustHalf; // Offset: 784
    keen::UiLocaTagReference splitStackAdjustIncrement; // Offset: 800
    keen::UiLocaTagReference splitStackAdjustMax; // Offset: 816
    keen::UiLocaTagReference backpackGrabItemForMoving; // Offset: 832
    keen::UiLocaTagReference backpackGrabItemForMovingPartial; // Offset: 848
    keen::UiLocaTagReference backpackGrabItemForMovingHoldable; // Offset: 864
    keen::UiLocaTagReference backpackDropItemIntoSlot; // Offset: 880
    keen::UiLocaTagReference quickMoveItem; // Offset: 896
    keen::UiLocaTagReference quickMoveItemActionbar; // Offset: 912
    keen::UiLocaTagReference quickMoveItemStorage; // Offset: 928
    keen::UiLocaTagReference quickMoveTargetFull; // Offset: 944
    keen::UiLocaTagReference refillStacks; // Offset: 960
    keen::UiLocaTagReference backpackEquip; // Offset: 976
    keen::UiLocaTagReference backpackUnequip; // Offset: 992
    keen::UiLocaTagReference backpackReplaceItem; // Offset: 1008
    keen::UiLocaTagReference backpackGiftItem; // Offset: 1024
    keen::UiLocaTagReference showTutorial; // Offset: 1040
    keen::UiLocaTagReference changeBlueprint; // Offset: 1056
    keen::UiLocaTagReference lootTakeSingle; // Offset: 1072
    keen::UiLocaTagReference lootTakeAll; // Offset: 1088
    keen::UiLocaTagReference craftActionSingle; // Offset: 1104
    keen::UiLocaTagReference craftActionMultiple; // Offset: 1120
    keen::UiLocaTagReference stopAutomatedCraftingNext; // Offset: 1136
    keen::UiLocaTagReference changeAutomatedCraftingOuput; // Offset: 1152
    keen::UiLocaTagReference recipePin; // Offset: 1168
    keen::UiLocaTagReference recipeUnpin; // Offset: 1184
    keen::UiLocaTagReference showItemViewerTextArea; // Offset: 1200
    keen::UiLocaTagReference showItemViewerRecipeArea; // Offset: 1216
    keen::UiLocaTagReference toggleItemViewerRecipeView; // Offset: 1232
    keen::UiLocaTagReference activate; // Offset: 1248
    keen::UiLocaTagReference unlock; // Offset: 1264
    keen::UiLocaTagReference unlockNextPerk; // Offset: 1280
    keen::UiLocaTagReference rename; // Offset: 1296
    keen::UiLocaTagReference done; // Offset: 1312
    keen::UiLocaTagReference refillToInventory; // Offset: 1328
    keen::UiLocaTagReference refillFromInventory; // Offset: 1344
    keen::UiLocaTagReference increase; // Offset: 1360
    keen::UiLocaTagReference decrease; // Offset: 1376
    keen::UiLocaTagReference clear; // Offset: 1392
    keen::UiLocaTagReference selectSessionSettings; // Offset: 1408
    keen::UiLocaTagReference selectSavegame; // Offset: 1424
    keen::UiLocaTagReference selectServerFilter; // Offset: 1440
    keen::UiLocaTagReference selectServer; // Offset: 1456
    keen::UiLocaTagReference skip; // Offset: 1472
    keen::UiLocaTagReference select; // Offset: 1488
    keen::UiLocaTagReference next; // Offset: 1504
    keen::UiLocaTagReference create; // Offset: 1520
    keen::UiLocaTagReference continueAction; // Offset: 1536
    keen::UiLocaTagReference setActiveQuest; // Offset: 1552
    keen::UiLocaTagReference hidePassword; // Offset: 1568
    keen::UiLocaTagReference toggleFavourite; // Offset: 1584
    keen::UiLocaTagReference hideIPAddressInput; // Offset: 1600
    keen::UiLocaTagReference createMarker; // Offset: 1616
    keen::UiLocaTagReference removeMarker; // Offset: 1632
    keen::UiLocaTagReference togglePersonalProgression; // Offset: 1648
    keen::UiLocaTagReference activatePersonalProgression; // Offset: 1664
    keen::UiLocaTagReference deactivatePersonalProgression; // Offset: 1680
    keen::UiLocaTagReference search; // Offset: 1696
    keen::UiLocaTagReference expandToggle; // Offset: 1712
    keen::UiLocaTagReference toggleTooltip; // Offset: 1728
    keen::UiLocaTagReference toggleVisibility; // Offset: 1744
    keen::UiLocaTagReference change; // Offset: 1760
    keen::UiLocaTagReference kickPlayer; // Offset: 1776
    keen::UiLocaTagReference toggle; // Offset: 1792
    keen::UiLocaTagReference renameAltar; // Offset: 1808
    keen::UiLocaTagReference enable; // Offset: 1824
    keen::UiLocaTagReference disable; // Offset: 1840
    keen::UiLocaTagReference instrumentActionTuneIn; // Offset: 1856
    keen::UiLocaTagReference confirmPassword; // Offset: 1872
    keen::UiLocaTagReference resetToDefault; // Offset: 1888
    keen::UiLocaTagReference claimTwitchItem; // Offset: 1904
    keen::UiLocaTagReference swapArmor; // Offset: 1920
    keen::UiLocaTagReference swapVanity; // Offset: 1936
    keen::UiLocaTagReference equipCollection; // Offset: 1952
    keen::UiLocaTagReference unequipCollection; // Offset: 1968
    keen::UiLocaTagReference equipAsArmor; // Offset: 1984
    keen::UiLocaTagReference equipAsVanity; // Offset: 2000
};

struct FbUiLocaLinks {
    keen::UiLocaTagReference styleTest; // Offset: 0
    keen::UiLocaTagReference invalidUiString; // Offset: 16
    keen::UiLocaTagReference closedBetaHint; // Offset: 32
    keen::UiLocaTagReference demoSettingsHint; // Offset: 48
    keen::FbUiLocaRpgTerms rpgTerms; // Offset: 64
    keen::FbUiLocaGeneric genericStrings; // Offset: 5600
    keen::FbUiLocaPunctuations punctuations; // Offset: 5648
    keen::FbUiLocaUiActionLabels uiActions; // Offset: 5824
    keen::FbUiLocaGameplayActionLabels gameplayActions; // Offset: 7840
    keen::FbUiLocaInput inputStrings; // Offset: 9328
    keen::FbUiLocaHud hudStrings; // Offset: 9568
    keen::FbUiLocaInventory inventory; // Offset: 12320
    keen::FbUiLocaMenus menuStrings; // Offset: 14576
    keen::FbUiLocaCrafting crafting; // Offset: 23992
    keen::FbUiLocaItemEquipmentSlots itemEquipmentSlots; // Offset: 25032
};

struct FbUiCharacterView {
    keen::float3 lookAt; // Offset: 0
    keen::float32 distance; // Offset: 12
    keen::float32 pitch; // Offset: 16
    keen::float32 yaw; // Offset: 20
    keen::float32 fov; // Offset: 24
};

enum class FbUiGamepadButtonImageTagId {
    None = 0,
    Dpad = 1,
    DpadLeft = 2,
    DpadRight = 3,
    DpadUp = 4,
    DpadDown = 5,
    DpadVertical = 6,
    DpadHorizontal = 7,
    LeftStick = 8,
    RightStick = 9,
    LeftStickPress = 10,
    RightStickPress = 11,
    LeftStickUp = 12,
    LeftStickDown = 13,
    LeftStickLeft = 14,
    LeftStickRight = 15,
    LeftStickHorizontal = 16,
    LeftStickVertical = 17,
    RightStickUp = 18,
    RightStickDown = 19,
    RightStickLeft = 20,
    RightStickRight = 21,
    RightStickHorizontal = 22,
    RightStickVertical = 23,
    FaceTop = 24,
    FaceBottom = 25,
    FaceLeft = 26,
    FaceRight = 27,
    ShoulderLeftUpper = 28,
    ShoulderLeftLower = 29,
    ShoulderRightUpper = 30,
    ShoulderRightLower = 31,
    SystemLeft = 32,
    SystemRight = 33,
};

struct FbUiGamepadButtonSet {
    keen::UiTexture dpad; // Offset: 0
    keen::UiTexture dpadLeft; // Offset: 48
    keen::UiTexture dpadRight; // Offset: 96
    keen::UiTexture dpadUp; // Offset: 144
    keen::UiTexture dpadDown; // Offset: 192
    keen::UiTexture dpadVertical; // Offset: 240
    keen::UiTexture dpadHorizontal; // Offset: 288
    keen::UiTexture leftStick; // Offset: 336
    keen::UiTexture rightStick; // Offset: 384
    keen::UiTexture leftStickPress; // Offset: 432
    keen::UiTexture rightStickPress; // Offset: 480
    keen::UiTexture leftStickUp; // Offset: 528
    keen::UiTexture leftStickDown; // Offset: 576
    keen::UiTexture leftStickLeft; // Offset: 624
    keen::UiTexture leftStickRight; // Offset: 672
    keen::UiTexture leftStickDirectionalHorizontal; // Offset: 720
    keen::UiTexture leftStickDirectionalVertical; // Offset: 768
    keen::UiTexture rightStickUp; // Offset: 816
    keen::UiTexture rightStickDown; // Offset: 864
    keen::UiTexture rightStickLeft; // Offset: 912
    keen::UiTexture rightStickRight; // Offset: 960
    keen::UiTexture rightStickDirectionalHorizontal; // Offset: 1008
    keen::UiTexture rightStickDirectionalVertical; // Offset: 1056
    keen::UiTexture faceTop; // Offset: 1104
    keen::UiTexture faceBottom; // Offset: 1152
    keen::UiTexture faceLeft; // Offset: 1200
    keen::UiTexture faceRight; // Offset: 1248
    keen::UiTexture shoulderLeftUpper; // Offset: 1296
    keen::UiTexture shoulderLeftLower; // Offset: 1344
    keen::UiTexture shoulderRightUpper; // Offset: 1392
    keen::UiTexture shoulderRightLower; // Offset: 1440
    keen::UiTexture systemLeft; // Offset: 1488
    keen::UiTexture systemRight; // Offset: 1536
};

struct UiColor {
    keen::Color value; // Offset: 0
    keen::float32 intensity; // Offset: 4
};

struct FbUiGamepadButtonSets {
    keen::UiTexture controllerShape; // Offset: 0
    keen::UiTexture genericController; // Offset: 48
    keen::UiTexture controllerPlaystation; // Offset: 96
    keen::UiTexture controllerNintendoSwitch; // Offset: 144
    keen::UiTexture genericButtonsForms; // Offset: 192
    keen::UiTexture genericButtonsXABY; // Offset: 240
    keen::UiTexture genericButtonsYBAX; // Offset: 288
    keen::UiColor diagramKeyColor; // Offset: 336
    keen::FbUiGamepadButtonSet xbox; // Offset: 344
    keen::FbUiGamepadButtonSet playstation; // Offset: 1928
    keen::FbUiGamepadButtonSet nintendoSwitch; // Offset: 3512
    keen::UiTexture twoHeadedArrowHorizontal; // Offset: 5096
    keen::UiTexture twoHeadedArrowVertical; // Offset: 5144
};

struct UiBorder {
    keen::float32 left; // Offset: 0
    keen::float32 top; // Offset: 4
    keen::float32 right; // Offset: 8
    keen::float32 bottom; // Offset: 12
};

struct UiNineSliceTexture {
    keen::UiBorder border; // Offset: 48
};

struct FbUiKeyboardKeys {
    keen::UiTexture standardKey; // Offset: 0
    keen::UiNineSliceTexture nineSlicedKey; // Offset: 48
};

struct FbUiKeyboardKeyLegends {
    keen::UiTexture up; // Offset: 0
    keen::UiTexture down; // Offset: 48
    keen::UiTexture left; // Offset: 96
    keen::UiTexture right; // Offset: 144
};

struct FbUiMouseHints {
    keen::UiTexture left; // Offset: 0
    keen::UiTexture right; // Offset: 48
    keen::UiTexture middle; // Offset: 96
    keen::UiTexture button4; // Offset: 144
    keen::UiTexture button5; // Offset: 192
    keen::UiTexture wheel; // Offset: 240
    keen::UiTexture wheelUp; // Offset: 288
    keen::UiTexture wheelDown; // Offset: 336
    keen::UiTexture directionalContext; // Offset: 384
    keen::UiTexture move; // Offset: 432
    keen::UiTexture moveUp; // Offset: 480
    keen::UiTexture moveDown; // Offset: 528
    keen::UiTexture moveLeft; // Offset: 576
    keen::UiTexture moveRight; // Offset: 624
};

struct FbUiGradients {
    keen::UiTexture whiteToBlackTest; // Offset: 0
    keen::UiTexture alphaToRight; // Offset: 48
    keen::UiTexture alphaToBottom; // Offset: 96
    keen::UiTexture alphaToBottomRight; // Offset: 144
    keen::UiTexture alphaToTopBottom; // Offset: 192
    keen::UiTexture alphaToLeftRight; // Offset: 240
    keen::UiNineSliceTexture alphaToLeftRightSliced; // Offset: 288
};

struct FbUiPrimitives {
    keen::UiTexture circle; // Offset: 0
    keen::UiTexture circleOutline; // Offset: 48
    keen::UiTexture circleSoftGlow; // Offset: 96
    keen::UiTexture ringSoftGlow; // Offset: 144
    keen::UiTexture diamond; // Offset: 192
    keen::UiTexture triangle; // Offset: 240
    keen::UiTexture separatorLineHorizontal; // Offset: 288
    keen::UiTexture separatorLineHorizontalLeftHeavy; // Offset: 336
    keen::UiTexture separatorLineVertical; // Offset: 384
    keen::FbUiGradients gradients; // Offset: 432
    keen::UiNineSliceTexture boxInnerGlow; // Offset: 784
    keen::UiNineSliceTexture glowBoxSmall; // Offset: 848
    keen::UiNineSliceTexture glowBoxLarge; // Offset: 912
    keen::UiNineSliceTexture roundedBoxSmall; // Offset: 976
    keen::UiNineSliceTexture roundedBoxSmallOutline; // Offset: 1040
    keen::UiNineSliceTexture roundedBoxSmallOutlineThin; // Offset: 1104
    keen::UiNineSliceTexture roundedBoxOutlineBuildingZone; // Offset: 1168
};

struct FbUiSocialLogos {
    keen::UiTexture steam; // Offset: 0
    keen::UiTexture discord; // Offset: 48
    keen::UiTexture qq; // Offset: 96
    keen::UiTexture yooreka; // Offset: 144
    keen::UiTexture twitchText; // Offset: 192
    keen::UiTexture twitchIcon; // Offset: 240
};

struct FbUiLoadingSymbol {
    keen::float32 logoHeight; // Offset: 0
    keen::UiColor dotFadeColor; // Offset: 4
};

struct FbUiStatusIcons {
    keen::UiTexture happy; // Offset: 0
    keen::UiTexture sheltered; // Offset: 48
    keen::UiTexture bed; // Offset: 96
    keen::UiTexture food; // Offset: 144
    keen::UiTexture warmth; // Offset: 192
    keen::UiTexture location; // Offset: 240
    keen::UiTexture bedStandlone; // Offset: 288
    keen::UiTexture shelteredStandlone; // Offset: 336
    keen::UiTexture fullfilledNpcNeeds; // Offset: 384
};

struct FbUiGenericIcons {
    keen::UiTexture attention; // Offset: 0
    keen::UiTexture checkmark; // Offset: 48
    keen::UiTexture fulfilled; // Offset: 96
    keen::UiTexture unfulfilled; // Offset: 144
    keen::UiTexture missing; // Offset: 192
    keen::UiTexture weight; // Offset: 240
    keen::UiTexture pin; // Offset: 288
    keen::UiTexture menuAttentionMarker; // Offset: 336
    keen::UiTexture speechBubble; // Offset: 384
    keen::UiTexture speechBubbleImportant; // Offset: 432
    keen::UiTexture speechBubbleDotDotDot; // Offset: 480
    keen::UiTexture hudMarkerFill; // Offset: 528
    keen::UiTexture hudMarkerOutline; // Offset: 576
    keen::UiTexture hudMarkerQuestionMark; // Offset: 624
    keen::UiTexture warningTriangle; // Offset: 672
    keen::UiTexture forbidden; // Offset: 720
    keen::UiTexture store; // Offset: 768
    keen::UiTexture settings; // Offset: 816
    keen::UiTexture arrowRight; // Offset: 864
    keen::UiTexture arrowLeftRight; // Offset: 912
    keen::UiTexture locked; // Offset: 960
    keen::UiTexture star4; // Offset: 1008
    keen::UiTexture star5; // Offset: 1056
    keen::UiTexture itemRarity; // Offset: 1104
    keen::UiTexture privateGame; // Offset: 1152
    keen::UiTexture publicGame; // Offset: 1200
    keen::UiTexture joinGame; // Offset: 1248
    keen::UiTexture networkGood; // Offset: 1296
    keen::UiTexture networkAcceptable; // Offset: 1344
    keen::UiTexture networkBad; // Offset: 1392
    keen::UiTexture infinitySymbol; // Offset: 1440
    keen::UiTexture craftingCogwheel; // Offset: 1488
    keen::UiTexture craftingInactiveLayer; // Offset: 1536
    keen::UiTexture loadingIcon; // Offset: 1584
    keen::UiTexture friendServer; // Offset: 1632
    keen::UiTexture dedicatedServer; // Offset: 1680
    keen::UiTexture nonDedicatedServer; // Offset: 1728
    keen::UiTexture favouriteServerSet; // Offset: 1776
    keen::UiTexture favouriteServerUnset; // Offset: 1824
    keen::UiTexture hide; // Offset: 1872
    keen::UiTexture visible; // Offset: 1920
    keen::UiTexture hide_selected; // Offset: 1968
    keen::UiTexture visible_selected; // Offset: 2016
    keen::UiTexture externalLink; // Offset: 2064
    keen::UiTexture sort; // Offset: 2112
    keen::UiTexture moveStacks; // Offset: 2160
    keen::UiTexture moveAll; // Offset: 2208
    keen::UiTexture serverSettingProhibited; // Offset: 2256
    keen::UiTexture permissionKick; // Offset: 2304
    keen::UiTexture permissionEditBase; // Offset: 2352
    keen::UiTexture permissionUpgradeBase; // Offset: 2400
    keen::UiTexture permissionAccessStorage; // Offset: 2448
    keen::UiTexture pwOptional; // Offset: 2496
    keen::FbUiStatusIcons statusIcons; // Offset: 2544
};

enum class FbUiCoverStyle {
    None = 0,
    NoneButKeepMenu = 1,
    ImmediateBlack = 2,
    LoadedToGame = 3,
    RespawnToGame = 4,
    TeleportToGame = 5,
    GameToTeleport = 6,
    DeathToRespawn = 7,
    GameToDeath = 8,
    ToTitleScreen = 9,
};

struct FbUiCoverTransition {
    keen::FbUiCoverStyle coverStyle; // Offset: 0
    keen::uint32 changeCount; // Offset: 4
};

struct FbUiCursors {
    keen::UiColor lockonColor; // Offset: 0
    keen::UiTexture lockon; // Offset: 8
    keen::UiTexture bow; // Offset: 56
    keen::UiTexture bowFalloff; // Offset: 104
    keen::UiTexture spell; // Offset: 152
    keen::UiTexture spellArea; // Offset: 200
    keen::UiColor crosshairWarningColor; // Offset: 248
    keen::UiColor snappingReadyColor; // Offset: 256
    keen::UiColor snappingActiveColor; // Offset: 264
};

struct UiSkillTreeNode {
    keen::float2 pos; // Offset: 0
    keen::string name; // Offset: 8
    keen::uint32 i; // Offset: 16
    keen::bool isA; // Offset: 20
    keen::bool isL; // Offset: 21
};

struct UiSkillTreeConnection {
    keen::uint32 a; // Offset: 0
    keen::uint32 b; // Offset: 4
};

struct UiSkillTree {
    keen::BlobArray<keen::UiSkillTreeNode> sList; // Offset: 0
    keen::BlobArray<keen::UiSkillTreeConnection> sConList; // Offset: 8
};

struct FbUiInline3SkillDescriptions {
    keen::string jumpAttack; // Offset: 0
    keen::string evadeAttack; // Offset: 8
    keen::string doubleJump; // Offset: 16
    keen::string attributeStrength; // Offset: 24
    keen::string attributeDexterity; // Offset: 32
    keen::string attributeIntelligence; // Offset: 40
};

struct FbUiSkillTreeFallbackTexts {
    keen::string activeSkillName; // Offset: 0
    keen::string activeSkillDesc; // Offset: 8
    keen::string attributeName; // Offset: 16
    keen::string attributeDesc; // Offset: 24
    keen::string passiveSkillName; // Offset: 32
    keen::string passiveSkillDesc; // Offset: 40
};

struct FbUiSkillNode {
    keen::float32 textureRadius; // Offset: 0
    keen::float32 glowScale; // Offset: 4
    keen::float32 contentRadius; // Offset: 8
    keen::float32 focusRadiusGrowth; // Offset: 12
    keen::UiTexture mutedForEA; // Offset: 16
    keen::UiTexture outOfReach; // Offset: 64
    keen::UiTexture inReach; // Offset: 112
    keen::UiTexture activated; // Offset: 160
    keen::UiTexture glow; // Offset: 208
};

struct FbUiSkillNodes {
    keen::UiTexture starter; // Offset: 0
    keen::float32 starterRadius; // Offset: 48
    keen::float32 skillIconScale; // Offset: 52
    keen::float32 skillIconSubjectTextureReferenceHeight; // Offset: 56
    keen::FbUiSkillNode attributes; // Offset: 60
    keen::FbUiSkillNode passiveSkill; // Offset: 316
    keen::FbUiSkillNode activeSkill; // Offset: 572
};

struct FbUiSkillTreeLinkColors {
    keen::UiColor activatedCore; // Offset: 0
    keen::UiColor activatedGlow; // Offset: 8
    keen::UiColor adjacent; // Offset: 16
    keen::UiColor adjacentHover; // Offset: 24
    keen::UiColor inactive; // Offset: 32
    keen::UiColor muted; // Offset: 40
};

struct FbUiCanvasParallaxLayer {
    keen::UiTexture texture; // Offset: 0
    keen::float2 sizeOnCanvas; // Offset: 48
    keen::float32 parallaxDistance; // Offset: 56
    keen::UiColor renderTint; // Offset: 60
};

struct FbUiSkillGlowColor {
    keen::UiColor idle; // Offset: 0
    keen::UiColor activated; // Offset: 8
};

struct FbUiSkillGlowColors {
    keen::FbUiSkillGlowColor mage; // Offset: 0
    keen::FbUiSkillGlowColor warrior; // Offset: 16
    keen::FbUiSkillGlowColor ranger; // Offset: 32
    keen::FbUiSkillGlowColor neutral; // Offset: 48
};

struct UiSkillTreeClassHint {
    keen::UiLocaTagReference label; // Offset: 0
    keen::bool isPrimary; // Offset: 16
    keen::UiColor color; // Offset: 20
    keen::sint32 directionDegrees; // Offset: 28
    keen::float32 distanceFromRing; // Offset: 32
};

struct FbUiSkillTree {
    keen::BlobArray<keen::float32> zoomSteps; // Offset: 0
    keen::BlobArray<keen::FbUiCanvasParallaxLayer> bgLayers; // Offset: 8
    keen::FbUiCanvasParallaxLayer skillLayoutHelper; // Offset: 16
    keen::UiColor backgroundColor; // Offset: 84
    keen::FbUiSkillTreeLinkColors linkColors; // Offset: 92
    keen::UiTexture connectionDirectionalPulse; // Offset: 140
    keen::UiTexture connectionCore; // Offset: 188
    keen::UiTexture connectionCoreInactive; // Offset: 236
    keen::UiTexture connectionCoreOneWayStretch; // Offset: 284
    keen::UiTexture connectionCoreOneWayEnd; // Offset: 332
    keen::UiTexture connectionGlow; // Offset: 380
    keen::UiColor connectionPulseColorGeneric; // Offset: 428
    keen::UiTexture nodeHighlight; // Offset: 436
    keen::UiTexture cursorHighlight; // Offset: 484
    keen::FbUiSkillGlowColors glowColors; // Offset: 532
    keen::BlobArray<keen::UiSkillTreeClassHint> classHints; // Offset: 596
    keen::UiColor mageKeyColor; // Offset: 604
    keen::UiColor warriorKeyColor; // Offset: 612
    keen::UiColor rangerKeyColor; // Offset: 620
    keen::UiColor neutralClassKeyColor; // Offset: 628
    keen::UiColor mutedOverlayColor; // Offset: 636
    keen::FbUiSkillNodes nodes; // Offset: 644
    keen::UiTexture centerRing; // Offset: 1472
    keen::float32 centerRingRadius; // Offset: 1520
    keen::FbUiSkillTreeFallbackTexts fallbackTexts; // Offset: 1524
};

struct FbUiMapMarkerIcons {
    keen::UiTexture waypoint; // Offset: 0
    keen::UiTexture playerCorpse; // Offset: 48
    keen::UiTexture playerCorpseInDungeon; // Offset: 96
    keen::UiTexture markerFrame; // Offset: 144
    keen::UiTexture markerSelector; // Offset: 192
    keen::UiTexture investigation; // Offset: 240
    keen::UiTexture investigationOpaque; // Offset: 288
    keen::UiTexture completed; // Offset: 336
    keen::UiTexture playerPing; // Offset: 384
    keen::UiTexture playerMarkerPing; // Offset: 432
    keen::UiColor playerPingColor; // Offset: 480
};

enum class CustomMapMarkerColorScheme {
    White = 0,
    Red = 1,
    Green = 2,
    Blue = 3,
    Yellow = 4,
    Purple = 5,
    Turquoise = 6,
    Black = 7,
    Count = 8,
};

struct FbUiCustomMarkerColorScheme {
    keen::CustomMapMarkerColorScheme colorSchemeType; // Offset: 0
    keen::UiColor baseColor; // Offset: 4
    keen::UiColor iconColor; // Offset: 12
};

struct FbUiCustomMapMarker {
    keen::StaticArray<keen::FbUiCustomMarkerColorScheme,8> colors; // Offset: 0
    keen::UiTexture markerBase; // Offset: 160
    keen::UiTexture customMarkerSelector; // Offset: 208
    keen::UiTexture customMarkerWaypoint; // Offset: 256
    keen::UiTexture customMarkerHighlight; // Offset: 304
};

struct FbUiMapIsolineConfig {
    keen::float32 thickness; // Offset: 0
    keen::float32 alpha; // Offset: 4
};

struct FbUiMapZoomConfig {
    keen::float32 zoomScale; // Offset: 0
    keen::StaticArray<keen::FbUiMapIsolineConfig,3> isolineConfigs; // Offset: 4
};

struct FbUiMapInvestigationArea {
    keen::UiTexture pattern; // Offset: 0
    keen::float32 tileSize; // Offset: 48
    keen::UiTexture mask; // Offset: 52
    keen::UiColor patternColor; // Offset: 100
    keen::UiColor bgColor; // Offset: 108
    keen::float2 alphaRange; // Offset: 116
    keen::float32 pulseCycleInSeconds; // Offset: 124
};

struct FbUiAdventureMap {
    keen::UiTexture playerPosition; // Offset: 0
    keen::UiColor currentPlayerColor; // Offset: 48
    keen::UiColor otherPlayerColor; // Offset: 56
    keen::float2 fogZoneAlphaRange; // Offset: 64
    keen::Time fogZonePulseLength; // Offset: 72
    keen::float32 outerCornerNominalSize; // Offset: 80
    keen::UiNineSliceTexture outerFrame; // Offset: 84
    keen::float32 frameInnerGradientNominalSize; // Offset: 148
    keen::UiNineSliceTexture frameInnerGradient; // Offset: 152
    keen::UiTexture cursorPiece; // Offset: 216
    keen::UiTexture offscreenIconBubble; // Offset: 264
    keen::UiTexture circularArea; // Offset: 312
    keen::UiTexture markerRipple; // Offset: 360
    keen::FbUiMapInvestigationArea investigation; // Offset: 408
    keen::FbUiMapMarkerIcons markerIcons; // Offset: 536
    keen::BlobArray<keen::FbUiMapZoomConfig> zoomConfigs; // Offset: 1024
    keen::FbUiCustomMapMarker customMarkers; // Offset: 1032
};

struct FbUiRecipeCategoryIcons {
    keen::UiTexture swords; // Offset: 0
    keen::UiTexture ammo; // Offset: 48
    keen::UiTexture potion; // Offset: 96
    keen::UiTexture misc; // Offset: 144
    keen::UiTexture armor; // Offset: 192
    keen::UiTexture magical; // Offset: 240
};

struct FbUiRecipeGroupDefinition {
    keen::UiTexture icon; // Offset: 0
    keen::ItemTagReference tagRef; // Offset: 48
    keen::ItemCategory itemCategoryFallback; // Offset: 64
};

struct FbUiCrafting {
    keen::FbUiRecipeCategoryIcons categoryIcons; // Offset: 0
    keen::UiColor ingredientBgColorDefault; // Offset: 288
    keen::UiColor sufficientIngredientColor; // Offset: 296
    keen::UiColor insufficientIngredientColor; // Offset: 304
    keen::UiColor successFlashColor; // Offset: 312
    keen::UiTexture pinnedRecipeIcon; // Offset: 320
    keen::BlobArray<keen::FbUiRecipeGroupDefinition> groupDefinitions; // Offset: 368
    keen::BlobArray<keen::ItemTagReference> recipeSets; // Offset: 376
};

struct FbUiRecipeSetFolder {
};

struct FbUiRecipeSet {
};

struct FbUiWorldEvents {
};

struct FbUiWorldEvent {
    keen::HashKey32 eventId; // Offset: 0
    keen::UiTexture mainTexture; // Offset: 4
    keen::UiTexture ornament; // Offset: 52
    keen::UiColor initialColor; // Offset: 100
    keen::UiColor secondaryColor; // Offset: 108
    keen::UiColor rippleColor; // Offset: 116
    keen::float imageSize; // Offset: 124
    keen::SoundContainerReference sfx; // Offset: 128
    keen::UiLocaTagReference text; // Offset: 144
};

enum class UiParagraphAlignment {
    Left = 0,
    Center = 1,
    Right = 2,
};

struct UiParagraphStyle {
    keen::string identifier; // Offset: 0
    keen::float32 leading; // Offset: 8
    keen::bool enableAlignment; // Offset: 12
    keen::UiParagraphAlignment alignment; // Offset: 13
    keen::float32 indentLeft; // Offset: 16
    keen::float32 indentRight; // Offset: 20
    keen::float32 lineSpacing; // Offset: 24
};

struct FbUiMenuParagraphStyles {
    keen::UiParagraphStyle loreReaderBody; // Offset: 0
};

struct FbUiEquipmentBodyPartViews {
    keen::FbUiCharacterView full; // Offset: 0
    keen::FbUiCharacterView head; // Offset: 28
    keen::FbUiCharacterView chest; // Offset: 56
    keen::FbUiCharacterView arm; // Offset: 84
    keen::FbUiCharacterView legs; // Offset: 112
    keen::FbUiCharacterView feet; // Offset: 140
    keen::FbUiCharacterView ring; // Offset: 168
};

struct FbUiHudMenuMetrics {
    keen::float32 lootingMenuWidth; // Offset: 0
    keen::float32 centerMessageBottomY; // Offset: 4
    keen::Time epicLootLeaveCenterDelay; // Offset: 8
    keen::FbUiEquipmentBodyPartViews equipmentBodyPartViews; // Offset: 16
};

struct FbUiCustomizationViews {
    keen::FbUiCharacterView fullBody; // Offset: 0
    keen::FbUiCharacterView head; // Offset: 28
    keen::FbUiCharacterView presetView; // Offset: 56
    keen::FbUiCharacterView hairView; // Offset: 84
    keen::FbUiCharacterView beardView; // Offset: 112
    keen::FbUiCharacterView hairColorView; // Offset: 140
};

struct CharacterPresetObject {
    keen::CharacterPresetObjectReference presetObject; // Offset: 0
    keen::UiTexture previewImage; // Offset: 16
};

struct CharacterItemReferences {
    keen::ItemReference itemReference; // Offset: 0
    keen::UiTexture previewImage; // Offset: 16
};

struct FbUiCustomization {
    keen::FbUiCustomizationViews characterViews; // Offset: 0
    keen::BlobArray<keen::CharacterPresetObject> presetObjects; // Offset: 168
    keen::BlobArray<keen::ColorPresetReference> hairColors; // Offset: 176
    keen::BlobArray<keen::ColorPresetReference> beardColors; // Offset: 184
    keen::BlobArray<keen::CharacterItemReferences> hairItems; // Offset: 192
    keen::BlobArray<keen::CharacterItemReferences> beardItems; // Offset: 200
    keen::BlobArray<keen::ObjectReference<keen::PaletteColor>> eyeColors; // Offset: 208
    keen::BlobArray<keen::ObjectReference<keen::PaletteColor>> eyeBrowColors; // Offset: 216
    keen::BlobArray<keen::ObjectReference<keen::PaletteColor>> skinColors; // Offset: 224
    keen::BlobArray<keen::ObjectReference<keen::VoicePack>> voiceItems; // Offset: 232
};

struct FbUiTileArtConfig {
    keen::float2 pivot; // Offset: 0
    keen::float32 scaleTweak; // Offset: 8
    keen::UiTexture texture; // Offset: 12
};

struct FbUiMenuTiles {
    keen::float32 idleAlphaScale; // Offset: 0
    keen::float32 emptyContentAlphaScale; // Offset: 4
    keen::FbUiTileArtConfig lockedContent; // Offset: 8
    keen::FbUiTileArtConfig quests; // Offset: 68
    keen::FbUiTileArtConfig flame; // Offset: 128
    keen::FbUiTileArtConfig craftspeople; // Offset: 188
    keen::FbUiTileArtConfig townsfolk; // Offset: 248
    keen::FbUiTileArtConfig bases; // Offset: 308
    keen::FbUiTileArtConfig workshops; // Offset: 368
    keen::FbUiTileArtConfig lore; // Offset: 428
    keen::FbUiTileArtConfig tutorials; // Offset: 488
    keen::FbUiTileArtConfig altarUpgradeGeneric; // Offset: 548
    keen::BlobArray<keen::FbUiTileArtConfig> altarLevels; // Offset: 608
    keen::FbUiTileArtConfig flameUpgrade; // Offset: 616
    keen::FbUiTileArtConfig skilltree; // Offset: 676
};

struct FbUiMenuButtonTextures {
    keen::UiNineSliceTexture background; // Offset: 0
    keen::UiNineSliceTexture backgroundDestructive; // Offset: 64
    keen::UiNineSliceTexture backGlow; // Offset: 128
    keen::UiNineSliceTexture ornament; // Offset: 192
};

struct UiCharacterStyleActivePropertyFlags {
    keen::bool font; // Offset: 0
    keen::bool size; // Offset: 1
    keen::bool tracking; // Offset: 2
    keen::bool variant; // Offset: 3
    keen::bool uppercase; // Offset: 4
    keen::bool color; // Offset: 5
    keen::bool outline; // Offset: 6
    keen::bool dropShadow; // Offset: 7
};

struct UiCharacterStyle {
    keen::string identifier; // Offset: 0
    keen::UiCharacterStyleActivePropertyFlags activeProperties; // Offset: 8
    keen::ObjectReference<keen::UiFont> font; // Offset: 16
    keen::float32 fontSize; // Offset: 32
    keen::float32 spacing; // Offset: 36
    keen::bool bold; // Offset: 40
    keen::bool italic; // Offset: 41
    keen::bool uppercase; // Offset: 42
    keen::UiColor color; // Offset: 44
    keen::bool outline; // Offset: 52
    keen::UiColor outlineColor; // Offset: 56
    keen::float32 outlineSize; // Offset: 64
    keen::bool dropShadow; // Offset: 68
    keen::UiColor dropShadowColor; // Offset: 72
    keen::float2 dropShadowOffset; // Offset: 80
};

struct FbUiMenuButton {
    keen::FbUiMenuButtonTextures standalone; // Offset: 0
    keen::FbUiMenuButtonTextures inGroupLeft; // Offset: 256
    keen::FbUiMenuButtonTextures inGroupMiddle; // Offset: 512
    keen::FbUiMenuButtonTextures inGroupRight; // Offset: 768
    keen::FbUiMenuButtonTextures standaloneSmall; // Offset: 1024
    keen::UiTexture sliderKnob; // Offset: 1280
    keen::UiCharacterStyle labelStyle; // Offset: 1328
    keen::UiColor ornamentTint; // Offset: 1416
    keen::UiColor destructiveTint; // Offset: 1424
    keen::UiColor textColorDestructive; // Offset: 1432
};

struct FbUiMenuToggle {
    keen::UiTexture toggleOn; // Offset: 0
    keen::UiTexture toggleOff; // Offset: 48
    keen::UiTexture backGlow; // Offset: 96
};

struct FbUiMenuScrollbar {
    keen::UiNineSliceTexture slider; // Offset: 0
    keen::UiNineSliceTexture range; // Offset: 64
    keen::UiColor rangeTint; // Offset: 128
};

struct FbUiCharacterInventory {
    keen::UiTexture levelBadgeBackground; // Offset: 0
    keen::float2 xpBarLevelBadgeSize; // Offset: 48
};

struct FbUiMultiToolMenu {
    keen::UiLocaTagReference materialHeader; // Offset: 0
    keen::UiLocaTagReference tooltipMaterialHint; // Offset: 16
    keen::UiLocaTagReference tooltipMaterialHintWithBlockUnit; // Offset: 32
    keen::UiLocaTagReference tooltipEmptyMaterialListHint; // Offset: 48
    keen::UiLocaTagReference itemSubInfo; // Offset: 64
    keen::UiLocaTagReference preUseHint_QuickBuilder; // Offset: 80
    keen::UiLocaTagReference preUseHint_Terraformer; // Offset: 96
    keen::UiLocaTagReference preUseHint_NpcSummoner; // Offset: 112
    keen::UiLocaTagReference preUseHintHud_QuickBuilder; // Offset: 128
    keen::UiLocaTagReference preUseHintHud_Terraformer; // Offset: 144
    keen::UiLocaTagReference preUseHintHud_NpcSummoner; // Offset: 160
    keen::UiLocaTagReference noAltarBuild; // Offset: 176
    keen::UiLocaTagReference craftBlocksHint; // Offset: 192
    keen::UiLocaTagReference craftRoofBlocksHint; // Offset: 208
    keen::UiLocaTagReference collectMaterialsHint; // Offset: 224
    keen::UiLocaTagReference noMaterialsAvailable; // Offset: 240
    keen::UiLocaTagReference needsFlameAltarHint; // Offset: 256
    keen::UiColor antiTofuTint_Temp; // Offset: 272
};

struct FbUiEquipmentSlotIcons {
    keen::UiTexture mainHand; // Offset: 0
    keen::UiTexture shield; // Offset: 48
    keen::UiTexture backpackExtender; // Offset: 96
    keen::UiTexture rangedWeapon; // Offset: 144
    keen::UiTexture arrow; // Offset: 192
    keen::UiTexture spell; // Offset: 240
    keen::UiTexture wallClimber; // Offset: 288
    keen::UiTexture hookshot; // Offset: 336
    keen::UiTexture glider; // Offset: 384
    keen::UiTexture accessory; // Offset: 432
    keen::UiTexture ring; // Offset: 480
    keen::UiTexture head; // Offset: 528
    keen::UiTexture upperBody; // Offset: 576
    keen::UiTexture arms; // Offset: 624
    keen::UiTexture lowerBody; // Offset: 672
    keen::UiTexture boots; // Offset: 720
    keen::UiTexture vanity; // Offset: 768
};

struct FbUiPerkIcons {
    keen::UiTexture nodeOutline; // Offset: 0
    keen::UiTexture genericAttributeNode; // Offset: 48
};

struct FbUiFancyBox {
    keen::float32 cornerSize; // Offset: 0
    keen::UiNineSliceTexture frame; // Offset: 4
    keen::UiNineSliceTexture frameSimple; // Offset: 68
    keen::UiColor frameColor; // Offset: 132
    keen::UiNineSliceTexture backgroundShape; // Offset: 140
    keen::UiNineSliceTexture backgroundShapeHalved; // Offset: 204
    keen::UiNineSliceTexture backgroundShapeGlassMask; // Offset: 268
    keen::UiNineSliceTexture backgroundShapeHalvedGlassMask; // Offset: 332
    keen::UiColor backgroundColor; // Offset: 396
    keen::UiColor backgroundColorDark; // Offset: 404
    keen::UiTexture backgroundPattern; // Offset: 412
    keen::UiColor backgroundPatternColor; // Offset: 460
    keen::float32 patternSize; // Offset: 468
    keen::UiNineSliceTexture frameFull; // Offset: 472
    keen::UiNineSliceTexture backgroundShapeFrameFull; // Offset: 536
    keen::UiNineSliceTexture backgroundShapeGradientToLeft; // Offset: 600
    keen::UiNineSliceTexture backgroundShapeGradientToTop; // Offset: 664
    keen::UiNineSliceTexture frameFullSimple; // Offset: 728
    keen::UiNineSliceTexture backgroundShapeFrameFullSimple; // Offset: 792
    keen::UiNineSliceTexture frameTopMinimal; // Offset: 856
    keen::UiNineSliceTexture backgroundShapeTopMinimal; // Offset: 920
    keen::UiNineSliceTexture frameFullDetailed; // Offset: 984
    keen::UiNineSliceTexture backgroundShapeFrameFullDetailed; // Offset: 1048
};

struct FbUiFancyLoadingBar {
    keen::UiNineSliceTexture background; // Offset: 0
    keen::UiNineSliceTexture bar; // Offset: 64
    keen::UiNineSliceTexture glow; // Offset: 128
    keen::UiColor sectionCompletedColor; // Offset: 192
};

struct UiVector {
    keen::float32 x; // Offset: 0
    keen::float32 y; // Offset: 4
};

typedef keen::UiVector UiSize;

struct FbUiMenuExplainer {
    keen::UiColor darkenerColor; // Offset: 0
    keen::float32 areaFeatherSize; // Offset: 8
    keen::UiSize areaContentPadding; // Offset: 12
    keen::float32 textMaxWidth; // Offset: 20
    keen::UiColor textColor; // Offset: 24
};

struct FbUiJournalBaseInfo {
    keen::UiTexture iconFlameAltar; // Offset: 0
    keen::UiTexture iconNpc; // Offset: 48
    keen::UiTexture iconNpcBed; // Offset: 96
    keen::UiTexture iconAnimal; // Offset: 144
};

struct FbUiCodexAssets {
    keen::UiTexture questSourceIconBG; // Offset: 0
    keen::UiTexture repeatedQuestSourceIconBG; // Offset: 48
    keen::UiTexture questIconFlame; // Offset: 96
    keen::UiTexture questIconBlacksmith; // Offset: 144
    keen::UiTexture questIconAlchemist; // Offset: 192
    keen::UiTexture questIconHunter; // Offset: 240
    keen::UiTexture questIconCarpenter; // Offset: 288
    keen::UiTexture questIconFarmer; // Offset: 336
    keen::UiTexture questIconCryptKeeper; // Offset: 384
    keen::UiTexture questIconBard; // Offset: 432
    keen::UiTexture questIconMisc; // Offset: 480
    keen::UiTexture questIconTexture; // Offset: 528
    keen::UiTexture questProgressEmpty; // Offset: 576
    keen::UiTexture questProgressFilled; // Offset: 624
    keen::UiTexture questCheckmark; // Offset: 672
    keen::UiTexture lorePageFound; // Offset: 720
    keen::UiTexture lorePageLocked; // Offset: 768
    keen::UiTexture activeQuestIndicator; // Offset: 816
    keen::UiTexture lockedLoreTileImage; // Offset: 864
    keen::UiColor completedQuestsColor; // Offset: 912
    keen::UiColor flameQuestEntryColor; // Offset: 920
    keen::UiColor npcQuestEntryColor; // Offset: 928
    keen::UiColor miscQuestEntryColor; // Offset: 936
    keen::UiColor repeatedQuestEntryColor; // Offset: 944
    keen::FbUiJournalBaseInfo baseInfo; // Offset: 952
};

struct FbUiLoreCategory {
    keen::UiLocaTagReference categoryName; // Offset: 0
    keen::FbUiTileArtConfig artConfig; // Offset: 16
};

struct FbUiMenuAttributeTabs {
    keen::UiTexture basicsTab; // Offset: 0
    keen::UiTexture damageTab; // Offset: 48
    keen::UiTexture resistanceTab; // Offset: 96
};

struct FbUiCollectionCategoryInfo {
    keen::ObjectReference<keen::ItemCollectionCategory> category; // Offset: 0
    keen::UiLocaTagReference label; // Offset: 16
    keen::UiTexture icon; // Offset: 32
};

struct FbUiDifficultyOptionValue {
    keen::bool isAvailable; // Offset: 0
    keen::BlobArray<keen::float> steps; // Offset: 4
};

struct FbUiDifficultyOptionValues {
    keen::FbUiDifficultyOptionValue enemyDamage; // Offset: 0
    keen::FbUiDifficultyOptionValue enemyHealth; // Offset: 12
    keen::FbUiDifficultyOptionValue enemyStamina; // Offset: 24
    keen::FbUiDifficultyOptionValue enemyPerceptionRange; // Offset: 36
    keen::FbUiDifficultyOptionValue enemyAttackFrequency; // Offset: 48
    keen::FbUiDifficultyOptionValue bossHealth; // Offset: 60
    keen::FbUiDifficultyOptionValue bossDamage; // Offset: 72
    keen::FbUiDifficultyOptionValue miningXp; // Offset: 84
    keen::FbUiDifficultyOptionValue questXp; // Offset: 96
    keen::FbUiDifficultyOptionValue combatXp; // Offset: 108
    keen::FbUiDifficultyOptionValue playerHealth; // Offset: 120
    keen::FbUiDifficultyOptionValue playerStamina; // Offset: 132
    keen::FbUiDifficultyOptionValue playerMana; // Offset: 144
    keen::FbUiDifficultyOptionValue shroudTime; // Offset: 156
    keen::FbUiDifficultyOptionValue durability; // Offset: 168
    keen::FbUiDifficultyOptionValue dayTime; // Offset: 180
    keen::FbUiDifficultyOptionValue nightTime; // Offset: 192
    keen::FbUiDifficultyOptionValue foodDuration; // Offset: 204
    keen::FbUiDifficultyOptionValue productionTime; // Offset: 216
    keen::FbUiDifficultyOptionValue plantGrowTime; // Offset: 228
    keen::FbUiDifficultyOptionValue weaponUpgradeCost; // Offset: 240
    keen::FbUiDifficultyOptionValue perkUpgradeRecyclingFactor; // Offset: 252
    keen::FbUiDifficultyOptionValue worldRefreshTime; // Offset: 264
    keen::FbUiDifficultyOptionValue miningDamage; // Offset: 276
    keen::FbUiDifficultyOptionValue dropAmount; // Offset: 288
    keen::FbUiDifficultyOptionValue starvingTime; // Offset: 300
    keen::FbUiDifficultyOptionValue bodyHeat; // Offset: 312
    keen::bool tombstoneMode; // Offset: 324
    keen::bool randomSpawnerAmount; // Offset: 325
    keen::bool aggroPoolAmount; // Offset: 326
    keen::bool enableDurability; // Offset: 327
    keen::bool enableStarvingDebuff; // Offset: 328
    keen::bool pacifyAllEnemies; // Offset: 329
    keen::bool weatherFrequency; // Offset: 330
    keen::bool enableGliderTurbulences; // Offset: 331
    keen::bool tamingStartleRepercussion; // Offset: 332
};

struct FbUiDifficultyPreset {
    keen::ecs::GameSettingsPreset presetId; // Offset: 0
    keen::UiLocaTagReference label; // Offset: 4
    keen::UiLocaTagReference desc; // Offset: 20
    keen::UiTexture iconSelected; // Offset: 36
    keen::UiTexture iconUnelected; // Offset: 84
    keen::UiTexture iconSmall; // Offset: 132
    keen::ecs::GameSettings settings; // Offset: 184
};

struct FbUiDifficultySettings {
    keen::FbUiDifficultyOptionValues settingValues; // Offset: 0
    keen::FbUiDifficultyPreset presetDefault; // Offset: 336
    keen::FbUiDifficultyPreset presetBuilder; // Offset: 648
    keen::FbUiDifficultyPreset presetSurvivalist; // Offset: 960
    keen::FbUiDifficultyPreset presetCombatChallenge; // Offset: 1272
    keen::FbUiDifficultyPreset custom; // Offset: 1584
    keen::UiTexture presetIconHighlight; // Offset: 1896
};

struct FbUiMenu {
    keen::FbUiHudMenuMetrics metrics; // Offset: 0
    keen::FbUiMenuParagraphStyles paragraphStyles; // Offset: 216
    keen::FbUiCharacterInventory characterInventory; // Offset: 244
    keen::FbUiSkillTree skilltree; // Offset: 300
    keen::FbUiAdventureMap map; // Offset: 1872
    keen::FbUiCrafting crafting; // Offset: 3256
    keen::BlobArray<keen::FbUiCollectionCategoryInfo> collectionCategories; // Offset: 3640
    keen::FbUiMultiToolMenu multiTool; // Offset: 3648
    keen::FbUiEquipmentSlotIcons equipmentSlots; // Offset: 3928
    keen::FbUiPerkIcons itemPerkIcons; // Offset: 4744
    keen::FbUiMenuAttributeTabs attributeTabs; // Offset: 4840
    keen::FbUiMenuTiles menuTiles; // Offset: 4984
    keen::UiTexture codexMotherflameIllustration; // Offset: 5720
    keen::FbUiCodexAssets codexAssets; // Offset: 5768
    keen::BlobArray<keen::FbUiLoreCategory> loreCategories; // Offset: 6912
    keen::FbUiMenuButton button; // Offset: 6920
    keen::FbUiMenuToggle toggle; // Offset: 8360
    keen::FbUiMenuScrollbar scrollbar; // Offset: 8504
    keen::FbUiFancyLoadingBar loadingBar; // Offset: 8640
    keen::UiColor frostedGlassDefaultTint; // Offset: 8840
    keen::UiColor backgroundDarkenerColor; // Offset: 8848
    keen::UiNineSliceTexture topTabBackground; // Offset: 8856
    keen::UiColor tabLabelIdleColor; // Offset: 8920
    keen::UiColor tabLabelHighlightColor; // Offset: 8928
    keen::UiColor tabHighlightColor; // Offset: 8936
    keen::UiNineSliceTexture tabHighlight; // Offset: 8944
    keen::UiColor basicWidgetColor; // Offset: 9008
    keen::UiColor basicWidgetColorHighlighted; // Offset: 9016
    keen::UiColor tileBackgroundColor; // Offset: 9024
    keen::UiColor tileHighlightOutlineColor; // Offset: 9032
    keen::UiNineSliceTexture basicWidgetMinimizedShape; // Offset: 9040
    keen::UiNineSliceTexture basicWidgetBackground; // Offset: 9104
    keen::UiNineSliceTexture basicWidgetBackgroundWide; // Offset: 9168
    keen::UiNineSliceTexture basicWidgetBackgroundLarge; // Offset: 9232
    keen::UiNineSliceTexture basicWidgetBackgroundFaded; // Offset: 9296
    keen::UiNineSliceTexture basicWidgetHeader; // Offset: 9360
    keen::UiNineSliceTexture basicWidgetRarityStripe; // Offset: 9424
    keen::UiNineSliceTexture basicWidgetHighlightOutline; // Offset: 9488
    keen::FbUiFancyBox fancyBox; // Offset: 9552
    keen::UiNineSliceTexture pillWidgetBackground; // Offset: 10664
    keen::UiTexture flameIcon; // Offset: 10728
    keen::UiTexture moveStacksLeftIcon; // Offset: 10776
    keen::UiTexture moveStacksRightIcon; // Offset: 10824
    keen::UiTexture iconPlayerInventory; // Offset: 10872
    keen::UiTexture iconStorageInventory; // Offset: 10920
    keen::UiTexture iconOpenInventoryTransactions; // Offset: 10968
    keen::UiTexture spatialFactoryInfoBg; // Offset: 11016
    keen::UiTexture actionbarTutorialKeyImage; // Offset: 11064
    keen::UiTexture fancyToggleSmallOff; // Offset: 11112
    keen::UiTexture fancyToggleSmallOn; // Offset: 11160
    keen::FbUiMenuExplainer explainer; // Offset: 11208
};

struct FbUiItemSlotFrame {
    keen::UiTexture shapeBase; // Offset: 0
    keen::UiTexture shapeSubtle; // Offset: 48
    keen::UiTexture outline; // Offset: 96
};

struct FbUiItemSlotMinimal {
    keen::UiTexture cookable; // Offset: 0
    keen::UiTexture uncookable; // Offset: 48
    keen::UiTexture empty; // Offset: 96
};

struct FbUiItemEquipIndicator {
    keen::UiLocaTagReference label; // Offset: 0
    keen::UiTexture texture; // Offset: 16
    keen::UiColor color; // Offset: 64
    keen::bool useFrame; // Offset: 72
};

struct FbUiItemStackProperties {
    keen::UiTexture isNew; // Offset: 0
    keen::UiTexture equippableFrame; // Offset: 48
    keen::UiTexture equipMissingHint; // Offset: 96
    keen::UiLocaTagReference initialEquipActionMessage; // Offset: 144
    keen::UiLocaTagReference labelEquipped; // Offset: 160
    keen::UiLocaTagReference labelUnequipped; // Offset: 176
    keen::FbUiItemEquipIndicator actionBarHighlight; // Offset: 192
    keen::FbUiItemEquipIndicator instaUse; // Offset: 268
    keen::FbUiItemEquipIndicator armor; // Offset: 344
    keen::FbUiItemEquipIndicator vanityArmor; // Offset: 420
    keen::FbUiItemEquipIndicator rangedWeapon; // Offset: 496
    keen::FbUiItemEquipIndicator arrow; // Offset: 572
    keen::FbUiItemEquipIndicator spell; // Offset: 648
    keen::FbUiItemEquipIndicator blueprintDefaultShape; // Offset: 724
    keen::FbUiItemEquipIndicator blueprintDefaultMaterial; // Offset: 800
    keen::FbUiItemEquipIndicator blueprintRoofShape; // Offset: 876
    keen::FbUiItemEquipIndicator blueprintRoofMaterial; // Offset: 952
    keen::FbUiItemEquipIndicator blueprintTerrainShape; // Offset: 1028
    keen::FbUiItemEquipIndicator blueprintTerrainMaterial; // Offset: 1104
    keen::FbUiItemEquipIndicator missingTwitchPermission; // Offset: 1180
    keen::UiColor durabilityColorDefault; // Offset: 1256
    keen::UiColor durabilityColorLow; // Offset: 1264
    keen::UiColor durabilityColorDraining; // Offset: 1272
    keen::UiColor durabilityColorDrainingLow; // Offset: 1280
};

struct FbUiItemSlot {
    keen::FbUiItemStackProperties properties; // Offset: 0
    keen::FbUiItemSlotFrame backpack; // Offset: 1288
    keen::FbUiItemSlotMinimal minimal; // Offset: 1432
    keen::UiCharacterStyle countNumberStyle; // Offset: 1576
    keen::UiColor grabAmountColor; // Offset: 1664
    keen::UiColor backgroundColor; // Offset: 1672
    keen::UiColor backgroundColorBright; // Offset: 1680
    keen::UiTexture actionbarPageInactive; // Offset: 1688
    keen::UiTexture actionbarPageActive; // Offset: 1736
    keen::UiTexture pageHint; // Offset: 1784
    keen::UiTexture blueprintBackground; // Offset: 1832
    keen::UiTexture blueprintTypeIconMini; // Offset: 1880
    keen::UiTexture blueprintIntroItemIcon; // Offset: 1928
};

struct FbUiBlueprint {
    keen::UiLocaTagReference introRecipeName; // Offset: 0
    keen::UiLocaTagReference introRecipeDescription1; // Offset: 16
    keen::UiLocaTagReference introRecipeDescription2; // Offset: 32
    keen::UiLocaTagReference introItemSubinfo; // Offset: 48
    keen::UiLocaTagReference introItemEmptyHint; // Offset: 64
    keen::UiLocaTagReference introItemUsageHint; // Offset: 80
    keen::UiLocaTagReference materialHeader; // Offset: 96
    keen::UiLocaTagReference tooltipMaterialHint; // Offset: 112
    keen::UiLocaTagReference tooltipMaterialHintWithBlockUnit; // Offset: 128
    keen::UiLocaTagReference tooltipEmptyMaterialListHint; // Offset: 144
    keen::UiColor antiTofuTint_Temp; // Offset: 160
};

struct FbUiBuffIcons {
    keen::UiTexture circularBarMask; // Offset: 0
    keen::UiColor frameColor; // Offset: 48
    keen::UiColor pieFillColor; // Offset: 56
    keen::UiColor pieFillColorHungry; // Offset: 64
    keen::UiColor pieFillColorStarving; // Offset: 72
    keen::UiColor pieLineColor; // Offset: 80
    keen::UiTexture extremeCold; // Offset: 88
    keen::UiTexture extremeHeat; // Offset: 136
    keen::UiTexture restedConditionsBracket; // Offset: 184
};

struct FbUiAnimatedHealthBarColors {
    keen::UiColor frameColor; // Offset: 0
    keen::UiColor rangeColor; // Offset: 8
    keen::UiColor fillColor; // Offset: 16
    keen::UiColor fillEndColor; // Offset: 24
    keen::UiColor damageColor; // Offset: 32
    keen::UiColor healColor; // Offset: 40
};

struct FbUiHudBuffDisplay {
    keen::float2 textEntriesOffset; // Offset: 0
    keen::float32 offsetY; // Offset: 8
    keen::float32 iconColumnsDistance; // Offset: 12
    keen::float32 restedAnchorSize; // Offset: 16
    keen::float2 restedBarPieceSize; // Offset: 20
};

struct FbUiHudPlayerStatus {
    keen::float2 widgetBaseOffset; // Offset: 0
    keen::float4 flameWarningThresholds; // Offset: 8
    keen::FbUiHudBuffDisplay buffDisplay; // Offset: 24
    keen::UiNineSliceTexture barBackground; // Offset: 52
    keen::float4 barBorderThickness; // Offset: 116
    keen::float2 barGroupOffset; // Offset: 132
    keen::float2 xpBarSize; // Offset: 140
    keen::float2 xpBarOffset; // Offset: 148
    keen::float32 xpBarDisplayTime; // Offset: 156
    keen::float2 healthBarSize; // Offset: 160
    keen::float2 manaBarSize; // Offset: 168
    keen::UiTexture staminaCircleMain; // Offset: 176
    keen::UiTexture staminaCircleBuff; // Offset: 224
    keen::UiTexture staminaCircleInner; // Offset: 272
    keen::BlobArray<keen::float32> staminaCirlceSizesInner; // Offset: 320
    keen::BlobArray<keen::float32> staminaCirlceSizesOuter; // Offset: 328
    keen::FbUiAnimatedHealthBarColors xpColors; // Offset: 336
    keen::FbUiAnimatedHealthBarColors healthColors; // Offset: 384
    keen::FbUiAnimatedHealthBarColors staminaColors; // Offset: 432
    keen::FbUiAnimatedHealthBarColors manaColors; // Offset: 480
};

struct FbUiAltarAttentionMarkerAnim {
    keen::Time altarAttentionMarkerFadeIn; // Offset: 0
    keen::Time altarAttentionMarkerFadeOut; // Offset: 8
    keen::Time altarAttentionMarkerSecondPingDelay; // Offset: 16
    keen::Time altarAttentionMarkerAnimDelay; // Offset: 24
    keen::float32 altarAttentionMarkerGrow; // Offset: 32
    keen::float32 altarAttentionMarkerPingSize; // Offset: 36
    keen::float32 altarAttentionMarkerMinAlpha; // Offset: 40
    keen::float32 altarAttentionMarkerPingStartAlpha; // Offset: 44
    keen::float32 altarAttentionMarkerPingEndAlpha; // Offset: 48
};

struct FbUiHUDSpatial {
    keen::UiTexture lockonBackground; // Offset: 0
    keen::UiTexture lockonArrow; // Offset: 48
    keen::float32 lockonArrowSize; // Offset: 96
    keen::UiNineSliceTexture healthBar; // Offset: 100
    keen::UiTexture critIndicator; // Offset: 164
    keen::float2 critIndcatorOffset; // Offset: 212
    keen::float32 bonusIndicatorUnitHeight; // Offset: 220
    keen::UiTexture bonusIndicator; // Offset: 224
    keen::UiTexture malusIndicator; // Offset: 272
    keen::float2 bonusGroupOffset; // Offset: 320
    keen::float2 malusGroupOffset; // Offset: 328
    keen::float2 symbolOffset; // Offset: 336
    keen::float2 enemyHealthBarSize; // Offset: 344
    keen::float2 enemyStaminaBarSize; // Offset: 352
    keen::float2 enemyBarGroupBorder; // Offset: 360
    keen::UiColor damageTextBonusFill; // Offset: 368
    keen::UiColor damageTextBonusOutlineFrom; // Offset: 376
    keen::UiColor damageTextBonusOutlineTo; // Offset: 384
    keen::UiColor damageTextMalusFill; // Offset: 392
    keen::UiColor damageTextMalusOutlineFrom; // Offset: 400
    keen::UiColor damageTextMalusOutlineTo; // Offset: 408
    keen::UiColor attentionMarkerQuestionFill; // Offset: 416
    keen::UiColor attentionMarkerFlameInfoFill; // Offset: 424
    keen::FbUiAnimatedHealthBarColors coPlayerHealthColors; // Offset: 432
    keen::UiColor coPlayerLevelBadgeFill; // Offset: 480
    keen::UiColor coPlayerLevelBadgeOutline; // Offset: 488
    keen::UiColor enemyLevelBadgeFill; // Offset: 496
    keen::UiColor enemyLevelBadgeOutline; // Offset: 504
    keen::FbUiAnimatedHealthBarColors enemyHealthColors; // Offset: 512
    keen::FbUiAnimatedHealthBarColors enemyStaminaColors; // Offset: 560
    keen::UiColor enemyHigherLevelBadgeFill; // Offset: 608
    keen::UiColor enemyHigherLevelBadgeOutline; // Offset: 616
    keen::FbUiAnimatedHealthBarColors enemyHigherLevelHealthColors; // Offset: 624
    keen::FbUiAnimatedHealthBarColors neutralHealthColors; // Offset: 672
    keen::UiColor neutralLevelBadgeFill; // Offset: 720
    keen::UiColor neutralLevelBadgeOutline; // Offset: 728
    keen::FbUiAltarAttentionMarkerAnim altarAttentionMarkerAnim; // Offset: 736
    keen::UiTexture hookshotPullTargetIcon; // Offset: 792
    keen::UiTexture hookshotPullTargetIconLockIn; // Offset: 840
};

struct FbUiHudBuildModeHint {
    keen::UiTexture slotArc; // Offset: 0
    keen::UiTexture flashGradient; // Offset: 48
    keen::UiTexture flashMask; // Offset: 96
    keen::UiColor flashColor; // Offset: 144
};

struct FbUiHudTopNotification {
    keen::UiColor bgTintColor; // Offset: 0
    keen::UiColor accentColor; // Offset: 8
    keen::float32 barMinWidth; // Offset: 16
    keen::float32 featherWidth; // Offset: 20
    keen::float32 fadeWaveWidth; // Offset: 24
    keen::float32 fadeInFromX; // Offset: 28
    keen::float32 offsetY; // Offset: 32
    keen::float32 offsetYinPlayerMenu; // Offset: 36
};

struct FbUiHudLowHealth {
    keen::UiTexture vignette; // Offset: 0
    keen::UiColor vignetteColor; // Offset: 48
    keen::UiColor enterLowHealthFlashColor; // Offset: 56
};

struct FbUiHudFreezing {
    keen::UiTexture frostBorderCorner; // Offset: 0
    keen::float32 frostBorderCornerHeightTop; // Offset: 48
    keen::float32 frostBorderCornerHeightBottom; // Offset: 52
    keen::UiTexture frostBorderTop; // Offset: 56
    keen::UiTexture creepInGradientTop; // Offset: 104
    keen::float32 frostBorderHeightTop; // Offset: 152
    keen::UiTexture frostBorderLeft; // Offset: 156
    keen::UiTexture creepInGradientLeft; // Offset: 204
    keen::float32 frostBorderHeightBottom; // Offset: 252
    keen::float32 frostBorderWidthLeftRight; // Offset: 256
    keen::UiColor frostBorderTint; // Offset: 260
    keen::float32 bgBlurCenterYratio; // Offset: 268
    keen::UiTexture bgBlurVignetteTopLeft; // Offset: 272
    keen::UiTexture bgBlurVignetteTop; // Offset: 320
    keen::UiTexture bgBlurVignetteLeft; // Offset: 368
    keen::float32 bgBlurCornerWidth; // Offset: 416
    keen::float32 bgBlurCornerHeightTop; // Offset: 420
    keen::float32 bgBlurCornerHeightBottom; // Offset: 424
    keen::UiColor bgBlurTint; // Offset: 428
    keen::float32 idleAlpha; // Offset: 436
    keen::float2 criticalAlpha; // Offset: 440
};

struct FbUiControlScheme {
    keen::UiTexture game; // Offset: 0
    keen::UiTexture build; // Offset: 48
};

struct FbUiHudBarrierUnlock {
    keen::float32 backgroundSize; // Offset: 0
    keen::UiTexture backgroundOrnamentMask; // Offset: 4
    keen::UiTexture backgroundOrnament; // Offset: 52
    keen::UiTexture ornamentHighlight; // Offset: 100
    keen::UiColor backgroundColor; // Offset: 148
    keen::UiColor highlightColor; // Offset: 156
    keen::UiColor glowRippleColor; // Offset: 164
    keen::Time lootDelay; // Offset: 176
};

struct FbUiHudMessage {
    keen::float32 backgroundSize; // Offset: 0
    keen::UiTexture backgroundOrnamentMask; // Offset: 4
    keen::UiTexture backgroundOrnament; // Offset: 52
    keen::UiColor backgroundColor; // Offset: 100
    keen::float32 badgeSize; // Offset: 108
    keen::UiColor badgeColor; // Offset: 112
    keen::UiColor glowRippleColor; // Offset: 120
    keen::Time messageDelay; // Offset: 128
    keen::Time lootDelay; // Offset: 136
};

struct FbUiHudPartyHealth {
    keen::float32 widgetGroupOffsetY; // Offset: 0
    keen::UiColor barFillColor; // Offset: 4
    keen::UiColor barBgColor; // Offset: 12
    keen::float2 barSize; // Offset: 20
    keen::float32 barSpacing; // Offset: 28
};

struct FbUiHudServerPerformance {
    keen::Time badPerformanceHintDuration; // Offset: 0
    keen::Time badPerformanceHintInterval; // Offset: 8
    keen::Time criticalPerformanceHintDuration; // Offset: 16
    keen::Time criticalPerformanceHintInterval; // Offset: 24
    keen::UiColor badPerformanceBgColor; // Offset: 32
    keen::UiColor badPerformanceTextColor; // Offset: 40
    keen::UiColor criticalPerformanceBgColor; // Offset: 48
    keen::UiColor criticalPerformanceTextColor; // Offset: 56
};

struct FbUiHudOutOfBound {
    keen::UiColor coverColor; // Offset: 0
    keen::UiLocaTagReference messageString; // Offset: 8
    keen::UiCharacterStyle messageStyle; // Offset: 24
    keen::UiCharacterStyle countdownStyle; // Offset: 112
};

struct FbUiHudNightSpeed {
    keen::UiColor bgColor; // Offset: 0
    keen::UiColor iconColor; // Offset: 8
    keen::UiTexture sleeper; // Offset: 16
    keen::UiTexture partyMember; // Offset: 64
    keen::UiTexture nightSpeed; // Offset: 112
};

struct FbUiHudGameProgressSummary {
    keen::Time visibleDuration; // Offset: 0
    keen::UiColor bgColor; // Offset: 8
    keen::UiColor accentColor; // Offset: 16
    keen::float32 featherWidth; // Offset: 24
    keen::float32 widgetWidth; // Offset: 28
    keen::UiColor contentTintFlame; // Offset: 32
    keen::UiColor contentTintCrafting; // Offset: 40
    keen::UiTexture illustrationFlame; // Offset: 48
    keen::UiTexture illustrationCrafting; // Offset: 96
};

struct FbUiHudMusicBuff {
    keen::UiTexture musicIcon; // Offset: 0
    keen::UiColor barBgColor; // Offset: 48
    keen::UiColor barFillColor; // Offset: 56
    keen::UiColor barFillEndColor; // Offset: 64
};

struct FbUiHudAnimalTaming {
    keen::UiTexture tamingIconEmpty; // Offset: 0
    keen::UiTexture tamingIconPending; // Offset: 48
    keen::UiTexture tamingIconFull; // Offset: 96
    keen::UiTexture tamingAttention; // Offset: 144
    keen::UiTexture tamingAlert; // Offset: 192
    keen::UiTexture tamingAlertOutline; // Offset: 240
    keen::UiColor tamingIconColor; // Offset: 288
};

struct FbUiItemWheel {
    keen::UiColor slotColor_idle; // Offset: 0
    keen::UiColor slotColor_selected; // Offset: 8
    keen::UiColor previewCenterColor; // Offset: 16
    keen::UiTexture background; // Offset: 24
    keen::UiTexture direction; // Offset: 72
    keen::UiTexture dot_selected; // Offset: 120
    keen::UiTexture dot_unselected; // Offset: 168
    keen::UiTexture wheelRing_complete; // Offset: 216
    keen::UiTexture wheelRing_highlight; // Offset: 264
    keen::UiTexture blurredBackgroundMask; // Offset: 312
    keen::UiColor highlightColor; // Offset: 360
    keen::UiColor stickOutOfRangeColor; // Offset: 368
};

struct FbUiCompass {
    keen::UiSize baseSize; // Offset: 0
    keen::UiTexture background; // Offset: 8
    keen::UiTexture northBackground; // Offset: 56
    keen::UiTexture north; // Offset: 104
    keen::UiTexture east; // Offset: 152
    keen::UiTexture south; // Offset: 200
    keen::UiTexture west; // Offset: 248
    keen::UiTexture mark; // Offset: 296
    keen::UiTexture player; // Offset: 344
    keen::UiTexture priorityMarker; // Offset: 392
    keen::UiNineSliceTexture fogTimerShape; // Offset: 440
    keen::UiColor fogMeterFill; // Offset: 504
    keen::UiColor fogMeterRange; // Offset: 512
    keen::UiColor fogMeterDrain; // Offset: 520
};

struct FbUiDialog {
    keen::UiColor dialogMarkerColor; // Offset: 0
    keen::UiColor floatingBubbleTint; // Offset: 8
    keen::UiColor frostedGlassTint; // Offset: 16
    keen::UiColor textColor; // Offset: 24
};

struct FbUiHUD {
    keen::UiBorder screenPosClampingBorderDefault; // Offset: 0
    keen::UiColor widgetBackgroundColor; // Offset: 16
    keen::FbUiCursors cursors; // Offset: 24
    keen::FbUiHudPlayerStatus playerStatus; // Offset: 296
    keen::FbUiItemWheel itemWheel; // Offset: 824
    keen::FbUiHudMessage levelUp; // Offset: 1200
    keen::FbUiHudBarrierUnlock barrierUnlocked; // Offset: 1344
    keen::FbUiHudMessage doorUnlocked; // Offset: 1528
    keen::FbUiHudMessage secretUnlocked; // Offset: 1672
    keen::UiTexture quickItemBackground; // Offset: 1816
    keen::UiTexture equippedItemBackground; // Offset: 1864
    keen::FbUiHudBuildModeHint buildModeHint; // Offset: 1912
    keen::UiColor buildingZoneTooltipOutline; // Offset: 2064
    keen::FbUiHudNightSpeed nightSpeedHint; // Offset: 2072
    keen::FbUiCompass compass; // Offset: 2232
    keen::FbUiAnimatedHealthBarColors bossHealthColors; // Offset: 2760
    keen::FbUiAnimatedHealthBarColors bossStaminaColors; // Offset: 2808
    keen::UiBorder bossBarBorderThickness; // Offset: 2856
    keen::FbUiDialog dialog; // Offset: 2872
    keen::FbUiHUDSpatial spatial; // Offset: 2904
    keen::FbUiHudTopNotification notification; // Offset: 3792
    keen::FbUiHudGameProgressSummary gameProgressSummary; // Offset: 3832
    keen::FbUiHudLowHealth lowHealthVignette; // Offset: 3976
    keen::UiTexture blurVignette; // Offset: 4040
    keen::FbUiHudFreezing freezingVignette; // Offset: 4088
    keen::BlobArray<keen::Time> freezingWarningTimes; // Offset: 4536
    keen::FbUiHudPartyHealth partyHealth; // Offset: 4544
    keen::FbUiHudOutOfBound outOfBound; // Offset: 4576
    keen::FbUiHudServerPerformance serverPerforamceHint; // Offset: 4776
    keen::FbUiHudMusicBuff musicBuff; // Offset: 4840
    keen::FbUiHudAnimalTaming animalTaming; // Offset: 4912
};

struct FbUiHeadline {
    keen::UiNineSliceTexture background; // Offset: 0
    keen::UiColor criticalWarningTextColor; // Offset: 64
};

struct FbUiItemWheelDummy {
    keen::UiTexture texture; // Offset: 0
    keen::UiTexture glow; // Offset: 48
};

struct FbUiScreenDeath {
    keen::UiColor backgroundColor; // Offset: 0
    keen::UiLocaTagReference normalDeathHeadline; // Offset: 8
    keen::UiLocaTagReference fogDeathHeadline; // Offset: 24
    keen::UiLocaTagReference fogDeathHint; // Offset: 40
    keen::UiLocaTagReference inventoryLossHint; // Offset: 56
    keen::UiLocaTagReference inventoryLostAllHint; // Offset: 72
};

struct FbUiScreen {
    keen::UiTexture titleScreenKeyArt; // Offset: 0
    keen::FbUiScreenDeath death; // Offset: 48
    keen::FbUiControlScheme controlScheme; // Offset: 136
};

struct FbUiSoundsMenuGeneric {
    keen::SoundContainerReference flameAltarOpen; // Offset: 0
    keen::SoundContainerReference skillTreeOpen; // Offset: 16
    keen::SoundContainerReference loreOpen; // Offset: 32
    keen::SoundContainerReference loreClose; // Offset: 48
    keen::SoundContainerReference signpostOpen; // Offset: 64
    keen::SoundContainerReference signpostClose; // Offset: 80
    keen::SoundContainerReference systemMenuOpen; // Offset: 96
    keen::SoundContainerReference open; // Offset: 112
    keen::SoundContainerReference close; // Offset: 128
    keen::SoundContainerReference back; // Offset: 144
    keen::SoundContainerReference clickNeutral; // Offset: 160
    keen::SoundContainerReference tabChange; // Offset: 176
    keen::SoundContainerReference highlightChange; // Offset: 192
    keen::SoundContainerReference entryTrigger; // Offset: 208
    keen::SoundContainerReference entryCancel; // Offset: 224
    keen::SoundContainerReference entryTriggerFailed; // Offset: 240
    keen::SoundContainerReference sideMenuFadeIn; // Offset: 256
    keen::SoundContainerReference sideMenuFadeOut; // Offset: 272
    keen::SoundContainerReference equip; // Offset: 288
    keen::SoundContainerReference unequip; // Offset: 304
    keen::SoundContainerReference columnChange; // Offset: 320
    keen::SoundContainerReference leftOpen; // Offset: 336
    keen::SoundContainerReference leftClose; // Offset: 352
    keen::SoundContainerReference rightOpen; // Offset: 368
    keen::SoundContainerReference rightClose; // Offset: 384
    keen::SoundContainerReference settingWidgetToggle; // Offset: 400
    keen::SoundContainerReference settingMenuEnter; // Offset: 416
    keen::SoundContainerReference settingMenuExit; // Offset: 432
    keen::SoundContainerReference repairItems; // Offset: 448
    keen::SoundContainerReference textEnter; // Offset: 464
    keen::SoundContainerReference textDelete; // Offset: 480
    keen::SoundContainerReference mouseClickGeneric; // Offset: 496
    keen::SoundContainerReference mouseHover; // Offset: 512
    keen::SoundContainerReference activatePersonalProgression; // Offset: 528
    keen::SoundContainerReference deactivatePersonalProgression; // Offset: 544
    keen::SoundContainerReference sliderValueChange; // Offset: 560
    keen::SoundContainerReference selectDifficulty; // Offset: 576
    keen::Time mouseHoverTimeout; // Offset: 592
};

struct FbUiSoundsMenuCrafting {
    keen::SoundContainerReference recipeMoveWithinEntry; // Offset: 0
    keen::SoundContainerReference highlightChange; // Offset: 16
    keen::SoundContainerReference entryTrigger; // Offset: 32
    keen::SoundContainerReference craftingSuccessful; // Offset: 48
    keen::SoundContainerReference craftingFailed; // Offset: 64
    keen::SoundContainerReference pin; // Offset: 80
    keen::SoundContainerReference unpin; // Offset: 96
    keen::SoundContainerReference pinnedRecipeCraftable; // Offset: 112
    keen::SoundContainerReference pinnedRecipeIngredientCompleted; // Offset: 128
    keen::SoundContainerReference perkUnlocked; // Offset: 144
};

struct FbUiSoundsMenuJournal {
    keen::SoundContainerReference openTile; // Offset: 0
};

struct FbUiSoundsMenuAltar {
    keen::SoundContainerReference highlightChange; // Offset: 0
    keen::SoundContainerReference entryTrigger; // Offset: 16
    keen::SoundContainerReference leave; // Offset: 32
};

struct FbUiSoundsLootAquisition {
    keen::SoundContainerReference common; // Offset: 0
    keen::SoundContainerReference uncommon; // Offset: 16
    keen::SoundContainerReference rare; // Offset: 32
    keen::SoundContainerReference epic; // Offset: 48
    keen::SoundContainerReference legendary; // Offset: 64
    keen::SoundContainerReference keyItem; // Offset: 80
    keen::SoundContainerReference specialLoot; // Offset: 96
    keen::SoundContainerReference npc; // Offset: 112
    keen::SoundContainerReference pinnedRecipeHint; // Offset: 128
    keen::SoundContainerReference twitchReward; // Offset: 144
};

struct FbUiSoundsSkillTree {
    keen::SoundContainerReference attributeIncrease; // Offset: 0
    keen::SoundContainerReference skillUnlock; // Offset: 16
    keen::SoundContainerReference skillModUnlock; // Offset: 32
    keen::SoundContainerReference passivePerkUnlock; // Offset: 48
    keen::SoundContainerReference reactivePerkUnlock; // Offset: 64
    keen::SoundContainerReference nodeFocus; // Offset: 80
    keen::SoundContainerReference zoomIn; // Offset: 96
    keen::SoundContainerReference zoomOut; // Offset: 112
};

struct FbUiSoundsEventMessages {
    keen::SoundContainerReference menuUpdateNotification; // Offset: 0
    keen::SoundContainerReference locationDiscovery; // Offset: 16
    keen::SoundContainerReference npcRevived; // Offset: 32
    keen::SoundContainerReference amuletUpgraded; // Offset: 48
    keen::SoundContainerReference giftingSend; // Offset: 64
    keen::SoundContainerReference giftingReceive; // Offset: 80
    keen::SoundContainerReference clueCompleted; // Offset: 96
    keen::SoundContainerReference playerLevelup; // Offset: 112
    keen::SoundContainerReference flameLevelUp; // Offset: 128
    keen::SoundContainerReference magicBarrierUnlocked; // Offset: 144
    keen::SoundContainerReference doorUnlocked; // Offset: 160
    keen::SoundContainerReference secretDoorUnlocked; // Offset: 176
    keen::SoundContainerReference allMissedQuestsCompleted; // Offset: 192
    keen::SoundContainerReference newTwitchDropUnlocked; // Offset: 208
};

struct FbUiSoundsAdventureMap {
    keen::SoundContainerReference waypointSet; // Offset: 0
    keen::SoundContainerReference waypointClear; // Offset: 16
    keen::SoundContainerReference waypointLocate; // Offset: 32
    keen::SoundContainerReference zoomIn; // Offset: 48
    keen::SoundContainerReference zoomOut; // Offset: 64
    keen::SoundContainerReference fastTravelTriggered; // Offset: 80
    keen::SoundContainerReference showOnMap; // Offset: 96
    keen::SoundContainerReference goToHomeBase; // Offset: 112
    keen::SoundContainerReference recenter; // Offset: 128
    keen::SoundContainerReference playerPing; // Offset: 144
};

struct FbUiSoundsDialog {
    keen::SoundContainerReference startDialog; // Offset: 0
    keen::SoundContainerReference changeEntry; // Offset: 16
    keen::SoundContainerReference confirmEntry; // Offset: 32
    keen::SoundContainerReference cancelEntry; // Offset: 48
    keen::SoundContainerReference revealDialogLine; // Offset: 64
};

struct FbUiSoundsActionbar {
    keen::SoundContainerReference cantUse; // Offset: 0
    keen::SoundContainerReference moveHighlight; // Offset: 16
    keen::SoundContainerReference cycleActionbar; // Offset: 32
};

struct FbUiSoundsBackpack {
    keen::SoundContainerReference inventoryFull; // Offset: 0
    keen::SoundContainerReference deleteItem; // Offset: 16
    keen::SoundContainerReference dropItemIntoSlot; // Offset: 32
    keen::SoundContainerReference dropItemIntoActionBar; // Offset: 48
    keen::SoundContainerReference grabItem; // Offset: 64
    keen::SoundContainerReference swapItems; // Offset: 80
    keen::SoundContainerReference splitStack; // Offset: 96
    keen::SoundContainerReference salvageItem; // Offset: 112
    keen::SoundContainerReference sortInventory; // Offset: 128
};

struct FbUiSoundsItemWheel {
    keen::SoundContainerReference open; // Offset: 0
    keen::SoundContainerReference close; // Offset: 16
    keen::SoundContainerReference changeHighlight; // Offset: 32
};

struct FbUiSoundsHud {
    keen::SoundContainerReference lowHealthLoop; // Offset: 0
    keen::SoundContainerReference enterFog; // Offset: 16
    keen::Time enterFogTimeout; // Offset: 32
    keen::SoundContainerReference enterDangerousFog; // Offset: 40
    keen::SoundContainerReference enterFreeze; // Offset: 56
    keen::SoundContainerReference freezeWarning; // Offset: 72
    keen::SoundContainerReference freezeResistanceDepleted; // Offset: 88
    keen::SoundContainerReference flameReminder; // Offset: 104
    keen::SoundContainerReference flameLow; // Offset: 120
    keen::SoundContainerReference flameVeryLow; // Offset: 136
    keen::SoundContainerReference flameDepleted; // Offset: 152
    keen::SoundContainerReference flameLowLoop; // Offset: 168
    keen::SoundContainerReference manaInsufficient; // Offset: 184
    keen::Time manaInsufficientTimeout; // Offset: 200
    keen::SoundContainerReference staminaInsufficient; // Offset: 208
    keen::Time staminaInsufficientTimeout; // Offset: 224
    keen::SoundContainerReference ammoChanged; // Offset: 232
    keen::SoundContainerReference buildActionFailed; // Offset: 248
    keen::Time buildActionFailedTimeout; // Offset: 264
    keen::SoundContainerReference buildUndoSuccessful; // Offset: 272
    keen::SoundContainerReference buildInvMaximize; // Offset: 288
    keen::SoundContainerReference buildInvMinimize; // Offset: 304
    keen::SoundContainerReference buildModeEnter; // Offset: 320
    keen::SoundContainerReference buildModeExit; // Offset: 336
    keen::SoundContainerReference musicBuffProgressed; // Offset: 352
};

struct FbUiSoundsTitleScreen {
    keen::SoundContainerReference backgroundMusic; // Offset: 0
    keen::SoundContainerReference startTrigger; // Offset: 16
};

struct FbUiSounds {
    keen::SoundContainerReference test; // Offset: 0
    keen::FbUiSoundsTitleScreen titleScreen; // Offset: 16
    keen::FbUiSoundsEventMessages events; // Offset: 48
    keen::FbUiSoundsMenuGeneric menu; // Offset: 272
    keen::FbUiSoundsMenuCrafting crafting; // Offset: 872
    keen::FbUiSoundsMenuJournal journal; // Offset: 1032
    keen::FbUiSoundsMenuAltar altar; // Offset: 1048
    keen::FbUiSoundsSkillTree skilltree; // Offset: 1096
    keen::FbUiSoundsLootAquisition lootGet; // Offset: 1224
    keen::FbUiSoundsAdventureMap map; // Offset: 1384
    keen::FbUiSoundsDialog dialog; // Offset: 1544
    keen::FbUiSoundsItemWheel itemWheel; // Offset: 1624
    keen::FbUiSoundsHud hud; // Offset: 1672
    keen::FbUiSoundsActionbar actionbar; // Offset: 2040
    keen::FbUiSoundsBackpack backpack; // Offset: 2088
};

struct FbUiHudCharacterStyles {
    keen::UiCharacterStyle celebrationMain; // Offset: 0
    keen::UiCharacterStyle celebrationLevelNumber; // Offset: 88
    keen::UiCharacterStyle specialLootMain; // Offset: 176
    keen::UiCharacterStyle specialLootSecondary; // Offset: 264
    keen::UiCharacterStyle enemyDamagePoint; // Offset: 352
    keen::UiCharacterStyle enemyDamageBonusText; // Offset: 440
    keen::UiCharacterStyle healingDamagePoint; // Offset: 528
    keen::UiCharacterStyle playerDamagePoint; // Offset: 616
    keen::UiCharacterStyle immuneDamagePoint; // Offset: 704
    keen::UiCharacterStyle restoreManaPoint; // Offset: 792
    keen::UiCharacterStyle playerName; // Offset: 880
    keen::UiCharacterStyle enemyName; // Offset: 968
    keen::UiCharacterStyle bossName; // Offset: 1056
    keen::UiCharacterStyle ammoListEntry; // Offset: 1144
    keen::UiCharacterStyle staminaInfo; // Offset: 1232
    keen::UiCharacterStyle compassMarkerDistance; // Offset: 1320
    keen::UiCharacterStyle compassWayointMessage; // Offset: 1408
    keen::UiCharacterStyle compassFogTimer; // Offset: 1496
    keen::UiCharacterStyle compassFogTypeLabel; // Offset: 1584
    keen::UiCharacterStyle compassLeaveFogWarning; // Offset: 1672
    keen::UiCharacterStyle nightSpeedHint; // Offset: 1760
};

struct FbUiMenuCharacterStyles {
    keen::UiCharacterStyle topTab; // Offset: 0
    keen::UiCharacterStyle header1; // Offset: 88
    keen::UiCharacterStyle header2; // Offset: 176
    keen::UiCharacterStyle header3; // Offset: 264
    keen::UiCharacterStyle buttonHint; // Offset: 352
    keen::UiCharacterStyle textfieldEmptyHint; // Offset: 440
};

struct FbUiMapCharacterStyles {
    keen::UiCharacterStyle playerName; // Offset: 0
    keen::UiCharacterStyle locationName; // Offset: 88
    keen::UiCharacterStyle clusterSizeNumber; // Offset: 176
    keen::UiCharacterStyle markerLabel; // Offset: 264
    keen::UiCharacterStyle tooltip; // Offset: 352
};

struct FbUiFontSizes {
    keen::BlobArray<keen::float> textScaleSteps; // Offset: 0
    keen::float32 xsmall; // Offset: 8
    keen::float32 small; // Offset: 12
    keen::float32 medium; // Offset: 16
    keen::float32 large; // Offset: 20
    keen::float32 xlarge; // Offset: 24
    keen::float32 caps_small; // Offset: 28
    keen::float32 caps_medium; // Offset: 32
    keen::float32 caps_large; // Offset: 36
    keen::float32 caps_xlarge; // Offset: 40
};

struct FbUiCharacterStyles {
    keen::UiCharacterStyle defaultStyle; // Offset: 0
    keen::UiCharacterStyle defaultStyleOutline; // Offset: 88
    keen::UiCharacterStyle secondaryText; // Offset: 176
    keen::UiCharacterStyle mutedItalic; // Offset: 264
    keen::UiCharacterStyle redText; // Offset: 352
    keen::UiCharacterStyle greenText; // Offset: 440
    keen::UiCharacterStyle h1; // Offset: 528
    keen::UiCharacterStyle h2; // Offset: 616
    keen::UiCharacterStyle h3; // Offset: 704
    keen::UiCharacterStyle legalText; // Offset: 792
    keen::UiCharacterStyle warning; // Offset: 880
    keen::UiCharacterStyle hyperlink; // Offset: 968
    keen::UiCharacterStyle location; // Offset: 1056
    keen::UiCharacterStyle npc; // Offset: 1144
    keen::UiCharacterStyle craftingstation; // Offset: 1232
    keen::UiCharacterStyle keyitem; // Offset: 1320
    keen::UiCharacterStyle lorename; // Offset: 1408
    keen::UiCharacterStyle impactAttribute; // Offset: 1496
    keen::UiCharacterStyle textChatSpeakerNameSelf; // Offset: 1584
    keen::UiCharacterStyle textChatSpeakerNameOther; // Offset: 1672
    keen::UiCharacterStyle textChatMessage; // Offset: 1760
    keen::FbUiHudCharacterStyles hud; // Offset: 1848
    keen::FbUiMenuCharacterStyles menu; // Offset: 3696
    keen::FbUiMapCharacterStyles map; // Offset: 4224
    keen::UiCharacterStyle keyboardLegend; // Offset: 4664
    keen::UiCharacterStyle versionWatermark; // Offset: 4752
    keen::UiCharacterStyle versionWatermarkSecondLine; // Offset: 4840
};

struct FbUiParagraphStyles {
    keen::UiParagraphStyle hudDefault; // Offset: 0
    keen::UiParagraphStyle test; // Offset: 28
};

struct FbUiScrollingLayouts {
};

struct Curve {
    keen::uint32 sampleCount; // Offset: 0
};

typedef keen::UiVector UiPosition;

struct UiTestTypes {
    keen::string type_string; // Offset: 0
    keen::float2 type_float2; // Offset: 8
    keen::float3 type_float3; // Offset: 16
    keen::uint32 type_uint32; // Offset: 28
    keen::bool type_bool; // Offset: 32
    keen::Color type_Color; // Offset: 36
    keen::SoundContainerReference type_SoundContainerReference; // Offset: 40
    keen::Curve type_Curve; // Offset: 56
    keen::UiTexture type_UiTexture; // Offset: 60
    keen::UiPosition type_UiPosition; // Offset: 108
    keen::UiSize type_UiSize; // Offset: 116
    keen::UiColor type_UiColor; // Offset: 124
};

enum class UiHorizontalAlignment {
    None = 0,
    Left = 1,
    Center = 2,
    Right = 3,
};

enum class UiVerticalAlignment {
    None = 0,
    Top = 1,
    Center = 2,
    Bottom = 3,
};

struct UiAlignment {
    keen::UiHorizontalAlignment horizontal; // Offset: 0
    keen::UiVerticalAlignment vertical; // Offset: 1
};

enum class GameUiTextLayoutStyle {
    Floating = 0,
    Wrap = 1,
    Wrap_ScaleFontSizeToFit = 2,
    Scroll = 3,
    Scroll_FixedPixelPerSecond = 4,
};

struct GameUiTextParameterData {
    keen::string characterStyle; // Offset: 0
    keen::string paragraphStyle; // Offset: 8
    keen::float2 offset; // Offset: 16
    keen::float2 stretch; // Offset: 24
    keen::UiAlignment alignment; // Offset: 32
    keen::UiBorder margin; // Offset: 36
    keen::UiBorder padding; // Offset: 52
    keen::Time revealTime; // Offset: 72
    keen::GameUiTextLayoutStyle textLayoutStyle; // Offset: 80
    keen::bool allowLineBreak; // Offset: 81
};

enum class GameUiImageSizing {
    Stretched = 0,
    Fit = 1,
    Cropped = 2,
};

struct GameUiImageParameterData {
    keen::GameUiImageSizing sizing; // Offset: 0
    keen::float32 alpha; // Offset: 4
    keen::UiColor color; // Offset: 8
    keen::float2 offset; // Offset: 16
    keen::float2 stretch; // Offset: 24
    keen::UiBorder margin; // Offset: 32
    keen::UiBorder padding; // Offset: 48
};

struct FbUiTestParameters {
    keen::UiTestTypes _types; // Offset: 0
    keen::FbUiScrollingLayouts scrollingLayouts; // Offset: 132
    keen::GameUiTextParameterData testTextParameter; // Offset: 136
    keen::GameUiImageParameterData testImageParameter; // Offset: 224
    keen::UiNineSliceTexture testNineSliceTexture; // Offset: 288
    keen::UiBorder testNineSliceScreenBorder; // Offset: 352
    keen::Time durationTextTestTime; // Offset: 368
    keen::bool durationTextShowOnlyBiggestTimeUnit; // Offset: 376
    keen::bool durationTextUseLocalizedUnits; // Offset: 377
    keen::bool durationTextUseThirdNumber; // Offset: 378
    keen::uint8 durationTextSubSecondDigits; // Offset: 379
};

struct FbUiRarityColors {
    keen::UiColor undefined; // Offset: 0
    keen::UiColor common; // Offset: 8
    keen::UiColor uncommon; // Offset: 16
    keen::UiColor rare; // Offset: 24
    keen::UiColor epic; // Offset: 32
    keen::UiColor legendary; // Offset: 40
    keen::UiColor vanity; // Offset: 48
    keen::UiColor collectible; // Offset: 56
    keen::float32 vanityTextColorIntensity; // Offset: 64
};

struct FbUiNetworkQualityColors {
    keen::UiColor good; // Offset: 0
    keen::UiColor acceptable; // Offset: 8
    keen::UiColor bad; // Offset: 16
};

struct FbUiGlobalColors {
    keen::FbUiRarityColors rarity; // Offset: 0
    keen::UiColor priorityColor; // Offset: 68
    keen::UiColor priorityBgColor; // Offset: 76
    keen::UiColor attentionColor; // Offset: 84
    keen::UiColor checkmarkGreen; // Offset: 92
    keen::UiColor warningColor; // Offset: 100
    keen::UiColor warningColorBackground; // Offset: 108
    keen::UiColor warningColorFrostedGlassTint; // Offset: 116
    keen::UiColor attributeBetterColor; // Offset: 124
    keen::UiColor attributeWorseColor; // Offset: 132
    keen::FbUiNetworkQualityColors networkQuality; // Offset: 140
};

struct FbUiFrostedGlassParameters {
    keen::uint32 downsampleSteps; // Offset: 0
    keen::float32 sigma; // Offset: 4
    keen::ObjectReference<keen::RenderColorGradingMap> colorGradingMap; // Offset: 8
    keen::bool colorGradeBeforeBlur; // Offset: 24
};

struct FbUiStartUpLogo {
    keen::UiTexture image; // Offset: 0
    keen::float32 height; // Offset: 48
    keen::SoundContainerReference sound; // Offset: 52
    keen::UiColor backgroundColor; // Offset: 68
};

struct FbUiStartUpLogoSequence {
    keen::Time logoFadeDuration; // Offset: 0
    keen::Time logoIdleDuration; // Offset: 8
    keen::FbUiStartUpLogo keenLogo; // Offset: 16
    keen::FbUiStartUpLogo bmwiLogo; // Offset: 92
    keen::Time postLogoDelay; // Offset: 168
    keen::Time mainMenuFadeInDuration; // Offset: 176
};

struct FbUiPreGameCharacterViews {
    keen::FbUiCharacterView mainMenu; // Offset: 0
    keen::FbUiCharacterView postMainMenu; // Offset: 28
    keen::FbUiCharacterView savePortrait; // Offset: 56
};

struct FbUiCustomizationHairColors {
    keen::UiColor brightBlonde; // Offset: 0
    keen::UiColor blonde; // Offset: 8
    keen::UiColor red; // Offset: 16
    keen::UiColor brightBrown; // Offset: 24
    keen::UiColor brown; // Offset: 32
    keen::UiColor black; // Offset: 40
    keen::UiColor grey; // Offset: 48
    keen::UiColor white; // Offset: 56
};

struct FbUiCustomizationSkinColors {
    keen::UiColor african_1; // Offset: 0
    keen::UiColor african_2; // Offset: 8
    keen::UiColor asian_1; // Offset: 16
    keen::UiColor caucasian_1; // Offset: 24
    keen::UiColor caucasian_2; // Offset: 32
    keen::UiColor caucasian_3; // Offset: 40
    keen::UiColor mixed_1; // Offset: 48
    keen::UiColor mixed_2; // Offset: 56
};

struct FbUiCustomizationEyeColors {
    keen::UiColor blue; // Offset: 0
    keen::UiColor brightBrown; // Offset: 8
    keen::UiColor brown; // Offset: 16
    keen::UiColor green; // Offset: 24
    keen::UiColor grey; // Offset: 32
};

struct FbUiCustomizationEyeBrowColors {
    keen::UiColor brightBlonde; // Offset: 0
    keen::UiColor blonde; // Offset: 8
    keen::UiColor red; // Offset: 16
    keen::UiColor brightBrown; // Offset: 24
    keen::UiColor brown; // Offset: 32
    keen::UiColor black; // Offset: 40
    keen::UiColor grey; // Offset: 48
    keen::UiColor white; // Offset: 56
};

struct FbUiCustomizationTabIcons {
    keen::UiTexture iconBodytype; // Offset: 0
    keen::UiTexture iconHair; // Offset: 48
    keen::UiTexture iconBeard; // Offset: 96
    keen::UiTexture iconVoice; // Offset: 144
    keen::UiTexture iconName; // Offset: 192
    keen::UiTexture iconPlay; // Offset: 240
    keen::UiTexture iconHairColor; // Offset: 288
    keen::UiTexture iconBeardColor; // Offset: 336
    keen::UiTexture iconEyeColor; // Offset: 384
    keen::UiTexture iconEyeBrowColor; // Offset: 432
    keen::UiTexture iconSkinColor; // Offset: 480
};

struct FbUiCharacterCustomization {
    keen::FbUiCustomizationHairColors hairColors; // Offset: 0
    keen::FbUiCustomizationSkinColors skinColors; // Offset: 64
    keen::FbUiCustomizationEyeColors eyeColors; // Offset: 128
    keen::FbUiCustomizationEyeBrowColors eyeBrowColors; // Offset: 168
    keen::FbUiCustomizationTabIcons tabIcons; // Offset: 232
    keen::UiTexture widgetSelector; // Offset: 760
    keen::UiTexture voicePreview1; // Offset: 808
    keen::UiTexture voicePreview2; // Offset: 856
};

struct FbUiPreGame {
    keen::FbUiStartUpLogoSequence startUpSequence; // Offset: 0
    keen::Time startGameFadeOutDuration; // Offset: 184
    keen::UiTexture titleScreenKeyArt; // Offset: 192
    keen::UiTexture mainMenuLogo; // Offset: 240
    keen::UiBorder mainMenuPadding; // Offset: 288
    keen::float32 logoHeight; // Offset: 304
    keen::float32 backgroundScale; // Offset: 308
    keen::float32 backgroundNormalizedOffsetX; // Offset: 312
    keen::float32 backgroundNormalizedOffsetY; // Offset: 316
    keen::UiTexture mainMenuEntryHighlightBackground; // Offset: 320
    keen::UiTexture joinTileBg; // Offset: 368
    keen::UiTexture hostPublicTileBg; // Offset: 416
    keen::UiTexture privateTileBg; // Offset: 464
    keen::FbUiPreGameCharacterViews characterViews; // Offset: 512
    keen::FbUiCharacterCustomization characterCustomization; // Offset: 596
    keen::UiTexture menuEntryHighlightBackground; // Offset: 1500
    keen::UiTexture logoGPortal; // Offset: 1548
    keen::UiColor dedicatedServerColor; // Offset: 1596
    keen::UiColor friendServerColor; // Offset: 1604
};

enum class FbUiCreditsItemType {
    None = 0,
    Title = 1,
    Heading = 2,
    SubHeading = 3,
    Text = 4,
    Image = 5,
};

struct FbUiCreditItemImage {
    keen::BlobString identifier; // Offset: 0
    keen::UiTexture texture; // Offset: 8
    keen::UiColor color; // Offset: 56
    keen::UiSize imageSize; // Offset: 64
};

struct FbUiCreditImageRepository {
};

struct FbUiCreditsItem {
    keen::FbUiCreditsItemType itemType; // Offset: 0
    keen::string text; // Offset: 4
    keen::FbUiCreditItemImage image; // Offset: 12
};

struct FbUiCreditStyle {
    keen::UiCharacterStyle style; // Offset: 0
    keen::float32 fontSize; // Offset: 88
    keen::float32 topSpacer; // Offset: 92
};

struct FbUiCreditStyles {
    keen::FbUiCreditStyle h1; // Offset: 0
    keen::FbUiCreditStyle h2; // Offset: 96
    keen::FbUiCreditStyle h3; // Offset: 192
    keen::FbUiCreditStyle text; // Offset: 288
};

struct FbUiCredits {
    keen::BlobArray<keen::FbUiCreditsItem> items; // Offset: 0
    keen::UiLocaTagReference text; // Offset: 8
    keen::UiLocaTagReference creditEndText; // Offset: 24
    keen::FbUiCreditStyles creditStyles; // Offset: 40
    keen::float32 scrollSpeed; // Offset: 424
    keen::float32 gamepadScrollSpeed; // Offset: 428
};

struct FbUiKnowledgeRequirement {
    keen::GameKnowledgeTrigger trigger; // Offset: 0
    keen::KnowledgeId triggerId; // Offset: 56
};

struct FbUiTutorialKnowledge {
    keen::FbUiKnowledgeRequirement quickbuilder; // Offset: 0
    keen::FbUiKnowledgeRequirement summoningStaff; // Offset: 60
    keen::FbUiKnowledgeRequirement crafting; // Offset: 120
    keen::FbUiKnowledgeRequirement factory; // Offset: 180
    keen::FbUiKnowledgeRequirement enhancing; // Offset: 240
    keen::FbUiKnowledgeRequirement cooking; // Offset: 300
    keen::FbUiKnowledgeRequirement actionbar; // Offset: 360
    keen::FbUiKnowledgeRequirement storage; // Offset: 420
    keen::FbUiKnowledgeRequirement taming; // Offset: 480
    keen::FbUiKnowledgeRequirement happyNpcRequirement; // Offset: 540
};

struct FbUiKnowledge {
    keen::FbUiTutorialKnowledge tutorial; // Offset: 0
};

struct SystemErrorMessages {
    keen::UiLocaTagReference waitingForProcess; // Offset: 0
    keen::UiLocaTagReference noInputDevice; // Offset: 16
    keen::UiLocaTagReference connectFailed; // Offset: 32
    keen::UiLocaTagReference connectionLost; // Offset: 48
    keen::UiLocaTagReference newVersionRequired; // Offset: 64
    keen::UiLocaTagReference playerNotSignedIn; // Offset: 80
    keen::UiLocaTagReference playerNoPrivileges; // Offset: 96
    keen::UiLocaTagReference playerNoMultiplayerEntitlement; // Offset: 112
    keen::UiLocaTagReference createGameFailed; // Offset: 128
    keen::UiLocaTagReference joinGameFailed; // Offset: 144
    keen::UiLocaTagReference joinGameFailed_NotFound; // Offset: 160
    keen::UiLocaTagReference joinGameFailed_Full; // Offset: 176
    keen::UiLocaTagReference joinGameFailed_Reserved; // Offset: 192
    keen::UiLocaTagReference joinGameFailed_WrongPassword; // Offset: 208
    keen::UiLocaTagReference joinGameFailed_WrongPasswordCooldown; // Offset: 224
    keen::UiLocaTagReference sessionFailed; // Offset: 240
    keen::UiLocaTagReference joinPlayerFailed; // Offset: 256
    keen::UiLocaTagReference kicked; // Offset: 272
    keen::UiLocaTagReference saveGameCorrupt; // Offset: 288
    keen::UiLocaTagReference settingsCorrupt; // Offset: 304
    keen::UiLocaTagReference eraseFailed; // Offset: 320
    keen::UiLocaTagReference notEnoughSpace; // Offset: 336
    keen::UiLocaTagReference createFailed; // Offset: 352
    keen::UiLocaTagReference readError; // Offset: 368
    keen::UiLocaTagReference writeError; // Offset: 384
};

struct SystemErrorResponses {
    keen::UiLocaTagReference retry; // Offset: 0
    keen::UiLocaTagReference disable; // Offset: 16
    keen::UiLocaTagReference erase; // Offset: 32
    keen::UiLocaTagReference reset; // Offset: 48
    keen::UiLocaTagReference deviceSelection; // Offset: 64
    keen::UiLocaTagReference overwrite; // Offset: 80
    keen::UiLocaTagReference cancel; // Offset: 96
    keen::UiLocaTagReference ok; // Offset: 112
};

struct SystemErrorLoca {
    keen::SystemErrorMessages errors; // Offset: 0
    keen::SystemErrorResponses responses; // Offset: 400
    keen::UiLocaTagReference errorTitleWarning; // Offset: 528
};

enum class DefaultServerRoleType {
    Guest = 0,
    Friend = 1,
    Admin = 2,
};

struct FbUiServerRoleSettings {
    keen::BlobArray<keen::FbUiServerRole> defaultServerRoles; // Offset: 0
    keen::BlobArray<keen::UiTexture> serverRoleIcons; // Offset: 8
};

struct FbUiServerRole {
    keen::DefaultServerRoleType type; // Offset: 0
    keen::UiLocaTagReference roleName; // Offset: 4
    keen::PlayerPermissionsMask permissions; // Offset: 20
};

struct FbUiLoreSlide {
    keen::UiTexture slideImage; // Offset: 0
    keen::UiLocaTagReference slideText; // Offset: 48
    keen::bool useTextBackground; // Offset: 64
    keen::UiVector startOffset; // Offset: 68
    keen::UiVector endOffset; // Offset: 76
    keen::float32 startScale; // Offset: 84
    keen::float32 endScale; // Offset: 88
    keen::float32 slideDuration; // Offset: 92
    keen::float32 textStartDelay; // Offset: 96
    keen::float32 textAnimDuration; // Offset: 100
    keen::float32 fadeInDuration; // Offset: 104
    keen::float32 fadeOutDuration; // Offset: 108
    keen::UiColor fadeInColor; // Offset: 112
    keen::UiColor fadeOutColor; // Offset: 120
};

struct FbUiLogos {
    keen::BlobArray<keen::UiTexture> creditsLogos; // Offset: 0
    keen::UiTexture enshrouded_TraditionalChinese; // Offset: 8
    keen::UiTexture enshrouded_SimplifiedChinese; // Offset: 56
    keen::UiTexture enshrouded_Japanese; // Offset: 104
    keen::UiTexture enshrouded_Korean; // Offset: 152
};

struct FbUiLoreIntro {
    keen::BlobArray<keen::FbUiLoreSlide> allSlides; // Offset: 0
    keen::UiCharacterStyle textStyle; // Offset: 8
    keen::UiNineSliceTexture slideBorder; // Offset: 96
};

struct UiBundle {
    keen::UiTexturePreload texturePreload; // Offset: 0
    keen::BlobArray<keen::UiCharacterStyle> characterStyles; // Offset: 8
    keen::BlobArray<keen::UiParagraphStyle> paragraphStyles; // Offset: 16
};

struct FbUiBundle {
    keen::FbUiLocaLinks locatags; // Offset: 24
    keen::FbUiSocialLogos socialLogos; // Offset: 25392
    keen::FbUiLogos logos; // Offset: 25680
    keen::FbUiGenericIcons genericIcons; // Offset: 25880
    keen::FbUiGamepadButtonSets gamepadButtons; // Offset: 28856
    keen::FbUiKeyboardKeys keyboardKeys; // Offset: 34048
    keen::FbUiKeyboardKeyLegends keyboardKeyLegends; // Offset: 34160
    keen::FbUiMouseHints mouseHints; // Offset: 34352
    keen::FbUiPrimitives primitives; // Offset: 35024
    keen::FbUiLoadingSymbol loading; // Offset: 36256
    keen::FbUiGlobalColors globalColors; // Offset: 36268
    keen::FbUiPreGame preGame; // Offset: 36432
    keen::FbUiHUD hud; // Offset: 38048
    keen::FbUiMenu menu; // Offset: 43256
    keen::FbUiCustomization customization; // Offset: 54496
    keen::FbUiKnowledge knowledge; // Offset: 54736
    keen::FbUiItemSlot itemSlot; // Offset: 55336
    keen::FbUiBuffIcons buffIcons; // Offset: 57312
    keen::FbUiScreen screen; // Offset: 57544
    keen::FbUiHeadline headline; // Offset: 57776
    keen::FbUiFontSizes fontSizes; // Offset: 57848
    keen::FbUiCharacterStyles namedStyles; // Offset: 57892
    keen::FbUiParagraphStyles namedParagraphStyles; // Offset: 62820
    keen::FbUiSounds sounds; // Offset: 62880
    keen::FbUiTestParameters testParameters; // Offset: 65112
    keen::FbUiFrostedGlassParameters frostedGlass; // Offset: 65496
    keen::SystemErrorLoca systemErrors; // Offset: 65524
    keen::FbUiServerRoleSettings serverRoleSettings; // Offset: 66068
    keen::FbUiDifficultySettings difficultySettings; // Offset: 66088
    keen::UiTexture noRtxWarning; // Offset: 68032
    keen::FbUiCredits credits; // Offset: 68080
    keen::FbUiLoreIntro loreIntro; // Offset: 68512
    keen::BlobArray<keen::FbUiWorldEvent> worldEvents; // Offset: 68672
};

struct FbUiMap {
    keen::ObjectReference<keen::Scene> scene; // Offset: 0
    keen::float32 isolineSpacing; // Offset: 16
    keen::ObjectReference<keen::Image> baseGradient; // Offset: 20
    keen::ObjectReference<keen::Image> isolineGradient; // Offset: 36
    keen::ObjectReference<keen::Image> fogNoise; // Offset: 52
    keen::uint8 fogZoneBorderSdfDistance; // Offset: 68
    keen::ObjectReference<keen::Image> fogZoneBorderGradient; // Offset: 72
    keen::ObjectReference<keen::Image> fogZoneTextureNormal; // Offset: 88
    keen::ObjectReference<keen::Image> fogZoneTextureDangerous; // Offset: 104
};

struct FbUiTexture {
    keen::uint16 width; // Offset: 0
    keen::uint16 height; // Offset: 2
    keen::uint8 levelCount; // Offset: 4
    keen::PixelFormat format; // Offset: 5
    keen::TextureType type; // Offset: 6
    keen::ContentHash data; // Offset: 8
    keen::string debugName; // Offset: 24
};

struct FbUiMapResource {
    keen::float32 tileSize; // Offset: 0
    keen::uint2 tileCount; // Offset: 4
    keen::float2 normalizedTileSize; // Offset: 12
    keen::FbUiTexture baseGradientTexture; // Offset: 20
    keen::FbUiTexture isolineGradientTexture; // Offset: 52
    keen::FbUiTexture fogZoneBorderGradientTexture; // Offset: 84
    keen::FbUiTexture fogNoiseTexture; // Offset: 116
    keen::FbUiTexture fogZoneTextureNormal; // Offset: 148
    keen::FbUiTexture fogZoneTextureDangerous; // Offset: 180
};

struct FbUiMapTileResource {
    keen::FbUiTexture mapTexture; // Offset: 0
};

enum class FatalErrorId {
    Ok = 0,
    Generic = 1,
    Graphics_InitializationFailed = 2,
    Graphics_DriverTooOld = 3,
    Graphics_NoCompatibleDeviceFound = 4,
    Graphics_NotEnoughDeviceMemory = 5,
    MemorySystem_InitializationFailed = 6,
    MemorySystem_NotEnoughMemory = 7,
    SaveData_InitalizationFailed = 8,
    Online_InitializationFailed = 9,
    Steam_CoreResourcePackageNotFound = 10,
    Steam_NotSubscribed = 11,
};

struct GameBenchmarkSampleZone {
    keen::string name; // Offset: 0
    keen::string valueName; // Offset: 8
    keen::Time minDuration; // Offset: 16
    keen::Time maxDuration; // Offset: 24
    keen::Time averageDuration; // Offset: 32
    keen::uint64 minValue; // Offset: 40
    keen::uint64 maxValue; // Offset: 48
    keen::uint64 averageValue; // Offset: 56
    keen::uint32 sampleCount; // Offset: 64
};

struct GameBenchmarkSample {
    keen::uint16 frameCount; // Offset: 0
    keen::Time sampleTime; // Offset: 8
    keen::BlobArray<keen::GameBenchmarkSampleZone> zones; // Offset: 16
};

struct GameBenchmarkPlace {
    keen::float3 position; // Offset: 0
    keen::HashKey32 instanceHash; // Offset: 12
    keen::BlobArray<keen::GameBenchmarkSample> samples; // Offset: 16
    keen::Guid guid; // Offset: 24
};

struct GameBenchmarkResource {
    keen::string description; // Offset: 0
    keen::string bauPath; // Offset: 8
    keen::ContentHash hash; // Offset: 16
};

struct GameBenchmarkResult {
    keen::string name; // Offset: 0
    keen::string author; // Offset: 8
    keen::string machine; // Offset: 16
    keen::string engineVersion; // Offset: 24
    keen::CalendarTimeStamp date; // Offset: 32
    keen::BlobArray<keen::GameBenchmarkResource> resources; // Offset: 40
    keen::BlobArray<keen::GameBenchmarkPlace> places; // Offset: 48
};

enum class GameFrameworkWindowType {
    Fixed = 0,
    Resizable = 1,
    Fullscreen = 2,
};

struct GameFrameworkGraphicsConfig {
    keen::StaticArray<keen::uint8,128> apiName; // Offset: 0
    keen::GameFrameworkWindowType windowType; // Offset: 128
    keen::sint32 windowPosX; // Offset: 132
    keen::sint32 windowPosY; // Offset: 136
    keen::uint32 windowSizeX; // Offset: 140
    keen::uint32 windowSizeY; // Offset: 144
    keen::uint32 presentationInterval; // Offset: 148
};

struct GameFrameworkConfig {
    keen::GameFrameworkGraphicsConfig graphics; // Offset: 0
};

enum class GameUiAxis {
    Horizontal = 0,
    Vertical = 1,
};

enum class GameUiFrameLayout {
    Horizontal = 0,
    Vertical = 1,
    Grid = 2,
};

enum class GameUiScrollingSliderStyle {
    Solid = 0,
    Textured = 1,
};

enum class GameUiScrollingHotkeyFlag {
    MouseWheel = 0,
    Dpad = 1,
    LeftStick = 2,
    RightStick = 3,
    PageKeys = 4,
    ArrowKeys = 5,
};

enum class GameUiMouseDragInputFlag {
    MouseLeft = 0,
    MouseRight = 1,
    MouseMiddle = 2,
};

typedef keen::Bitmask8<keen::GameUiMouseDragInputFlag> GameUiMouseDragInputMask;

typedef keen::Bitmask8<keen::GameUiScrollingHotkeyFlag> GameUiScrollingKeyMask;

struct GameUiScrollbarParameterData {
    keen::GameUiAxis direction; // Offset: 0
    keen::UiColor rangeRectColor; // Offset: 4
    keen::UiColor sliderIdleColor; // Offset: 12
    keen::UiColor sliderHoverColor; // Offset: 20
    keen::UiColor sliderOutlineColor; // Offset: 28
    keen::UiNineSliceTexture rangeTexture; // Offset: 36
    keen::UiNineSliceTexture sliderTexture; // Offset: 100
    keen::UiTexture sliderGripTexture; // Offset: 164
    keen::GameUiScrollingSliderStyle sliderStyle; // Offset: 212
    keen::float32 sliderIdleWidth; // Offset: 216
    keen::float32 sliderHoverWidth; // Offset: 220
    keen::float32 baseWidth; // Offset: 224
    keen::float32 rangeTextureWidth; // Offset: 228
    keen::bool useInverseRangeRect; // Offset: 232
    keen::bool useGlobalFocus; // Offset: 233
    keen::bool enableDrag; // Offset: 234
    keen::bool enableTouchDrag; // Offset: 235
    keen::bool forceScrollbar; // Offset: 236
    keen::UiPosition offset; // Offset: 240
    keen::UiBorder padding; // Offset: 248
    keen::UiBorder sliderMargin; // Offset: 264
};

struct GameUiScrollingLayoutParameterData {
    keen::UiColor borderColor; // Offset: 0
    keen::UiTexture scrollHintTexture; // Offset: 8
    keen::UiBorder padding; // Offset: 56
    keen::UiAlignment scrollbarAlignment; // Offset: 72
    keen::bool showScrollHint; // Offset: 74
    keen::bool enableScrollbar; // Offset: 75
    keen::bool useNavigation; // Offset: 76
    keen::bool stealCapture; // Offset: 77
    keen::bool doScissorWhenScrolling; // Offset: 78
    keen::bool centerChildren; // Offset: 79
    keen::bool enableDrag; // Offset: 80
    keen::bool forceScrollbar; // Offset: 81
    keen::bool useGlobalFocus; // Offset: 82
    keen::bool useFillerSeperatorLineDistance; // Offset: 83
    keen::bool consumeInput; // Offset: 84
    keen::bool useAutoScrolling; // Offset: 85
    keen::float32 fillerSeperatorLineDistance; // Offset: 88
    keen::float32 spacing; // Offset: 92
    keen::GameUiScrollingKeyMask scrollingHotKeyMask; // Offset: 96
    keen::GameUiMouseDragInputMask mouseDragInputMask; // Offset: 97
    keen::GameUiScrollbarParameterData scrollBar; // Offset: 100
};

struct SlotJointMapping {
    keen::string head; // Offset: 0
    keen::string chest; // Offset: 8
    keen::string pelvis; // Offset: 16
    keen::string footL; // Offset: 24
    keen::string footR; // Offset: 32
    keen::string footRL; // Offset: 40
    keen::string footRR; // Offset: 48
    keen::string handR; // Offset: 56
    keen::string handL; // Offset: 64
    keen::string kneeR; // Offset: 72
    keen::string kneeL; // Offset: 80
    keen::string armL; // Offset: 88
    keen::string block; // Offset: 96
};

struct ModelBase {
};

struct ModelHierarchy {
    keen::string exportNode; // Offset: 0
    keen::float32 scale; // Offset: 8
    keen::float32 xanimScale; // Offset: 12
    keen::bool rotateY; // Offset: 16
    keen::SlotJointMapping slotJointMapping; // Offset: 20
    keen::PreviewModelArray previewModels; // Offset: 124
};

struct ModelHierarchyJointData {
    keen::uint32 index; // Offset: 0
    keen::string name; // Offset: 4
    keen::uint32 parentIndex; // Offset: 12
    keen::uint32 tag; // Offset: 16
    keen::Matrix43 defaultPose; // Offset: 32
    keen::bool fixPosition; // Offset: 96
};

struct ModelHierarchyData {
    keen::BlobArray<keen::ModelHierarchyJointData> joints; // Offset: 0
    keen::uint64 defaultPoseHash; // Offset: 8
    keen::SlotJointMapping slotJointMapping; // Offset: 16
    keen::PreviewModelArray previewModels; // Offset: 120
};

struct ModelPose {
    keen::BlobArray<keen::vf32_data> data; // Offset: 0
    keen::uint32 alignedJointCount; // Offset: 8
};

struct ModelHierarchyJointDescription {
    keen::BlobArray<keen::string> jointDescriptions; // Offset: 0
};

struct ModelHierarchyResource {
    keen::Guid hierarchyId; // Offset: 0
    keen::BlobArray<keen::uint32> jointNames; // Offset: 16
    keen::BlobArray<keen::uint16> joinParentIndices; // Offset: 24
    keen::BlobArray<keen::Matrix43> skinToJointMatrices; // Offset: 32
    keen::uint32 jointCount; // Offset: 40
    keen::ModelPose defaultPose; // Offset: 44
    keen::BlobArray<keen::AnimationJoint> defaultPoseJoints; // Offset: 56
};

struct VertexAttribute {
    keen::uint8 id; // Offset: 0
    keen::uint8 format; // Offset: 1
};

enum class GpcVariantFlag {
    Debug = 0,
    Float16 = 1,
};

struct GpcShaderVariant {
    keen::Bitmask8<keen::GpcVariantFlag> mask; // Offset: 0
    keen::ContentHash code; // Offset: 4
    keen::ContentHash strippedCode; // Offset: 20
};

struct GpcShaderResource {
    keen::BlobArray<keen::GpcShaderVariant> variants; // Offset: 0
    keen::string entryPoint; // Offset: 8
};

enum class GpcPrimitiveType {
    TriangleList = 0,
    TriangleStrip = 1,
    LineList = 2,
    PatchList = 3,
};

enum class GpcCullMode {
    None = 0,
    Front = 1,
    Back = 2,
};

enum class GpcFillMode {
    Solid = 0,
    Wireframe = 1,
};

enum class GpcWindingOrder {
    Ccw = 0,
    Cw = 1,
};

enum class GpcBlendOp {
    None = 0,
    Add = 1,
    Subtract = 2,
    RevSubtract = 3,
    Min = 4,
    Max = 5,
};

enum class GpcBlendFactor {
    Zero = 0,
    One = 1,
    SrcColor = 2,
    InvSrcColor = 3,
    SrcAlpha = 4,
    InvSrcAlpha = 5,
    DestAlpha = 6,
    InvDestAlpha = 7,
    DestColor = 8,
    InvDestColor = 9,
    SrcAlphaSat = 10,
};

enum class GpcComparisonFunction {
    Never = 0,
    Less = 1,
    Equal = 2,
    LessEqual = 3,
    Greater = 4,
    NotEqual = 5,
    GreaterEqual = 6,
    Always = 7,
};

struct GpcRasterPipelineResource {
    keen::string name; // Offset: 0
    keen::HashKey32 hash; // Offset: 8
    keen::BlobArray<keen::PixelFormat> colorTargetFormats; // Offset: 12
    keen::PixelFormat depthStencilTargetFormat; // Offset: 20
    keen::uint8 sampleCount; // Offset: 21
    keen::GpcPrimitiveType primitiveType; // Offset: 22
    keen::uint8 patchSize; // Offset: 23
    keen::GpcCullMode cullMode; // Offset: 24
    keen::GpcFillMode fillMode; // Offset: 25
    keen::GpcWindingOrder windingOrder; // Offset: 26
    keen::GpcBlendOp blendOp; // Offset: 27
    keen::GpcBlendFactor blendSourceFactor; // Offset: 28
    keen::GpcBlendFactor blendDestFactor; // Offset: 29
    keen::bool sampleShading; // Offset: 30
    keen::bool alphaToCoverage; // Offset: 31
    keen::GpcComparisonFunction depthComparisonFunction; // Offset: 32
    keen::bool depthWriteEnable; // Offset: 33
    keen::float32 constDepthBias; // Offset: 36
    keen::float32 slopeDepthBias; // Offset: 40
    keen::GpcShaderResource vsShaderCode; // Offset: 44
    keen::GpcShaderResource tcShaderCode; // Offset: 60
    keen::GpcShaderResource teShaderCode; // Offset: 76
    keen::GpcShaderResource fsShaderCode; // Offset: 92
};

struct GpcComputePipelineResource {
    keen::string name; // Offset: 0
    keen::HashKey32 hash; // Offset: 8
    keen::uint3 groupSize; // Offset: 12
    keen::GpcShaderResource computeShader; // Offset: 24
};

struct GpcResource {
    keen::HashKey32 signatureHash; // Offset: 0
    keen::BlobArray<keen::GpcRasterPipelineResource> rasterPipelines; // Offset: 4
    keen::BlobArray<keen::GpcComputePipelineResource> computePipelines; // Offset: 12
};

struct GpcResourceList {
    keen::string path; // Offset: 0
};

typedef keen::uint32 gpu.u32;

typedef keen::sint32 gpu.s32;

typedef keen::float32 gpu.f32;

typedef keen::uint32 gpu.u32_1;

typedef keen::uint2 gpu.u32_2;

typedef keen::uint3 gpu.u32_3;

typedef keen::uint4 gpu.u32_4;

typedef keen::sint32 gpu.s32_1;

typedef keen::int2 gpu.s32_2;

typedef keen::int3 gpu.s32_3;

typedef keen::int4 gpu.s32_4;

typedef keen::float32 gpu.f32_1;

typedef keen::float2 gpu.f32_2;

typedef keen::float3 gpu.f32_3;

typedef keen::float4 gpu.f32_4;

struct GraphicsMatrix43 {
    keen::float4 row0; // Offset: 0
    keen::float4 row1; // Offset: 16
    keen::float4 row2; // Offset: 32
};

typedef keen::GraphicsMatrix43 gpu.f32_3x4;

struct GraphicsMatrix44 {
    keen::float4 row0; // Offset: 0
    keen::float4 row1; // Offset: 16
    keen::float4 row2; // Offset: 32
    keen::float4 row3; // Offset: 48
};

typedef keen::GraphicsMatrix44 gpu.f32_4x4;

struct GraphicsDrawIndirectParameter {
    keen::uint32 vertexCount; // Offset: 0
    keen::uint32 instanceCount; // Offset: 4
    keen::uint32 vertexOffset; // Offset: 8
    keen::uint32 instanceOffset; // Offset: 12
};

typedef keen::GraphicsDrawIndirectParameter gpu.DrawIndirectParameter;

struct GraphicsDrawIndexedIndirectParameter {
    keen::uint32 indexCount; // Offset: 0
    keen::uint32 instanceCount; // Offset: 4
    keen::uint32 indexOffset; // Offset: 8
    keen::sint32 vertexOffset; // Offset: 12
    keen::uint32 instanceOffset; // Offset: 16
};

typedef keen::GraphicsDrawIndexedIndirectParameter gpu.DrawIndexedIndirectParameter;

struct GraphicsDispatchIndirectParameter {
    keen::uint32 groupCountX; // Offset: 0
    keen::uint32 groupCountY; // Offset: 4
    keen::uint32 groupCountZ; // Offset: 8
};

typedef keen::GraphicsDispatchIndirectParameter gpu.DispatchIndirectParameter;

struct BindlessTexture2D_float4 {
    keen::uint32 index; // Offset: 0
};

struct BindlessTexture2D_float {
    keen::uint32 index; // Offset: 0
};

struct BindlessTexture3D_float4 {
    keen::uint32 index; // Offset: 0
};

struct BindlessTexture3D_float {
    keen::uint32 index; // Offset: 0
};

struct BindlessTexture3D_uint {
    keen::uint32 index; // Offset: 0
};

struct BindlessSampler {
    keen::uint32 index; // Offset: 0
};

struct GpuSystemInformation {
    keen::StaticArray<keen::uint8,64> description; // Offset: 0
    keen::StaticArray<keen::uint8,64> model; // Offset: 64
    keen::uint64 videoMemorySize; // Offset: 128
    keen::uint64 sharedMemorySize; // Offset: 136
    keen::bool hasDirectX9; // Offset: 144
    keen::bool hasDirectX11; // Offset: 145
    keen::bool hasGl1; // Offset: 146
    keen::bool hasGl2; // Offset: 147
    keen::bool hasGl3; // Offset: 148
    keen::bool hasGl4; // Offset: 149
    keen::bool hasGles2; // Offset: 150
    keen::bool hasGles3; // Offset: 151
    keen::bool hasMetal; // Offset: 152
    keen::bool hasVulkan; // Offset: 153
};

struct DisplaySystemInformation {
    keen::StaticArray<keen::uint8,64> description; // Offset: 0
    keen::uint32 gpuIndex; // Offset: 64
    keen::uint32 pixelWidth; // Offset: 68
    keen::uint32 pixelHeight; // Offset: 72
    keen::float32 aspectRatio; // Offset: 76
    keen::uint32 dpi; // Offset: 80
};

struct GraphicsSystemInformation {
    keen::uint32 totalPixelWidth; // Offset: 0
    keen::uint32 totalPixelHeight; // Offset: 4
    keen::uint32 gpuCount; // Offset: 8
    keen::uint32 displayCount; // Offset: 12
    keen::StaticArray<keen::GpuSystemInformation,4> gpus; // Offset: 16
    keen::StaticArray<keen::DisplaySystemInformation,4> displays; // Offset: 656
};

enum class GraphicsBlendOperation {
    None = 0,
    Add = 1,
    Subtract = 2,
    RevSubtract = 3,
    Min = 4,
    Max = 5,
};

enum class GraphicsBlendFactor {
    Zero = 0,
    One = 1,
    SrcColor = 2,
    InvSrcColor = 3,
    SrcAlpha = 4,
    InvSrcAlpha = 5,
    DestAlpha = 6,
    InvDestAlpha = 7,
    DestColor = 8,
    InvDestColor = 9,
    SrcAlphaSat = 10,
};

enum class GraphicsFillMode {
    Wireframe = 0,
    Solid = 1,
};

enum class GraphicsCullMode {
    None = 0,
    Front = 1,
    Back = 2,
};

enum class GraphicsWindingOrder {
    Ccw = 0,
    Cw = 1,
};

enum class GraphicsSamplerFilterMode {
    Nearest = 0,
    Linear = 1,
};

enum class GraphicsSamplerAddressMode {
    Wrap = 0,
    Mirror = 1,
    Clamp = 2,
};

enum class GraphicsComparisonFunction {
    Never = 0,
    Less = 1,
    Equal = 2,
    LessEqual = 3,
    Greater = 4,
    NotEqual = 5,
    GreaterEqual = 6,
    Always = 7,
};

enum class GraphicsStencilOperation {
    Keep = 0,
    Zero = 1,
    Replace = 2,
    Increment = 3,
    Decrement = 4,
    IncrementWrap = 5,
    DecrementWrap = 6,
    Invert = 7,
};

enum class GraphicsColorWriteFlag {
    Red = 0,
    Green = 1,
    Blue = 2,
    Alpha = 3,
};

enum class GraphicsDeviceMemoryPriority {
    Lowest = 0,
    Low = 1,
    Normal = 2,
    High = 3,
    Highest = 4,
};

enum class DlssQualityPreset {
    MaxPerf = 0,
    Balanced = 1,
    MaxQuality = 2,
    UltraPerformance = 3,
    UltraQuality = 4,
    Dlaa = 5,
};

struct HistogramData {
    keen::BlobString id; // Offset: 0
    keen::BlobArray<keen::uint32> slots; // Offset: 8
    keen::uint32 valueCount; // Offset: 16
    keen::sint64 valueSum; // Offset: 24
    keen::sint64 minValue; // Offset: 32
    keen::sint64 maxValue; // Offset: 40
    keen::sint64 rangeStart; // Offset: 48
    keen::sint64 rangeEnd; // Offset: 56
    keen::bool isLinear; // Offset: 64
    keen::bool isTime; // Offset: 65
};

struct HolisticEngineVersion {
    keen::string gitHash; // Offset: 0
};

enum class HolisticSceneRenderFlag {
    Sdf = 0,
    SdfBvh = 1,
    NeutralAlbedo = 2,
    OrientationCoordinateFrame = 3,
    Triggers = 4,
    Grid = 5,
    ScatterRadii = 6,
    OnlyLocalVoxels = 7,
    VisualizeIbl = 8,
    SolidColliders = 9,
    TintSubEntities = 10,
    WhiteboxModelOverlay = 11,
    Cloth = 12,
    ModelChunks = 13,
    DisableCardClusterShadows = 14,
};

typedef keen::Bitmask32<keen::HolisticSceneRenderFlag> HolisticSceneRenderFlags;

enum class SceneCameraSpeed {
    VerySlow = 0,
    Slow = 1,
    Medium = 2,
    Fast = 3,
    VeryFast = 4,
};

enum class SceneCameraSpeedBoostFactor {
    X4 = 0,
    X8 = 1,
    X16 = 2,
};

struct HolisticSceneCameraSettings {
    keen::SceneCameraSpeed cameraSpeed; // Offset: 0
    keen::SceneCameraSpeedBoostFactor cameraSpeedBoost; // Offset: 1
    keen::float farClip; // Offset: 4
    keen::float fovY; // Offset: 8
};

struct HolisticSceneEditorLighting {
    keen::float4 sunColor; // Offset: 0
    keen::float iblIntensity; // Offset: 16
    keen::float editorFixedExposure; // Offset: 20
    keen::bool forceEditorLighting; // Offset: 24
};

enum class HolisticSnappingFlag {
    Grid = 0,
    Ground = 1,
};

typedef keen::Bitmask32<keen::HolisticSnappingFlag> HolisticSnappingFlags;

enum class HolisticSceneViewOverlay {
    Camera = 0,
    Environment = 1,
    RenderGraph = 2,
    RenderFeatures = 3,
    Shading = 4,
    Time = 5,
    Disolve = 6,
    Wind = 7,
    Snapping = 8,
    NonSelectableTypes = 9,
    BlendShape = 10,
    ColorGradient = 11,
    AlbedoTintColors = 12,
};

typedef keen::Bitmask32<keen::HolisticSceneViewOverlay> HolisticSceneViewOverlays;

struct HolisticSceneSnappingSettings {
    keen::uint32 gridSize; // Offset: 0
    keen::float32 angleStep; // Offset: 4
    keen::HolisticSnappingFlags lockedSnappingFlags; // Offset: 8
};

struct HolisticOverlaySettings {
    keen::HolisticSceneViewOverlays overlays; // Offset: 0
    keen::bool showOverlays; // Offset: 4
    keen::bool isNonSelectableOverlayExpanded; // Offset: 5
    keen::bool isCustomLightOverlayExpanded; // Offset: 6
    keen::StaticArray<keen::bool,3> isAlbedoTintLayerOverlayExpanded; // Offset: 7
};

struct HolisticSceneToolboxSettings {
    keen::bool randomRotateY; // Offset: 0
    keen::bool alignToNormal; // Offset: 1
};

struct HolisticPersistentSceneSettings {
    keen::HolisticSceneCameraSettings camera; // Offset: 0
    keen::HolisticSceneEditorLighting lighting; // Offset: 12
    keen::HolisticSceneSnappingSettings snapping; // Offset: 40
    keen::HolisticOverlaySettings overlaySettings; // Offset: 52
    keen::HolisticSceneToolboxSettings toolbox; // Offset: 64
};

struct HolisticPersistentPreviewSettings {
    keen::HolisticSceneCameraSettings camera; // Offset: 0
    keen::HolisticSceneEditorLighting lighting; // Offset: 12
    keen::HolisticOverlaySettings overlaySettings; // Offset: 40
};

struct HolisticPersistentUserSettings {
    keen::HolisticPersistentSceneSettings scene; // Offset: 0
    keen::HolisticPersistentPreviewSettings preview; // Offset: 68
};

struct HolisticVfxTestParameters {
    keen::WorldTransform worldTransform; // Offset: 0
    keen::float3 targetPosition; // Offset: 56
};

struct HolisticMapFilterCollection {
};

struct HolisticMapFilterDirectory {
};

struct HolisticMapFilter {
    keen::float markerSize; // Offset: 0
    keen::Color color; // Offset: 4
    keen::bool isVisible; // Offset: 8
};

struct Folder {
};

struct ImporterModelConfig {
    keen::BlobArray<keen::string> parentNamePatters; // Offset: 0
    keen::BlobArray<keen::string> nameIncludePatters; // Offset: 8
    keen::BlobArray<keen::string> nameExcludePatters; // Offset: 16
};

struct ImporterTemplate {
};

struct ImporterTemplateObject {
    keen::string descriptionFormat; // Offset: 0
    keen::string type; // Offset: 8
    keen::string initialState; // Offset: 16
    keen::uint32 sortIndex; // Offset: 24
    keen::Guid containerId; // Offset: 28
};

enum class ImporterAction {
    Nothing = 0,
};

typedef keen::string SourceFileHash;

struct ImporterFileTemplate {
    keen::string extension; // Offset: 0
    keen::ImporterAction action; // Offset: 8
    keen::SourceFileHash contentHash; // Offset: 12
};

struct TagCollection {
};

struct ObjectTagGroup {
    keen::Color color; // Offset: 0
};

struct ObjectTag {
};

typedef keen::ObjectReference<keen::ObjectTag> TagReference;

struct TagDirectoryContent {
    keen::BlobArray<keen::ObjectTag> tags; // Offset: 0
    keen::BlobArray<keen::ObjectTagGroup> groups; // Offset: 8
};

enum class HolisticImporterObjectType {
    Invalid = 0,
    Unknown = 1,
    SourceData = 2,
    Image = 3,
    Model = 4,
    ModelHierarchy = 5,
    Animation = 6,
    Substance = 7,
    ChunkedImage = 8,
    VfxShader = 9,
    VoxelObject = 10,
    VoxelRoadShape = 11,
    Midi = 12,
    Sound = 13,
    InstrumentSample = 14,
    Text = 15,
};

struct SourceFile {
    keen::SourceFileHash fileHash; // Offset: 0
    keen::HolisticImporterObjectType targetType; // Offset: 8
};

typedef keen::ObjectReference<keen::SourceFile> SourceFileReference;

struct SourceData {
    keen::SourceFileHash dataHash; // Offset: 0
};

typedef keen::ObjectReference<keen::SourceData> SourceDataReference;

struct WhiteboxTagDirectory {
};

struct WhiteboxTagGroup {
    keen::Color color; // Offset: 0
};

struct WhiteboxTag {
};

struct LootTagGroup {
    keen::Color color; // Offset: 0
};

struct LootTag {
};

struct DefaultLootLabelCollectionRootDirectory {
};

struct DefaultLootLabelCollectionDirectory {
};

struct DefaultLootLabelCollection {
};

struct DungeonRoomContextTag {
    keen::bool invert; // Offset: 0
};

struct DungeonRoomGroundContextTag {
};

struct DungeonRoomCeilingContextTag {
};

typedef keen::ObjectReference<keen::WhiteboxTag> WhiteboxTagReference;

typedef keen::ObjectReference<keen::WhiteboxTagGroup> WhiteboxTagGroupReference;

struct WhiteboxTagInstance {
    keen::WhiteboxTagReference tag; // Offset: 0
};

typedef keen::ObjectReference<keen::LootTag> LootTagReference;

struct LootTagInstance {
    keen::LootTagReference tag; // Offset: 0
    keen::float32 itemLootWeight; // Offset: 16
};

struct WhiteboxTagInfo {
    keen::Guid instance; // Offset: 0
    keen::WhiteboxTagReference tag; // Offset: 16
    keen::WhiteboxTagGroupReference group; // Offset: 32
};

struct WhiteboxTagInheritanceInfo {
    keen::Guid parentId; // Offset: 0
    keen::Guid tagGuid; // Offset: 16
};

struct WhiteboxTagInheritanceList {
    keen::BlobArray<keen::WhiteboxTagInheritanceInfo> inheritedTags; // Offset: 0
};

enum class ImageType {
    _1d = 0,
    _2d = 1,
    _3d = 2,
};

enum class ImageColorSpace {
    Linear = 0,
    sRGB = 1,
};

enum class ImageContentType {
    Unknown = 0,
    Albedo = 1,
    Normal = 2,
    Opacity = 3,
    Height = 4,
    Roughness = 5,
    Metallic = 6,
    Reflectance = 7,
    AmbientOcclusion = 8,
    Emissive = 9,
    UvDistortion = 10,
};

struct Image {
    keen::ImageType type; // Offset: 0
    keen::BlobString slice; // Offset: 4
    keen::BlobString alphaChannel; // Offset: 12
    keen::ImageColorSpace colorSpace; // Offset: 20
    keen::ImageContentType contentType; // Offset: 24
    keen::uint32 sizeDivider; // Offset: 28
    keen::uint32 slices; // Offset: 32
    keen::uint32 sliceRows; // Offset: 36
};

struct ImageInfo {
    keen::uint32 width; // Offset: 0
    keen::uint32 height; // Offset: 4
    keen::uint32 depth; // Offset: 8
    keen::BlobString name; // Offset: 12
};

struct ChunkedImage {
    keen::uint2 tileSize; // Offset: 0
    keen::uint2 numTiles; // Offset: 8
    keen::uint2 dimension; // Offset: 16
};

struct ImageColorRange {
    keen::float4 averageColor; // Offset: 0
    keen::float4 minColor; // Offset: 16
    keen::float4 maxColor; // Offset: 32
};

enum class ScatterImageType {
    Default = 0,
    Heightmap = 1,
};

struct ScatterImage {
    keen::ScatterImageType type; // Offset: 0
    keen::uint32 upscaleFactor; // Offset: 4
};

struct ScatterImageMetaData {
    keen::ChunkedImage chunkedImage; // Offset: 8
};

struct ScatterImageAreaMetaData {
    keen::uint2 tileRangeX; // Offset: 32
    keen::uint2 tileRangeY; // Offset: 40
};

struct ScatterImageLoadParameters {
    keen::Guid imageGuid; // Offset: 48
    keen::uint32 channel; // Offset: 64
};

struct GameKnowledgeDirectory {
    keen::ObjectReference<keen::ItemDirectory> itemDirectory; // Offset: 0
    keen::ObjectReference<keen::NpcDialogDirectory> dialogDirectory; // Offset: 16
    keen::ObjectReference<keen::RecipeList> recipeDirectory; // Offset: 32
    keen::ObjectReference<keen::JournalDirectory> journalDirectory; // Offset: 48
};

struct GameKnowledgeSubDirectory {
};

struct GameKnowledgeObjectBase {
    keen::bool sendToAnalytics; // Offset: 0
};

struct WorldKnowledgeObject {
    keen::bool generateAdditionalPlayerKnowledge; // Offset: 1
};

struct PlayerKnowledgeObject {
    keen::bool unlocksSkillPoints; // Offset: 1
    keen::uint8 unlockedSkillPoints; // Offset: 2
    keen::ObjectReference<keen::ExperienceBalanceValue> experienceGain; // Offset: 4
    keen::AchievementDataReference unlockAchievement; // Offset: 20
};

struct SceneKnowledgeRequirement {
    keen::ecs::TemplateReference targetSubentity; // Offset: 104
};

struct KnowledgeObjectInfo {
    keen::KnowledgeId id; // Offset: 0
    keen::string name; // Offset: 4
    keen::bool isPlayerKnowledge; // Offset: 12
    keen::bool generateAdditionalPlayerKnowledge; // Offset: 13
    keen::bool sendToAnalytics; // Offset: 14
    keen::uint8 unlockedSkillPoints; // Offset: 15
    keen::HashKey32 experienceGainId; // Offset: 16
    keen::AchievementId achievementId; // Offset: 20
};

struct KnowledgeExperienceCountInfo {
    keen::BlobArray<keen::KnowledgeExperienceCount> experienceObjects; // Offset: 0
};

struct KnowledgeExperienceCount {
    keen::HashKey32 experienceObjectId; // Offset: 0
    keen::uint32 count; // Offset: 4
};

struct KnowledgeObjectResource {
    keen::KnowledgeId id; // Offset: 0
    keen::bool sendToAnalytics; // Offset: 4
};

struct WorldKnowledgeObjectResource {
    keen::bool hasOptionalPlayerProgression; // Offset: 8
};

struct PlayerKnowledgeObjectResource {
    keen::uint8 unlockedSkillPoints; // Offset: 8
    keen::HashKey32 experienceGainId; // Offset: 12
    keen::AchievementId achievementId; // Offset: 16
};

struct GameKnowledgeResource {
    keen::BlobArray<keen::WorldKnowledgeObjectResource> worldKnowledge; // Offset: 0
    keen::BlobArray<keen::PlayerKnowledgeObjectResource> playerKnowledge; // Offset: 8
    keen::BlobArray<keen::KnowledgeId> dialogKnowledgeIds; // Offset: 16
    keen::BlobArray<keen::KnowledgeId> itemKnowledgeIds; // Offset: 24
};

struct GameKnowledgeDbInfo {
    keen::BlobArray<keen::KnowledgeObjectInfo> worldKnowledgeObjects; // Offset: 0
    keen::BlobArray<keen::KnowledgeObjectInfo> playerKnowledgeObjects; // Offset: 8
};

struct KnowledgeQueryDirectory {
    keen::ObjectReference<keen::GameKnowledgeDirectory> knowledgeDirectory; // Offset: 0
    keen::ObjectReference<keen::WorldKnowledgeObject> demoKnowledge; // Offset: 16
};

struct KnowledgeQuerySubDirectory {
};

enum class KnowledgeQueryOperator {
    AND = 0,
    OR = 1,
    XOR = 2,
};

struct GameKnowledgeQuery {
    keen::KnowledgeQueryOperator type; // Offset: 0
    keen::bool invert; // Offset: 1
};

struct BaseKnowledgeQueryAction {
    keen::bool invert; // Offset: 0
};

struct KnowledgeQueryAction {
    keen::bool usePlayerKnowledge; // Offset: 1
    keen::ObjectReference<keen::WorldKnowledgeObject> worldKnowledge; // Offset: 4
    keen::ObjectReference<keen::PlayerKnowledgeObject> playerKnowledge; // Offset: 20
};

struct ItemKnowledgeQueryAction {
    keen::ItemKnowledgeTrigger itemKnowledge; // Offset: 1
    keen::bool worldItemKnowledge; // Offset: 2
    keen::ObjectReference<keen::ItemInfo> item; // Offset: 4
};

struct DialogKnowledgeQueryAction {
    keen::ObjectReference<keen::NpcDialogOptionBase> dialogOption; // Offset: 4
};

enum class NpcQueryActionType {
    IsSpawned = 0,
    CraftingPropPlaced = 1,
    IsSheltered = 2,
    SufficientComfortLevel = 3,
};

struct NpcQueryAction {
    keen::NpcQueryActionType type; // Offset: 1
    keen::ObjectReference<keen::WorkshopDefinition> npc; // Offset: 4
    keen::ecs::TemplateReference npcEntity; // Offset: 20
    keen::ObjectReference<keen::CraftingPropDefinition> requiredCraftingProp; // Offset: 36
};

struct CraftingQueryAction {
    keen::ObjectReference<keen::Recipe> recipe; // Offset: 4
};

struct PredefinedKnowledgeQueryAction {
    keen::bool usePlayerKnowledge; // Offset: 1
    keen::PredefinedKnowledgeTypes knowledge; // Offset: 2
};

enum class CompareOperator {
    GreaterThan = 0,
    LessThan = 1,
    Equals = 2,
};

struct FlameAltarCountQueryAction {
    keen::CompareOperator operation; // Offset: 1
    keen::uint16 count; // Offset: 2
};

struct FlameAltarLevelQueryAction {
    keen::CompareOperator operation; // Offset: 1
    keen::uint16 count; // Offset: 2
};

struct MotherFlameLevelQueryAction {
    keen::CompareOperator operation; // Offset: 1
    keen::uint16 count; // Offset: 2
};

struct PlayerLevelQueryAction {
    keen::CompareOperator operation; // Offset: 1
    keen::uint16 count; // Offset: 2
};

struct OtherQueryAction {
    keen::ObjectReference<keen::GameKnowledgeQuery> query; // Offset: 4
};

struct InventoryQueryAction {
    keen::ObjectReference<keen::ItemInfo> item; // Offset: 4
};

enum class KnowledgeQueryActionType {
    Knowledge = 0,
    Query = 1,
    Inventory = 2,
    Npc = 3,
    FlameAltarCount = 4,
    FlameAltarLevel = 5,
    MotherFlameLevel = 6,
    PlayerLevel = 7,
};

struct KnowledgeQueryActionInfo {
    keen::KnowledgeQueryActionType type; // Offset: 0
    keen::string name; // Offset: 4
    keen::KnowledgeId queryId; // Offset: 12
    keen::uint32 queryIndex; // Offset: 16
    keen::uint32 playerProgressionQueryIndex; // Offset: 20
    keen::bool invertResult; // Offset: 24
    keen::bool isPlayerAction; // Offset: 25
};

enum class KnowledgeQueryType {
    SimpleQuery = 0,
    ANDQuery = 1,
    ORQuery = 2,
    XORQuery = 3,
    InventoryQuery = 4,
    NpcQuery = 5,
    FlameAltarCountQuery = 6,
    FlameAltarLevelQuery = 7,
    MotherFlameLevelQuery = 8,
    PlayerLevelQuery = 9,
};

struct GameKnowledgeQueryResourceBase {
    keen::string name; // Offset: 0
    keen::KnowledgeId queryId; // Offset: 8
    keen::uint32 queryIndex; // Offset: 12
    keen::KnowledgeQueryType type; // Offset: 16
    keen::bool isPlayerQuery; // Offset: 17
    keen::bool invertResult; // Offset: 18
};

struct GameKnowledgeQueryResource {
    keen::bool hasOptionalPlayerProgression; // Offset: 20
    keen::BlobArray<keen::KnowledgeQueryActionInfo> actions; // Offset: 24
};

struct GameRuntimeQueryResource {
    keen::ItemReference itemRef; // Offset: 20
    keen::ItemId itemId; // Offset: 36
    keen::NpcQueryActionType npcActionType; // Offset: 40
    keen::NpcId npcId; // Offset: 44
    keen::CraftingPropId craftingProp; // Offset: 48
    keen::CompareOperator compareOperation; // Offset: 52
    keen::uint16 compareValue; // Offset: 54
};

struct GameKnowledgeQueryResourceDb {
    keen::KnowledgeId demoKnowledgeId; // Offset: 0
    keen::uint32 playerQueryStartIndex; // Offset: 4
    keen::uint32 runtimePlayerQueryStartIndex; // Offset: 8
    keen::BlobArray<keen::GameKnowledgeQueryResource> queries; // Offset: 12
    keen::BlobArray<keen::GameRuntimeQueryResource> runtimeQueries; // Offset: 20
};

enum class RecipeKnowledgeType {
    Inspect = 0,
    Craft = 1,
};

struct GameKnowledgeQueryTriggerSubDirectory {
};

struct GameKnowledgeQueryTriggerDirectory {
    keen::ObjectReference<keen::KnowledgeQueryDirectory> knowledgeQueries; // Offset: 0
};

struct GameKnowledgeQueryTrigger {
    keen::bool canUnlockKnowledge; // Offset: 0
    keen::bool canRemoveKnowledge; // Offset: 1
    keen::GameKnowledgeRequirement requirement; // Offset: 4
    keen::KnowledgeId queryId; // Offset: 108
    keen::BlobArray<keen::KnowledgeId> unlockKnowledge; // Offset: 112
};

struct GameKnowledgeQueryTriggerResource {
    keen::BlobArray<keen::GameKnowledgeQueryTrigger> worldQueries; // Offset: 0
    keen::BlobArray<keen::GameKnowledgeQueryTrigger> playerQueries; // Offset: 8
};

enum class DebugKnowledgeQuerySource {
    Server = 0,
    Client = 1,
};

struct DebugServerKnowledgeMessage {
    keen::uint16 changeCounter; // Offset: 0
    keen::uint16 playerIndex; // Offset: 2
    keen::bool isPlayerKnowledge; // Offset: 4
    keen::BlobArray<keen::KnowledgeId> unlockedKnowledge; // Offset: 8
};

struct DebugResetKnowledgeMessage {
    keen::bool isPlayerKnowledge; // Offset: 0
};

struct DebugUnlockFullKnowledgeMessage {
    keen::bool unlockPlayerKnowledge; // Offset: 0
};

struct DebugToggleKnowledgeMessage {
    keen::KnowledgeId knowledgeId; // Offset: 0
    keen::bool resultState; // Offset: 4
    keen::bool isPlayerKnowledge; // Offset: 5
    keen::uint16 playerIndex; // Offset: 6
};

enum class DebugKnowledgeQueryResultType {
    World = 0,
    Player = 1,
    RuntimeWorld = 2,
    RuntimePlayer = 3,
};

struct DebugKnowledgeQueryResult {
    keen::DebugKnowledgeQueryResultType type; // Offset: 0
    keen::uint32 queryIndex; // Offset: 4
    keen::bool isPending; // Offset: 8
    keen::bool isPendingPersonal; // Offset: 9
    keen::bool result; // Offset: 10
    keen::bool resultPersonal; // Offset: 11
};

struct SceneKnowledgeOverride {
    keen::ecs::TemplateReference entityTemplate; // Offset: 0
};

struct SceneKnowledgeTriggerOverride {
    keen::GameKnowledgeTrigger knowledgeTrigger; // Offset: 16
};

struct SceneKnowledgeRequirementOverride {
    keen::GameKnowledgeRequirement knowledgeRequirement; // Offset: 16
};

struct SceneKnowledgeMapMarkerOverride {
    keen::GameKnowledgeRequirement hintState; // Offset: 16
    keen::GameKnowledgeRequirement visibleState; // Offset: 120
    keen::bool hasCompletedState; // Offset: 224
    keen::GameKnowledgeRequirement completedState; // Offset: 228
};

enum class SceneKnowledgeOverrideType {
    KnowledgeTrigger = 0,
    KnowledgeQuery = 1,
    MapMarker = 2,
};

struct SceneKnowledgeOverrideInfo {
    keen::Guid entityTemplateGuid; // Offset: 0
    keen::SceneKnowledgeOverrideType type; // Offset: 16
    keen::KnowledgeId knowledgeId; // Offset: 20
    keen::KnowledgeId knowledgeId2; // Offset: 24
    keen::KnowledgeId knowledgeId3; // Offset: 28
};

struct SceneKnowledgeOverrides {
    keen::BlobArray<keen::SceneKnowledgeOverrideInfo> knowledgeOverrides; // Offset: 0
};

struct DebugKnowledgeQueryResults {
    keen::BlobArray<keen::DebugKnowledgeQueryResult> results; // Offset: 0
    keen::uint8 playerIndex; // Offset: 8
};

struct LocaTagGroup {
};

typedef keen::Bitmask64<keen::LanguageId> LocaLanguages;

typedef keen::ObjectReference<keen::LocaCrowdinProject> LocaCrowdinProjectReference;

struct LocaCrowdinProject {
    keen::LanguageId inputLanguage; // Offset: 0
    keen::LocaCrowdinProjectReference inputProject; // Offset: 4
    keen::LocaLanguages outputLanguages; // Offset: 24
    keen::uint64 projectId; // Offset: 32
    keen::uint64 fileId; // Offset: 40
    keen::bool onlyApproved; // Offset: 48
    keen::SourceFileReference crowdinCSV; // Offset: 52
};

struct LocaTagCollection {
    keen::LocaCrowdinProjectReference crowdinWritingProject; // Offset: 0
    keen::LocaCrowdinProjectReference crowdinTranslationProject; // Offset: 16
};

struct LocaTagCollectionResourceLanguage {
    keen::LanguageId language; // Offset: 0
    keen::ContentHash dataHash; // Offset: 4
};

struct LocaTagCollectionResource {
    keen::ContentHash keenglishDataHash; // Offset: 0
    keen::BlobArray<keen::LocaTagCollectionResourceLanguage> languages; // Offset: 16
};

enum class LocaArgumentType {
    Generic = 0,
    Input = 1,
    Config = 2,
    Balancing = 3,
};

struct LocaTagArgument {
    keen::uint32 id; // Offset: 0
    keen::LocaArgumentType type; // Offset: 4
};

struct LocaTagResource {
    keen::LocaTagId id; // Offset: 0
    keen::string text; // Offset: 4
    keen::BlobArray<keen::LocaTagArgument> arguments; // Offset: 12
    keen::uint32 genericArguments; // Offset: 20
};

struct LocaTagCollectionResourceData {
    keen::BlobArray<keen::LocaTagResource> tags; // Offset: 0
};

enum class AxisAlignedDirection {
    AxisAlignedDirection_NegX = 0,
    AxisAlignedDirection_PosX = 1,
    AxisAlignedDirection_NegY = 2,
    AxisAlignedDirection_PosY = 3,
    AxisAlignedDirection_NegZ = 4,
    AxisAlignedDirection_PosZ = 5,
    AxisAlignedDirection_Count = 6,
};

struct BSpline {
    keen::BlobArray<keen::Vector3> controlPoints; // Offset: 0
    keen::bool closed; // Offset: 8
};

struct Vector4 {
};

struct Matrix44 {
    keen::Vector4 x; // Offset: 0
    keen::Vector4 y; // Offset: 16
    keen::Vector4 z; // Offset: 32
    keen::Vector4 w; // Offset: 48
};

struct Sphere {
    keen::float3 center; // Offset: 0
    keen::float32 radius; // Offset: 12
};

struct MemorySystemInformationBlock {
    keen::StaticArray<keen::uint8,32> name; // Offset: 0
    keen::uint32 size; // Offset: 32
    keen::uint16 type; // Offset: 36
};

struct MemorySystemInformation {
    keen::uint64 totalSize; // Offset: 0
    keen::uint64 allocatedSize; // Offset: 8
    keen::uint64 freeSize; // Offset: 16
    keen::StaticArray<keen::MemorySystemInformationBlock,32> memoryBlocks; // Offset: 24
    keen::uint32 memoryBlockCount; // Offset: 1304
};

struct Midi {
};

enum class MidiInstrumentSampleType {
    Lute = 0,
    LuteChord = 1,
    Flute = 2,
    Harp = 3,
    DounDoun = 4,
    Tambourin = 5,
};

struct InstrumentSampleCollection {
    keen::ObjectReference<keen::SamplerInstrument> samplesLute; // Offset: 0
    keen::ObjectReference<keen::SamplerInstrument> samplesLuteChord; // Offset: 16
    keen::ObjectReference<keen::SamplerInstrument> samplesFlute; // Offset: 32
    keen::ObjectReference<keen::SamplerInstrument> samplesHarp; // Offset: 48
    keen::ObjectReference<keen::SamplerInstrument> samplesDounDoun; // Offset: 64
    keen::ObjectReference<keen::SamplerInstrument> samplesTambourin; // Offset: 80
};

struct InstrumentSample {
    keen::bool isPitched; // Offset: 0
    keen::uint8 baseNote; // Offset: 1
    keen::float32 fineTune; // Offset: 4
    keen::float32 volume; // Offset: 8
};

struct SamplerInstrument {
    keen::float32 volume; // Offset: 0
    keen::uint32 releaseTime; // Offset: 4
    keen::bool isMonophone; // Offset: 8
    keen::MidiInstrumentSampleType instrument; // Offset: 9
};

struct SamplerInstrumentLayer {
    keen::ObjectReference<keen::InstrumentSample> sample; // Offset: 0
    keen::uint8 minNote; // Offset: 16
    keen::uint8 maxNote; // Offset: 17
    keen::uint8 minVelocity; // Offset: 18
    keen::uint8 maxVelocity; // Offset: 19
};

struct InstrumentSampleData {
    keen::bool isPitched; // Offset: 0
    keen::float32 tuning; // Offset: 4
    keen::BlobArray<keen::sint16> samples; // Offset: 8
};

struct SamplerInstrumentResourceSample {
    keen::bool isPitched; // Offset: 0
    keen::float32 tuning; // Offset: 4
    keen::uint8 minNote; // Offset: 8
    keen::uint8 maxNote; // Offset: 9
    keen::uint8 minVelocity; // Offset: 10
    keen::uint8 maxVelocity; // Offset: 11
    keen::uint32 sampleOffset; // Offset: 12
    keen::uint32 sampleLength; // Offset: 16
};

struct SamplerInstrumentResource {
    keen::float volume; // Offset: 0
    keen::float releaseTime; // Offset: 4
    keen::bool isMonophone; // Offset: 8
    keen::BlobArray<keen::SamplerInstrumentResourceSample> samples; // Offset: 12
    keen::ContentHash sampleData; // Offset: 20
    keen::MidiInstrumentSampleType instrument; // Offset: 36
};

struct MidiEvent {
    keen::uint32 timestamp; // Offset: 0
    keen::uint8 eventType; // Offset: 4
    keen::uint8 subType; // Offset: 5
    keen::uint8 param1; // Offset: 6
    keen::uint8 param2; // Offset: 7
};

enum class MidiTrackRole {
    Lead = 0,
    Chord = 1,
    Back = 2,
};

struct MidiTrack {
    keen::string name; // Offset: 0
    keen::string instrumentName; // Offset: 8
    keen::MidiInstrumentSampleType instrument; // Offset: 16
    keen::MidiTrackRole role; // Offset: 17
    keen::BlobArray<keen::MidiEvent> events; // Offset: 20
};

struct MidiTimeSignature {
    keen::uint8 numerator; // Offset: 0
    keen::uint8 denominator; // Offset: 1
    keen::uint8 amountOf32NotesInQN; // Offset: 2
    keen::uint8 metronomeTicksPQN; // Offset: 3
};

struct MidiResource {
    keen::MidiTimeSignature timeSignature; // Offset: 0
    keen::uint16 pulsesPQN; // Offset: 4
    keen::bool isSMPTE; // Offset: 6
    keen::BlobArray<keen::MidiTrack> tracks; // Offset: 8
    keen::uint32 songDurationMS; // Offset: 16
    keen::string debugName; // Offset: 20
};

typedef keen::ObjectReference<keen::MidiResource> MidiResourceReference;

struct NotifierContainer {
};

enum class CharacterUtterance {
    Invalid = 0,
    Attack_Long = 1,
    Attack_Short = 2,
    Attack_Finisher = 3,
    Attack_Chain_Finisher = 4,
    Attack_Roll_Finisher = 5,
    Die = 6,
    Hit = 7,
    Jump = 8,
    Exhausted = 9,
    StaminaDrain = 10,
    Customization = 11,
    Count = 11,
};

struct VoicePack {
    keen::SoundContainerReference attackShort; // Offset: 0
    keen::SoundContainerReference attackLong; // Offset: 16
    keen::SoundContainerReference attackFinisher; // Offset: 32
    keen::SoundContainerReference attackChainFinisherLong; // Offset: 48
    keen::SoundContainerReference attackRollFinisher; // Offset: 64
    keen::SoundContainerReference die; // Offset: 80
    keen::SoundContainerReference hit; // Offset: 96
    keen::SoundContainerReference jump; // Offset: 112
    keen::SoundContainerReference exhausted; // Offset: 128
    keen::SoundContainerReference staminaDrain; // Offset: 144
    keen::SoundContainerReference customization; // Offset: 160
};

struct VoicePackResource {
    keen::StaticArray<keen::SoundContainerReference,11> sound; // Offset: 0
};

typedef keen::ObjectReference<keen::VoicePackResource> VoicePackResourceReference;

struct VoicePackSubDirectory {
};

struct VoicePackDirectory {
};

struct VoicePackDirectoryResource {
    keen::BlobArray<keen::VoicePackResourceReference> voicePacks; // Offset: 0
};

struct Notifier {
    keen::VfxReference defaultVfx; // Offset: 0
    keen::SoundContainerReference defaultSound; // Offset: 16
    keen::CharacterUtterance playerVoice; // Offset: 32
};

struct NotifierResource {
    keen::ObjectReference<keen::VfxResource> defaultVfx; // Offset: 0
    keen::VfxUserEffectParameterDataBlock defaultVfxInitParameters; // Offset: 16
    keen::SoundContainerReference defaultSound; // Offset: 80
    keen::CharacterUtterance playerVoice; // Offset: 96
};

struct NotifierEventBase {
    keen::AttachmentSlot slot; // Offset: 96
    keen::ecs::Offset notifierOffset; // Offset: 100
    keen::bool attach; // Offset: 140
    keen::bool cancelFromActorSequence; // Offset: 141
};

enum class FootId {
    Left = 0,
    Right = 1,
};

struct FootPassingEvent {
    keen::FootId foot; // Offset: 96
};

struct NotifierEvent {
    keen::NotifierReference notifier; // Offset: 144
};

struct VfxNotifierEvent {
    keen::VfxReference vfx; // Offset: 144
    keen::VfxUserEffectParameterDataBlock vfxParameters; // Offset: 160
};

struct SfxNotifierEvent {
    keen::SoundContainerReference sound; // Offset: 144
    keen::float32 noiseRange; // Offset: 160
};

struct EnvironmentEffectNotifierEvent {
    keen::Guid eventGuid; // Offset: 144
    keen::EnvironmentEffectType environmentEffectType; // Offset: 160
    keen::float32 rayOffsetY; // Offset: 164
    keen::float32 rayLength; // Offset: 168
};

struct FoleyEffectNotifierEvent {
    keen::Guid eventGuid; // Offset: 144
    keen::FoleyType foleyType; // Offset: 160
};

struct ClothSimulationEventModel {
    keen::ObjectReference<keen::Model> model; // Offset: 0
};

struct ClothSimulationEvent {
    keen::ObjectReference<keen::Model> model; // Offset: 96
    keen::float32 damping; // Offset: 112
    keen::float32 linearInertia; // Offset: 116
    keen::float32 angularInertia; // Offset: 120
    keen::float32 centrifugalInertia; // Offset: 124
    keen::float32 solverFrequency; // Offset: 128
    keen::float32 collisionFriction; // Offset: 132
    keen::float32 motionConstraintsMaxRadius; // Offset: 136
    keen::float32 motionConstraintsUnlimitedRadius; // Offset: 140
    keen::float32 gravity; // Offset: 144
    keen::BlobArray<keen::Guid> models; // Offset: 148
};

struct ClothSimulationResetVelocityEvent {
};

struct ChainSimulationEvent {
    keen::float32 damping; // Offset: 96
    keen::float32 linearInertia; // Offset: 100
    keen::float32 angularInertia; // Offset: 104
    keen::float32 centrifugalInertia; // Offset: 108
    keen::float32 collisionFriction; // Offset: 112
    keen::float32 motionConstraintRadius; // Offset: 116
    keen::float32 gravity; // Offset: 120
    keen::BlobArray<keen::Guid> models; // Offset: 124
};

enum class CpuArchitecure {
    Unknown = 0,
    X86 = 1,
    X64 = 2,
    Arm7 = 3,
    Count = 4,
};

struct CpuSystemInformation {
    keen::CpuArchitecure architecture; // Offset: 0
    keen::uint32 bitCount; // Offset: 4
    keen::uint32 cpuCount; // Offset: 8
    keen::uint32 threadCount; // Offset: 12
    keen::StaticArray<keen::uint8,16> vendorId; // Offset: 16
    keen::StaticArray<keen::uint8,64> brand; // Offset: 32
    keen::bool hasSSE2; // Offset: 96
    keen::bool hasSSE42; // Offset: 97
    keen::bool hasAVX; // Offset: 98
    keen::bool hasAVX2; // Offset: 99
    keen::bool hasNeon; // Offset: 100
};

enum class DeviceId {
    Unknown = 0,
    iPhone_1G = 1,
    iPhone_3G = 2,
    iPhone_3GS = 3,
    iPhone_4 = 4,
    iPhone_4S = 5,
    iPhone_5 = 6,
    iPhone_5C = 7,
    iPhone_5S = 8,
    iPhone_6 = 9,
    iPhone_6_Plus = 10,
    iPhone_6S = 11,
    iPhone_6S_Plus = 12,
    iPhone_SE = 13,
    iPhone_7 = 14,
    iPhone_7_Plus = 15,
    iPhone_8 = 16,
    iPhone_8_Plus = 17,
    iPhone_X = 18,
    iPhone_XR = 19,
    iPhone_XS = 20,
    iPhone_XS_Max = 21,
    iPod_Touch_1G = 22,
    iPod_Touch_2G = 23,
    iPod_Touch_3G = 24,
    iPod_Touch_4G = 25,
    iPod_Touch_5G = 26,
    iPod_Touch_6G = 27,
    iPad = 28,
    iPad_2 = 29,
    iPad_3 = 30,
    iPad_4 = 31,
    iPad_Air = 32,
    iPad_Air_2 = 33,
    iPad_Mini = 34,
    iPad_Mini_2G = 35,
    iPad_Mini_3 = 36,
    iPad_Mini_4 = 37,
    iPad_Pro = 38,
    iPad_Pro_LTE = 39,
    iPad_Pro_9_7 = 40,
    iPad_Pro_9_7_LTE = 41,
    iPad_5thGen = 42,
    iPad_5thGen_LTE = 43,
    iPad_6thGen = 44,
    iPad_6thGen_LTE = 45,
    iPad_Pro_12_9_2ndGen = 46,
    iPad_Pro_12_9_2ndGen_LTE = 47,
    iPad_Pro_10_5 = 48,
    iPad_Pro_10_5_LTE = 49,
    iPad_Pro_11_0 = 50,
    iPad_Pro_12_9_3rdGen = 51,
    Apple_TV_2G = 52,
    Apple_TV_3 = 53,
    Apple_TV_4 = 54,
    Apple_TV_4k = 55,
    Simulator = 56,
    Count = 57,
};

struct DeviceSystemInformation {
    keen::DeviceId id; // Offset: 0
    keen::StaticArray<keen::uint8,64> model; // Offset: 4
    keen::StaticArray<keen::uint8,64> name; // Offset: 68
    keen::StaticArray<keen::uint8,18> macAddress; // Offset: 132
    keen::bool isRooted; // Offset: 150
};

enum class OperatingSystemType {
    Unknown = 0,
    Windows = 1,
    Linux = 2,
    Android = 3,
    Ios = 4,
    Playstation4 = 5,
    XboxOne = 6,
    Count = 7,
};

struct OsSystemInformation {
    keen::OperatingSystemType type; // Offset: 0
    keen::uint32 majorVersion; // Offset: 4
    keen::uint32 minorVersion; // Offset: 8
    keen::uint32 build; // Offset: 12
    keen::StaticArray<keen::uint8,32> versionString; // Offset: 16
    keen::StaticArray<keen::uint8,32> distribution; // Offset: 48
    keen::uint32 bitCount; // Offset: 80
};

struct ProcessId {
    keen::uint32 pid; // Offset: 0
};

struct AtmosphereShaderData {
    keen::uint32 isValid; // Offset: 0
    keen::float32 planetRadius; // Offset: 4
    keen::float2 yToNormalizedHeight; // Offset: 8
    keen::float3 rayleighScattering; // Offset: 16
    keen::float32 invRayleighDistribution; // Offset: 28
    keen::float3 rayleighExtinction; // Offset: 32
    keen::float32 pad3; // Offset: 44
    keen::float32 mieScattering; // Offset: 48
    keen::float32 mieExtinction; // Offset: 52
    keen::float32 mieG; // Offset: 56
    keen::float32 invMieDistribution; // Offset: 60
};

struct PreintegrateAtmosphereTransmittanceShaderData {
    keen::float2 invTextureSize; // Offset: 0
    keen::float2 pixelToHeight; // Offset: 8
    keen::float planetRadius; // Offset: 16
    keen::float cutoffRadius; // Offset: 20
    keen::float mieExtinction; // Offset: 24
    keen::float invMieDistribution; // Offset: 28
    keen::float3 rayleighExtinction; // Offset: 32
    keen::float invRayleighDistribution; // Offset: 44
};

struct ComputeAtmosphereScatteringLutShaderData {
    keen::float3 invTextureSize; // Offset: 0
    keen::float pad0; // Offset: 12
    keen::float2 texcoordToHeight; // Offset: 16
    keen::float2 pad1; // Offset: 24
    keen::float2 yToNormalizedHeight; // Offset: 32
    keen::float planetRadius; // Offset: 40
    keen::float cutoffRadius; // Offset: 44
    keen::float3 rayleighExtinction; // Offset: 48
    keen::float invRayleighDistribution; // Offset: 60
    keen::float3 rayleighScattering; // Offset: 64
    keen::float pad2; // Offset: 76
    keen::float mieExtinction; // Offset: 80
    keen::float invMieDistribution; // Offset: 84
    keen::float mieScattering; // Offset: 88
    keen::float mieG; // Offset: 92
};

struct ComputeAtmosphereAmbientIlluminationLutShaderData {
    keen::float3 invTextureSize; // Offset: 0
    keen::float pad0; // Offset: 12
};

struct Material {
};

struct BillboardMaterial {
    keen::ObjectReference<keen::Image> albedoMap; // Offset: 0
    keen::ObjectReference<keen::Image> opacityMap; // Offset: 16
    keen::ObjectReference<keen::Image> roughnessMap; // Offset: 32
    keen::ObjectReference<keen::Image> reflectanceMap; // Offset: 48
    keen::ObjectReference<keen::Image> metallicMap; // Offset: 64
    keen::ObjectReference<keen::Image> normalMap; // Offset: 80
    keen::ObjectReference<keen::Image> translucencyMap; // Offset: 96
    keen::ObjectReference<keen::Image> aoMap; // Offset: 112
};

enum class BillboardRfxTexture {
    Opacity = 0,
    Albedo = 1,
    MaterialParams = 2,
    Normal = 3,
    Count = 4,
};

struct StreamedTexture2D_float {
    keen::uint32 index; // Offset: 0
};

struct StreamedTexture2D_float4 {
    keen::uint32 index; // Offset: 0
};

struct BillboardRfxRenderMaterial {
    keen::StreamedTexture2D_float opacityMap; // Offset: 0
    keen::StreamedTexture2D_float4 albedoMap; // Offset: 4
    keen::StreamedTexture2D_float4 materialParamsMap; // Offset: 8
    keen::StreamedTexture2D_float4 normalMap; // Offset: 12
};

struct BrickVisibilityPassConstants {
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 0
    keen::float3 cameraWorldPosition; // Offset: 64
    keen::uint32 frameId; // Offset: 76
};

struct BrickDebugShadingConstants {
    keen::float3 directionalLightDirection; // Offset: 0
    keen::float3 directionalLightColor; // Offset: 16
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
};

struct VolumetricFogGridMaterial {
    keen::float3 absorption; // Offset: 0
    keen::float3 scattering; // Offset: 16
    keen::float3 emission; // Offset: 32
};

struct VolumetricFogGridCascadeShaderData {
    keen::float3 origin; // Offset: 0
    keen::float32 size; // Offset: 12
    keen::int3 pixelOffset; // Offset: 16
    keen::uint32 explicitPad0; // Offset: 28
};

struct VolumetricFogGridShaderData {
    keen::uint32 flags; // Offset: 0
    keen::float3 origin; // Offset: 4
    keen::float3 size; // Offset: 16
    keen::uint3 topLevelMaxVoxel; // Offset: 32
    keen::VolumetricFogGridMaterial none; // Offset: 48
    keen::VolumetricFogGridMaterial dangerous; // Offset: 96
    keen::VolumetricFogGridMaterial deadly; // Offset: 144
    keen::VolumetricFogGridMaterial decorative; // Offset: 192
    keen::StaticArray<keen::VolumetricFogGridCascadeShaderData,8> cascades; // Offset: 240
};

struct BrickFillGBufferConstants {
    keen::VolumetricFogGridShaderData fogGrid; // Offset: 0
    keen::uint32 layerCount; // Offset: 496
    keen::uint32 showLayerWeight; // Offset: 500
    keen::uint32 debugLayerIndex; // Offset: 504
    keen::uint2 outputSize; // Offset: 512
    keen::float2 invOutputSize; // Offset: 520
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 528
    keen::uint32 isMaterialDataValid; // Offset: 592
    keen::float3 cameraWorldPosition; // Offset: 596
    keen::float exposureCorrection; // Offset: 608
    keen::float time; // Offset: 612
};

struct GpuCullingFrustum {
    keen::float4 plane0; // Offset: 0
    keen::float4 plane1; // Offset: 16
    keen::float4 plane2; // Offset: 32
    keen::float4 plane3; // Offset: 48
    keen::float4 plane4; // Offset: 64
    keen::float4 plane5; // Offset: 80
};

struct GpuOcclusionCullingShaderData {
    keen::float2 depthPyramidResolution; // Offset: 0
    keen::float2 screenToDepthPyramidUvScale; // Offset: 8
    keen::float P00; // Offset: 16
    keen::float P11; // Offset: 20
    keen::float P03; // Offset: 24
    keen::float P13; // Offset: 28
    keen::float P22; // Offset: 32
    keen::float P23; // Offset: 36
    keen::float zNear; // Offset: 40
    keen::float zFar; // Offset: 44
    keen::uint orthoProjection; // Offset: 48
};

struct BrickCullingShaderParameters {
    keen::uint32 instanceCount; // Offset: 0
    keen::GpuCullingFrustum frustum; // Offset: 16
    keen::GraphicsMatrix43 worldToViewMatrix; // Offset: 112
    keen::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 160
};

struct BrickDrawCommandData {
    keen::uint32 indexCount; // Offset: 0
    keen::uint32 instanceCount; // Offset: 4
    keen::uint32 firstIndex; // Offset: 8
    keen::sint32 vertexOffset; // Offset: 12
    keen::uint32 firstInstance; // Offset: 16
};

struct BrickSdfBakingShaderParameters {
    keen::uint3 textureOffset; // Offset: 0
    keen::uint32 resolution; // Offset: 12
};

struct BrickVoxelCopyShaderParameters {
    keen::uint32 dwordCount; // Offset: 0
    keen::uint32 brickIndex; // Offset: 4
    keen::uint2 brickData; // Offset: 8
};

struct BrickVoxelDilateShaderParameters {
    keen::uint32 dwordCount; // Offset: 0
    keen::uint32 innerSize; // Offset: 4
};

struct NewBrickCommandData {
    keen::uint2 data; // Offset: 0
    keen::uint32 index; // Offset: 8
};

struct BrickUploadShaderParameters {
    keen::uint32 newBrickCount; // Offset: 0
};

enum class BuildingMappingType {
    Default = 0,
    Wood = 1,
    Roof = 2,
};

struct BuildingMaterialParameters {
    keen::BuildingMappingType mapping; // Offset: 0
    keen::bool edgeOnlySide; // Offset: 1
    keen::BlobArray<keen::DecoObjectRuleSet> decoObjectRules; // Offset: 4
};

struct BuildingMaterialParametersResource {
    keen::BlobArray<keen::BuildingMaterialParameters> materials; // Offset: 0
};

struct BuildingMaterials {
    keen::BlobArray<keen::ObjectReference<keen::PbrBuildingMaterial>> materials; // Offset: 0
};

struct RenderTexture {
    keen::uint16 width; // Offset: 0
    keen::uint16 height; // Offset: 2
    keen::uint16 depth; // Offset: 4
    keen::uint16 arraySize; // Offset: 6
    keen::uint8 levelCount; // Offset: 8
    keen::TextureType type; // Offset: 9
    keen::PixelFormat format; // Offset: 10
    keen::ContentHash data; // Offset: 12
    keen::string debugName; // Offset: 28
};

struct BuildingMaterialLayerImages {
    keen::RenderTexture emissiveMap; // Offset: 0
    keen::RenderTexture albedoMap; // Offset: 36
    keen::RenderTexture metallicMap; // Offset: 72
    keen::RenderTexture roughnessMap; // Offset: 108
    keen::RenderTexture reflectanceMap; // Offset: 144
    keen::RenderTexture normalMap; // Offset: 180
    keen::RenderTexture heightMap; // Offset: 216
    keen::RenderTexture aoMap; // Offset: 252
};

struct BuildingMaterialImages {
    keen::BuildingMaterialLayerImages baseSide; // Offset: 0
    keen::BuildingMaterialLayerImages baseTop; // Offset: 288
    keen::BuildingMaterialLayerImages baseBottom; // Offset: 576
    keen::BuildingMaterialLayerImages edge; // Offset: 864
    keen::BuildingMaterialLayerImages noise; // Offset: 1152
};

struct BuildingMaterialBlendingMaterialLayerTextureShaderData {
    keen::StreamedTexture2D_float4 emissiveMap; // Offset: 0
    keen::float32 emissiveMapIntensity; // Offset: 4
    keen::float32 emissiveExposureCorrectionFactor; // Offset: 8
    keen::StreamedTexture2D_float4 albedoMap; // Offset: 12
    keen::StreamedTexture2D_float metallicMap; // Offset: 16
    keen::StreamedTexture2D_float roughnessMap; // Offset: 20
    keen::StreamedTexture2D_float reflectanceMap; // Offset: 24
    keen::StreamedTexture2D_float4 normalMap; // Offset: 28
    keen::StreamedTexture2D_float heightMap; // Offset: 32
    keen::StreamedTexture2D_float aoMap; // Offset: 36
    keen::float32 tilingFactor; // Offset: 40
    keen::float32 displacementScale; // Offset: 44
    keen::float32 displacementOffset; // Offset: 48
    keen::float32 emissiveGiFactor; // Offset: 52
};

struct BuildingMaterialBlendingMaterialLayerShaderData {
    keen::BuildingMaterialBlendingMaterialLayerTextureShaderData baseSideTexture; // Offset: 0
    keen::BuildingMaterialBlendingMaterialLayerTextureShaderData baseTopTexture; // Offset: 56
    keen::BuildingMaterialBlendingMaterialLayerTextureShaderData baseBottomTexture; // Offset: 112
    keen::BuildingMaterialBlendingMaterialLayerTextureShaderData edgeTexture; // Offset: 168
    keen::BuildingMaterialBlendingMaterialLayerTextureShaderData edgeTopTexture; // Offset: 224
    keen::BuildingMaterialBlendingMaterialLayerTextureShaderData noiseTexture; // Offset: 280
    keen::float32 heightBlendingRange; // Offset: 336
    keen::float32 heightBlendingRangeNoise; // Offset: 340
    keen::float32 edgeBlendingCurve; // Offset: 344
    keen::uint32 edgeOnlySide; // Offset: 348
    keen::float2 noiseBlendRange; // Offset: 352
    keen::float32 bevelRadius; // Offset: 360
    keen::uint32 isRoof; // Offset: 364
};

struct RenderParameterBlock {
    keen::HashKey32 typeSignatureHash; // Offset: 0
    keen::ContentHash data; // Offset: 4
    keen::BlobArray<keen::RenderParameterBlockPatchPoint> patchPoints; // Offset: 20
    keen::BlobArray<keen::RenderTexture> textures; // Offset: 28
    keen::BlobArray<keen::RenderSampler> samplers; // Offset: 36
    keen::string debugName; // Offset: 44
};

struct BuildingMaterialBlendingResource {
    keen::uint32 layerCount; // Offset: 0
    keen::uint32 layerSizeInBytes; // Offset: 4
    keen::uint32 pad0; // Offset: 8
    keen::uint32 pad1; // Offset: 12
    keen::RenderParameterBlock renderingParameterBlock; // Offset: 16
    keen::BlobArray<keen::RenderModelImageSizeInfo> renderingImageSizeInfos; // Offset: 68
    keen::BlobArray<keen::uint32> renderingLayerImageSizeInfoStartIndices; // Offset: 76
};

struct BuildingMaterialMapping {
    keen::ObjectReference<keen::BaseVoxelMaterial> voxelMaterial; // Offset: 0
    keen::uint8 id; // Offset: 16
};

struct BuildingMaterialPalette {
};

struct BuildingMaterialPalettesFolder {
};

typedef keen::ObjectReference<keen::BuildingMaterialPalette> BuildingMaterialPaletteId;

enum class DecoObjectRuleType {
    RoofTop = 0,
    RoofTopSmall = 1,
    RoofSideLeft = 2,
    RoofSideRight = 3,
    RoofBottom = 4,
    RoofBrokenSideLeft = 5,
    RoofBrokenSideRight = 6,
    RoofBrokenTop = 7,
    SupportBeams = 8,
    MaterialEdgeTop = 9,
    MaterialEdgeTopCornerOuter = 10,
    MaterialEdgeBottom = 11,
    MaterialEdgeBottomCornerOuter = 12,
    MaterialEdgeLeft = 13,
    MaterialEdgeRight = 14,
    MaterialEdgeSideBoth = 15,
    WallCornerOuter = 16,
    WallCornerOuterSmall = 17,
    WallCeilingCorner = 18,
    WallCeilingCornerSmall = 19,
    WallCeilingCornerOuter = 20,
    WallCeilingCornerOuterSmall = 21,
    WallFloorCorner = 22,
    WallFloorCornerOuter = 23,
    WallEndSide = 24,
    VoxelEdgeSide = 25,
    VoxelEdgeTop = 26,
    VoxelEdgeBottom = 27,
    Stairs = 28,
    HangingCeilingEdge = 29,
};

enum class DecoObjectPartMode {
    MiddleOnly = 0,
    StartEndAdd = 1,
    StartEndReplace = 2,
};

enum class DecoObjectPart {
    Start = 0,
    Middle = 1,
    End = 2,
};

struct DecoObjectInstance {
    keen::ObjectReference<keen::Model> model; // Offset: 0
    keen::DecoObjectPart part; // Offset: 16
    keen::sint32 fixedOrderKey; // Offset: 20
};

struct DecoObjectRule {
    keen::DecoObjectRuleType rule; // Offset: 0
    keen::DecoObjectPartMode partMode; // Offset: 1
    keen::bool onDestructionEdge; // Offset: 2
    keen::bool limitOnePerVoxel; // Offset: 3
    keen::bool symmetrical; // Offset: 4
    keen::Vector3 offset; // Offset: 16
    keen::Vector3 rotationVariation; // Offset: 32
    keen::float32 density; // Offset: 48
};

struct DecoObjectRuleSet {
    keen::DecoObjectRuleType rule; // Offset: 0
    keen::DecoObjectPartMode partMode; // Offset: 1
    keen::bool onDestructionEdge; // Offset: 2
    keen::bool limitOnePerVoxel; // Offset: 3
    keen::bool symmetrical; // Offset: 4
    keen::float32 density; // Offset: 8
    keen::Vector3 offset; // Offset: 16
    keen::Vector3 rotationVariation; // Offset: 32
    keen::bool fixedOrder; // Offset: 48
    keen::BlobArray<keen::ObjectReference<keen::Model>> startModels; // Offset: 52
    keen::BlobArray<keen::ObjectReference<keen::Model>> middleModels; // Offset: 60
    keen::BlobArray<keen::ObjectReference<keen::Model>> endModels; // Offset: 68
};

struct DecoObjectRules {
    keen::BlobArray<keen::DecoObjectRuleSet> rules; // Offset: 0
};

struct BuildingMaterialListEntry {
    keen::Guid guid; // Offset: 0
    keen::ObjectReference<keen::PbrBuildingMaterial> pbrBuildingMaterial; // Offset: 16
};

struct BuildingMaterialList {
    keen::BlobArray<keen::BuildingMaterialListEntry> entries; // Offset: 0
};

struct FFX_CACAO_Constants {
    keen::float2 DepthUnpackConsts; // Offset: 0
    keen::float2 CameraTanHalfFOV; // Offset: 8
    keen::float2 NDCToViewMul; // Offset: 16
    keen::float2 NDCToViewAdd; // Offset: 24
    keen::float2 DepthBufferUVToViewMul; // Offset: 32
    keen::float2 DepthBufferUVToViewAdd; // Offset: 40
    keen::float32 EffectRadius; // Offset: 48
    keen::float32 EffectShadowStrength; // Offset: 52
    keen::float32 EffectShadowPow; // Offset: 56
    keen::float32 EffectShadowClamp; // Offset: 60
    keen::float32 EffectFadeOutMul; // Offset: 64
    keen::float32 EffectFadeOutAdd; // Offset: 68
    keen::float32 EffectHorizonAngleThreshold; // Offset: 72
    keen::float32 EffectSamplingRadiusNearLimitRec; // Offset: 76
    keen::float32 DepthPrecisionOffsetMod; // Offset: 80
    keen::float32 NegRecEffectRadius; // Offset: 84
    keen::float32 LoadCounterAvgDiv; // Offset: 88
    keen::float32 AdaptiveSampleCountLimit; // Offset: 92
    keen::float32 InvSharpness; // Offset: 96
    keen::sint32 PassIndex; // Offset: 100
    keen::float32 BilateralSigmaSquared; // Offset: 104
    keen::float32 BilateralSimilarityDistanceSigma; // Offset: 108
    keen::StaticArray<keen::float4,5> PatternRotScaleMatrices; // Offset: 112
    keen::float32 DetailAOStrength; // Offset: 192
    keen::float32 Dummy0; // Offset: 196
    keen::float32 Dummy1; // Offset: 200
    keen::float32 Dummy2; // Offset: 204
    keen::float2 SSAOBufferDimensions; // Offset: 208
    keen::float2 SSAOBufferInverseDimensions; // Offset: 216
    keen::float2 DepthBufferDimensions; // Offset: 224
    keen::float2 DepthBufferInverseDimensions; // Offset: 232
    keen::int2 DepthBufferOffset; // Offset: 240
    keen::float2 PerPassFullResUVOffset; // Offset: 248
    keen::float2 OutputBufferDimensions; // Offset: 256
    keen::float2 OutputBufferInverseDimensions; // Offset: 264
    keen::float2 ImportanceMapDimensions; // Offset: 272
    keen::float2 ImportanceMapInverseDimensions; // Offset: 280
    keen::float2 DeinterleavedDepthBufferDimensions; // Offset: 288
    keen::float2 DeinterleavedDepthBufferInverseDimensions; // Offset: 296
    keen::float2 DeinterleavedDepthBufferOffset; // Offset: 304
    keen::float2 DeinterleavedDepthBufferNormalisedOffset; // Offset: 312
    keen::GraphicsMatrix44 NormalsWorldToViewspaceMatrix; // Offset: 320
};

enum class VoxelChunkPassType {
    DepthPrepass = 0,
    GBuffer = 1,
    Shadow = 2,
};

struct PackedShaderWorldTransform {
    keen::uint3 position; // Offset: 0
    keen::float scale; // Offset: 12
    keen::float4 orientation; // Offset: 16
};

struct PackedShaderWorldPositionUniform {
    keen::uint3 position; // Offset: 0
};

struct VoxelChunkShaderData {
    keen::PackedShaderWorldTransform packedTransform; // Offset: 0
    keen::PackedShaderWorldPositionUniform worldPosition; // Offset: 32
    keen::GraphicsMatrix43 transform; // Offset: 48
    keen::float4 boundingSphere; // Offset: 96
    keen::float scale; // Offset: 112
    keen::uint triangleIndexOffset; // Offset: 116
    keen::uint triangleIndexCount; // Offset: 120
    keen::uint quadIndexOffset; // Offset: 124
    keen::uint quadIndexCount; // Offset: 128
    keen::uint vertexOffset; // Offset: 132
    keen::uint bakedTriangleMaterialDataOffset; // Offset: 136
    keen::uint chunkletOffset; // Offset: 140
    keen::uint chunkletCount; // Offset: 144
    keen::uint chunkletVisibilityOffset; // Offset: 148
    keen::uint highlightColorPaletteIndexTransparency; // Offset: 152
    keen::uint sizeFeedbackIndex; // Offset: 156
    keen::StaticArray<keen::uint,3> pipelineIndices; // Offset: 160
    keen::uint flags; // Offset: 172
};

struct ShaderChunkletCullingSubView {
    keen::PackedShaderWorldPositionUniform cameraPosition; // Offset: 0
    keen::uint32 flags; // Offset: 16
    keen::float3 exclusionCircle; // Offset: 20
    keen::float3 viewDirection; // Offset: 32
    keen::GpuCullingFrustum cameraCenteredFrustum; // Offset: 48
    keen::GraphicsMatrix43 cameraCenteredToViewMatrix; // Offset: 144
    keen::GpuOcclusionCullingShaderData occlusionData; // Offset: 192
};

struct ShaderChunkletCullingPass {
    keen::uint32 flags; // Offset: 0
    keen::uint32 subViewIndex; // Offset: 4
    keen::uint32 passType; // Offset: 8
};

struct RenderChunkletCullingShaderParameters {
    keen::StaticArray<keen::ShaderChunkletCullingSubView,9> subViews; // Offset: 0
    keen::StaticArray<keen::ShaderChunkletCullingPass,8> passes; // Offset: 2304
    keen::uint32 subViewCount; // Offset: 2432
    keen::uint32 passCount; // Offset: 2436
    keen::uint32 jobCount; // Offset: 2440
    keen::uint32 stageIndex; // Offset: 2444
};

struct CulledChunklet {
    keen::uint data0; // Offset: 0
    keen::uint visibility; // Offset: 4
};

struct ChunkletPrefixSumShaderParameters {
    keen::uint batchCount; // Offset: 0
    keen::uint stageIndex; // Offset: 4
};

struct VoxelChunkArgumentsPrepareShaderParameters {
    keen::uint groupSize; // Offset: 0
};

struct RenderChunkletDrawPrepareShaderParameters {
    keen::uint batchCount; // Offset: 0
    keen::uint batchOffset; // Offset: 4
};

struct ChunkletPipelineInfoShaderData {
    keen::uint flags; // Offset: 0
};

struct ChunkletDrawCommand {
    keen::uint vertexCount; // Offset: 0
    keen::uint instanceCount; // Offset: 4
    keen::uint vertexOffset; // Offset: 8
    keen::uint instanceOffset; // Offset: 12
};

struct ChunkletPushConstants {
    keen::uint drawIndex; // Offset: 0
};

struct VoxelChunkSizeFeedbackShaderParameters {
    keen::float3 viewPosition; // Offset: 0
    keen::float pixelSize; // Offset: 12
    keen::uint chunkCount; // Offset: 16
};

struct RenderChunklet {
    keen::uint data0; // Offset: 0
};

struct ChunkletCullingDebugCounters {
    keen::uint culledByOrientation; // Offset: 0
    keen::uint culledByFrustum; // Offset: 4
    keen::uint culledByOcclusion; // Offset: 8
    keen::uint culledByVisibility; // Offset: 12
    keen::uint culledByExclusion; // Offset: 16
};

struct ClusterCullingCellData {
    keen::uint2 lightListCountAndOffset; // Offset: 0
    keen::uint2 decalListCountAndOffset; // Offset: 8
};

struct ClusterCullingShaderData {
    keen::GraphicsMatrix44 inverseProjectionMatrix; // Offset: 0
    keen::GraphicsMatrix43 viewMatrix; // Offset: 64
    keen::uint3 clusterSize; // Offset: 112
    keen::uint cellLightListOffsetCounterOffset; // Offset: 124
    keen::uint cellDecalListOffsetCounterOffset; // Offset: 128
    keen::float2 linearDepthParameters; // Offset: 132
    keen::float2 tileRatio; // Offset: 144
    keen::uint pointLightCounterOffset; // Offset: 152
    keen::uint maxPointLightCount; // Offset: 156
    keen::uint decalCounterOffset; // Offset: 160
    keen::uint maxDecalCount; // Offset: 164
};

struct ClusterCullingDebugPushConstants {
    keen::uint2 debugImageSize; // Offset: 0
};

enum class GpuCulling2StageId {
    Early = 0,
    Late = 1,
};

enum class GpuCulling2PassType {
    DepthPrePass = 0,
    GBuffer = 1,
    Shadow = 2,
    Debug = 3,
    Transparent = 4,
};

enum class GpuCulling2PassId {
    Main_DepthPrepass = 0,
    Main_GBuffer = 1,
    Main_Transparent = 2,
    Main_Debug = 3,
    Shadow_Cascade0 = 4,
    Shadow_Cascade1 = 5,
    Shadow_Cascade2 = 6,
    Shadow_Cascade3 = 7,
    Shadow_Cascade4 = 8,
    Shadow_Cascade5 = 9,
    Shadow_Cascade6 = 10,
    Shadow_Cascade7 = 11,
};

struct GpuCulling2SubViewConstants {
    keen::uint flags; // Offset: 0
    keen::float3 exclusionCircle; // Offset: 4
    keen::float minObjectSize; // Offset: 16
    keen::GraphicsMatrix43 cameraCenteredToViewMatrix; // Offset: 32
    keen::GpuCullingFrustum cameraCenteredFrustum; // Offset: 80
    keen::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 176
};

struct GpuCulling2PassConstants {
    keen::uint flags; // Offset: 0
    keen::uint subViewIndex; // Offset: 4
    keen::uint passType; // Offset: 8
};

struct GpuCulling2ShaderParameters {
    keen::StaticArray<keen::GpuCulling2SubViewConstants,11> subViews; // Offset: 0
    keen::StaticArray<keen::GpuCulling2PassConstants,12> passes; // Offset: 2640
    keen::uint subViewCount; // Offset: 2832
    keen::uint passCount; // Offset: 2836
    keen::uint visibleGroupMask; // Offset: 2840
    keen::uint isLateStage; // Offset: 2844
    keen::uint flags; // Offset: 2848
    keen::uint instanceCount; // Offset: 2852
    keen::uint batchCount; // Offset: 2856
    keen::float pixelSizeCullingBias; // Offset: 2860
    keen::uint meshCount; // Offset: 2864
    keen::uint maxCulledInstanceCount; // Offset: 2868
    keen::uint scanShaderGroupSize; // Offset: 2872
    keen::uint fixupShaderGroupSize; // Offset: 2876
    keen::PackedShaderWorldPositionUniform mainViewCameraPosition; // Offset: 2880
    keen::float mainViewPixelSize; // Offset: 2896
};

struct GpuCulling2SubViewDebugCounters {
    keen::uint notCulled; // Offset: 0
    keen::uint culledByFrustum; // Offset: 4
    keen::uint culledByOcclusion; // Offset: 8
    keen::uint culledBySize; // Offset: 12
    keen::uint culledByExclusion; // Offset: 16
};

struct GpuCulling2PassDebugCounters {
    keen::uint notCulled; // Offset: 0
};

struct GpuCulling2Counters {
    keen::uint culledInstanceCount; // Offset: 0
    keen::uint leftoverInstances; // Offset: 4
    keen::uint firstInstanceCount; // Offset: 8
};

enum class GpuCulling2DispatchCommandId {
    ScanInstances = 0,
    FixupInstances = 1,
};

struct GpuCulling2DebugCounters {
    keen::StaticArray<keen::GpuCulling2SubViewDebugCounters,11> subViews; // Offset: 0
    keen::StaticArray<keen::GpuCulling2PassDebugCounters,12> passes; // Offset: 220
    keen::uint culledByGroupMask; // Offset: 268
    keen::uint culledByPixelSize; // Offset: 272
};

struct GpuCulling2CulledInstanceData {
    keen::uint meshIndexAndBatchIndex; // Offset: 0
    keen::uint instanceIndex; // Offset: 4
};

struct GpuCulling2PixelQuery {
    keen::uint2 position; // Offset: 0
};

struct GpuCulling2PixelQueryResult {
    keen::uint stageId; // Offset: 0
    keen::uint instanceIndex; // Offset: 4
    keen::uint instanceDataIndex; // Offset: 8
    keen::uint meshIndexAndBatchIndex; // Offset: 12
};

enum class GpuCulling2HighlightType {
    None = 0,
    Mesh = 1,
    Model = 2,
    Batch = 3,
};

struct GpuCulling2RenderData {
    keen::GpuCulling2PixelQuery pixelQuery; // Offset: 0
    keen::GpuCulling2PixelQueryResult pixelQueryResult; // Offset: 8
    keen::GpuCulling2HighlightType highlightType; // Offset: 24
    keen::uint highlightValue; // Offset: 28
    keen::uint highlightValue2; // Offset: 32
};

struct RenderMaterialMeshShaderData {
    keen::float3 positionScale; // Offset: 0
    keen::uint materialDataIndex; // Offset: 12
    keen::float3 positionOffset; // Offset: 16
    keen::uint modelMaterialData; // Offset: 28
    keen::uint skinningDataByteOffsetAndClothMeshIndex; // Offset: 32
    keen::uint blendShapeVertexOffset; // Offset: 36
    keen::uint blendShapeMask; // Offset: 40
    keen::uint vertexCount; // Offset: 44
};

struct RenderDrawCommandData {
    keen::uint32 indexCount; // Offset: 0
    keen::uint32 instanceCount; // Offset: 4
    keen::uint32 indexOffset; // Offset: 8
    keen::sint32 vertexOffset; // Offset: 12
    keen::uint32 instanceOffset; // Offset: 16
    keen::uint32 materialMeshIndexAndLodIndex; // Offset: 20
};

struct RenderDrawData {
    keen::uint modelIndex; // Offset: 0
    keen::uint instanceDataIndex; // Offset: 4
    keen::uint groupMask; // Offset: 8
    keen::uint _pad; // Offset: 12
};

struct RenderModelDrawData {
    keen::float4 boundingSphere; // Offset: 0
    keen::uint modelLodStartIndex; // Offset: 16
    keen::uint modelLodCount; // Offset: 20
    keen::uint hasCardClusterLod; // Offset: 24
    keen::uint sizeFeedbackIndex; // Offset: 28
    keen::StaticArray<keen::float,8> lodPixelSizes; // Offset: 32
};

struct RenderModelLodDrawData {
    keen::uint materialMeshStartIndex; // Offset: 0
    keen::uint materialMeshCount; // Offset: 4
    keen::uint _pad0; // Offset: 8
    keen::uint _pad1; // Offset: 12
};

struct RenderMaterialMeshDrawData {
    keen::uint pipelineIndex; // Offset: 0
    keen::uint indexCount; // Offset: 4
    keen::uint indexOffset; // Offset: 8
    keen::int vertexOffset; // Offset: 12
};

struct GpuCullingDrawCounter {
    keen::uint32 offset; // Offset: 0
    keen::uint32 maxCount; // Offset: 4
};

struct GpuCullingDebugCounters {
    keen::uint32 notCulled; // Offset: 0
    keen::uint32 culledByVisibility; // Offset: 4
    keen::uint32 culledBySize; // Offset: 8
    keen::uint32 culledByFrustum; // Offset: 12
    keen::uint32 culledByOcclusion; // Offset: 16
    keen::uint32 culledByExclusion; // Offset: 20
};

struct CullingShaderData {
    keen::float3 viewPosition; // Offset: 0
    keen::int fixedLod; // Offset: 12
    keen::uint viewVisibilityMask; // Offset: 16
    keen::float pixelSize; // Offset: 20
    keen::float pixelSizeCullingBias; // Offset: 24
    keen::uint visibleGroupMask; // Offset: 28
    keen::GpuCullingFrustum frustum; // Offset: 32
    keen::float3 exclusionCircle; // Offset: 128
    keen::GraphicsMatrix43 worldToViewMatrix; // Offset: 144
    keen::GraphicsMatrix44 projectionMatrix; // Offset: 192
    keen::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 256
    keen::uint drawCounterOffset; // Offset: 320
    keen::uint occlusionCullingEnabled; // Offset: 324
    keen::uint exclusionCullingEnabled; // Offset: 328
    keen::uint useLastFrameVisibility; // Offset: 332
    keen::uint cpuDrawCount; // Offset: 336
    keen::uint cullSmallObjects; // Offset: 340
    keen::float smallObjectRadius; // Offset: 344
    keen::uint forceCardClusterLod; // Offset: 348
    keen::uint useCameraCenteredSpace; // Offset: 352
    keen::PackedShaderWorldPositionUniform cameraWorldPosition; // Offset: 368
};

struct UploadRenderInstancesShaderData {
    keen::uint32 uploadInstanceCount; // Offset: 0
};

struct DebugOcclusionCullingShaderParameters {
    keen::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 0
    keen::float4 viewSpaceSphere; // Offset: 64
};

struct DebugOcclusionCullingResultShaderData {
    keen::uint isValid; // Offset: 0
    keen::uint level; // Offset: 4
    keen::float2 rectMin; // Offset: 8
    keen::float2 rectMax; // Offset: 16
    keen::float2 uv; // Offset: 24
};

enum class CurvePointTangent {
    Free = 0,
    Weighted = 1,
    Linear = 2,
};

enum class CurveTangent {
    Smooth = 0,
    Broken = 1,
};

struct CurvePoint {
    keen::CurveTangent tangent; // Offset: 8
    keen::CurvePointTangent pointTangent; // Offset: 9
};

struct ImageDiffShaderParameters {
    keen::float32 threshold; // Offset: 0
};

struct DebugMagnifierShaderParameters {
    keen::uint imageWidth; // Offset: 0
    keen::uint imageHeight; // Offset: 4
    keen::uint2 mousePos; // Offset: 8
    keen::float4 borderColor; // Offset: 16
    keen::float magnificationAmount; // Offset: 32
    keen::float magnifierScreenRadius; // Offset: 36
    keen::int magnifierOffsetX; // Offset: 40
    keen::int magnifierOffsetY; // Offset: 44
    keen::float brightness; // Offset: 48
    keen::float contrast; // Offset: 52
};

enum class VisualizeTextureOp {
    One = 0,
    Zero = 1,
    Copy = 2,
    IntegerHashR = 3,
    IntegerHashG = 4,
    IntegerHashB = 5,
};

enum class VisualizeTextureChannel {
    Red = 0,
    Green = 1,
    Blue = 2,
    Alpha = 3,
};

struct VisualizeTextureCommandShaderData {
    keen::VisualizeTextureOp op; // Offset: 0
    keen::VisualizeTextureChannel channel; // Offset: 4
    keen::uint32 scale; // Offset: 8
    keen::float power; // Offset: 12
};

struct VisualizeTextureShaderParameters {
    keen::uint2 targetSize; // Offset: 0
    keen::StaticArray<keen::VisualizeTextureCommandShaderData,4> commands; // Offset: 16
};

struct VisualizeOverdrawShaderParameters {
    keen::uint2 targetSize; // Offset: 0
    keen::float scale; // Offset: 8
};

struct IblVisualizationData {
    keen::GraphicsMatrix44 ndcToWorldMatrix; // Offset: 0
    keen::float iblIntensity; // Offset: 64
    keen::float exposure; // Offset: 68
};

enum class DecalNormalBlendMode {
    Linear = 0,
    DetailOriented = 1,
};

enum class DecalRoughnessBlendMode {
    Multiply = 0,
    Replace = 1,
};

struct Decal {
    keen::bool affectShading; // Offset: 0
    keen::ObjectReference<keen::Image> albedoMap; // Offset: 4
    keen::ObjectReference<keen::Image> opacityMap; // Offset: 20
    keen::ObjectReference<keen::Image> normalMap; // Offset: 36
    keen::DecalNormalBlendMode normalBlendMode; // Offset: 52
    keen::ObjectReference<keen::Image> roughnessMap; // Offset: 56
    keen::DecalRoughnessBlendMode roughnessBlendMode; // Offset: 72
    keen::ObjectReference<keen::Image> emissiveMap; // Offset: 76
    keen::ObjectReference<keen::Image> emissiveAlphaMap; // Offset: 92
    keen::ObjectReference<keen::Image> metallicMap; // Offset: 108
    keen::ObjectReference<keen::Image> aoMap; // Offset: 124
    keen::bool affectTerrainVoxelMesh; // Offset: 140
    keen::bool affectBuildingVoxelMesh; // Offset: 141
    keen::bool affectRoofVoxelMesh; // Offset: 142
    keen::bool affectModels; // Offset: 143
    keen::bool affectSkinnedModels; // Offset: 144
    keen::bool affectBuildingDecoModels; // Offset: 145
    keen::bool affectScatterDetailModels; // Offset: 146
    keen::bool affectScattering; // Offset: 147
    keen::ObjectReference<keen::Image> scatterScaleMap; // Offset: 148
    keen::float scatterScaleFactor; // Offset: 164
};

enum class DecalLayer {
    TerrainVoxelMesh = 0,
    BuildingVoxelMesh = 1,
    RoofVoxelMesh = 2,
    StaticModel = 3,
    SkinnedModel = 4,
    BuildingDecoModel = 5,
    ScatterDecoModel = 6,
    VfxModel = 7,
};

typedef keen::Bitmask32<keen::DecalLayer> DecalLayerMask;

struct DecalMaterialData {
    keen::BindlessTexture2D_float4 albedoMap; // Offset: 0
    keen::BindlessTexture2D_float4 normalMap; // Offset: 4
    keen::BindlessTexture2D_float roughnessMap; // Offset: 8
    keen::BindlessTexture2D_float metallicMap; // Offset: 12
    keen::BindlessTexture2D_float4 emissiveMap; // Offset: 16
    keen::BindlessTexture2D_float aoMap; // Offset: 20
    keen::BindlessTexture2D_float scatterScaleMap; // Offset: 24
    keen::uint32 decalLayerMask; // Offset: 28
    keen::float scatterScaleFactor; // Offset: 32
};

struct RenderDecal {
    keen::RenderParameterBlock parameterBlock; // Offset: 0
};

struct WeatherSurfaceMaterialData {
    keen::float snowUVScale; // Offset: 0
    keen::float snowScale; // Offset: 4
    keen::float frostUVScale; // Offset: 8
    keen::float frostScale; // Offset: 12
    keen::float3 frostAlbedo; // Offset: 16
    keen::float frostRoughness; // Offset: 28
    keen::float3 frostPuddleAlbedo; // Offset: 32
    keen::float frostPorosityScale; // Offset: 44
    keen::float snowVertexNormalPower; // Offset: 48
    keen::float snowVertexNormalCutoff; // Offset: 52
};

struct GrassMovementData {
    keen::PackedShaderWorldPositionUniform origin; // Offset: 0
    keen::float2 reciprocalSize; // Offset: 16
    keen::uint32 validData; // Offset: 24
};

struct TessellatedMaterialConstants {
    keen::float2 levelMapping; // Offset: 0
    keen::float32 maxLevel; // Offset: 8
};

enum class RenderShaderDebugMode {
    None = 0,
    DiffuseColor = 1,
    SpecularColor = 2,
    Emissive = 3,
    DiffuseResult = 4,
    SpecularResult = 5,
    IndirectSpecularResult = 6,
    IndirectDiffuseResult = 7,
    Normal = 8,
    Albedo = 9,
    Reflectance = 10,
    Metallic = 11,
    Roughness = 12,
    Ao = 13,
    SunVisibility = 14,
    VertexColorRed = 15,
    VertexColorGreen = 16,
    VertexColorBlue = 17,
    VertexColorAlpha = 18,
    VertexColorRgb = 19,
    CodeDebug = 20,
    WorldSpaceTextureDebug = 21,
    WorldSpaceWhiteTextureDebug = 22,
    DissolveMask = 23,
    TerrainMaterialLayer = 24,
    Illuminance = 25,
    Bloom = 26,
    MipLevelMin = 27,
    MipLevelMax = 28,
    Displacement = 29,
    DisplacementSide = 30,
    DisplacementTop = 31,
    DisplacementBottom = 32,
    LodIndex = 33,
    WorldSpaceScatteringTexture = 34,
    SlopeAngle = 35,
    Translucency = 36,
    ObjectSpaceNormal = 37,
    RawReflectance = 38,
    FlagAnisotropicSpecular = 39,
    FlagGiWrapShading = 40,
    FlagGiAdjustNormals = 41,
    FlagAoForDirectLighting = 42,
    DetailScatteringFadeout = 43,
    Freezing = 44,
};

struct RenderDebugConstants {
    keen::RenderShaderDebugMode debugMode; // Offset: 0
    keen::uint32 debugNeutralAlbedo; // Offset: 4
    keen::uint32 debugTextureIndex; // Offset: 8
    keen::float32 debugTextureAlpha; // Offset: 12
    keen::float4 debugValue; // Offset: 16
};

struct DynamicHeightmapSamplingShaderData {
    keen::uint size; // Offset: 0
    keen::float inverseSize; // Offset: 4
    keen::int2 origin; // Offset: 8
    keen::float scale; // Offset: 16
    keen::float2 distanceFade; // Offset: 20
    keen::uint explicitPad0; // Offset: 28
};

struct WeatherSampleConstants {
    keen::uint flags; // Offset: 0
    keen::float2 texcoordMappingScale; // Offset: 4
    keen::float2 texcoordMappingOffset; // Offset: 16
    keen::float2 snowBorderMapping; // Offset: 24
    keen::float32 cameraPositionY; // Offset: 32
    keen::DynamicHeightmapSamplingShaderData heightMap; // Offset: 48
    keen::float3 heightMapCameraPosition; // Offset: 80
    keen::float3 frostVoxelTexcoordMappingScale; // Offset: 96
    keen::float3 frostVoxelTexcoordMappingOffset; // Offset: 112
};

struct RenderLightFactors {
    keen::float32 sun; // Offset: 0
    keen::float32 skyGeometrySun; // Offset: 4
    keen::float32 pointLights; // Offset: 8
    keen::float32 gi; // Offset: 12
    keen::float32 emissive; // Offset: 16
    keen::float32 exposure; // Offset: 20
    keen::float32 exposureCorrection; // Offset: 24
};

struct SnowDisplacementData {
    keen::PackedShaderWorldPositionUniform tileOrigin; // Offset: 0
    keen::float reciprocalSize; // Offset: 16
    keen::float rcpNormalScale; // Offset: 20
    keen::float halfWorldSize; // Offset: 24
    keen::float heightScale; // Offset: 28
    keen::uint32 validData; // Offset: 32
};

struct RenderGBufferConstants {
    keen::GraphicsMatrix43 viewMatrix; // Offset: 0
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 48
    keen::GraphicsMatrix44 prevViewProjectionMatrix; // Offset: 112
    keen::float3 cameraWorldPosition; // Offset: 176
    keen::float32 time; // Offset: 188
    keen::float32 prevTime; // Offset: 192
    keen::GrassMovementData grassMovement; // Offset: 208
    keen::GrassMovementData grassMovementPrevious; // Offset: 240
    keen::TessellatedMaterialConstants terrainTessellation; // Offset: 272
    keen::TessellatedMaterialConstants buildingTessellation; // Offset: 288
    keen::RenderDebugConstants debugData; // Offset: 304
    keen::uint32 enableCloth; // Offset: 336
    keen::uint32 enableLavaShader; // Offset: 340
    keen::uint32 buildingMaterialBlendingLayerCount; // Offset: 344
    keen::uint32 worldMaterialBlendingLayerCount; // Offset: 348
    keen::WeatherSurfaceMaterialData weatherSurfaceMaterialData; // Offset: 352
    keen::WeatherSampleConstants weather; // Offset: 416
    keen::RenderLightFactors lightFactors; // Offset: 544
    keen::uint32 blueNoiseSizeMask; // Offset: 576
    keen::uint2 blueNoiseOffset; // Offset: 580
    keen::uint32 isVoxelMaterialDataValid; // Offset: 588
    keen::float highlightAmount; // Offset: 592
    keen::float highlightIntensity; // Offset: 596
    keen::StaticArray<keen::float4,8> highlightColorPaletteArray; // Offset: 608
    keen::float mipBias; // Offset: 736
    keen::uint32 useStochasticMaterialSampling; // Offset: 740
    keen::float2 cancelJitter; // Offset: 744
    keen::PackedShaderWorldPositionUniform cameraPosition; // Offset: 752
    keen::PackedShaderWorldPositionUniform prevCameraPosition; // Offset: 768
    keen::GraphicsMatrix44 cameraCenteredToClipSpaceMatrix; // Offset: 784
    keen::GraphicsMatrix44 prevCameraCenteredToClipSpaceMatrix; // Offset: 848
    keen::SnowDisplacementData snowDisplacement; // Offset: 912
};

struct CascadeShadowShaderData {
    keen::GraphicsMatrix43 viewProjectionMatrix; // Offset: 0
    keen::GraphicsMatrix43 viewMatrix; // Offset: 48
    keen::float4 fadeParameters0; // Offset: 96
    keen::float4 fadeParameters1; // Offset: 112
};

struct RenderShadowAtlasShaderData {
    keen::float4 viewMatrixRowZ; // Offset: 0
    keen::float4 atlasSize; // Offset: 16
    keen::float4 cascadeCount; // Offset: 32
    keen::float4 firstCascadeDistanceFadeParameters; // Offset: 48
    keen::StaticArray<keen::CascadeShadowShaderData,8> cascades; // Offset: 64
};

struct ForwardDirectionalLightData {
    keen::float3 direction; // Offset: 0
    keen::float pad0; // Offset: 12
    keen::float3 color; // Offset: 16
    keen::float pad1; // Offset: 28
};

struct ForwardIblData {
    keen::float4 azimuthRotationXZ; // Offset: 0
    keen::float32 specularMipLevelCount; // Offset: 16
    keen::float32 intensity; // Offset: 20
    keen::uint32 isValid; // Offset: 24
};

struct Fog2ShadowVolumeTransform {
    keen::StaticArray<keen::GraphicsMatrix43,4> worldToCascadeMatrices; // Offset: 0
};

struct Fog2ShadowVolumeSampleParameters {
    keen::Fog2ShadowVolumeTransform transform; // Offset: 0
    keen::uint32 cascadeCount; // Offset: 192
    keen::float32 invCascadeCount; // Offset: 196
    keen::float32 halfPixelWidth; // Offset: 200
};

struct VolumetricShadowRuntimeData {
    keen::Fog2ShadowVolumeSampleParameters fog2ShadowVolumeSampleParameters; // Offset: 0
    keen::float3 directionalLightDirection; // Offset: 208
    keen::uint32 flags; // Offset: 220
    keen::float2 cloudMapTexcoordMapping; // Offset: 224
    keen::float32 pad0; // Offset: 232
    keen::float32 pad1; // Offset: 236
};

struct DeferredLightingConstants {
    keen::RenderLightFactors lightFactors; // Offset: 0
    keen::uint2 outputSize; // Offset: 32
    keen::float2 invOutputSize; // Offset: 40
    keen::float32 time; // Offset: 48
    keen::GraphicsMatrix43 viewMatrix; // Offset: 64
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 112
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 176
    keen::float3 cameraWorldPosition; // Offset: 240
    keen::float3 playerWorldPosition; // Offset: 256
    keen::float4 clearColor; // Offset: 272
    keen::RenderShadowAtlasShaderData atlasData; // Offset: 288
    keen::ForwardDirectionalLightData directionalLightData0; // Offset: 1376
    keen::AtmosphereShaderData atmosphere; // Offset: 1408
    keen::ForwardIblData iblData; // Offset: 1472
    keen::uint32 fogDisabled; // Offset: 1500
    keen::uint32 ssaoEnabled; // Offset: 1504
    keen::uint32 useAoMin; // Offset: 1508
    keen::uint32 useAoMaps; // Offset: 1512
    keen::uint32 giEnabled; // Offset: 1516
    keen::uint32 pointLightsEnabled; // Offset: 1520
    keen::uint32 useHorizonBasedSpecularOcclusion; // Offset: 1524
    keen::VolumetricShadowRuntimeData volumetricShadowRuntimeData; // Offset: 1536
    keen::RenderDebugConstants debugData; // Offset: 1776
    keen::uint32 accumulateSceneBrightness; // Offset: 1808
};

struct VisibilityMaterialParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::GraphicsMatrix44 inverseViewProjectionMatrix; // Offset: 16
    keen::uint32 drawCommandBufferOffsetEarly; // Offset: 80
    keen::uint32 drawCommandBufferOffsetEarlyTessellated; // Offset: 84
    keen::uint32 drawCommandBufferOffsetLate; // Offset: 88
    keen::uint32 drawCommandBufferOffsetLateTessellated; // Offset: 92
};

struct DepthOfFieldConstants {
    keen::float focalLength; // Offset: 0
    keen::float focalDistance; // Offset: 4
    keen::float cocScale; // Offset: 8
    keen::float2 linearDepthParameters; // Offset: 16
    keen::float2 kernelScale; // Offset: 24
    keen::float2 sceneImagePixelSize; // Offset: 32
    keen::float2 jitterOffset; // Offset: 40
    keen::GraphicsMatrix44 invProjectionMatrix; // Offset: 48
    keen::StaticArray<keen::float4,48> samplesHigh; // Offset: 112
    keen::StaticArray<keen::float4,9> samplesLow; // Offset: 880
};

struct DepthPyramidShaderParameters {
    keen::float2 inverseOutputResolution; // Offset: 0
    keen::uint2 inputResolution; // Offset: 8
};

enum class DetailScatterModelAlignmentAxis {
    PlusX = 0,
    PlusY = 1,
};

struct DetailScatterModel {
    keen::DetailScatterModelAlignmentAxis alignmentAxis; // Offset: 0
    keen::bool spawnInside; // Offset: 1
    keen::bool spawnOutside; // Offset: 2
    keen::float32 alignWithNormalStrength; // Offset: 4
    keen::float32 randomRotationXStrength; // Offset: 8
    keen::float32 randomRotationYStrength; // Offset: 12
    keen::float32 randomRotationZStrength; // Offset: 16
    keen::float32 minFadeoutDistance; // Offset: 20
    keen::float32 maxFadeoutDistance; // Offset: 24
    keen::float32 minScale; // Offset: 28
    keen::float32 maxScale; // Offset: 32
    keen::float32 mapScaleStrength; // Offset: 36
    keen::float32 materialWeightScaleStrength; // Offset: 40
};

struct DetailScatterInstance {
    keen::ObjectReference<keen::DetailScatterModel> model; // Offset: 0
    keen::float32 probability; // Offset: 16
    keen::bool onlyOnWeathered; // Offset: 20
};

enum class TextureChannel {
    Red = 0,
    Green = 1,
    Blue = 2,
    Alpha = 3,
};

struct DetailScatterGroup {
    keen::TextureChannel mapChannel; // Offset: 0
};

struct DetailScatterLayer {
    keen::ObjectReference<keen::Image> map; // Offset: 0
    keen::float32 mapTilingSize; // Offset: 16
};

struct DetailScatterLayerShaderData {
    keen::BindlessTexture2D_float4 map; // Offset: 0
    keen::float32 mapTilingFactor; // Offset: 4
    keen::uint32 pad0; // Offset: 8
    keen::uint32 pad1; // Offset: 12
    keen::BindlessTexture2D_float edgeNoiseMap; // Offset: 16
    keen::float32 edgeNoiseTilingFactor; // Offset: 20
    keen::float32 edgeNoiseMappingFactor; // Offset: 24
    keen::uint32 pad2; // Offset: 28
    keen::uint4 modelOffset; // Offset: 32
    keen::uint4 modelCount; // Offset: 48
};

struct DetailScatterModelProbabilityCutoffShaderData {
    keen::float32 value; // Offset: 0
};

struct DetailScatterModelShaderData {
    keen::float32 minFadeoutDistance; // Offset: 0
    keen::float32 maxFadeoutDistance; // Offset: 4
    keen::float32 minScale; // Offset: 8
    keen::float32 maxScale; // Offset: 12
    keen::float32 alignWithNormalStrength; // Offset: 16
    keen::uint32 params0; // Offset: 20
    keen::uint32 params1; // Offset: 24
    keen::float32 lodDistance; // Offset: 28
};

struct DetailScatterShaderData {
    keen::BindlessSampler scatterMapSampler; // Offset: 0
    keen::uint32 pad0; // Offset: 4
    keen::uint32 pad1; // Offset: 8
    keen::uint32 pad2; // Offset: 12
};

struct DetailScatterResource {
    keen::RenderParameterBlock shaderDataParameterBlock; // Offset: 0
    keen::RenderParameterBlock layersShaderDataParameterBlock; // Offset: 52
    keen::RenderParameterBlock modelsShaderDataParameterBlock; // Offset: 104
    keen::RenderParameterBlock modelProbabilityCutoffsShaderDataParameterBlock; // Offset: 156
    keen::BlobArray<keen::ObjectReference<keen::RenderModel>> models; // Offset: 208
    keen::float largestModelRadius; // Offset: 216
};

struct DissolveMaterialParameters {
    keen::bool enable; // Offset: 0
    keen::float32 noiseTiling; // Offset: 4
    keen::float32 noiseFadeRange; // Offset: 8
    keen::ObjectReference<keen::Image> noiseMap; // Offset: 12
    keen::bool enableEdgeGlow; // Offset: 28
    keen::float32 edgeWidth; // Offset: 32
    keen::Color edgeColor; // Offset: 36
};

struct DynamicHeightmapFillShaderParameters {
    keen::uint2 targetSize; // Offset: 0
    keen::float2 inverseTargetSize; // Offset: 8
    keen::uint2 ditherPos; // Offset: 16
    keen::int2 origin; // Offset: 24
    keen::float scale; // Offset: 32
    keen::float worldTop; // Offset: 36
};

struct DynamicHeightmapRasterizeTreesShaderParameters {
    keen::float32 scale; // Offset: 0
};

struct CollectGpuCullingTreesShaderParameters {
    keen::uint drawCountBufferOffset; // Offset: 0
    keen::uint drawCommandBufferOffset; // Offset: 4
};

struct FfxShadowDenoiserShaderParameters {
    keen::GraphicsMatrix44 inverseProjectionMatrix; // Offset: 0
    keen::GraphicsMatrix44 inverseViewProjectionMatrix; // Offset: 64
    keen::GraphicsMatrix44 reprojectionMatrix; // Offset: 128
    keen::GraphicsMatrix43 viewMatrix; // Offset: 192
    keen::float3 cameraPosition; // Offset: 240
    keen::uint2 packedSize; // Offset: 256
    keen::uint2 targetSize; // Offset: 264
    keen::float2 inverseTargetSize; // Offset: 272
    keen::uint32 isFirstFrame; // Offset: 280
    keen::uint32 pixelSize; // Offset: 284
    keen::float32 depthSigma; // Offset: 288
};

struct FfxShadowDenoiserPushConstants {
    keen::uint32 stepSize; // Offset: 0
};

struct FogMaterialParameters {
    keen::float32 absorption; // Offset: 0
    keen::Color scattering; // Offset: 4
    keen::HdrColorRgb emission; // Offset: 8
    keen::float32 density; // Offset: 24
};

struct FoliageAnimationAdvancedParameters {
    keen::float32 branchPhaseOffset; // Offset: 0
    keen::float32 detailFrequency; // Offset: 4
    keen::float32 edgeAmplitude; // Offset: 8
    keen::float32 branchAmplitude; // Offset: 12
};

struct FoliageAnimationModelParameters {
    keen::float32 assetHeightFactor; // Offset: 0
    keen::float32 globalStiffnessFactor; // Offset: 4
    keen::FoliageAnimationAdvancedParameters advancedParameters; // Offset: 8
};

struct GrassPushbackModelParameters {
    keen::float32 bounceTime; // Offset: 0
    keen::uint32 bounceCount; // Offset: 4
    keen::float32 bounceDamping; // Offset: 8
    keen::float32 strength; // Offset: 12
};

struct GrassPushbackShaderParameters {
    keen::float32 bounceDamping; // Offset: 0
    keen::float32 bounceFrequency; // Offset: 4
    keen::float32 oneOverBounceTime; // Offset: 8
    keen::float32 strength; // Offset: 12
};

struct FoliageAnimationShaderParameters {
    keen::uint32 flags; // Offset: 0
    keen::float32 precomputedBendScale; // Offset: 4
    keen::float32 globalStiffnessFactor; // Offset: 8
    keen::FoliageAnimationAdvancedParameters advancedParameters; // Offset: 12
    keen::GrassPushbackShaderParameters pushBack; // Offset: 28
};

struct GrassAnimationModelParameters {
    keen::float32 largeDisplacementWeight; // Offset: 0
    keen::float32 smallDisplacementWeight; // Offset: 4
};

struct GrassAnimationShaderParameters {
    keen::uint32 flags; // Offset: 0
    keen::float32 largeDisplacementWeight; // Offset: 4
    keen::float32 smallDisplacementWeight; // Offset: 8
    keen::float32 oneOverModelHeight; // Offset: 12
    keen::GrassPushbackShaderParameters pushBack; // Offset: 16
};

struct ForestFogFootprintMaterial {
};

struct ForestFogFootprintRenderMaterial {
};

struct RenderPushConstants2 {
    keen::uint32 drawCommandBufferOffset; // Offset: 0
    keen::uint32 isLateCullingPass; // Offset: 4
    keen::uint32 drawIndex; // Offset: 8
    keen::uint32 isRunningOnSteamDeck; // Offset: 12
};

struct VfxDrawPushConstants {
    keen::uint32 baseDrawIndex; // Offset: 0
};

struct RenderShadowPassConstants {
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 0
    keen::float3 cameraWorldPosition; // Offset: 64
    keen::float32 time; // Offset: 76
    keen::GrassMovementData grassMovement; // Offset: 80
    keen::SnowDisplacementData snowDisplacement; // Offset: 112
    keen::uint32 enableCloth; // Offset: 160
    keen::TessellatedMaterialConstants terrainTessellation; // Offset: 176
    keen::TessellatedMaterialConstants buildingTessellation; // Offset: 192
    keen::uint32 blueNoiseSizeMask; // Offset: 208
    keen::uint2 blueNoiseOffset; // Offset: 212
    keen::uint32 useStochasticMaterialSampling; // Offset: 220
    keen::uint32 isVoxelMaterialDataValid; // Offset: 224
    keen::PackedShaderWorldPositionUniform cameraPosition; // Offset: 240
    keen::GraphicsMatrix44 cameraCenteredToClipSpaceMatrix; // Offset: 256
    keen::uint32 buildingMaterialBlendingLayerCount; // Offset: 320
    keen::uint32 worldMaterialBlendingLayerCount; // Offset: 324
};

struct RenderDepthConstants {
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 0
    keen::float3 cameraWorldPosition; // Offset: 64
    keen::float32 time; // Offset: 76
    keen::float32 prevTime; // Offset: 80
    keen::GrassMovementData grassMovement; // Offset: 96
    keen::GrassMovementData grassMovementPrevious; // Offset: 128
    keen::SnowDisplacementData snowDisplacement; // Offset: 160
    keen::uint32 enableCloth; // Offset: 208
    keen::TessellatedMaterialConstants terrainTessellation; // Offset: 224
    keen::TessellatedMaterialConstants buildingTessellation; // Offset: 240
    keen::float mipBias; // Offset: 256
    keen::uint32 blueNoiseSizeMask; // Offset: 260
    keen::uint2 blueNoiseOffset; // Offset: 264
    keen::uint32 useStochasticMaterialSampling; // Offset: 272
    keen::uint32 isVoxelMaterialDataValid; // Offset: 276
    keen::float2 cancelJitter; // Offset: 280
    keen::PackedShaderWorldPositionUniform cameraPosition; // Offset: 288
    keen::PackedShaderWorldPositionUniform prevCameraPosition; // Offset: 304
    keen::GraphicsMatrix44 cameraCenteredToClipSpaceMatrix; // Offset: 320
    keen::GraphicsMatrix44 prevCameraCenteredToClipSpaceMatrix; // Offset: 384
    keen::uint32 buildingMaterialBlendingLayerCount; // Offset: 448
    keen::uint32 worldMaterialBlendingLayerCount; // Offset: 452
};

struct RenderForwardConstants {
    keen::GraphicsMatrix43 viewMatrix; // Offset: 0
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 48
    keen::GraphicsMatrix44 prevViewProjectionMatrix; // Offset: 112
    keen::GraphicsMatrix44 cameraCenteredToClipSpaceMatrix; // Offset: 176
    keen::PackedShaderWorldPositionUniform cameraPosition; // Offset: 240
    keen::float3 cameraWorldPosition; // Offset: 256
    keen::float32 time; // Offset: 268
    keen::RenderDebugConstants debugData; // Offset: 272
    keen::ForwardDirectionalLightData directionalLightData0; // Offset: 304
    keen::RenderLightFactors lightFactors; // Offset: 336
};

struct VoxelWorldShadowCascadeShaderData {
    keen::GraphicsMatrix44 worldToShadowMatrix; // Offset: 0
};

struct VoxelWorldShadowMapShaderData {
    keen::StaticArray<keen::VoxelWorldShadowCascadeShaderData,2> cascades; // Offset: 0
    keen::float2 shadowMapSize; // Offset: 128
    keen::float2 inverseShadowMapSize; // Offset: 136
    keen::uint32 isValid; // Offset: 144
};

struct RenderTransparentConstants {
    keen::GraphicsMatrix43 viewMatrix; // Offset: 0
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 48
    keen::GraphicsMatrix44 prevViewProjectionMatrix; // Offset: 112
    keen::float3 cameraWorldPosition; // Offset: 176
    keen::float32 time; // Offset: 188
    keen::RenderDebugConstants debugData; // Offset: 192
    keen::uint32 fogDisabled; // Offset: 224
    keen::uint32 shadowsDisabled; // Offset: 228
    keen::uint32 manyLightsShadowsEnabled; // Offset: 232
    keen::uint32 measureOverdraw; // Offset: 236
    keen::uint32 isFsrEnabled; // Offset: 240
    keen::RenderShadowAtlasShaderData atlasData; // Offset: 256
    keen::ForwardDirectionalLightData directionalLightData0; // Offset: 1344
    keen::VolumetricShadowRuntimeData volumetricShadowRuntimeData; // Offset: 1376
    keen::AtmosphereShaderData atmosphere; // Offset: 1616
    keen::RenderLightFactors lightFactors; // Offset: 1680
    keen::VoxelWorldShadowMapShaderData voxelWorldShadowMap; // Offset: 1712
    keen::PackedShaderWorldPositionUniform cameraPosition; // Offset: 1872
    keen::GraphicsMatrix44 cameraCenteredToClipSpaceMatrix; // Offset: 1888
};

struct RenderDebugPassConstants {
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 0
    keen::ForwardDirectionalLightData directionalLightData0; // Offset: 64
    keen::VolumetricShadowRuntimeData volumetricShadowRuntimeData; // Offset: 96
    keen::PackedShaderWorldPositionUniform cameraPosition; // Offset: 336
    keen::GraphicsMatrix44 cameraCenteredToClipSpaceMatrix; // Offset: 352
};

struct ViewSpacePositionReconstructionData {
    keen::GraphicsMatrix44 screenToTargetSpaceTransform; // Offset: 0
};

struct Fog2ViewVolumeTransform {
    keen::float32 depthRemap; // Offset: 0
    keen::float32 invDepthRemap; // Offset: 4
};

struct Fog2ViewVolumeSampleParameters {
    keen::Fog2ViewVolumeTransform transform; // Offset: 0
    keen::float3 viewVolumeSize; // Offset: 16
};

struct RenderForwardTransparentConstants {
    keen::ViewSpacePositionReconstructionData viewSpacePositionReconstructionData; // Offset: 0
    keen::Fog2ViewVolumeSampleParameters viewVolumeSampleParameters; // Offset: 64
    keen::float2 linearDepthParameters; // Offset: 96
    keen::uint32 fogFlags; // Offset: 104
};

enum class RenderModelMaterialDataType {
    Invalid = 0,
    GrassAnimation = 1,
    FoliageAnimation = 2,
};

struct Fsr3UpscalerConstants {
    keen::int2 iRenderSize; // Offset: 0
    keen::int2 iMaxRenderSize; // Offset: 8
    keen::int2 iDisplaySize; // Offset: 16
    keen::int2 iInputColorResourceDimensions; // Offset: 24
    keen::int2 iLumaMipDimensions; // Offset: 32
    keen::int iLumaMipLevelToUse; // Offset: 40
    keen::int iFrameIndex; // Offset: 44
    keen::float4 fDeviceToViewDepth; // Offset: 48
    keen::float2 fJitter; // Offset: 64
    keen::float2 fMotionVectorScale; // Offset: 72
    keen::float2 fDownscaleFactor; // Offset: 80
    keen::float2 fMotionVectorJitterCancellation; // Offset: 88
    keen::float fExposure; // Offset: 96
    keen::float fPreExposure; // Offset: 100
    keen::float fPreviousFramePreExposure; // Offset: 104
    keen::float fTanHalfFOV; // Offset: 108
    keen::float fJitterSequenceLength; // Offset: 112
    keen::float fDeltaTime; // Offset: 116
    keen::float fDynamicResChangeFactor; // Offset: 120
    keen::float fViewSpaceToMetersFactor; // Offset: 124
};

struct Fsr3UpscalerSpdConstants {
    keen::uint mips; // Offset: 0
    keen::uint numWorkGroups; // Offset: 4
    keen::uint2 workGroupOffset; // Offset: 8
    keen::uint2 renderSize; // Offset: 16
};

struct Fsr3UpscalerRcasConstants {
    keen::uint4 rcasConfig; // Offset: 0
};

enum class GiQuality {
    Performance = 0,
    Balance = 1,
    High = 2,
    Ultra = 3,
    GroundTruth = 4,
};

enum class GiProbeSize {
    PixelCount_8 = 0,
    PixelCount_16 = 1,
    PixelCount_32 = 2,
};

enum class GiIrradianceProbeSize {
    PixelCount_8 = 0,
    PixelCount_12 = 1,
    PixelCount_16 = 2,
};

enum class GiDispatchSize {
    Dispatch_3x3x3 = 0,
    Dispatch_7x7x7 = 1,
};

enum class SdfBvhVariant {
    VoxelWorld = 0,
    VoxelWorldAndModels = 1,
};

struct GiQualitySettings {
    keen::GiProbeSize radianceAndDistancePixelCount; // Offset: 0
    keen::GiIrradianceProbeSize irradiancePixelCount; // Offset: 4
    keen::uint atlasSizeX; // Offset: 8
    keen::uint atlasSizeY; // Offset: 12
    keen::uint globalRayBudget; // Offset: 16
    keen::float frustumRaysScaleUpBudgetThreshold; // Offset: 20
    keen::uint frustumMinRaysPerProbe; // Offset: 24
    keen::uint frustumIncreasedMinRaysPerProbe; // Offset: 28
    keen::uint frustumMaxProbeRayCount; // Offset: 32
    keen::uint frustumRayBatchSize; // Offset: 36
    keen::uint worldCacheRayBatchSize; // Offset: 40
    keen::uint worldCacheMinRaysPerProbe; // Offset: 44
    keen::uint worldCacheMaxProbeRayCount; // Offset: 48
    keen::uint ambientRayBatchSize; // Offset: 52
    keen::uint ambientMinRaysPerProbe; // Offset: 56
    keen::uint ambientMaxProbeRayCount; // Offset: 60
    keen::uint ambientFroxelDepthSliceCount; // Offset: 64
    keen::float frustumLightCacheStartDiameter; // Offset: 68
    keen::float worldCacheLightCacheStartDiameter; // Offset: 72
    keen::uint maxNeighboursSharingHistory; // Offset: 76
    keen::uint maxNeighboursSharingRays; // Offset: 80
    keen::GiDispatchSize neighbourCandidateDispatchSize; // Offset: 84
    keen::float fillAmbientProbeRayCountScale; // Offset: 88
    keen::bool fillAmbientProbesIteratively; // Offset: 92
    keen::uint minimumFilledRaysToAmbientProbes; // Offset: 96
    keen::uint prefilterRadianceLevelCount; // Offset: 100
    keen::float prefilterAngleScale; // Offset: 104
    keen::uint rayBinCascadeStartOffset; // Offset: 108
    keen::uint worldCacheRayBinCascadeStartOffset; // Offset: 112
    keen::SdfBvhVariant sdfBvhVariant; // Offset: 116
};

struct GiSunLightShaderData {
    keen::float3 direction0; // Offset: 0
    keen::float3 directLight0; // Offset: 16
    keen::float3 indirectLight0; // Offset: 32
    keen::float3 direction1; // Offset: 48
    keen::float3 indirectLight1; // Offset: 64
};

struct GiShadowShaderData {
    keen::RenderShadowAtlasShaderData shadowAtlas; // Offset: 0
    keen::VolumetricShadowRuntimeData volumetricShadowRuntimeData; // Offset: 1088
    keen::uint32 flags; // Offset: 1328
};

struct GiProbe {
    keen::float3 pushedOutPosition; // Offset: 0
    keen::float size; // Offset: 12
    keen::float probeDataQuality; // Offset: 16
    keen::uint32 probeRadianceSum; // Offset: 20
    keen::uint32 rayListStartIndexAndProbeState; // Offset: 24
    keen::uint32 rayListRayCountAndRequestedRayCount; // Offset: 28
};

struct GiMovingAverageEstimatorData {
    keen::float3 shortMean; // Offset: 0
    keen::float vbbr; // Offset: 12
    keen::float3 variance; // Offset: 16
    keen::float inconsistency; // Offset: 28
};

struct GiMovingAverageEstimatorDataEncoded {
    keen::uint4 data; // Offset: 0
};

enum class GiProbeType {
    FrustumProbe = 0,
    WorldCacheProbe = 1,
    AmbientProbe = 2,
    Invalid = 3,
};

enum class GiRayHitType {
    Terrain = 0,
    Building = 1,
    Sky = 2,
    Invalid = 3,
};

struct GiRayHit {
    keen::float2 octahedralNormal; // Offset: 0
    keen::uint rayHitIndex; // Offset: 8
    keen::uint materialIndex; // Offset: 12
    keen::float3 origin; // Offset: 16
    keen::uint sdfLevelAndHitTypeAndRayIndex; // Offset: 28
};

struct GiRayHitDecoded {
    keen::float3 normal; // Offset: 0
    keen::uint rayHitIndex; // Offset: 12
    keen::float3 origin; // Offset: 16
    keen::uint sdfLevel; // Offset: 28
    keen::GiRayHitType hitType; // Offset: 32
    keen::uint rayIndex; // Offset: 36
    keen::uint materialIndex; // Offset: 40
};

struct GiRayHitCounters {
    keen::uint terrainRayCount; // Offset: 0
    keen::uint buildingRayCount; // Offset: 4
    keen::uint skyRayCount; // Offset: 8
};

struct GiRayEncoded {
    keen::uint4 data; // Offset: 0
};

struct GiRayDecoded {
    keen::float3 direction; // Offset: 0
    keen::float hitDistance; // Offset: 12
    keen::float3 radiance; // Offset: 16
};

struct GiRayListData {
    keen::float3 origin; // Offset: 0
    keen::uint probeIndexAndRayCount; // Offset: 12
    keen::float3 direction; // Offset: 16
    keen::uint rayStorageIndex; // Offset: 28
};

struct GiPrepareVisualisationParameters {
    keen::float3 cameraOrigin; // Offset: 0
    keen::float3 farPlaneOrigin; // Offset: 16
    keen::float3 farPlaneX; // Offset: 32
    keen::float3 farPlaneY; // Offset: 48
    keen::uint2 outputSize; // Offset: 64
};

struct VoxelMaterialBlendingConstants {
    keen::VolumetricFogGridShaderData fogGrid; // Offset: 0
    keen::uint hasBakingData; // Offset: 496
    keen::uint hasSimpleWorldData; // Offset: 500
    keen::uint buildingMaterialCount; // Offset: 504
    keen::float exposureCorrection; // Offset: 508
};

struct LightCacheCascadeShaderData {
    keen::int3 origin; // Offset: 0
    keen::int3 scrollDelta; // Offset: 16
};

struct LightCacheLookupShaderData {
    keen::float3 gridOrigin; // Offset: 0
    keen::float cascadeCellStartDiameter; // Offset: 12
    keen::StaticArray<keen::LightCacheCascadeShaderData,12> cascades; // Offset: 16
};

struct GiVisualisationParameters {
    keen::VoxelMaterialBlendingConstants voxelMaterialBlending; // Offset: 0
    keen::AtmosphereShaderData atmosphere; // Offset: 512
    keen::GiShadowShaderData shadow; // Offset: 576
    keen::LightCacheLookupShaderData primaryLightCache; // Offset: 1920
    keen::LightCacheLookupShaderData worldCachelightCache; // Offset: 2320
    keen::WeatherSampleConstants weatherSampleConstants; // Offset: 2720
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 2848
    keen::uint2 screenSize; // Offset: 2912
    keen::float2 invScreenSize; // Offset: 2920
    keen::float3 cameraOrigin; // Offset: 2928
    keen::float lightFactorPointLights; // Offset: 2940
    keen::float3 sunDirection; // Offset: 2944
    keen::float exposure; // Offset: 2956
    keen::float exposureCorrection; // Offset: 2960
    keen::float3 farPlaneOrigin; // Offset: 2964
    keen::uint32 forceNeutralAlbedo; // Offset: 2976
    keen::float3 farPlaneX; // Offset: 2980
    keen::uint32 useWorldCache; // Offset: 2992
    keen::float3 farPlaneY; // Offset: 2996
    keen::uint32 useFrustumProbesAsWorldCache; // Offset: 3008
    keen::float3 lightFactorSun; // Offset: 3012
    keen::float lightFactorEmissive; // Offset: 3024
    keen::float3 lightFactorSky; // Offset: 3028
    keen::float lightFactorGi; // Offset: 3040
    keen::uint32 atlasSizeX; // Offset: 3044
    keen::uint32 atlasSizeY; // Offset: 3048
};

struct GiCreateProbeDrawCommandPushConstants {
    keen::uint32 vertexCount; // Offset: 0
};

struct GiProbePrefilterLevels {
    keen::uint probeSize; // Offset: 0
};

struct GiProbeVisualisationParameters {
    keen::StaticArray<keen::GiProbePrefilterLevels,8> radianceMapProbeLevels; // Offset: 0
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 128
    keen::uint sphereBandPower; // Offset: 192
    keen::float exposure; // Offset: 196
    keen::uint32 drawPixelCage; // Offset: 200
    keen::uint32 hoverProbeIndex; // Offset: 204
    keen::uint32 selectedProbeIndex; // Offset: 208
    keen::uint32 pushOutByDistance; // Offset: 212
    keen::uint32 drawIrradiance; // Offset: 216
    keen::uint32 visibleRadianceSpecularMip; // Offset: 220
    keen::uint32 atlasSizeX; // Offset: 224
    keen::uint32 atlasSizeY; // Offset: 228
    keen::uint32 debugWorldCache; // Offset: 232
    keen::float probeSizeScale; // Offset: 236
    keen::uint32 drawMovingAverageEstimatorShortMean; // Offset: 240
    keen::uint32 drawMovingAverageEstimatorVbbr; // Offset: 244
    keen::uint32 drawMovingAverageEstimatorVariance; // Offset: 248
    keen::uint32 drawMovingAverageEstimatorInconsistency; // Offset: 252
};

struct GiShootShadowRaysParameters {
    keen::float3 sunDirection; // Offset: 0
    keen::uint32 maxRayCount; // Offset: 12
    keen::uint32 drawSunShadowRayProbeIndex; // Offset: 16
};

struct GiProbeUpdateParameters {
    keen::LightCacheLookupShaderData lightCacheLookup; // Offset: 0
    keen::uint3 minMaxRayCount; // Offset: 400
    keen::uint32 maxDeleteListCount; // Offset: 412
    keen::uint32 debugEnabled; // Offset: 416
    keen::uint32 drawPushOut; // Offset: 420
    keen::uint32 framesTillProbeInactive; // Offset: 424
    keen::uint32 maxProbeCount; // Offset: 428
    keen::float probeRecycleAgeScale; // Offset: 432
    keen::float invFramesTillProbeInactive; // Offset: 436
    keen::float invFramesTillProbeQualityReached; // Offset: 440
    keen::uint32 useDirectionToOffsetProbes; // Offset: 444
};

struct LightCacheFreeEntriesConstants {
    keen::uint32 maxDeleteListCount; // Offset: 0
};

struct GiProbeShootRaysParameters {
    keen::LightCacheLookupShaderData lightCache; // Offset: 0
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 400
    keen::float2 debugScreenSizeInv; // Offset: 464
    keen::uint32 frameId; // Offset: 472
    keen::uint32 rotateRays; // Offset: 476
    keen::uint32 maxRayCount; // Offset: 480
    keen::uint32 writeOutDirection; // Offset: 484
    keen::uint32 traceBvhSdfInstances; // Offset: 488
    keen::uint32 useSortedBins; // Offset: 492
    keen::uint32 showRayBins; // Offset: 496
    keen::uint32 debugSelectedProbeIndex; // Offset: 500
    keen::uint2 debugMouseScreenPosition; // Offset: 504
    keen::uint2 rayBinDirectionIndexRange; // Offset: 512
    keen::uint rayBinCascadeStartOffset; // Offset: 520
};

struct GiProbeSortHitsParameters {
    keen::uint32 maxRayCount; // Offset: 0
};

struct GiProbeShadeHitsParameters {
    keen::VoxelMaterialBlendingConstants voxelMaterialBlending; // Offset: 0
    keen::LightCacheLookupShaderData primaryLightCache; // Offset: 512
    keen::LightCacheLookupShaderData worldCachelightCache; // Offset: 912
    keen::AtmosphereShaderData atmosphere; // Offset: 1312
    keen::GiShadowShaderData shadow; // Offset: 1376
    keen::GiSunLightShaderData sun; // Offset: 2720
    keen::WeatherSampleConstants weatherSampleConstants; // Offset: 2800
    keen::float3 sunDirection; // Offset: 2928
    keen::float lightFactorPointLights; // Offset: 2940
    keen::float3 sunColor; // Offset: 2944
    keen::uint32 maxHitCount; // Offset: 2956
    keen::float3 lightFactorSky; // Offset: 2960
    keen::float lightFactorEmissive; // Offset: 2972
    keen::uint2 debugRaysRange; // Offset: 2976
    keen::float lightFactorGi; // Offset: 2984
    keen::uint32 enablePointLights; // Offset: 2988
    keen::uint32 enablePointLightShadows; // Offset: 2992
    keen::float pointLightInfluenceScale; // Offset: 2996
    keen::uint32 traceBvhSdfInstances; // Offset: 3000
    keen::uint32 forceNeutralAlbedo; // Offset: 3004
    keen::uint32 isFogEnabled; // Offset: 3008
    keen::uint32 maxRayCount; // Offset: 3012
    keen::uint32 useWorldCache; // Offset: 3016
    keen::uint32 useFrustumProbesAsWorldCache; // Offset: 3020
    keen::float exposure; // Offset: 3024
    keen::float primaryCacheExposureCorrection; // Offset: 3028
    keen::float worldCacheExposureCorrection; // Offset: 3032
    keen::uint32 drawRaysInRange; // Offset: 3036
    keen::uint32 drawRaysProbeIndex; // Offset: 3040
    keen::uint32 atlasSizeX; // Offset: 3044
    keen::uint32 atlasSizeY; // Offset: 3048
    keen::uint32 applyWetness; // Offset: 3052
    keen::float3 cameraWorldPosition; // Offset: 3056
    keen::uint32 applySnow; // Offset: 3068
    keen::uint32 applyCloudMap; // Offset: 3072
};

struct GiRasterizeIrradianceParameters {
    keen::LightCacheLookupShaderData lightCacheLookup; // Offset: 0
    keen::StaticArray<keen::GiProbePrefilterLevels,8> radianceMapProbeLevels; // Offset: 400
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 528
    keen::GraphicsMatrix44 previousInvViewProjectionMatrix; // Offset: 592
    keen::GraphicsMatrix44 clipSpaceToCameraCenteredMatrix; // Offset: 656
    keen::GraphicsMatrix44 previousCameraCenteredToClipSpaceMatrix; // Offset: 720
    keen::float3 cameraWorldPosition; // Offset: 784
    keen::uint32 radianceMipsCount; // Offset: 796
    keen::float3 previousCameraWorldPosition; // Offset: 800
    keen::uint32 useStochasticSampling; // Offset: 812
    keen::uint2 screenSize; // Offset: 816
    keen::float2 invScreenSize; // Offset: 824
    keen::uint2 blueNoiseOffset; // Offset: 832
    keen::float previousExposureCorrection; // Offset: 840
    keen::float exposureCorrection; // Offset: 844
    keen::float2 linearDepthParameters; // Offset: 848
    keen::float exposure; // Offset: 856
    keen::uint32 useStochasticReflectedRadiance; // Offset: 860
    keen::uint32 useStochasticReflectedIrradiance; // Offset: 864
    keen::uint32 stochasticFrameId; // Offset: 868
    keen::uint32 useHistory; // Offset: 872
    keen::uint32 atlasSizeX; // Offset: 876
    keen::uint32 atlasSizeY; // Offset: 880
    keen::uint32 colorCodeReprojection; // Offset: 884
    keen::uint2 mousePos; // Offset: 888
    keen::uint32 drawPixelCage; // Offset: 896
    keen::uint32 groundTruthSpecular; // Offset: 900
    keen::uint32 writeToSceneBrightness; // Offset: 904
};

struct GiVisualizeIrradianceParameters {
    keen::uint2 screenSize; // Offset: 0
    keen::float giLightFactor; // Offset: 8
    keen::float exposure; // Offset: 12
};

struct GiProbeBlendRadianceParameters {
    keen::uint32 maxProbeCount; // Offset: 0
    keen::float previousExposureInverse; // Offset: 4
    keen::float exposure; // Offset: 8
    keen::float maxRayRadiance; // Offset: 12
    keen::float warmupProbeQualityBorderline; // Offset: 16
    keen::uint32 atlasSizeX; // Offset: 20
    keen::uint32 atlasSizeY; // Offset: 24
    keen::uint32 debugProbeIndex; // Offset: 28
    keen::float varianceGuidedRayCountThreshold; // Offset: 32
};

struct GiProbeBlendWorldCacheRadianceParameters {
    keen::uint32 maxProbeCount; // Offset: 0
    keen::float maxRayRadiance; // Offset: 4
    keen::uint32 debugProbeIndex; // Offset: 8
    keen::float previousExposureInverse; // Offset: 12
    keen::float exposure; // Offset: 16
};

struct GiBlendNeighbourRadianceProbesParameters {
    keen::LightCacheLookupShaderData lightCacheLookup; // Offset: 0
    keen::float exposure; // Offset: 400
    keen::float exposureCorrectionFactor; // Offset: 404
    keen::uint32 blendIterations; // Offset: 408
    keen::uint32 blendRaysIterations; // Offset: 412
    keen::uint32 maxProbeCount; // Offset: 416
    keen::uint32 drawNeighbourBlendProbeIndex; // Offset: 420
    keen::uint32 showBlendPixels; // Offset: 424
    keen::uint32 onlyShowDebugInfo; // Offset: 428
    keen::uint32 atlasSizeX; // Offset: 432
    keen::uint32 atlasSizeY; // Offset: 436
    keen::float allowOccludedPixelsAfterDistance; // Offset: 440
    keen::float occludedPixelsDepthBias; // Offset: 444
    keen::uint32 debugNeighbourPixelProjection; // Offset: 448
    keen::float2 debugPixelProjectionParameters; // Offset: 452
};

struct GiBlendNeighbourRadianceProbesRootConstantData {
    keen::uint randomSeed; // Offset: 0
    keen::float doNotShareProbesBelowQuality; // Offset: 4
    keen::uint blendIterations; // Offset: 8
};

struct GiProbeShadeHitsPipelineRootConstantData {
    keen::uint rayHitType; // Offset: 0
    keen::uint probeType; // Offset: 4
};

struct GiProbePrepareShadeIndirectDispatchesParameters {
    keen::uint dispatchSize; // Offset: 0
    keen::uint shadowDispatchSize; // Offset: 4
    keen::uint prepareShadowRays; // Offset: 8
};

struct GiProbePrefilterRadianceParameters {
    keen::uint2 lowResolutionSize; // Offset: 0
    keen::float2 invSourceSize; // Offset: 8
    keen::uint2 sourceSize; // Offset: 16
    keen::float invProbeSize; // Offset: 24
    keen::float invSourceProbeSize; // Offset: 28
    keen::float sampleScale; // Offset: 32
    keen::float linearEnergyScale; // Offset: 36
    keen::float cosAngleScale; // Offset: 40
    keen::uint maxProbeCount; // Offset: 44
    keen::uint atlasSizeX; // Offset: 48
    keen::uint atlasSizeY; // Offset: 52
};

struct GiProbeBlendIrradianceParameters {
    keen::uint32 maxProbeCount; // Offset: 0
    keen::float updateFromPreviousExposure; // Offset: 4
    keen::float exposure; // Offset: 8
    keen::uint32 debugProbeIndex; // Offset: 12
    keen::uint32 highlightNewProbes; // Offset: 16
    keen::uint32 atlasSizeX; // Offset: 20
    keen::uint32 atlasSizeY; // Offset: 24
};

struct GiProbeBlendDistanceParameters {
    keen::uint32 maxProbeCount; // Offset: 0
    keen::uint32 atlasSizeX; // Offset: 4
    keen::uint32 atlasSizeY; // Offset: 8
    keen::uint32 frameId; // Offset: 12
    keen::uint32 debugProbeIndex; // Offset: 16
    keen::float exposure; // Offset: 20
};

struct GiProbeDebugData {
    keen::uint isCoveringPixel; // Offset: 0
};

struct GiDebugProbeInfo {
    keen::float3 pushedOutPosition; // Offset: 0
    keen::uint probeIndex; // Offset: 12
    keen::uint3 cellCoordinate; // Offset: 16
    keen::uint cascadeIndex; // Offset: 28
    keen::uint requestedRayCount; // Offset: 32
    keen::uint rayCount; // Offset: 36
    keen::float probeQuality; // Offset: 40
    keen::uint isNew; // Offset: 44
};

struct ShSpectralCoeffs {
    keen::float4 r; // Offset: 0
    keen::float4 g; // Offset: 16
    keen::float4 b; // Offset: 32
};

struct GiPopulateRayListPrepareIndirectParameters {
    keen::uint dispatchSize; // Offset: 0
};

struct GiPopulateRayListParameters {
    keen::LightCacheLookupShaderData lightCache; // Offset: 0
    keen::uint maxRayCount; // Offset: 400
    keen::uint maxProbeCount; // Offset: 404
    keen::uint rayBatchSize; // Offset: 408
    keen::uint frameId; // Offset: 412
    keen::uint rotateRays; // Offset: 416
    keen::float randomDirectionScale; // Offset: 420
    keen::uint useUniformSamplingAfterFrames; // Offset: 424
    keen::uint validRadianceMaps; // Offset: 428
    keen::float minLuminanceSumForRayGuiding; // Offset: 432
    keen::uint sortRaysIntoBins; // Offset: 436
    keen::uint rayBinCascadeStartOffset; // Offset: 440
    keen::uint atlasSizeX; // Offset: 444
    keen::uint atlasSizeY; // Offset: 448
};

struct GiPopulateWorldCacheRayListParameters {
    keen::LightCacheLookupShaderData lightCache; // Offset: 0
    keen::uint maxRayCount; // Offset: 400
    keen::uint maxProbeCount; // Offset: 404
    keen::uint rayBatchSize; // Offset: 408
    keen::uint frameId; // Offset: 412
    keen::uint rotateRays; // Offset: 416
    keen::float randomDirectionScale; // Offset: 420
    keen::uint sortRaysIntoBins; // Offset: 424
    keen::uint rayBinCascadeStartOffset; // Offset: 428
    keen::uint atlasSizeX; // Offset: 432
    keen::uint atlasSizeY; // Offset: 436
};

struct GiCullRequestedRaysWithRayBudgetParameters {
    keen::LightCacheLookupShaderData lightCache; // Offset: 0
    keen::uint maxRaysPerProbe; // Offset: 400
    keen::uint maxRayCount; // Offset: 404
    keen::float frustumRaysScaleUpBudgetThreshold; // Offset: 408
    keen::uint rayBatchSize; // Offset: 412
    keen::uint maxProbeCount; // Offset: 416
    keen::uint debugEnabled; // Offset: 420
    keen::uint sortRaysIntoBins; // Offset: 424
    keen::uint rayBinCascadeStartOffset; // Offset: 428
};

struct GiPrepareRayBinsParameters {
    keen::uint maxProbeCount; // Offset: 0
};

struct GiCalculateBinDirectionOffsetParameters {
    keen::uint maxRayCount; // Offset: 0
};

struct GiSortRaysIntoBinsParameters {
    keen::uint maxRayCount; // Offset: 0
    keen::uint maxProbeCount; // Offset: 4
    keen::uint debugSorting; // Offset: 8
};

struct GiCullRequestedAmbientRaysWithRayBudgetParameters {
    keen::uint maxRayCount; // Offset: 0
    keen::uint maxProbeCount; // Offset: 4
    keen::uint rayBatchSize; // Offset: 8
    keen::uint debugEnabled; // Offset: 12
};

struct GiWorldCacheBlendSphericalHarmonicsIrradianceParameters {
    keen::uint maxProbeCount; // Offset: 0
    keen::uint debugEnabled; // Offset: 4
};

struct GiCleanupCacheParameters {
    keen::uint maxProbeCount; // Offset: 0
    keen::uint atlasSizeX; // Offset: 4
    keen::uint atlasSizeY; // Offset: 8
};

struct GiFillAmbientProbesParameters {
    keen::StaticArray<keen::float4,8> cascadeOriginAndSpacing; // Offset: 0
    keen::StaticArray<keen::int4,8> cascadeGridSpaceOffset; // Offset: 128
    keen::float3 referencePosition; // Offset: 256
    keen::float exposureCorrection; // Offset: 268
    keen::uint32 maxHitCount; // Offset: 272
    keen::float maxRayCountScale; // Offset: 276
    keen::uint32 minFillRayCount; // Offset: 280
    keen::uint32 useReverseRayReprojection; // Offset: 284
    keen::uint32 debugSelectedProbeIndex; // Offset: 288
    keen::uint32 debugEnabled; // Offset: 292
    keen::uint32 atlasSizeX; // Offset: 296
    keen::uint32 atlasSizeY; // Offset: 300
};

struct GiAmbientConvergeParameters {
    keen::StaticArray<keen::float4,8> cascadeOriginAndSpacing; // Offset: 0
    keen::StaticArray<keen::int4,8> cascadeGridSpaceOffset; // Offset: 128
    keen::uint32 shouldUseHistory; // Offset: 256
    keen::float hysteresis; // Offset: 260
    keen::uint minRaysPerProbe; // Offset: 264
    keen::uint maxRaysPerProbe; // Offset: 268
    keen::uint32 atlasSizeX; // Offset: 272
    keen::uint32 atlasSizeY; // Offset: 276
    keen::float previousExposureCorrection; // Offset: 280
    keen::float exposure; // Offset: 284
    keen::uint32 debugProbeHighlightEnabled; // Offset: 288
    keen::uint32 debugSelectedProbeId; // Offset: 292
    keen::uint32 debugEnabled; // Offset: 296
    keen::uint32 debugStarvingProbes; // Offset: 300
};

struct GiCalculateAmbientProbesVisibilityParameters {
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 0
    keen::GpuCullingFrustum frustum; // Offset: 64
    keen::StaticArray<keen::float4,8> cascadeOriginAndSpacing; // Offset: 160
    keen::StaticArray<keen::int4,8> lastCascadeGridSpaceOffset; // Offset: 288
    keen::StaticArray<keen::int4,8> cascadeGridSpaceOffset; // Offset: 416
    keen::float3 cameraPosition; // Offset: 544
    keen::uint32 shouldUpdateCameraVisibility; // Offset: 556
    keen::float2 linearDepthParameters; // Offset: 560
    keen::uint32 debugShowVisibilityRays; // Offset: 568
    keen::uint32 debugActiveCascade; // Offset: 572
};

struct GiAmbientProbeVisualisationParameters {
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 0
    keen::StaticArray<keen::int4,8> cascadeGridSpaceOffset; // Offset: 64
    keen::StaticArray<keen::float4,8> cascadeOriginAndSpacing; // Offset: 192
    keen::uint sphereBandPower; // Offset: 320
    keen::float exposure; // Offset: 324
    keen::uint cascadeIndex; // Offset: 328
    keen::uint debugSelectedProbeIndex; // Offset: 332
    keen::uint showVisibilityMask; // Offset: 336
    keen::uint renderConvergedTexture; // Offset: 340
    keen::uint useGridCoordinatesWithoutOffset; // Offset: 344
    keen::uint showWarmupProbes; // Offset: 348
};

struct GiAmbientDebugProbeInfo {
    keen::uint3 cellCoordinate; // Offset: 0
    keen::uint probeIndex; // Offset: 12
    keen::uint cascadeIndex; // Offset: 16
    keen::uint rayIntersectedProbeCount; // Offset: 20
};

struct GiPopulateAmbientRayListParameters {
    keen::uint maxRayCount; // Offset: 0
    keen::uint frameId; // Offset: 4
    keen::uint rotateRays; // Offset: 8
    keen::float randomDirectionScale; // Offset: 12
    keen::uint rayBatchSize; // Offset: 16
    keen::uint atlasSizeX; // Offset: 20
    keen::uint atlasSizeY; // Offset: 24
};

struct GiAmbientRayListData {
    keen::float3 origin; // Offset: 0
    keen::uint rayListStartIndex; // Offset: 12
    keen::float3 direction; // Offset: 16
    keen::uint probeRayCount; // Offset: 28
};

struct GiAmbientProbesLookupData {
    keen::StaticArray<keen::float4,8> cascadeOriginAndSpacing; // Offset: 0
    keen::StaticArray<keen::int4,8> cascadeGridSpaceOffset; // Offset: 128
    keen::StaticArray<keen::float4,8> gridSpaceReferencePosition; // Offset: 256
    keen::float3 referencePosition; // Offset: 384
};

struct GiAmbientFroxelVolumeParameters {
    keen::float3 depthRemap; // Offset: 0
    keen::uint tileSize; // Offset: 12
    keen::uint3 froxelVolumeSize; // Offset: 16
    keen::float near; // Offset: 28
    keen::float3 invFroxelVolumeSize; // Offset: 32
    keen::float far; // Offset: 44
    keen::float2 linearDepthParameters; // Offset: 48
    keen::uint2 screenSize; // Offset: 56
};

struct GiFillAmbientFroxelVolumeParameters {
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 0
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 64
    keen::GraphicsMatrix44 previousViewProjectionMatrix; // Offset: 128
    keen::GraphicsMatrix44 previousInvViewProjectionMatrix; // Offset: 192
    keen::GiAmbientProbesLookupData ambientProbeLookup; // Offset: 256
    keen::GiAmbientFroxelVolumeParameters froxelData; // Offset: 656
    keen::float3 cameraPosition; // Offset: 720
    keen::float exposure; // Offset: 732
    keen::uint2 blueNoiseOffset; // Offset: 736
    keen::float2 invScreenSize; // Offset: 744
    keen::float3 previousCameraPosition; // Offset: 752
    keen::uint historyValid; // Offset: 764
    keen::float previousToCurrentExposure; // Offset: 768
    keen::uint debugShowFroxels; // Offset: 772
    keen::uint debugDrawFroxelZIndex; // Offset: 776
    keen::uint debugColorCodeReprojection; // Offset: 780
};

struct GiProbePrepareFillRaysIndirectDispatchParameters {
    keen::uint dispatchSize; // Offset: 0
    keen::uint minimumAllowedRays; // Offset: 4
    keen::float rayCountScale; // Offset: 8
};

struct GiFillAmbientProbesWithAmbientRaysRootConstantData {
    keen::uint activeCascadeIndex; // Offset: 0
};

struct GiCalculateAmbientProbesVisibilityRootConstantData {
    keen::uint activeCascadeIndex; // Offset: 0
};

struct GiAmbientConvergeRootConstantData {
    keen::uint activeCascadeIndex; // Offset: 0
};

enum class GiDebugStep {
    UpdateFrustumProbes = 0,
    PopulateCullAndShootFrustumRays = 1,
    UpdateWorldCacheProbes = 2,
    PopulateCullAndShootWorldCacheRays = 3,
    UpdateAmbientProbes = 4,
    PopulateCullAndShootAmbientRays = 5,
    ShootPrimaryShadowRays = 6,
    ShootWorldCacheAndAmbientShadowRays = 7,
    ShadeWorldCacheRayHits = 8,
    BlendWorldCacheRadiance = 9,
    BlendWorldCacheSphericalHarmonics = 10,
    ShadePrimaryAndAmbientRayHits = 11,
    BlendFrustumRadianceAndDistance = 12,
    BlendFrustumNeighbourProbeRays = 13,
    BlendFrustumNeighbourProbes = 14,
    PrefilterFrustumRadiance = 15,
    BlendFrustumIrradiance = 16,
    RasterizeIrradianceAndReflectedRadiance = 17,
    AmbientProbeVisibility = 18,
    FillAmbientProbesWithFrustumRays = 19,
    FillAmbientProbesWithWorldCacheRays = 20,
    FillAmbientProbesWithAmbientRays = 21,
    ConvergeAmbientProbes = 22,
    GiDebugStepNone = 23,
};

enum class GiDebugProbeType {
    PrimaryProbe = 0,
    WorldCacheProbe = 1,
    AmbientProbe = 2,
};

struct GizmoMaterial {
};

struct GizmoRfxRenderMaterial {
    keen::float4 dummy; // Offset: 0
};

struct GpuCounterFillCommand {
    keen::uint32 byteOffset; // Offset: 0
    keen::uint32 value; // Offset: 4
};

struct FillBufferParameters {
    keen::uint32 commandCount; // Offset: 0
};

enum class GpuDataCacheImageStreamingState {
    Idle = 0,
    Working = 1,
    Flushing = 2,
};

struct GpuDataCacheImageStreamingMemoryBlockInfo {
    keen::uint64 sizeInBytes; // Offset: 0
};

struct GpuDataCacheMemoryRangeInfo {
    keen::uint8 blockIndex; // Offset: 0
    keen::uint64 offset; // Offset: 8
    keen::uint64 size; // Offset: 16
};

enum class GpuImageStreamingDataLoadingState {
    Idle = 0,
    Scheduled = 1,
    CreateHighResTexture = 2,
    AllocateUploadMemory = 3,
    StartContentLoad = 4,
    WaitForContentLoad = 5,
    StartUploadMemoryTransfer = 6,
    WaitForUploadMemoryTransfer = 7,
    WriteDescriptorSet = 8,
    WaitForPendingFrames = 9,
};

struct GpuDataCacheImageStreamingImageInfo {
    keen::uint32 handle; // Offset: 0
    keen::string name; // Offset: 4
    keen::TextureType type; // Offset: 12
    keen::PixelFormat format; // Offset: 13
    keen::ContentHash content; // Offset: 16
    keen::uint3 originalSize; // Offset: 32
    keen::uint8 mipTailStartLevel; // Offset: 44
    keen::float32 requiredLevel; // Offset: 48
    keen::uint8 currentLevel; // Offset: 52
    keen::uint32 sampledLevelsMask; // Offset: 56
    keen::GpuImageStreamingDataLoadingState state; // Offset: 60
    keen::GpuDataCacheMemoryRangeInfo memoryRange; // Offset: 64
    keen::GpuDataCacheMemoryRangeInfo loadingMemoryRange; // Offset: 88
    keen::uint64 estimatedRequiredMemorySize; // Offset: 112
    keen::uint64 actualRequiredMemorySize; // Offset: 120
};

enum class ImageStreamingAlgorithm {
    ForceUnload = 0,
    ForceFullResolution = 1,
    ForceIdealSolution = 2,
    BudgetAware = 3,
};

struct GpuDataCacheImageStreamingStateMessage {
    keen::GpuDataCacheImageStreamingState state; // Offset: 0
    keen::bool isSamplerFeedbackResetEnabled; // Offset: 1
    keen::uint64 currentUploadBudget; // Offset: 8
    keen::uint64 uploadBudget; // Offset: 16
    keen::ImageStreamingAlgorithm algorithm; // Offset: 24
    keen::BlobArray<keen::GpuDataCacheImageStreamingMemoryBlockInfo> memoryBlocks; // Offset: 28
    keen::uint64 totalMemorySize; // Offset: 40
    keen::uint64 allocatedMemorySize; // Offset: 48
    keen::uint64 loadingMemorySize; // Offset: 56
    keen::BlobArray<keen::GpuDataCacheImageStreamingImageInfo> images; // Offset: 64
    keen::uint64 estimatedWorkingSetSize; // Offset: 72
    keen::uint64 actualWorkingSetSize; // Offset: 80
};

struct GpuDataCacheSetSamplerFeedbackResetMessage {
    keen::bool enableReset; // Offset: 0
};

struct GpuDataCacheSetImageStreamingAlgorithmMessage {
    keen::ImageStreamingAlgorithm algorithm; // Offset: 0
};

struct GpuDataCacheFlushImageStreamingMemoryMessage {
};

struct GpuDebugRendererVertex {
    keen::float3 position; // Offset: 0
    keen::uint32 color; // Offset: 12
};

enum class GpuDebugRendererContextCounter {
    Lines = 0,
};

struct GpuDebugRendererContextState {
    keen::uint32 lineCounterOffset; // Offset: 0
    keen::uint32 maxLineCount; // Offset: 4
};

struct GpuDebugRendererDrawParameters {
    keen::GraphicsMatrix44 mvp; // Offset: 0
};

struct GpuModel {
    keen::uint32 nodeModelIndex0; // Offset: 0
    keen::uint32 nodeModelIndex1; // Offset: 4
    keen::uint32 nodeModelIndex2; // Offset: 8
    keen::uint32 nodeModelIndex3; // Offset: 12
    keen::uint32 nodeModelIndex4; // Offset: 16
    keen::uint32 nodeModelIndex5; // Offset: 20
};

struct GrassMovementUpdateParameters {
    keen::uint2 textureSize; // Offset: 0
    keen::uint lastTextureId; // Offset: 8
    keen::uint bodyCounterOffset; // Offset: 12
    keen::float2 size; // Offset: 16
    keen::float2 oneOverSize; // Offset: 24
    keen::PackedShaderWorldPositionUniform currentOrigin; // Offset: 32
    keen::float historyStrength; // Offset: 48
    keen::PackedShaderWorldPositionUniform lastOrigin; // Offset: 64
    keen::float deltaTime; // Offset: 80
    keen::float2 oneOverTextureSize; // Offset: 84
};

struct GrassMovementBody {
    keen::uint3 packedPosition; // Offset: 0
    keen::float outerRadius; // Offset: 12
    keen::float innerRadius; // Offset: 16
    keen::float strength; // Offset: 20
};

struct GridMaterial {
    keen::float32 lineSize; // Offset: 0
    keen::float32 axisSize; // Offset: 4
    keen::Color color0; // Offset: 8
    keen::Color color1; // Offset: 12
};

struct GridRfxRenderMaterial {
    keen::float32 axisSize; // Offset: 0
    keen::float32 lineSize; // Offset: 4
    keen::float4 color0; // Offset: 8
    keen::float4 color1; // Offset: 24
};

struct VfxGridMaterial {
    keen::float32 cellSize; // Offset: 0
    keen::Color color; // Offset: 4
};

struct VfxGridRfxRenderMaterial {
    keen::float3 color; // Offset: 0
    keen::float32 invCellSize; // Offset: 12
};

enum class IblSourceType {
    LatLong = 0,
    Cubemap = 1,
};

struct Ibl {
    keen::IblSourceType sourceType; // Offset: 0
    keen::uint16 diffuseOutputSize; // Offset: 2
    keen::uint16 diffuseSampleCount; // Offset: 4
    keen::uint16 specularSampleCount; // Offset: 6
};

struct IblResource {
    keen::uint16 diffuseSize; // Offset: 0
    keen::ContentHash diffuseData; // Offset: 4
    keen::uint16 specularSize; // Offset: 20
    keen::uint8 specularLevelCount; // Offset: 22
    keen::ContentHash specularData; // Offset: 24
};

struct SpecularIblLutResource {
    keen::uint16 size; // Offset: 0
    keen::uint8 levelCount; // Offset: 2
    keen::ContentHash content; // Offset: 4
};

struct CreateDispatchArgsShaderData {
    keen::uint targetThreadGroupSize; // Offset: 0
    keen::uint targetBufferOffset; // Offset: 4
    keen::uint threadCountOffsetX; // Offset: 8
    keen::uint threadCountPerSourceCount; // Offset: 12
};

struct LightCacheFrustumTestShaderParameters {
    keen::float3 cellCenter; // Offset: 0
    keen::float32 cellSize; // Offset: 12
    keen::float3 sunDirection; // Offset: 16
};

struct LightCacheFrustumTestShaderResult {
    keen::StaticArray<keen::float4,9> planes; // Offset: 0
    keen::uint32 hits; // Offset: 144
};

struct LightCacheCounters {
    keen::uint32 allocationCount; // Offset: 0
    keen::uint32 maxAllocationCount; // Offset: 4
    keen::uint32 freeListIndex; // Offset: 8
    keen::uint32 visibleCount; // Offset: 12
    keen::uint32 deleteCount; // Offset: 16
};

struct LightCacheAllocateGiProbeParameters {
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 0
    keen::LightCacheLookupShaderData lightCache; // Offset: 64
    keen::uint2 screenSize; // Offset: 464
    keen::float2 invScreenSize; // Offset: 472
    keen::float3 cameraPosition; // Offset: 480
    keen::uint32 frameId; // Offset: 492
    keen::uint2 blueNoiseOffset; // Offset: 496
    keen::uint32 allocateDownsample; // Offset: 504
    keen::uint cascadeCellCount; // Offset: 508
    keen::uint2 mousePosition; // Offset: 512
    keen::uint showCascadeTransitions; // Offset: 520
};

struct LightCachePrepareAllocateParameters {
    keen::uint32 maxEntryCount; // Offset: 0
};

struct LightCachePrepareEntriesParameters {
    keen::uint32 entryCount; // Offset: 0
};

struct LightCacheRecycleEntriesParameters {
    keen::uint32 maxEntryCount; // Offset: 0
    keen::float entryRecycleAgeScale; // Offset: 4
};

struct LightCacheAllocateEntriesParameters {
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 0
    keen::LightCacheLookupShaderData lightCache; // Offset: 64
    keen::uint2 screenSize; // Offset: 464
    keen::float2 invScreenSize; // Offset: 472
    keen::uint32 allocateDownsample; // Offset: 480
    keen::uint32 frameId; // Offset: 484
    keen::uint32 cascadeCellCount; // Offset: 488
};

struct LightCacheAllocateEntriesAtPositionsParameters {
    keen::LightCacheLookupShaderData lightCache; // Offset: 0
    keen::LightCacheLookupShaderData primaryLightCache; // Offset: 400
    keen::float maxRange; // Offset: 800
    keen::uint32 useDirectionBuffer; // Offset: 804
    keen::uint32 usePrimaryCache; // Offset: 808
    keen::uint32 maxEntryCount; // Offset: 812
    keen::float3 cameraPosition; // Offset: 816
    keen::uint32 minCascade; // Offset: 828
};

struct LightCacheScrollCascadesParameters {
    keen::LightCacheLookupShaderData lightCache; // Offset: 0
};

struct LightCacheDebugParameters {
    keen::ViewSpacePositionReconstructionData worldSpaceReconstructionData; // Offset: 0
    keen::uint2 screenSize; // Offset: 64
    keen::LightCacheLookupShaderData lightCache; // Offset: 80
    keen::uint32 totalCellCount; // Offset: 480
    keen::uint32 frameId; // Offset: 484
};

struct LightCacheLightCullingIndirectCounter {
    keen::uint activeLightCount; // Offset: 0
    keen::uint lightCount; // Offset: 4
    keen::uint lightCacheLightListOffset; // Offset: 8
    keen::uint lightCacheEntryCount; // Offset: 12
};

struct LightCacheLightCullingUniformBuffer {
    keen::LightCacheLookupShaderData lightCacheLookup; // Offset: 0
    keen::uint lightCountOffset; // Offset: 400
    keen::uint maxLightCount; // Offset: 404
    keen::uint maxLightCacheEntries; // Offset: 408
    keen::uint lightCacheEntries; // Offset: 412
};

struct LightCacheLightCullingResultUniformBuffer {
    keen::LightCacheLookupShaderData lightCacheLookup; // Offset: 0
    keen::uint lightCacheDataEntryCount; // Offset: 400
};

struct LightCacheLightCullingDebugParameters {
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 0
    keen::uint2 targetSize; // Offset: 64
    keen::float2 invTargetSize; // Offset: 72
    keen::LightCacheLookupShaderData lightCache; // Offset: 80
};

enum class ManyLightsShadowsQuality {
    UltraPerformance = 0,
    Performance = 1,
    High = 2,
    Ultra = 3,
};

struct ManyLightsShadowsQualitySettings {
    keen::uint atlasSizeX; // Offset: 0
    keen::uint atlasSizeY; // Offset: 4
    keen::uint shadowAtlasTextureSize; // Offset: 8
    keen::float shadowMapBias; // Offset: 12
    keen::float shadowMapNormalBias; // Offset: 16
    keen::float gaussianScale; // Offset: 20
    keen::float exponentialShadowConstantX; // Offset: 24
    keen::float exponentialShadowConstantY; // Offset: 28
    keen::SdfBvhVariant sdfBvhVariant; // Offset: 32
};

struct ManyLightsShadowsIndirectCounter {
    keen::uint activeLightCount; // Offset: 0
    keen::uint lightCount; // Offset: 4
};

struct ManyLightsShadowsIndirectArgument {
    keen::uint3 updateShadowAtlas; // Offset: 0
    keen::uint3 updateLightCache; // Offset: 12
    keen::uint3 activeLight32; // Offset: 24
    keen::uint3 atlasBorders; // Offset: 36
};

struct ManyLightsPackedSdfShaderData {
    keen::float4 sphere; // Offset: 0
    keen::uint modelPartIndex; // Offset: 16
    keen::uint instancePartIndex; // Offset: 20
};

struct ManyLightsShadowsAtlasParameters {
    keen::uint2 atlasSize; // Offset: 0
    keen::uint atlasMaxEntries; // Offset: 8
    keen::uint atlasHashMapSize; // Offset: 12
    keen::uint atlasElementSize; // Offset: 16
    keen::uint atlasElementTexelCount; // Offset: 20
    keen::uint atlasElementBorder; // Offset: 24
    keen::float2 atlasExponentialShadowConstant; // Offset: 32
    keen::float2 atlasExponentialShadowChebyshevConstants; // Offset: 40
    keen::float atlasNormalBias; // Offset: 48
    keen::float atlasShadowMapBias; // Offset: 52
};

struct ManyLightsShadowsUniformBuffer {
    keen::GraphicsMatrix44 invViewProj; // Offset: 0
    keen::GraphicsMatrix43 viewMatrix; // Offset: 64
    keen::uint2 bufferDimensions; // Offset: 112
    keen::float2 invBufferDimensions; // Offset: 120
    keen::uint frameId; // Offset: 128
    keen::uint lightCount; // Offset: 132
    keen::uint maxLightCount; // Offset: 136
    keen::float gaussianBlurScale; // Offset: 140
    keen::uint enableOcclusionCulling; // Offset: 144
    keen::GpuOcclusionCullingShaderData occlusionCulling; // Offset: 160
    keen::ManyLightsShadowsAtlasParameters atlasParameters; // Offset: 224
    keen::uint2 mousePosition; // Offset: 288
    keen::uint outputUseNDotL; // Offset: 296
    keen::uint outputDrawCellBoxes; // Offset: 300
    keen::uint outputShowLightPosition; // Offset: 304
    keen::uint showLighWithRealSize; // Offset: 308
    keen::float sizeOfDebugSphere; // Offset: 312
};

struct ManyLightsShadowsResultUniformBuffer {
    keen::uint enabled; // Offset: 0
    keen::ManyLightsShadowsAtlasParameters atlasParameters; // Offset: 16
    keen::uint showLightInfluence; // Offset: 80
    keen::uint useAtlasSampler; // Offset: 84
    keen::uint useAtlasBias; // Offset: 88
};

struct ManyLightsGatherSdfShaderParameters {
    keen::uint sdfInstanceCount; // Offset: 0
};

struct GaussianRootConstantData {
    keen::uint2 blurVector; // Offset: 0
};

typedef keen::ObjectReference<keen::Material> MaterialReference;

enum class ModelType {
    Static = 0,
    Skinned = 1,
};

enum class ModelTangentSpaceType {
    Keen = 0,
    Unity3D = 1,
    Mikk = 2,
};

struct ModelMaterialMapEntry {
    keen::string name; // Offset: 0
    keen::MaterialReference material; // Offset: 8
};

typedef keen::ObjectReference<keen::BlendShapeId> ModelBlendShapeIdReference;

struct ModelBlendShapeIdDirectory {
};

struct ModelBlendShapeMapEntry {
    keen::string name; // Offset: 0
    keen::ModelBlendShapeIdReference id; // Offset: 8
};

struct ModelConverterBlendShapeNames {
    keen::BlobArray<keen::string> names; // Offset: 0
    keen::BlobArray<keen::string> selection; // Offset: 8
    keen::BlobArray<keen::Guid> ids; // Offset: 16
};

struct ModelLodGenerationParameters {
    keen::uint32 maxLod; // Offset: 0
    keen::float32 triangleReductionPerStep; // Offset: 4
    keen::float32 maxErrorPerStep; // Offset: 8
};

struct ModelDisplacementOverrides {
    keen::float32 displacementScale; // Offset: 0
    keen::float32 displacementOffset; // Offset: 4
};

struct ModelClothColliderSphere {
    keen::float3 position; // Offset: 0
    keen::float32 radius; // Offset: 12
};

struct ModelClothColliderSphereInstance {
    keen::uint32 instanceIndex; // Offset: 16
};

struct ModelClothColliderCapsule {
    keen::ModelClothColliderSphere sphere0; // Offset: 0
    keen::ModelClothColliderSphere sphere1; // Offset: 16
};

struct ModelClothColliderCapsuleInstance {
    keen::uint32 instanceIndex; // Offset: 32
};

struct ClothCollider {
    keen::ObjectReference<keen::ModelHierarchy> hierarchy; // Offset: 0
};

struct ModelClothSleeveCapsuleCollider {
    keen::string upperBoneName; // Offset: 32
    keen::string lowerBoneName; // Offset: 40
    keen::uint32 instanceIndex; // Offset: 48
};

struct ModelChain {
    keen::string rootBoneName; // Offset: 0
    keen::bool propagateRotation; // Offset: 8
    keen::float32 gravity; // Offset: 12
    keen::float32 mass; // Offset: 16
    keen::float32 dragCoefficient; // Offset: 20
    keen::float32 liftCoefficient; // Offset: 24
    keen::float32 stiffnessFrequencey; // Offset: 28
    keen::float32 damping; // Offset: 32
    keen::float32 motionConstraintRadius; // Offset: 36
    keen::float32 linearInertia; // Offset: 40
    keen::float32 angularInertia; // Offset: 44
    keen::float32 centrifugalInertia; // Offset: 48
    keen::float32 phasesStiffness; // Offset: 52
    keen::float32 phasesStiffnessMultiplier; // Offset: 56
    keen::float32 phasesCompressionLimit; // Offset: 60
    keen::float32 phasesStretchLimit; // Offset: 64
    keen::float32 collisionFriction; // Offset: 68
};

struct ModelChainBundle {
};

enum class ModelModelChainBoneConstraintAxis {
    XAxis = 0,
    YAxis = 1,
    ZAxis = 2,
};

struct ModelChainBoneConstraint {
    keen::string boneName; // Offset: 0
    keen::ModelModelChainBoneConstraintAxis axis; // Offset: 8
    keen::float32 minAngle; // Offset: 12
    keen::float32 maxAngle; // Offset: 16
};

struct ModelClothColliderBoneAttachment {
    keen::string boneName; // Offset: 0
    keen::float32 weight; // Offset: 8
};

struct ModelMaterial {
    keen::string name; // Offset: 0
    keen::MaterialReference material; // Offset: 8
};

struct ModelBlendshape {
    keen::string name; // Offset: 0
    keen::ModelBlendShapeIdReference id; // Offset: 8
};

struct ModelClothColliderContainer {
};

struct Model {
    keen::ObjectReference<keen::ModelHierarchy> hierarchy; // Offset: 0
    keen::string export_node; // Offset: 16
    keen::float32 scale; // Offset: 24
    keen::float32 k3dScale; // Offset: 28
    keen::bool create_backfaces; // Offset: 32
    keen::bool support_raytracing; // Offset: 33
    keen::string raytrace_node_name; // Offset: 36
    keen::bool rotateY; // Offset: 44
    keen::float32 lodValue; // Offset: 48
    keen::ModelLodGenerationParameters generatedLods; // Offset: 52
    keen::bool ignoreClothCollider; // Offset: 64
    keen::bool enableCardClusterLod; // Offset: 65
    keen::uint64 cardClusterVersion; // Offset: 72
    keen::bool enableGrassAnimation; // Offset: 80
    keen::GrassAnimationModelParameters grassAnimation; // Offset: 84
    keen::bool enableGrassPushback; // Offset: 92
    keen::GrassPushbackModelParameters grassPushback; // Offset: 96
    keen::bool enableSdf; // Offset: 112
};

struct CardClusterInfo {
    keen::bool isValid; // Offset: 0
    keen::RenderTexture albedoMap; // Offset: 4
    keen::RenderTexture materialParamsMap; // Offset: 40
    keen::RenderTexture normalMap; // Offset: 76
    keen::RenderTexture opacityMap; // Offset: 112
    keen::float32 texCoord0Delta; // Offset: 148
    keen::uint32 vertexCount; // Offset: 152
    keen::uint32 indexCount; // Offset: 156
    keen::ContentHash vertexBufferHash; // Offset: 160
    keen::ContentHash indexBufferHash; // Offset: 176
    keen::AxisAlignedBox aabb; // Offset: 192
    keen::Sphere boundingSphere; // Offset: 224
};

struct ColorGradient {
    keen::ObjectReference<keen::Image> image; // Offset: 0
};

struct ShaderModelChunkMesh {
    keen::float3 positionScale; // Offset: 0
    keen::uint32 materialIndex; // Offset: 12
    keen::float3 positionOffset; // Offset: 16
    keen::uint32 indexOffset; // Offset: 28
    keen::uint32 vertexOffset; // Offset: 32
    keen::uint32 indexCount; // Offset: 36
};

struct ShaderModelChunkPipelineIndex {
    keen::uint32 index; // Offset: 0
};

struct ShaderModelChunkModelMesh {
    keen::uint32 meshIndex; // Offset: 0
    keen::StaticArray<keen::ShaderModelChunkPipelineIndex,3> pipelineIndices; // Offset: 4
};

struct ShaderModelChunkModel {
    keen::float4 boundingSphere; // Offset: 0
    keen::StaticArray<keen::ShaderModelChunkModelMesh,2> meshes; // Offset: 16
    keen::uint32 meshCount; // Offset: 48
    keen::uint32 modelSizeFeedbackIndex; // Offset: 52
};

struct ShaderModelChunkSubView {
    keen::uint flags; // Offset: 0
    keen::float3 exclusionCircle; // Offset: 4
    keen::float minObjectSize; // Offset: 16
    keen::PackedShaderWorldPositionUniform cameraPosition; // Offset: 32
    keen::GraphicsMatrix43 cameraCenteredToViewMatrix; // Offset: 48
    keen::GpuCullingFrustum cameraCenteredFrustum; // Offset: 96
    keen::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 192
};

struct ShaderModelChunkPassConstants {
    keen::uint32 subViewIndex; // Offset: 0
    keen::uint32 passType; // Offset: 4
};

struct ShaderModelChunkInstanceCullingShaderParameters {
    keen::StaticArray<keen::ShaderModelChunkSubView,9> subViews; // Offset: 0
    keen::StaticArray<keen::ShaderModelChunkPassConstants,10> passes; // Offset: 2304
    keen::uint32 subViewCount; // Offset: 2464
    keen::uint32 passCount; // Offset: 2468
    keen::uint32 maxDrawCount; // Offset: 2472
    keen::uint32 maxMeshCount; // Offset: 2476
    keen::float distanceCullingThreshold; // Offset: 2480
    keen::float distanceCullingJitterFactor; // Offset: 2484
    keen::float modelSizeFeedbackPixelSize; // Offset: 2488
    keen::uint smallObjectCulling; // Offset: 2492
    keen::uint writeForestFogFootprints; // Offset: 2496
};

enum class ModelChunkType {
    Deco = 0,
    Distant = 1,
    EditorModels = 2,
};

struct ShaderModelChunk {
    keen::float4 boundingSphere; // Offset: 0
    keen::PackedShaderWorldPositionUniform worldOrigin; // Offset: 16
    keen::float3 extents; // Offset: 32
    keen::float scale; // Offset: 44
    keen::float4 orientation; // Offset: 48
    keen::PackedShaderWorldTransform transform; // Offset: 64
    keen::uint32 instanceOffset; // Offset: 96
    keen::uint32 instanceCount; // Offset: 100
    keen::ModelChunkType type; // Offset: 104
};

struct ShaderModelChunkInstance {
    keen::uint32 packedPosition; // Offset: 0
    keen::uint32 packedOrientation; // Offset: 4
    keen::uint32 packedScaleModelIndex; // Offset: 8
};

struct ShaderModelChunkCandidate {
    keen::uint32 chunkIndex; // Offset: 0
    keen::uint32 visibilityMask; // Offset: 4
};

struct ShaderModelChunkCullingShaderParameters {
    keen::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 0
    keen::PackedShaderWorldPositionUniform cameraPosition; // Offset: 64
    keen::GraphicsMatrix43 cameraCenteredToViewMatrix; // Offset: 80
    keen::uint candidateCount; // Offset: 128
};

struct ShaderModelChunkInstanceCullingPushConstants {
    keen::uint chunkCandidateIndex; // Offset: 0
};

struct ShaderModelChunkDrawData {
    keen::float3 positionScale; // Offset: 0
    keen::uint materialIndex; // Offset: 12
    keen::float3 positionOffset; // Offset: 16
};

struct ShaderModelChunkDraw {
    keen::uint packedChunkIndexAndMeshCounterIndex; // Offset: 0
    keen::uint instanceIndex; // Offset: 4
};

struct ShaderModelChunkRenderInstance {
    keen::float3 cameraRelativePosition; // Offset: 0
    keen::float scale; // Offset: 12
    keen::float4 orientation; // Offset: 16
};

struct ShaderModelChunkPushConstant {
    keen::uint baseDrawIndex; // Offset: 0
    keen::uint isRunningOnSteamDeck; // Offset: 4
};

struct ShaderModelChunkWriteDrawCommandsPushConstants {
    keen::uint batchIndex; // Offset: 0
    keen::uint maxMeshCount; // Offset: 4
};

struct ShaderModelChunkWriteInstanceDataConstants {
    keen::PackedShaderWorldPositionUniform cameraPosition; // Offset: 0
};

struct ShaderModelChunkBatchPrepareShaderParameters {
    keen::uint groupSize; // Offset: 0
};

struct MotionVectorsShaderParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::float2 cancelJitter; // Offset: 16
    keen::GraphicsMatrix44 prevViewProjectionMatrix; // Offset: 32
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 96
};

struct MotionVectorsDebugShaderParameters {
    keen::uint2 targetSize; // Offset: 0
    keen::float2 inverseTargetSize; // Offset: 8
};

struct FFX_ParallelSortCB {
    keen::uint NumKeys; // Offset: 0
    keen::int NumBlocksPerThreadGroup; // Offset: 4
    keen::uint NumThreadGroups; // Offset: 8
    keen::uint NumThreadGroupsWithAdditionalBlocks; // Offset: 12
    keen::uint NumReduceThreadgroupPerBin; // Offset: 16
    keen::uint NumScanValues; // Offset: 20
    keen::uint _pad0; // Offset: 24
    keen::uint _pad1; // Offset: 28
};

struct KEEN_VFX_ParallelSortData {
    keen::float highSortKey; // Offset: 0
    keen::float lowSortKey; // Offset: 4
    keen::uint instanceIndex; // Offset: 8
    keen::uint _pad; // Offset: 12
};

struct FFX_SetupIndirectCB {
    keen::uint NumKeysCounterByteOffset; // Offset: 0
    keen::uint MaxNumKeys; // Offset: 4
    keen::uint MaxThreadGroups; // Offset: 8
};

struct FFX_RootConstantData {
    keen::uint CShiftBit; // Offset: 0
};

struct PbrMaterialScalarValue {
    keen::float32 value; // Offset: 0
    keen::ObjectReference<keen::Image> image; // Offset: 4
};

struct PbrMaterialColorValue {
    keen::Color value; // Offset: 0
    keen::ObjectReference<keen::Image> image; // Offset: 4
};

struct PbrMaterialParameters {
    keen::PbrMaterialColorValue emissive; // Offset: 0
    keen::float32 emissiveMapIntensity; // Offset: 20
    keen::float32 emissiveExposureCorrectionFactor; // Offset: 24
    keen::float32 emissiveGiFactor; // Offset: 28
    keen::PbrMaterialColorValue albedo; // Offset: 32
    keen::PbrMaterialScalarValue metallic; // Offset: 52
    keen::PbrMaterialScalarValue roughness; // Offset: 72
    keen::PbrMaterialScalarValue reflectance; // Offset: 92
    keen::ObjectReference<keen::Image> normal; // Offset: 112
    keen::ObjectReference<keen::Image> height; // Offset: 128
    keen::ObjectReference<keen::Image> ao; // Offset: 144
    keen::bool enableLavaShader; // Offset: 160
    keen::ObjectReference<keen::Image> distortionMap; // Offset: 164
    keen::ObjectReference<keen::Image> lightningMap; // Offset: 180
    keen::ObjectReference<keen::Image> gradientMap; // Offset: 196
    keen::float32 distortionMapScale; // Offset: 212
    keen::float32 distortionMapSpeed; // Offset: 216
    keen::float32 distortionMapIntensity; // Offset: 220
    keen::float32 lightningMapScrollSpeed; // Offset: 224
    keen::float32 lightningMapIntensity; // Offset: 228
};

enum class VertexColorChannelRgb {
    RGB = 0,
    Red = 1,
    Green = 2,
    Blue = 3,
    Alpha = 4,
};

struct PbrMaterialTintLayer {
    keen::bool enable; // Offset: 0
    keen::ObjectReference<keen::Image> maskMap; // Offset: 4
};

enum class RenderSamplerAddressMode {
    Wrap = 0,
    Mirror = 1,
    Clamp = 2,
    ClampToZero = 3,
};

struct PbrMaterialLayer {
    keen::ObjectReference<keen::Image> emissiveMap; // Offset: 0
    keen::ObjectReference<keen::Image> albedoMap; // Offset: 16
    keen::ObjectReference<keen::Image> metallicMap; // Offset: 32
    keen::ObjectReference<keen::Image> roughnessMap; // Offset: 48
    keen::ObjectReference<keen::Image> reflectanceMap; // Offset: 64
    keen::ObjectReference<keen::Image> normalMap; // Offset: 80
    keen::ObjectReference<keen::Image> heightMap; // Offset: 96
    keen::ObjectReference<keen::Image> aoMap; // Offset: 112
    keen::ObjectReference<keen::Image> opacityMap; // Offset: 128
    keen::StaticArray<keen::PbrMaterialTintLayer,3> albedoTint; // Offset: 144
    keen::uint8 uvSet; // Offset: 204
    keen::float32 uvScaling; // Offset: 208
    keen::bool uvScalingYEnable; // Offset: 212
    keen::float32 uvScalingY; // Offset: 216
    keen::RenderSamplerAddressMode addressModeU; // Offset: 220
    keen::RenderSamplerAddressMode addressModeV; // Offset: 221
    keen::float32 heightBias; // Offset: 224
    keen::bool enableAnisotropy; // Offset: 228
    keen::ObjectReference<keen::Image> anisotropicDirectionMap; // Offset: 232
    keen::float32 anisotropy; // Offset: 248
    keen::bool maskAnisotropy; // Offset: 252
    keen::float32 emissiveMapIntensity; // Offset: 256
    keen::float32 emissiveExposureCorrectionFactor; // Offset: 260
    keen::float32 emissiveGiFactor; // Offset: 264
};

enum class PbrMaterialBlendMode {
    None = 0,
    VertexValue = 1,
    LocalBlendMap = 2,
};

struct PbrMaterialBlendVertexValue {
    keen::VertexColorChannel blendLayer1Channel; // Offset: 0
};

struct PbrMaterialBlendMap {
    keen::ObjectReference<keen::Image> map; // Offset: 0
    keen::RenderSamplerAddressMode addressModeU; // Offset: 16
    keen::RenderSamplerAddressMode addressModeV; // Offset: 17
    keen::uint8 uvSet; // Offset: 18
    keen::float32 uvScaling; // Offset: 20
    keen::bool uvScalingYEnable; // Offset: 24
    keen::float32 uvScalingY; // Offset: 28
};

struct PbrMaterialOverlayNormalMap {
    keen::ObjectReference<keen::Image> normalMap; // Offset: 0
    keen::ObjectReference<keen::Image> aoMap; // Offset: 16
    keen::RenderSamplerAddressMode addressModeU; // Offset: 32
    keen::RenderSamplerAddressMode addressModeV; // Offset: 33
    keen::uint8 uvSet; // Offset: 34
    keen::float32 uvScaling; // Offset: 36
    keen::bool uvScalingYEnable; // Offset: 40
    keen::float32 uvScalingY; // Offset: 44
    keen::bool useVertexColorChannelWeight; // Offset: 48
    keen::VertexColorChannel vertexColorChannel; // Offset: 49
};

struct PbrTranslucency {
    keen::float32 strength; // Offset: 0
    keen::ObjectReference<keen::Image> thicknessMap; // Offset: 4
    keen::Color color; // Offset: 20
    keen::float viewDependency; // Offset: 24
    keen::float wrapShadingStrength; // Offset: 28
};

struct PbrMaterial {
    keen::BlobArray<keen::PbrMaterialLayer> blendLayers; // Offset: 0
    keen::PbrMaterialBlendMode blendMode; // Offset: 8
    keen::PbrMaterialBlendVertexValue blendVertexVertexValue; // Offset: 9
    keen::PbrMaterialBlendMap blendMap; // Offset: 12
    keen::PbrMaterialOverlayNormalMap overlayNormalLayer; // Offset: 44
    keen::bool multiplyEmissiveByVertexColor; // Offset: 96
    keen::VertexColorChannelRgb multiplyEmissiveVertexColorChannel; // Offset: 97
    keen::bool multiplyAlbedoByVertexColor; // Offset: 98
    keen::VertexColorChannelRgb multiplyAlbedoVertexColorChannel; // Offset: 99
    keen::bool multiplyAoByVertexColorChannel; // Offset: 100
    keen::VertexColorChannel multiplyAoVertexColorChannel; // Offset: 101
    keen::bool multiplyAlphaByVertexAlpha; // Offset: 102
    keen::PbrTranslucency translucency; // Offset: 104
    keen::bool enableGiWrapShading; // Offset: 136
    keen::bool adjustGiNormals; // Offset: 137
    keen::bool enableGiSpecular; // Offset: 138
    keen::bool enableBackfaceCulling; // Offset: 139
    keen::bool useFlippedBackfaceNormals; // Offset: 140
    keen::bool enableAlphaBlending; // Offset: 141
    keen::bool enableAlphaTest; // Offset: 142
    keen::bool enableShadowAlphaTest; // Offset: 143
    keen::bool enableHashedAlphaTest; // Offset: 144
    keen::bool disableFrostShader; // Offset: 145
    keen::bool disableSnowShader; // Offset: 146
    keen::bool disableWetnessShader; // Offset: 147
    keen::bool enableFrostShaderGlitter; // Offset: 148
    keen::bool enableGradientMapSupport; // Offset: 149
    keen::bool enableTessellation; // Offset: 150
    keen::float32 tessellationStartDistance; // Offset: 152
    keen::float32 tessellationSubdivisions; // Offset: 156
    keen::float32 displacementScale; // Offset: 160
    keen::float32 displacementOffset; // Offset: 164
    keen::bool enableShadows; // Offset: 168
    keen::bool enableContactShadows; // Offset: 169
    keen::DissolveMaterialParameters dissolve; // Offset: 172
};

struct PbrMaterialEmissiveMapShaderData {
    keen::float32 intensity; // Offset: 0
    keen::float32 exposureCorrectionFactor; // Offset: 4
};

struct PbrMaterialTintShaderData {
    keen::uint32 enableLayerBitMask; // Offset: 0
    keen::StaticArray<keen::StreamedTexture2D_float,3> maskMaps; // Offset: 4
};

struct PbrMaterialDisplacementSettings {
    keen::float32 scale; // Offset: 0
    keen::float32 offset; // Offset: 4
};

struct PbrTerrainMaterialLayer {
    keen::ObjectReference<keen::Image> albedoMap; // Offset: 0
    keen::ObjectReference<keen::Image> roughnessMap; // Offset: 16
    keen::ObjectReference<keen::Image> normalMap; // Offset: 32
    keen::ObjectReference<keen::Image> heightMap; // Offset: 48
    keen::ObjectReference<keen::Image> aoMap; // Offset: 64
    keen::float32 tilingSize; // Offset: 80
};

struct PbrTerrainMaterialBlendingSmoothness {
    keen::float32 position; // Offset: 0
    keen::float32 smoothness; // Offset: 4
    keen::float32 heightBias; // Offset: 8
};

struct PbrTerrainMaterialCenterBlendingSmoothness {
    keen::float32 smoothness; // Offset: 0
    keen::float32 heightBias; // Offset: 4
};

enum class PbrTerrainMaterialDetailNormalBlendMode {
    Alpha = 0,
    Overlay = 1,
};

struct PbrTerrainMaterialDisplacementLayer {
    keen::float32 scale; // Offset: 0
    keen::float32 origin; // Offset: 4
};

struct PbrBuildingNoiseBlendRange {
    keen::float32 min; // Offset: 0
    keen::float32 max; // Offset: 4
};

struct PbrBuildingMaterialDisplacementLayer {
    keen::float32 scale; // Offset: 0
    keen::float32 offset; // Offset: 4
};

struct PbrBuildingMaterial {
    keen::PbrMaterialLayer baseMaterialSide; // Offset: 0
    keen::PbrBuildingMaterialDisplacementLayer baseMaterialSideDisplacement; // Offset: 268
    keen::PbrMaterialLayer baseMaterialTop; // Offset: 276
    keen::PbrBuildingMaterialDisplacementLayer baseMaterialTopDisplacement; // Offset: 544
    keen::PbrMaterialLayer baseMaterialBottom; // Offset: 552
    keen::PbrBuildingMaterialDisplacementLayer baseMaterialBottomDisplacement; // Offset: 820
    keen::PbrMaterialLayer edgeMaterial; // Offset: 828
    keen::PbrBuildingMaterialDisplacementLayer edgeMaterialDisplacement; // Offset: 1096
    keen::PbrBuildingMaterialDisplacementLayer edgeMaterialTopDisplacement; // Offset: 1104
    keen::PbrMaterialLayer noiseMaterial; // Offset: 1112
    keen::PbrBuildingMaterialDisplacementLayer noiseMaterialDisplacement; // Offset: 1380
    keen::float32 edgeBlendingCurve; // Offset: 1388
    keen::PbrBuildingNoiseBlendRange noiseBlendRange; // Offset: 1392
    keen::bool edgeOnlySide; // Offset: 1400
    keen::float32 bevelRadius; // Offset: 1404
    keen::BuildingMappingType mapping; // Offset: 1408
};

struct PbrBuildingDetailScatterLayerTop {
};

struct PbrBuildingDetailScatterLayerSide {
};

struct PbrBuildingDetailScatterLayerBottom {
};

struct PbrBuildingDetailScatterLayerNoise {
};

enum class PbrRfxRenderMaterialFlag {
    EnableGiWrapShading = 0,
    AdjustGiNormals = 1,
    EnableDissolve = 2,
    EnableHashedAlpha = 3,
    EnableGradientMap = 4,
    SampleAo = 5,
    SampleOpacity = 6,
    EnableContactShadows = 7,
    EnableAnisotropicSpecular = 8,
    FlipBackfaceNormals = 9,
    MultiplyAlphaByVertexAlpha = 10,
    DisableFrostShader = 11,
    DisableSnowShader = 12,
    DisableWetnessShader = 13,
    EnableFrostShaderGlitter = 14,
};

typedef keen::Bitmask32<keen::PbrRfxRenderMaterialFlag> PbrRfxRenderMaterialFlagMask;

struct RfxSampler {
    keen::uint32 id; // Offset: 0
};

struct PbrRfxRenderMaterial {
    keen::uint32 layerParameters; // Offset: 0
    keen::StreamedTexture2D_float blendMap; // Offset: 4
    keen::float2 blendMapTexcoordScaling; // Offset: 8
    keen::StaticArray<keen::StreamedTexture2D_float4,2> albedoMap; // Offset: 16
    keen::StaticArray<keen::StreamedTexture2D_float4,2> normalMap; // Offset: 24
    keen::StaticArray<keen::StreamedTexture2D_float4,2> emissiveMap; // Offset: 32
    keen::StaticArray<keen::StreamedTexture2D_float4,2> materialParamsMap; // Offset: 40
    keen::StaticArray<keen::StreamedTexture2D_float,2> heightMap; // Offset: 48
    keen::StaticArray<keen::RfxSampler,2> layerSampler; // Offset: 56
    keen::StaticArray<keen::float2,2> texCoordScaling; // Offset: 64
    keen::StaticArray<keen::StreamedTexture2D_float4,2> anisotropyDirectionMap; // Offset: 80
    keen::StaticArray<keen::float,2> anisotropyStrength; // Offset: 88
    keen::StaticArray<keen::float,2> constantReflectance; // Offset: 96
    keen::StaticArray<keen::PbrMaterialTintShaderData,2> albedoTintShaderData; // Offset: 104
    keen::StaticArray<keen::float,2> heightBlendingRange; // Offset: 136
    keen::uint32 multiplyEmissiveVertexColorChannelSwizzle; // Offset: 144
    keen::uint32 multiplyAlbedoVertexColorChannelSwizzle; // Offset: 148
    keen::uint32 multiplyAoVertexColorChannelSwizzle; // Offset: 152
    keen::RfxSampler blendMapSampler; // Offset: 156
    keen::float translucencyStrength; // Offset: 160
    keen::StreamedTexture2D_float translucencyMap; // Offset: 164
    keen::StaticArray<keen::PbrMaterialEmissiveMapShaderData,2> emissiveMapShaderData; // Offset: 168
    keen::StreamedTexture2D_float4 overlayNormalMap; // Offset: 184
    keen::StreamedTexture2D_float overlayAoMap; // Offset: 188
    keen::RfxSampler overlayNormalMapSampler; // Offset: 192
    keen::uint32 overlayNormalMapVertexColorChannelSwizzle; // Offset: 196
    keen::float2 overlayNormalMapTexCoordScaling; // Offset: 200
    keen::float3 dissolveEdgeGlowColor; // Offset: 208
    keen::float32 dissolveEdgeGlowWidthInv; // Offset: 220
    keen::float32 dissolveEdgeGlowParam; // Offset: 224
    keen::BindlessTexture3D_float dissolveNoiseMap; // Offset: 228
    keen::float32 dissolveNoiseTiling; // Offset: 232
    keen::float32 dissolveNoiseFadeRange; // Offset: 236
    keen::uint32 flags; // Offset: 240
};

struct post_processing.NightAdaptation {
    keen::bool enable; // Offset: 0
    keen::float strength; // Offset: 4
};

struct post_processing.WhiteBalance {
    keen::bool enable; // Offset: 0
    keen::float temperature; // Offset: 4
    keen::float tint; // Offset: 8
};

struct post_processing.ChannelMixer {
    keen::bool enable; // Offset: 0
    keen::HdrColorRgb r; // Offset: 4
    keen::HdrColorRgb g; // Offset: 20
    keen::HdrColorRgb b; // Offset: 36
};

struct post_processing.WeightedColor {
    keen::HdrColorRgb color; // Offset: 0
    keen::float weight; // Offset: 16
};

struct post_processing.TonalColors {
    keen::bool enable; // Offset: 0
    keen::post_processing::WeightedColor shadows; // Offset: 4
    keen::post_processing::WeightedColor midtones; // Offset: 24
    keen::post_processing::WeightedColor highlights; // Offset: 44
    keen::float shadowStart; // Offset: 64
    keen::float midStart; // Offset: 68
    keen::float midEnd; // Offset: 72
    keen::float highlightEnd; // Offset: 76
};

struct post_processing.ColorChannelWeights {
    keen::float32 red; // Offset: 0
    keen::float32 green; // Offset: 4
    keen::float32 blue; // Offset: 8
};

struct post_processing.SlopeOffsetColor {
    keen::bool enable; // Offset: 0
    keen::post_processing::ColorChannelWeights slope; // Offset: 4
    keen::post_processing::ColorChannelWeights offset; // Offset: 16
    keen::post_processing::ColorChannelWeights power; // Offset: 28
};

struct post_processing.Contrast {
    keen::bool enable; // Offset: 0
    keen::float strength; // Offset: 4
};

struct post_processing.Vibrance {
    keen::bool enable; // Offset: 0
    keen::float strength; // Offset: 4
};

struct post_processing.Saturation {
    keen::bool enable; // Offset: 0
    keen::float strength; // Offset: 4
};

struct post_processing.Curves {
    keen::bool enable; // Offset: 0
    keen::post_processing::ColorChannelWeights shadowGamma; // Offset: 4
    keen::post_processing::ColorChannelWeights midpoint; // Offset: 16
    keen::post_processing::ColorChannelWeights highlightScale; // Offset: 28
};

struct post_processing.ColorFilter {
    keen::bool enable; // Offset: 0
    keen::HdrColorRgb color; // Offset: 4
};

struct post_processing.ColorGrading {
    keen::post_processing::NightAdaptation nightAdaptation; // Offset: 0
    keen::post_processing::WhiteBalance whiteBalance; // Offset: 8
    keen::post_processing::ChannelMixer channelMixer; // Offset: 20
    keen::post_processing::TonalColors tonalColors; // Offset: 72
    keen::post_processing::SlopeOffsetColor slopeOffsetColor; // Offset: 152
    keen::post_processing::Contrast contrast; // Offset: 192
    keen::post_processing::Vibrance vibrance; // Offset: 200
    keen::post_processing::Saturation saturation; // Offset: 208
    keen::post_processing::Curves curves; // Offset: 216
};

struct PostProcessingParameters {
    keen::post_processing::ColorFilter colorFilter; // Offset: 0
    keen::post_processing::ColorGrading colorGrading; // Offset: 20
};

struct TonemappingConstants {
    keen::float4 curve; // Offset: 0
    keen::float3 crosstalkPreSaturation; // Offset: 16
    keen::float hdrMax; // Offset: 28
    keen::float3 crosstalk; // Offset: 32
    keen::float3 crosstalkPostSaturation; // Offset: 48
};

enum class PostProcessingCompositeFlag {
    EnableBilateralGrid = 0,
    EnableColorGrading = 1,
    OverlayDebugColor = 2,
    EnableDithering = 3,
    SkipConversionToSrgb = 4,
    EnableToneMapping = 5,
    OutputFinalHistogram = 6,
    ResetAlphaPreUpscale = 7,
};

typedef keen::Bitmask32<keen::PostProcessingCompositeFlag> PostProcessingCompositeFlags;

struct PostProcessingCompositeConstants {
    keen::uint32 flags; // Offset: 0
    keen::float3 colorFilter; // Offset: 4
    keen::float32 bloomStrength; // Offset: 16
    keen::float32 temporalNoise; // Offset: 20
    keen::float3 lutOffset; // Offset: 32
    keen::float3 lutScale; // Offset: 48
    keen::float4 vignetteColor; // Offset: 64
    keen::float4 flashColor; // Offset: 80
    keen::TonemappingConstants toneMapping; // Offset: 96
};

struct PostProcessingHistogramConstants {
    keen::uint2 targetSize; // Offset: 0
    keen::float32 exposure; // Offset: 8
    keen::float32 inverseExposure; // Offset: 12
    keen::uint32 useSceneBrightness; // Offset: 16
};

struct PostProcessingHistogramResult {
    keen::StaticArray<keen::uint32,256> pixelCount; // Offset: 0
};

struct SceneHistogramShaderParameters {
    keen::uint2 targetSize; // Offset: 0
};

struct BloomConstants {
    keen::float2 halfPixelSize; // Offset: 0
    keen::uint applyBilateralGrid; // Offset: 8
    keen::float bilateralGridDetail; // Offset: 12
    keen::float thresholdLow; // Offset: 16
    keen::float thresholdHigh; // Offset: 20
    keen::float fogContribution; // Offset: 24
    keen::float compression; // Offset: 28
    keen::float scale; // Offset: 32
};

struct ClearBilateralGridConstants {
    keen::uint3 gridSize; // Offset: 0
};

struct FillBilateralGridConstants {
    keen::uint3 gridSize; // Offset: 0
    keen::uint2 sourceSize; // Offset: 16
    keen::float2 oneOverSourceSize; // Offset: 24
    keen::float32 inverseExposure; // Offset: 32
};

struct CopyResultBilateralGridConstants {
    keen::uint3 gridSize; // Offset: 0
};

struct BlurBilateralGridConstants {
    keen::uint3 gridSize; // Offset: 0
    keen::float3 oneOverGridSize; // Offset: 16
};

struct ApplyBilateralGridConstants {
    keen::float3 oneOverGridSize; // Offset: 0
    keen::float inverseExposure; // Offset: 12
    keen::float midPointLogLuminance; // Offset: 16
    keen::float highlightContrastFactor; // Offset: 20
    keen::float shadowContrastFactor; // Offset: 24
    keen::float detailFactor; // Offset: 28
};

struct PrefixSumPrepareConstants {
    keen::uint32 maxElementCount; // Offset: 0
    keen::uint32 counterIndex; // Offset: 4
};

struct SmallPrefixSumShaderParameters {
    keen::uint32 elementCount; // Offset: 0
};

struct RenderShaderVertexAttribute {
    keen::uint8 location; // Offset: 0
    keen::uint8 format; // Offset: 1
};

enum class RenderVertexFormat {
    P = 0,
    PC = 1,
    PT = 2,
    PCT = 3,
    PNCT = 4,
    PNTT = 5,
    PNTCT = 6,
    Vfx = 7,
};

enum class TextureAlphaMode {
    None = 0,
    ExplicitChannel = 1,
    Stencil = 2,
    Smooth = 3,
};

enum class TextureContentType {
    RgbColors = 0,
    TangentSpaceNormals = 1,
    RgbWithAlphaCoverage = 2,
    AlphaCoverage = 3,
    ObjectSpaceNormal = 4,
};

enum class TextureConverterFlag {
    DontCreateMipMapChain = 0,
    DisableSRGBToLinearConversionAtRuntime = 1,
};

typedef keen::Bitmask32<keen::TextureConverterFlag> TextureConverterFlags;

struct RenderTextureChannelData {
    keen::ObjectReference<keen::Image> image; // Offset: 0
    keen::TextureChannel sourceChannel; // Offset: 16
    keen::ObjectReference<keen::Image> roughnessNormalMapImage; // Offset: 20
    keen::bool clampRoughnessNormalU; // Offset: 36
    keen::bool clampRoughnessNormalV; // Offset: 37
    keen::TextureChannel targetChannel; // Offset: 38
};

struct RenderMaterialTextureSamplingInfo {
    keen::uint8 vertexAttributeId; // Offset: 0
    keen::float32 scaling; // Offset: 4
};

struct RenderMaterialTextureElement {
    keen::BlobArray<keen::RenderTextureChannelData> textureChannels; // Offset: 0
    keen::RenderMaterialTextureSamplingInfo samplingInfo; // Offset: 8
};

struct RenderMaterialTextureData {
    keen::uint32 offset; // Offset: 0
    keen::TextureType textureType; // Offset: 4
    keen::PixelFormat pixelFormat; // Offset: 5
    keen::TextureAlphaMode alphaMode; // Offset: 6
    keen::BlobArray<keen::RenderMaterialTextureElement> textureElements; // Offset: 8
    keen::TextureContentType contentType; // Offset: 16
    keen::TextureConverterFlags convertFlags; // Offset: 20
    keen::string name; // Offset: 24
};

enum class RenderSamplerFilterMode {
    Nearest = 0,
    Linear = 1,
};

enum class RenderComparisonFunction {
    Never = 0,
    Less = 1,
    Equal = 2,
    LessEqual = 3,
    Greater = 4,
    NotEqual = 5,
    GreaterEqual = 6,
    Always = 7,
};

struct RenderMaterialSamplerData {
    keen::uint32 offset; // Offset: 0
    keen::RenderSamplerAddressMode addressModeU; // Offset: 4
    keen::RenderSamplerAddressMode addressModeV; // Offset: 5
    keen::RenderSamplerAddressMode addressModeW; // Offset: 6
    keen::RenderSamplerFilterMode minFilter; // Offset: 7
    keen::RenderSamplerFilterMode magFilter; // Offset: 8
    keen::RenderSamplerFilterMode mipFilter; // Offset: 9
    keen::RenderComparisonFunction comparisonFunction; // Offset: 10
};

enum class RenderEffectId {
    Simple = 0,
    Billboard = 1,
    Pbr = 2,
    PbrTerrain = 3,
    PbrBuilding = 4,
    PbrRoof = 5,
    Gizmo = 6,
    Grid = 7,
    VfxGrid = 8,
    Transparent = 9,
    TerraformingCursor = 10,
    SkyTexture = 11,
    ForestFogFootprint = 12,
};

enum class RenderMaterialFlag {
    Tessellated = 0,
    AlphaTested = 1,
    DoubleSided = 2,
    DisableShadows = 3,
    CanDissolve = 4,
};

typedef keen::Bitmask8<keen::RenderMaterialFlag> RenderMaterialFlagMask;

struct RenderMaterialConverterData {
    keen::Guid objectId; // Offset: 0
    keen::string description; // Offset: 16
    keen::RenderEffectId effectId; // Offset: 24
    keen::RenderMaterialFlagMask flags; // Offset: 25
    keen::BlobArray<keen::uint8> data; // Offset: 28
    keen::HashKey32 dataTypeSignature; // Offset: 36
    keen::BlobArray<keen::RenderMaterialTextureData> textures; // Offset: 40
    keen::BlobArray<keen::RenderMaterialSamplerData> samplers; // Offset: 48
    keen::RenderVertexFormat vertexFormat; // Offset: 56
    keen::HashKey32 instanceDataTypeNameHash; // Offset: 60
};

enum class RenderMemoryAllocatorObjectType {
    Buffer = 0,
    Texture = 1,
};

struct RenderMemoryAllocatorObjectState {
    keen::RenderMemoryAllocatorObjectType type; // Offset: 0
    keen::string name; // Offset: 4
    keen::uint32 allocationRegionHandle; // Offset: 12
    keen::uint32 allocationMemoryType; // Offset: 16
    keen::uint64 allocationBlockHandle; // Offset: 24
    keen::uint64 allocationOffset; // Offset: 32
    keen::uint64 allocationSize; // Offset: 40
};

struct RenderMemoryAllocatorAllocationState {
    keen::uint32 handle; // Offset: 0
    keen::string name; // Offset: 4
    keen::BlobArray<keen::RenderMemoryAllocatorObjectState> objects; // Offset: 12
};

struct RenderMemoryAllocatorBlockState {
    keen::uint64 handle; // Offset: 0
    keen::uint64 sizeInBytes; // Offset: 8
    keen::uint32 refCount; // Offset: 16
};

struct RenderMemoryAllocatorRegionMemoryTypeState {
    keen::uint32 memoryType; // Offset: 0
    keen::uint8 graphicsDeviceMemoryTypeIndex; // Offset: 4
    keen::bool isMapped; // Offset: 5
    keen::BlobArray<keen::RenderMemoryAllocatorBlockState> blocks; // Offset: 8
};

struct RenderMemoryAllocatorRegionState {
    keen::uint32 handle; // Offset: 0
    keen::string name; // Offset: 4
    keen::GraphicsDeviceMemoryPriority priority; // Offset: 12
    keen::uint64 chunkSize; // Offset: 16
    keen::BlobArray<keen::RenderMemoryAllocatorRegionMemoryTypeState> memoryTypes; // Offset: 24
};

struct RenderMemoryAllocatorState {
    keen::BlobArray<keen::RenderMemoryAllocatorAllocationState> allocations; // Offset: 0
    keen::BlobArray<keen::RenderMemoryAllocatorRegionState> regions; // Offset: 8
};

struct RenderResources {
    keen::ObjectReference<keen::RenderSystemResource> renderSystem; // Offset: 0
    keen::ObjectReference<keen::WorldMaterialBlending2Resource> worldMaterialBlending2; // Offset: 16
    keen::ObjectReference<keen::BuildingMaterialBlendingResource> buildingMaterialBlending; // Offset: 32
    keen::ObjectReference<keen::GiVoxelBuildingMaterialResource> giVoxelBuildingMaterial; // Offset: 48
    keen::ObjectReference<keen::DetailScatterResource> worldDetailScatter; // Offset: 64
    keen::ObjectReference<keen::DetailScatterResource> buildingDetailScatter; // Offset: 80
    keen::ObjectReference<keen::AnalyticFogResource> analyticFog; // Offset: 96
    keen::ObjectReference<keen::VolumetricFog2Resource> volumetricFog2; // Offset: 112
    keen::ObjectReference<keen::VolumetricFogGridRenderParameters> volumetricFogGridParameters; // Offset: 128
    keen::BlobArray<keen::ObjectReference<keen::GpcResource>> gpcResources; // Offset: 144
    keen::ObjectReference<keen::ColorPaletteCollection> colorPaletteCollection; // Offset: 152
};

struct RenderSceneCaptureModel {
    keen::WorldTransform transform; // Offset: 0
    keen::ObjectReference<keen::RenderModel> modelResource; // Offset: 56
};

enum class RenderLightType {
    Point = 0,
};

struct RenderLight {
    keen::RenderLightType type; // Offset: 0
    keen::HdrColorRgb color; // Offset: 4
    keen::bool castShadows; // Offset: 20
    keen::float32 radius; // Offset: 24
};

struct RenderSceneCaptureLight {
    keen::WorldTransform transform; // Offset: 0
    keen::RenderLight light; // Offset: 56
};

struct RenderSceneCaptureVfxInstance {
    keen::WorldTransform transform; // Offset: 0
    keen::ObjectReference<keen::VfxResource> vfxResource; // Offset: 56
    keen::float4 color; // Offset: 72
    keen::float4 param0; // Offset: 88
    keen::float4 param1; // Offset: 104
    keen::float4 param2; // Offset: 120
    keen::float4 param3; // Offset: 136
    keen::Time startTime; // Offset: 152
    keen::bool isActive; // Offset: 160
    keen::bool killWhenCulled; // Offset: 161
};

struct RenderSceneCaptureChunk {
    keen::WorldTransform transform; // Offset: 0
    keen::ContentHash voxelData; // Offset: 56
};

struct RenderSceneCapture {
    keen::WorldTransform captureViewTransform; // Offset: 0
    keen::BlobArray<keen::RenderSceneCaptureModel> models; // Offset: 56
    keen::BlobArray<keen::RenderSceneCaptureLight> lights; // Offset: 64
    keen::BlobArray<keen::RenderSceneCaptureVfxInstance> vfxInstances; // Offset: 72
};

enum class RenderAntiAliasingSetting {
    None = 0,
    FXAA = 1,
    Fsr2 = 2,
    Fsr3 = 3,
    Dlss = 4,
    Dlaa = 5,
};

typedef keen::Bitmask32<keen::RenderAntiAliasingSetting> RenderAntiAliasingSettingsValidMask;

enum class RenderTextureQualitySetting {
    Low = 0,
    Medium = 1,
    High = 2,
    Ultra = 3,
};

typedef keen::Bitmask32<keen::RenderTextureQualitySetting> RenderTextureQualitySettingsValidMask;

struct RenderSettingsFeatures {
    keen::RenderAntiAliasingSettingsValidMask antialiasingValidMask; // Offset: 0
    keen::RenderTextureQualitySettingsValidMask textureQualityValidMask; // Offset: 4
};

enum class RenderSettingsPreset {
    Lowest = 0,
    Low = 1,
    Medium = 2,
    High = 3,
    Ultra = 4,
    Custom = 5,
};

enum class RenderFsr2PresetSetting {
    Performance = 0,
    Balance = 1,
    Quality = 2,
    UltraQuality = 3,
};

enum class RenderFsr3PresetSetting {
    UltraPerformance = 0,
    Performance = 1,
    Balance = 2,
    Quality = 3,
    Native = 4,
};

enum class RenderDlssPresetSetting {
    Auto = 0,
    Quality = 1,
    Balanced = 2,
    Performance = 3,
    UltraPerformance = 4,
};

enum class RenderShadowQualitySetting {
    Low = 0,
    Medium = 1,
    High = 2,
    Ultra = 3,
};

enum class RenderContactShadowsSetting {
    Disabled = 0,
    Enabled = 1,
};

enum class RenderGiSetting {
    Performance = 0,
    Balance = 1,
    High = 2,
    Ultra = 3,
};

enum class RenderReflectionsSetting {
    Balance = 0,
    High = 1,
    Ultra = 2,
};

enum class RenderFogQualitySetting {
    Low = 0,
    High = 1,
};

enum class RenderFogVolumetricShadowQualitySetting {
    Disabled = 0,
    Low = 1,
    Medium = 2,
    High = 3,
};

enum class RenderSsaoSetting {
    Disabled = 0,
    Low = 1,
    Medium = 2,
    High = 3,
};

enum class RenderDistantObjectsSetting {
    Disabled = 0,
    Low = 1,
    Medium = 2,
    High = 3,
};

enum class RenderDecoObjectsSetting {
    Disabled = 0,
    Low = 1,
    Medium = 2,
    High = 3,
};

enum class RenderDetailScatteringSetting {
    Disabled = 0,
    Low = 1,
    Medium = 2,
    High = 3,
};

enum class RenderVoxelMeshQualitySetting {
    Low = 0,
    High = 1,
};

enum class RenderTessellationSetting {
    Disabled = 0,
    Low = 1,
    Medium = 2,
    High = 3,
};

enum class RenderPointLightShadowsSetting {
    Disabled = 0,
    Lowest = 1,
    Low = 2,
    High = 3,
    Ultra = 4,
};

struct RenderSettings {
    keen::RenderSettingsPreset preset; // Offset: 0
    keen::RenderAntiAliasingSetting antiAliasing; // Offset: 4
    keen::RenderFsr2PresetSetting fsr2; // Offset: 8
    keen::RenderFsr3PresetSetting fsr3; // Offset: 12
    keen::RenderDlssPresetSetting dlss; // Offset: 16
    keen::RenderTextureQualitySetting textures; // Offset: 20
    keen::RenderShadowQualitySetting shadows; // Offset: 24
    keen::RenderContactShadowsSetting contactShadows; // Offset: 28
    keen::RenderGiSetting dynamicGi; // Offset: 32
    keen::RenderReflectionsSetting reflections; // Offset: 36
    keen::RenderFogQualitySetting fog; // Offset: 40
    keen::RenderFogVolumetricShadowQualitySetting volumetricShadow; // Offset: 44
    keen::RenderSsaoSetting ssao; // Offset: 48
    keen::RenderDistantObjectsSetting distantObjects; // Offset: 52
    keen::RenderDecoObjectsSetting decoObjects; // Offset: 56
    keen::RenderDetailScatteringSetting detailScattering; // Offset: 60
    keen::RenderVoxelMeshQualitySetting voxelMeshQuality; // Offset: 64
    keen::RenderTessellationSetting tessellation; // Offset: 68
    keen::RenderPointLightShadowsSetting pointLightShadows; // Offset: 72
    keen::float32 sharpness; // Offset: 76
};

struct RenderSettingsGpuPresets {
};

enum class RenderSettingsGpuTargetResolution {
    Target720p = 0,
    Target1080p = 1,
    Target1440p = 2,
    TargetSteamDeck = 3,
};

enum class RenderSettingsGpuTargetFps {
    Target30Fps = 0,
    Target60Fps = 1,
};

struct RenderSettingsGpuMapping {
    keen::RenderSettingsGpuTargetResolution targetResolution; // Offset: 0
    keen::RenderSettingsGpuTargetFps targetFps; // Offset: 4
    keen::RenderSettings settings; // Offset: 8
};

struct RenderSettingsGpuMatch {
    keen::string name; // Offset: 0
};

struct RenderSettingsGpuPresetsResource {
    keen::BlobArray<keen::RenderSettingsGpuPresetsResourceGpu> gpus; // Offset: 0
    keen::BlobArray<keen::RenderSettingsGpuPresetResource> presets; // Offset: 8
};

struct RenderSettingsGpuPresetsResourceGpu {
    keen::HashKey32 nameHash; // Offset: 0
    keen::uint32 presetIndex; // Offset: 4
};

struct RenderSettingsGpuPresetResource {
    keen::RenderSettings settings; // Offset: 0
    keen::uint32 targetPixelCount; // Offset: 80
    keen::uint32 targetFps; // Offset: 84
};

struct ForwardPointLightData {
    keen::float3 position; // Offset: 0
    keen::float32 sqrRadius; // Offset: 12
    keen::float3 color; // Offset: 16
    keen::float falloffWeight; // Offset: 28
    keen::uint32 uniqueId; // Offset: 32
    keen::uint32 enableShadows; // Offset: 36
    keen::float radius; // Offset: 40
    keen::uint32 pad2; // Offset: 44
};

struct ForwardDecalData {
    keen::GraphicsMatrix43 decalTransform; // Offset: 0
    keen::float4 worldBoundingSphere; // Offset: 48
    keen::float4 color; // Offset: 64
    keen::float4 emissiveTintAndAlpha; // Offset: 80
    keen::uint32 materialDataIndex; // Offset: 96
    keen::float32 normalFade; // Offset: 100
    keen::uint layerMask; // Offset: 104
    keen::uint enableTransparencyCompositionMask; // Offset: 108
};

struct ClusterCullingInfo {
    keen::uint3 clusterSize; // Offset: 0
    keen::uint32 enableOverdraw; // Offset: 12
    keen::float2 inverseViewportSize; // Offset: 16
    keen::float32 zNear; // Offset: 24
    keen::float32 zFar; // Offset: 28
};

struct RenderWeatherMaskResource {
    keen::RenderTexture mask; // Offset: 0
};

struct RenderWeatherResource {
    keen::float2 snowBorderRangeMapping; // Offset: 0
    keen::RenderWeatherMaskResource snowBorderMask; // Offset: 8
};

struct RenderWeatherPhenomenonResource {
    keen::RenderTexture cloudMap; // Offset: 0
};

struct RenderWeatherRasterCouldsParameters {
    keen::float32 invRenderTargetSize; // Offset: 0
};

struct RenderWeatherRasterCloudsInstanceData {
    keen::float4 transformM; // Offset: 0
    keen::float2 transformT; // Offset: 16
    keen::uint32 data; // Offset: 24
    keen::BindlessTexture2D_float4 cloudMap; // Offset: 28
    keen::BindlessTexture2D_float restrictMask; // Offset: 32
    keen::BindlessTexture2D_float excludeMask; // Offset: 36
};

struct RenderWeatherWeatherMapSubtractParameters {
    keen::float32 wetnessValue; // Offset: 0
    keen::float32 puddleValue; // Offset: 4
};

struct RenderWeatherWeatherMapAddParameters {
    keen::float32 rainWetnessValue; // Offset: 0
    keen::float32 rainPuddleValue; // Offset: 4
};

struct RenderWeatherDynamicWetnessSampleUpload {
    keen::uint32 pointIndex; // Offset: 0
    keen::sint32 instanceIndex; // Offset: 4
    keen::sint32 boneIndex; // Offset: 8
    keen::float3 localPosition; // Offset: 12
};

struct RenderWeatherDynamicWetnessSample {
    keen::sint32 instanceIndex; // Offset: 0
    keen::sint32 boneIndex; // Offset: 4
    keen::float3 localPosition; // Offset: 8
};

struct RenderWeatherDynamicWetnessUpdateConstants {
    keen::uint32 uploadCount; // Offset: 0
    keen::float dryWetnessValue; // Offset: 4
    keen::float addRainWetnessValue; // Offset: 8
    keen::PackedShaderWorldPositionUniform cameraPosition; // Offset: 16
    keen::WeatherSampleConstants weatherSampleConstants; // Offset: 32
};

struct RenderWeatherFilterDynamicHeightmapConstants {
    keen::float2 rcpTextureSize; // Offset: 0
};

enum class RenderWeatherInstanceFlag {
    Tiling = 0,
    MaskStrength = 1,
    MaskRainStrength = 2,
    Blizzard = 3,
};

typedef keen::Bitmask32<keen::RenderWeatherInstanceFlag> RenderWeatherInstanceFlags;

struct RenderWeatherInstanceParameters {
    keen::float2 positionXZ; // Offset: 0
    keen::Angle orientation; // Offset: 8
    keen::float2 scaleXZ; // Offset: 12
    keen::float32 strength; // Offset: 20
    keen::float32 rainThreshold; // Offset: 24
    keen::RenderWeatherInstanceFlags flags; // Offset: 28
};

struct RenderWeatherDebugInstanceState {
    keen::uint32 handle; // Offset: 0
    keen::RenderWeatherInstanceParameters parameters; // Offset: 4
};

struct RenderWeatherDebugState {
    keen::bool debugDrawInstances; // Offset: 0
    keen::BlobArray<keen::RenderWeatherDebugInstanceState> instances; // Offset: 4
};

struct RenderWeatherDebugUpdateDebugDrawInstances {
    keen::bool debugDrawInstances; // Offset: 0
};

struct RenderWeatherDebugAddInstance {
    keen::ObjectReference<keen::RenderWeatherPhenomenonResource> phenomenon; // Offset: 0
    keen::RenderWeatherInstanceParameters parameters; // Offset: 16
};

struct RenderWeatherDebugRemoveInstance {
    keen::uint32 handle; // Offset: 0
};

struct RenderWeatherDebugSetInstanceParameters {
    keen::uint32 handle; // Offset: 0
    keen::RenderWeatherInstanceParameters parameters; // Offset: 4
};

enum class RenderWeatherDebugMode {
    None = 0,
    Rain = 1,
    Snow = 2,
    Frost = 3,
};

enum class Fsr3QualityPreset {
    UltraPerformance = 0,
    Performance = 1,
    Balance = 2,
    Quality = 3,
    Native = 4,
};

enum class RenderUpscaleTechnique {
    None = 0,
    Fsr3 = 1,
    Dlss = 2,
};

enum class RenderFeatureFlag {
    Shadows = 0,
    VolumetricShadows = 1,
    Vfx = 2,
    VolumetricFogGrid = 3,
    Fog = 4,
    AnalyticFog = 5,
    Bloom = 6,
    Sdf = 7,
    DetailScattering = 8,
    RayTracing = 9,
    Gi = 10,
    GrassMovement = 11,
    Ssao = 12,
    DynamicHeightmap = 13,
    SdfShadows = 14,
    ContactShadows = 15,
    ContactShadows2 = 16,
    Fxaa = 17,
    Fsr3 = 18,
    BrickRenderer = 19,
    StochasticScreenSpaceReflections = 20,
    SdfAo = 21,
    ManyLightsShadows = 22,
    Dlss = 23,
    SdfBvh = 24,
    SnowDisplacement = 25,
};

typedef keen::Bitmask32<keen::RenderFeatureFlag> RenderFeatureFlags;

struct BlendShapeId {
};

enum class BeaufortWindForce {
    Calm = 0,
    LightAir = 1,
    LightBreeze = 2,
    GentleBreeze = 3,
    ModerateBreeze = 4,
    FreshBreeze = 5,
    StrongBreeze = 6,
    HighWind = 7,
    FreshGale = 8,
    StrongGale = 9,
    Storm = 10,
    ViolentStorm = 11,
    Hurricane = 12,
};

struct ShaderDataPrimitiveTypes {
    keen::sint32 f0; // Offset: 0
    keen::float32 f1; // Offset: 4
    keen::sint64 f2; // Offset: 8
    keen::float4 f3; // Offset: 16
    keen::float3 f4; // Offset: 32
    keen::float2 f5; // Offset: 44
    keen::uint3 f6; // Offset: 52
    keen::uint4 f7; // Offset: 64
};

struct RenderColorGradingMap {
    keen::ObjectReference<keen::Image> image; // Offset: 0
};

struct RenderColorGradingMapResource {
    keen::ContentHash content; // Offset: 0
    keen::string debugName; // Offset: 16
};

typedef keen::ObjectReference<keen::RenderColorGradingMapResource> RenderColorGradingMapReference;

enum class RenderViewDebugDrawMode {
    None = 0,
    Sdf = 1,
    SdfVoxels = 2,
    Ibl = 3,
    MotionVectors = 4,
    LightCache = 5,
    LightCacheLightCulling = 6,
    Bricks = 7,
    Gi = 8,
    SdfBvh = 9,
    GiIrradianceBuffer = 10,
    ShadowCascades = 11,
    ShadowMask = 12,
    ShadowCascadesWithOcclusion = 13,
    VoxelWorldShadowMap = 14,
    TransparentOverdraw = 15,
    Ssao = 16,
    ReactiveMask = 17,
    TransparencyMask = 18,
    ClusteredDecalOverdraw = 19,
    ClusterCullingDecalBinning = 20,
    SceneBrightness = 21,
};

enum class RenderDescriptorSetId {
    Global = 0,
    RenderNode = 1,
    Material = 2,
};

enum class RenderSubpassIndex {
    Default = 0,
    ExtendedAttributes = 1,
};

enum class RenderPipelineStage {
    Vertex = 0,
    TessellationControl = 1,
    TessellationEvaluation = 2,
    Fragment = 3,
    Compute = 4,
    RayTrace = 5,
};

enum class ShaderCompileSourceLanguage {
    Hlsl_2021 = 0,
    Hlsl_2018 = 1,
    Glsl = 2,
    Pssl = 3,
};

enum class RenderPrimitiveType {
    TriangleList = 0,
    TriangleStrip = 1,
    LineList = 2,
    PatchList = 3,
};

struct RenderSampler {
    keen::RenderSamplerAddressMode addressModeU; // Offset: 0
    keen::RenderSamplerAddressMode addressModeV; // Offset: 1
    keen::RenderSamplerAddressMode addressModeW; // Offset: 2
    keen::RenderSamplerFilterMode minFilter; // Offset: 3
    keen::RenderSamplerFilterMode magFilter; // Offset: 4
    keen::RenderSamplerFilterMode mipFilter; // Offset: 5
    keen::RenderComparisonFunction comparisonFunction; // Offset: 6
    keen::bool anisotropyEnable; // Offset: 7
};

enum class RenderParameterBlockPatchPointType {
    Texture = 0,
    StreamedTexture = 1,
    Sampler = 2,
};

struct RenderParameterBlockPatchPoint {
    keen::RenderParameterBlockPatchPointType type; // Offset: 0
    keen::uint32 offset; // Offset: 4
    keen::uint32 size; // Offset: 8
    keen::uint32 parameterIndex; // Offset: 12
};

struct RenderVertexAttribute {
    keen::uint8 location; // Offset: 0
    keen::uint8 format; // Offset: 1
    keen::uint8 stream; // Offset: 2
};

enum class ComputeGroupCountAlgorithm {
    Target2D = 0,
    Target2DHalf = 1,
    Target2DArray = 2,
    Target2DWidthOnly = 3,
    Target3D = 4,
    Target3DArray = 5,
};

struct RenderModelImageSizeInfo {
    keen::float32 texelsPerMeter; // Offset: 0
};

struct RenderMaterialImage {
    keen::uint32 dataOffset; // Offset: 0
    keen::uint16 width; // Offset: 4
    keen::uint16 height; // Offset: 6
    keen::uint16 depth; // Offset: 8
    keen::uint16 arraySize; // Offset: 10
    keen::uint8 levelCount; // Offset: 12
    keen::TextureType type; // Offset: 13
    keen::PixelFormat format; // Offset: 14
    keen::ContentHash data; // Offset: 16
    keen::bool enableStreaming; // Offset: 32
    keen::string debugName; // Offset: 36
};

struct RenderMaterialSampler {
    keen::uint32 dataOffset; // Offset: 0
    keen::RenderSamplerAddressMode addressModeU; // Offset: 4
    keen::RenderSamplerAddressMode addressModeV; // Offset: 5
    keen::RenderSamplerAddressMode addressModeW; // Offset: 6
    keen::RenderSamplerFilterMode minFilter; // Offset: 7
    keen::RenderSamplerFilterMode magFilter; // Offset: 8
    keen::RenderSamplerFilterMode mipFilter; // Offset: 9
    keen::RenderComparisonFunction comparisonFunction; // Offset: 10
    keen::bool anisotropyEnable; // Offset: 11
};

enum class RfxSamplerId {
    Wrap = 0,
    Clamp = 1,
    ClampToZero = 2,
    Mirror = 3,
};

struct RenderMaterialResource {
    keen::RenderEffectId effectId; // Offset: 0
    keen::RenderMaterialFlagMask flags; // Offset: 1
    keen::BlobArray<keen::uint8> data; // Offset: 4
    keen::HashKey32 dataTypeSignature; // Offset: 12
    keen::BlobArray<keen::RenderMaterialImage> images; // Offset: 16
    keen::BlobArray<keen::RenderMaterialSampler> samplers; // Offset: 24
    keen::string debugName; // Offset: 32
};

typedef keen::ObjectReference<keen::RenderMaterialResource> RenderMaterialResourceReference;

struct RenderMaterialTextureInfo {
    keen::uint3 size; // Offset: 0
    keen::RenderMaterialTextureSamplingInfo samplingInfo; // Offset: 12
};

struct RenderMaterialInfo {
    keen::RenderEffectId effectId; // Offset: 0
    keen::RenderMaterialFlagMask flags; // Offset: 1
    keen::HashKey32 dataTypeSignature; // Offset: 4
    keen::bool hasStreamedTextures; // Offset: 8
    keen::BlobArray<keen::RenderMaterialTextureInfo> textures; // Offset: 12
};

struct RenderBlendResourceData {
    keen::ObjectReference<keen::BlendShapeId> id; // Offset: 0
};

struct RenderMaterialMesh {
    keen::AxisAlignedBox aabb; // Offset: 0
    keen::Sphere boundingSphere; // Offset: 32
    keen::RenderEffectId renderEffectId; // Offset: 48
    keen::uint8 clothMeshIndex; // Offset: 49
    keen::RenderMaterialResourceReference material; // Offset: 52
    keen::RenderMaterialFlagMask materialFlags; // Offset: 68
    keen::BlobArray<keen::RenderModelImageSizeInfo> materialImageSizeInfos; // Offset: 72
    keen::ContentHash materialModelData; // Offset: 80
    keen::HashKey32 materialModelDataTypeSignatureHash; // Offset: 96
    keen::float3 positionScale; // Offset: 100
    keen::float3 positionOffset; // Offset: 112
    keen::uint32 vertexCount; // Offset: 124
    keen::uint32 indexCount; // Offset: 128
    keen::ContentHash vertexData; // Offset: 132
    keen::ContentHash indexData; // Offset: 148
    keen::ContentHash skinningData; // Offset: 164
    keen::ContentHash blendShapeVertexData; // Offset: 180
    keen::uint32 blendShapeMask; // Offset: 196
    keen::string debugName; // Offset: 200
};

struct RenderModelLod {
    keen::uint32 firstMeshIndex; // Offset: 0
    keen::uint32 meshCount; // Offset: 4
    keen::float32 pixelSize; // Offset: 8
};

enum class RenderRayTraceVertexFormat {
    Pos3f_Normal3f_Color4ub = 0,
};

struct RenderRayTraceMeshPart {
    keen::uint32 jointIndex; // Offset: 0
    keen::uint32 indexOffset; // Offset: 4
    keen::uint32 indexCount; // Offset: 8
    keen::uint32 vertexOffset; // Offset: 12
    keen::uint32 vertexCount; // Offset: 16
};

struct RenderRayTraceMesh {
    keen::RenderRayTraceVertexFormat vertexFormat; // Offset: 0
    keen::uint32 vertexCount; // Offset: 4
    keen::uint32 indexCount; // Offset: 8
    keen::ContentHash vertexData; // Offset: 12
    keen::ContentHash indexData; // Offset: 28
    keen::BlobArray<keen::RenderRayTraceMeshPart> parts; // Offset: 44
};

struct RenderModelClothSleeve {
    keen::float3 center0; // Offset: 0
    keen::float32 radius0; // Offset: 12
    keen::float3 center1; // Offset: 16
    keen::float32 radius1; // Offset: 28
    keen::uint32 upperJointIndex; // Offset: 32
    keen::uint32 lowerJointIndex; // Offset: 36
    keen::uint32 instanceIndex; // Offset: 40
    keen::ContentHash planes; // Offset: 44
    keen::ContentHash particleIndicies; // Offset: 60
};

struct RenderModelSdfMaterial {
    keen::float3 albedo; // Offset: 0
    keen::uint dummy; // Offset: 12
    keen::float3 emissive; // Offset: 16
};

struct RenderModelSdfPart {
    keen::uint3 resolution; // Offset: 0
    keen::uint32 jointIndex; // Offset: 12
    keen::uint8 mipLevelCount; // Offset: 16
    keen::float3 origin; // Offset: 20
    keen::float3 totalSize; // Offset: 32
    keen::ContentHash pixels; // Offset: 44
    keen::RenderModelSdfMaterial material; // Offset: 60
};

struct RenderModelSdfData {
    keen::BlobArray<keen::RenderModelSdfPart> parts; // Offset: 0
};

struct RenderGradientMapResource {
    keen::uint16 width; // Offset: 0
    keen::uint8 levelCount; // Offset: 2
    keen::PixelFormat format; // Offset: 3
    keen::ContentHash data; // Offset: 4
    keen::string debugName; // Offset: 20
};

struct RenderModelClothColliderData {
    keen::bool hasSkinning; // Offset: 0
    keen::bool ignoreClothCollider; // Offset: 1
    keen::BlobArray<keen::RenderClothColliderSphere> spheres; // Offset: 4
    keen::BlobArray<keen::RenderClothColliderCapsule> capsules; // Offset: 12
    keen::BlobArray<keen::RenderModelColliderInstanceData> instances; // Offset: 20
};

struct SkinnedTreeModelData {
    keen::BlobArray<keen::Matrix43> jointMatrix; // Offset: 0
    keen::BlobArray<keen::uint> jointParent; // Offset: 8
    keen::BlobArray<keen::SkinnedTreeModelSpringData> jointSpringData; // Offset: 16
    keen::BlobArray<keen::uint> leafJoints; // Offset: 24
    keen::BlobArray<keen::Matrix43> inverseTransformTree; // Offset: 32
};

struct RenderModel {
    keen::string debugName; // Offset: 0
    keen::BlobArray<keen::RenderMaterialMesh> meshes; // Offset: 8
    keen::BlobArray<keen::RenderModelLod> lods; // Offset: 16
    keen::AxisAlignedBox aabb; // Offset: 32
    keen::RenderRayTraceMesh rayTraceMesh; // Offset: 64
    keen::ObjectReference<keen::ModelHierarchyResource> hierarchy; // Offset: 116
    keen::uint16 hierarchyJointCount; // Offset: 132
    keen::BlobArray<keen::uint16> skinningMap; // Offset: 136
    keen::BlobOptional<keen::RenderModelClothData> cloth; // Offset: 144
    keen::BlobOptional<keen::RenderModelChainData> chain; // Offset: 148
    keen::RenderModelClothColliderData collider; // Offset: 152
    keen::BlobArray<keen::RenderModelClothSleeve> sleeves; // Offset: 180
    keen::BlobArray<keen::RenderBlendResourceData> blendShapes; // Offset: 188
    keen::uint32 jointCount; // Offset: 196
    keen::HashKey32 instanceDataTypeNameHash; // Offset: 200
    keen::bool hasCardClusterLod; // Offset: 204
    keen::RenderModelSdfData sdf; // Offset: 208
    keen::SkinnedTreeModelData skinnedTree; // Offset: 216
};

struct RenderClothVertexSkinningData {
    keen::StaticArray<keen::uint8,4> jointIndices; // Offset: 0
    keen::StaticArray<keen::uint8,4> jointWeights; // Offset: 4
};

struct RenderClothFabricResource {
    keen::uint32 numParticles; // Offset: 0
    keen::BlobArray<keen::uint32> phaseIndices; // Offset: 4
    keen::BlobArray<keen::uint32> sets; // Offset: 12
    keen::BlobArray<keen::float> restValues; // Offset: 20
    keen::BlobArray<keen::float> stiffnessValues; // Offset: 28
    keen::BlobArray<keen::uint32> indices; // Offset: 36
    keen::BlobArray<keen::uint32> anchors; // Offset: 44
    keen::BlobArray<keen::float> tetherLengths; // Offset: 52
    keen::BlobArray<keen::uint32> triangles; // Offset: 60
};

struct RenderClothMeshResource {
    keen::RenderClothFabricResource fabric; // Offset: 0
    keen::BlobArray<keen::float3> simulationPositions; // Offset: 68
    keen::BlobArray<keen::float32> simulationInvMasses; // Offset: 76
    keen::BlobArray<keen::float32> simulationStiffnesses; // Offset: 84
    keen::BlobArray<keen::float32> simulationVertexWeights; // Offset: 92
    keen::BlobArray<keen::uint3> simulationTriangles; // Offset: 100
    keen::BlobArray<keen::uint16> simulationBlendshapeDeltas; // Offset: 108
    keen::BlobArray<keen::RenderClothVertexSkinningData> simulationSkinningData; // Offset: 116
    keen::BlobArray<keen::uint16> skinnedVertexIndices; // Offset: 124
    keen::BlobArray<keen::float3> renderPositions; // Offset: 132
    keen::BlobArray<keen::float2> renderUvs; // Offset: 140
    keen::BlobArray<keen::uint3> renderTriangles; // Offset: 148
    keen::BlobArray<keen::uint16> renderSimulationVertexIndices; // Offset: 156
};

struct RenderClothMesh {
    keen::ContentHash data; // Offset: 0
    keen::float32 gravity; // Offset: 16
    keen::float32 windStrength; // Offset: 20
    keen::float32 dragCoefficient; // Offset: 24
    keen::float32 liftCoefficient; // Offset: 28
    keen::float32 damping; // Offset: 32
    keen::float32 linearInertia; // Offset: 36
    keen::float32 angularInertia; // Offset: 40
    keen::float32 centrifugalInertia; // Offset: 44
    keen::float32 tetherStiffness; // Offset: 48
    keen::float32 phasesStiffness; // Offset: 52
    keen::float32 phasesCompressionLimit; // Offset: 56
    keen::float32 phasesStretchLimit; // Offset: 60
    keen::float32 motionConstraintsStiffness; // Offset: 64
    keen::float32 collisionFriction; // Offset: 68
    keen::float32 solverFrequency; // Offset: 72
    keen::float32 motionConstraintsUnlimitedRadius; // Offset: 76
    keen::float32 motionConstraintsMaxRadius; // Offset: 80
};

struct RenderClothColliderSkinningData {
    keen::StaticArray<keen::uint8,4> jointIndices; // Offset: 0
    keen::StaticArray<keen::uint8,4> jointWeights; // Offset: 4
};

struct RenderClothColliderSphere {
    keen::float3 center; // Offset: 0
    keen::float32 radius; // Offset: 12
    keen::RenderClothColliderSkinningData skinningData; // Offset: 16
};

struct RenderClothColliderCapsule {
    keen::float3 center0; // Offset: 0
    keen::float32 radius0; // Offset: 12
    keen::float3 center1; // Offset: 16
    keen::float32 radius1; // Offset: 28
    keen::RenderClothColliderSkinningData skinningData; // Offset: 32
};

struct RenderModelColliderData {
    keen::bool hasSkinning; // Offset: 0
    keen::BlobArray<keen::RenderClothColliderSphere> spheres; // Offset: 4
    keen::BlobArray<keen::RenderClothColliderCapsule> capsules; // Offset: 12
};

struct RenderModelColliderInstanceData {
    keen::BlobArray<keen::uint8> sphereIndices; // Offset: 0
    keen::BlobArray<keen::uint8> capsuleIndices; // Offset: 8
};

struct RenderModelClothData {
    keen::bool hasSkinning; // Offset: 0
    keen::BlobArray<keen::RenderClothMesh> meshes; // Offset: 4
};

struct RenderClothColliderResource {
    keen::bool hasSkinning; // Offset: 0
    keen::uint32 maxJointIndex; // Offset: 4
    keen::BlobArray<keen::RenderClothColliderSphere> spheres; // Offset: 8
    keen::BlobArray<keen::RenderClothColliderCapsule> capsules; // Offset: 16
};

struct RenderModelChainConfig {
    keen::bool propagateRotation; // Offset: 0
    keen::float32 gravity; // Offset: 4
    keen::float32 mass; // Offset: 8
    keen::float32 dragCoefficient; // Offset: 12
    keen::float32 liftCoefficient; // Offset: 16
    keen::float32 stiffnessFrequencey; // Offset: 20
    keen::float32 damping; // Offset: 24
    keen::float32 motionConstraintRadius; // Offset: 28
    keen::float32 linearInertia; // Offset: 32
    keen::float32 angularInertia; // Offset: 36
    keen::float32 centrifugalInertia; // Offset: 40
    keen::float32 phasesStiffness; // Offset: 44
    keen::float32 phasesStiffnessMultiplier; // Offset: 48
    keen::float32 phasesCompressionLimit; // Offset: 52
    keen::float32 phasesStretchLimit; // Offset: 56
    keen::float32 collisionFriction; // Offset: 60
};

struct RenderModelChain {
    keen::Guid guid; // Offset: 0
    keen::uint16 jointBeginIndex; // Offset: 16
    keen::uint16 jointEndIndex; // Offset: 18
    keen::uint16 constraintBeginIndex; // Offset: 20
    keen::uint16 constraintEndIndex; // Offset: 22
    keen::uint8 configIndex; // Offset: 24
    keen::uint8 colliderIndex; // Offset: 25
};

struct RenderModelChainData {
    keen::BlobArray<keen::RenderModelChain> chains; // Offset: 0
    keen::BlobArray<keen::RenderModelChainConfig> configs; // Offset: 8
    keen::BlobArray<keen::RenderModelColliderData> chainColliders; // Offset: 16
    keen::BlobArray<keen::uint8> anchorHierarchyJoints; // Offset: 24
    keen::BlobArray<keen::Matrix43> anchorDefaultPose; // Offset: 32
    keen::BlobArray<keen::float3> anchorRestPosition; // Offset: 40
    keen::BlobArray<keen::uint8> joints; // Offset: 48
    keen::BlobArray<keen::Matrix43> modelMatrices; // Offset: 56
    keen::BlobArray<keen::Matrix43> skinToJointMatrix; // Offset: 64
    keen::BlobArray<keen::float3> restPosition; // Offset: 72
    keen::BlobArray<keen::uint8> constraintJoints; // Offset: 80
    keen::BlobArray<keen::float3> constraints; // Offset: 88
};

struct RenderModelMaterialMeshData {
    keen::AxisAlignedBox aabb; // Offset: 0
    keen::RenderEffectId renderEffectId; // Offset: 32
    keen::uint32 vertexCount; // Offset: 36
    keen::uint32 indexCount; // Offset: 40
    keen::ContentHash vertexData; // Offset: 44
    keen::ContentHash indexData; // Offset: 60
};

struct RenderModelLodMeshData {
    keen::BlobArray<keen::RenderModelMaterialMeshData> meshes; // Offset: 0
};

struct RenderModelMeshData {
    keen::BlobArray<keen::RenderModelLodMeshData> lods; // Offset: 0
    keen::HashKey32 instanceDataTypeNameHash; // Offset: 8
};

struct RenderModelLodInfo {
    keen::uint32 vertexCount; // Offset: 0
    keen::uint32 indexCount; // Offset: 4
};

struct RenderModelInfo {
    keen::BlobArray<keen::RenderModelLodInfo> lods; // Offset: 0
    keen::ObjectReference<keen::ModelHierarchyResource> modelHierarchy; // Offset: 8
};

enum class AnalyticFogShapeType {
    Sphere = 0,
    Box = 1,
};

struct AnalyticFogShape {
    keen::AnalyticFogShapeType type; // Offset: 0
    keen::float3 halfSize; // Offset: 4
    keen::float32 falloff; // Offset: 16
};

struct RenderFogInjection {
    keen::AnalyticFogShape shape; // Offset: 0
    keen::float32 absorption; // Offset: 20
    keen::Color scattering; // Offset: 24
    keen::Color emission; // Offset: 28
    keen::float32 density; // Offset: 32
};

struct RenderFogDissolve {
    keen::AnalyticFogShape shape; // Offset: 0
    keen::float32 strength; // Offset: 20
};

struct RenderModelDrawData2 {
    keen::float4 boundingSphere; // Offset: 0
    keen::uint flags; // Offset: 16
    keen::uint sizeFeedbackIndex; // Offset: 20
    keen::uint firstMesh; // Offset: 24
    keen::uint lodCount; // Offset: 28
    keen::StaticArray<keen::uint,8> lodMeshOffsets; // Offset: 32
    keen::StaticArray<keen::uint,8> lodMeshCounts; // Offset: 64
    keen::StaticArray<keen::float,8> lodPixelSizes; // Offset: 96
};

struct RenderMeshDrawData2 {
    keen::float3 positionScale; // Offset: 0
    keen::uint materialDataIndex; // Offset: 12
    keen::float3 positionOffset; // Offset: 16
    keen::uint pipelineBits; // Offset: 28
    keen::uint indexOffset; // Offset: 32
    keen::uint indexCount; // Offset: 36
    keen::int vertexOffset; // Offset: 40
    keen::uint modelMaterialData; // Offset: 44
    keen::uint skinningDataByteOffsetAndClothMeshIndex; // Offset: 48
    keen::uint blendShapeVertexOffset; // Offset: 52
    keen::uint blendShapeMask; // Offset: 56
    keen::uint vertexCount; // Offset: 60
};

struct RenderInstanceData {
    keen::PackedShaderWorldTransform packedTransform; // Offset: 0
    keen::GraphicsMatrix43 transform; // Offset: 32
    keen::uint32 tintColor; // Offset: 80
    keen::BindlessTexture2D_float4 tintGradientMap; // Offset: 84
    keen::uint32 highlightColorPaletteIndexTransparency; // Offset: 88
    keen::uint32 flagsAndEmissiveFactor; // Offset: 92
    keen::float4 dissolveParameters; // Offset: 96
    keen::float32 dissolveEdgeBrightness; // Offset: 112
    keen::float32 alphaClip; // Offset: 116
    keen::uint32 activeBlendShapeMask; // Offset: 120
    keen::uint32 blendShapeWeights; // Offset: 124
    keen::StaticArray<keen::uint,4> clothMeshDataOffsets; // Offset: 128
    keen::uint32 albedoTintColorIndices; // Offset: 144
    keen::uint32 skinMatrixOffset; // Offset: 148
    keen::uint32 decalLayerMask; // Offset: 152
    keen::uint32 dynamicWetnessOffset; // Offset: 156
    keen::uint32 modelIndex; // Offset: 160
    keen::uint32 groupMask; // Offset: 164
};

struct DetailScatteringInstanceData {
    keen::uint3 packedWorldPosition; // Offset: 0
    keen::uint scaleAndFadeout; // Offset: 12
    keen::float4 orientation; // Offset: 16
};

struct HighlightColorPaletteSettings {
    keen::float highlightAmount; // Offset: 0
    keen::float highlightIntensity; // Offset: 4
    keen::Color invalidHighlightColor; // Offset: 8
    keen::Color validHighlightColor; // Offset: 12
    keen::Color mutedHighlightColor; // Offset: 16
    keen::Color group1HighlightColor; // Offset: 20
    keen::Color group2HighlightColor; // Offset: 24
    keen::Color group3HighlightColor; // Offset: 28
    keen::Color group4HighlightColor; // Offset: 32
};

struct WeatherSurfaceMaterialSettings {
    keen::float snowUVScale; // Offset: 0
    keen::float snowScale; // Offset: 4
    keen::float snowVertexNormalPower; // Offset: 8
    keen::float snowVertexNormalCutoff; // Offset: 12
    keen::float frostUVScale; // Offset: 16
    keen::float frostScale; // Offset: 20
    keen::float frostRoughness; // Offset: 24
    keen::float frostPorosityScale; // Offset: 28
    keen::Color frostAlbedo; // Offset: 32
    keen::Color frostPuddleAlbedo; // Offset: 36
};

struct RenderSystemResource {
    keen::SpecularIblLutResource specularIblLut; // Offset: 0
    keen::ObjectReference<keen::Image> blueNoiseMap; // Offset: 20
    keen::RenderTexture blueNoiseRenderImage; // Offset: 36
    keen::ObjectReference<keen::SlopeDefinition> globalSlopeDefinition; // Offset: 72
    keen::HighlightColorPaletteSettings highlightColorPalette; // Offset: 88
    keen::WeatherSurfaceMaterialSettings weatherSurfaceMaterialSettings; // Offset: 124
    keen::bool verifyDecoObjectMeshCountLimit; // Offset: 164
    keen::bool verifyDetailScatteringMeshCountLimit; // Offset: 165
    keen::ObjectReference<keen::render::AtmosphereParameters> atmosphere; // Offset: 168
    keen::ObjectReference<keen::ZoneVisualizationSettings> zoneVisualizationSettings; // Offset: 184
    keen::ObjectReference<keen::Image> frostBlendMask; // Offset: 200
    keen::ObjectReference<keen::Image> snowRoughness; // Offset: 216
    keen::ObjectReference<keen::Image> snowAlbedo; // Offset: 232
    keen::ObjectReference<keen::Image> snowNormal; // Offset: 248
    keen::RenderTexture frostBlendMaskRenderImage; // Offset: 264
    keen::RenderTexture snowRoughnessRenderImage; // Offset: 300
    keen::RenderTexture snowAlbedoRenderImage; // Offset: 336
    keen::RenderTexture snowNormalRenderImage; // Offset: 372
};

struct RenderModelChunkInstance {
    keen::float3 position; // Offset: 0
    keen::float scale; // Offset: 12
    keen::Quaternion orientation; // Offset: 16
    keen::uint16 modelIndex; // Offset: 32
    keen::bool canBeCulled; // Offset: 34
};

struct RenderModelChunkModelData {
    keen::WorldPosition origin; // Offset: 0
    keen::float3 extents; // Offset: 24
    keen::BlobArray<keen::RenderModelChunkInstance> instances; // Offset: 36
    keen::BlobArray<keen::uint16> entityIndexMap; // Offset: 44
    keen::BlobArray<keen::Guid> modelGuids; // Offset: 52
};

struct RenderModelChunkModelResource {
    keen::ContentHash modelData; // Offset: 0
    keen::HashKey32 modelDataTypeSignatureHash; // Offset: 16
};

struct RenderModelChunkGridResource {
    keen::uint2 chunkCount; // Offset: 0
};

struct GBufferTemporalFilterConstants {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::float temporalWeight; // Offset: 16
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::GraphicsMatrix44 prevViewProjectionMatrix; // Offset: 96
};

struct TransparentMergeStartConstants {
    keen::uint instanceCounterByteOffset; // Offset: 0
    keen::uint maxInstanceCount; // Offset: 4
};

struct TransparentMergePrepareConstants {
    keen::uint maxTriangleCount; // Offset: 0
};

struct VoxelChunklet {
    keen::float4 sphere; // Offset: 0
    keen::float4 normal; // Offset: 16
};

struct GiVoxelMaterial {
    keen::float3 emissive; // Offset: 0
    keen::float3 albedo; // Offset: 12
    keen::float roughness; // Offset: 24
    keen::float metallic; // Offset: 28
    keen::float reflectance; // Offset: 32
};

struct GiVoxelBuildingMaterial {
    keen::GiVoxelMaterial top; // Offset: 0
    keen::GiVoxelMaterial side; // Offset: 36
    keen::GiVoxelMaterial bottom; // Offset: 72
};

struct GiVoxelBuildingMaterialResource {
    keen::BlobArray<keen::GiVoxelBuildingMaterial> materials; // Offset: 0
};

struct BakeWorldTriangleMaterialDataVertexShaderParameters {
    keen::uint32 layerCount; // Offset: 0
    keen::uint32 vertexCount; // Offset: 4
    keen::uint32 vertexOffset; // Offset: 8
    keen::uint32 perVertexBakingDataOffset; // Offset: 12
    keen::float4 translationAndScale; // Offset: 16
};

struct BakeWorldTriangleMaterialDataTriangleShaderParameters {
    keen::uint32 triangleCount; // Offset: 0
    keen::uint32 vertexOffset; // Offset: 4
    keen::uint32 indexOffset; // Offset: 8
    keen::uint32 perVertexBakingDataOffset; // Offset: 12
    keen::float4 translationAndScale; // Offset: 16
    keen::uint32 bakedTriangleMaterialDataOffset; // Offset: 32
    keen::uint32 feedbackDataOffset; // Offset: 36
    keen::uint4 debug; // Offset: 48
};

struct PatchMeshVerticesParameters {
    keen::float3 positionOffset; // Offset: 0
    keen::uint vertexCount; // Offset: 12
    keen::float3 positionScale; // Offset: 16
    keen::uint vertexStride; // Offset: 28
    keen::uint vertexOffset; // Offset: 32
};

struct RenderBlendShapeSlot {
    keen::ObjectReference<keen::BlendShapeId> id; // Offset: 0
    keen::float weight; // Offset: 16
};

enum class DetailScatteringPass {
    DepthPrePass = 0,
    Geometry = 1,
};

enum class DetailScatteringError {
    OutOfDraws = 1,
    OutOfObjects = 2,
};

enum class DetailScatteringDebugMode {
    DetailScatteringDebugMode_None = 0,
    DetailScatteringDebugMode_SingleModel = 1,
    DetailScatteringDebugMode_SingleMaterial = 2,
};

struct ScatterModelData {
    keen::GpuModel model; // Offset: 0
};

struct ScatteredObjectData {
    keen::uint modelIndexAndLodIndex; // Offset: 0
    keen::float fadeout; // Offset: 4
};

struct ScatterTriangleCullingShaderParameters {
    keen::PackedShaderWorldPositionUniform cameraWorldPosition; // Offset: 0
    keen::GraphicsMatrix43 cameraCenteredToViewMatrix; // Offset: 16
    keen::uint triangleBinSize; // Offset: 64
    keen::GpuCullingFrustum frustum; // Offset: 80
    keen::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 176
    keen::uint occlusionCullingEnabled; // Offset: 240
    keen::uint chunkletBinSize; // Offset: 244
    keen::float boundingSphereBias; // Offset: 248
    keen::float maxScatterDistance; // Offset: 252
};

struct ScatterTriangleCullingPushConstants {
    keen::uint chunkIndex; // Offset: 0
};

struct ScatterChunkletCullingShaderParameters {
    keen::PackedShaderWorldPositionUniform cameraWorldPosition; // Offset: 0
    keen::GraphicsMatrix43 cameraCenteredToViewMatrix; // Offset: 16
    keen::uint chunkletBinSize; // Offset: 64
    keen::GpuCullingFrustum frustum; // Offset: 80
    keen::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 176
    keen::uint occlusionCullingEnabled; // Offset: 240
    keen::float boundingSphereBias; // Offset: 244
    keen::float maxScatterDistance; // Offset: 248
};

struct ScatterChunkletCullingPushConstants {
    keen::uint jobCount; // Offset: 0
};

struct ScatterObjectPrepareShaderParameters {
    keen::uint targetGroupSize; // Offset: 0
};

struct DetailScatteringShaderData {
    keen::PackedShaderWorldPositionUniform cameraWorldPosition; // Offset: 0
    keen::uint scatteredObjectCounterOffset; // Offset: 16
    keen::uint scatteredObjectCapacity; // Offset: 20
    keen::uint scatteredCandidateCounterOffset; // Offset: 24
    keen::GraphicsMatrix43 cameraCenteredToViewMatrix; // Offset: 32
    keen::GraphicsMatrix44 cameraCenteredViewProjection; // Offset: 80
    keen::float4 frustumPlane0; // Offset: 144
    keen::float4 frustumPlane1; // Offset: 160
    keen::float4 frustumPlane2; // Offset: 176
    keen::float4 frustumPlane3; // Offset: 192
    keen::float4 frustumPlane4; // Offset: 208
    keen::TessellatedMaterialConstants terrainTessellation; // Offset: 224
    keen::DynamicHeightmapSamplingShaderData dynamicHeightmap; // Offset: 240
    keen::uint dynamicHeightmapValid; // Offset: 272
    keen::uint debugMode; // Offset: 276
    keen::uint debugValue; // Offset: 280
    keen::float densityProbability; // Offset: 284
    keen::float modelSizeFeedbackPixelSize; // Offset: 288
    keen::float distanceCullingThreshold; // Offset: 292
    keen::float sizeCullingPixelSize; // Offset: 296
    keen::uint permutationBucketCount; // Offset: 300
    keen::float maxScatterDistance; // Offset: 304
    keen::float invMaxDistanceFadeLength; // Offset: 308
    keen::float displacementFadeoutStart; // Offset: 312
    keen::float displacementFadeoutEnd; // Offset: 316
    keen::float displacementStrength; // Offset: 320
    keen::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 336
    keen::uint occlusionCullingEnabled; // Offset: 400
    keen::uint triangleBinSize; // Offset: 404
};

struct DetailScatteringChunkShaderData {
    keen::float4 translationAndScale; // Offset: 0
    keen::uint indexOffset; // Offset: 16
    keen::uint vertexOffset; // Offset: 20
    keen::uint bakedTriangleMaterialDataOffset; // Offset: 24
    keen::uint triangleCount; // Offset: 28
    keen::uint chunkletOffset; // Offset: 32
    keen::uint chunkletCount; // Offset: 36
};

struct ScatterInstanceOffsetShaderData {
    keen::uint scatterModelCount; // Offset: 0
    keen::uint instanceCounterOffset; // Offset: 4
    keen::DetailScatteringDebugMode debugMode; // Offset: 8
    keen::uint debugValue; // Offset: 12
    keen::uint permutationBucketCount; // Offset: 16
};

struct ScatterInstancesShaderData {
    keen::uint scatteredObjectCounterOffset; // Offset: 0
    keen::DetailScatteringDebugMode debugMode; // Offset: 4
    keen::uint debugValue; // Offset: 8
    keen::uint permutationBucketCount; // Offset: 12
};

struct BiomeMap {
    keen::Biome baseBiome; // Offset: 0
};

struct BiomeMapLayer {
    keen::Biome biome; // Offset: 0
};

struct BiomeMapInfo {
    keen::uint2 size; // Offset: 0
    keen::StaticArray<keen::ContentHash,7> data; // Offset: 8
};

struct SdfCascadeData {
    keen::GraphicsMatrix44 ndcToSdfMatrix; // Offset: 0
    keen::int3 origin; // Offset: 64
};

struct SdfShaderData {
    keen::uint32 sdfCascadeCount; // Offset: 0
    keen::uint32 sdfInstanceCount; // Offset: 4
    keen::uint32 sdfBaseDescriptorIndex; // Offset: 8
    keen::float32 sdfInvGridSize; // Offset: 12
};

struct SdfDebugShaderParameters {
    keen::SdfShaderData sdf; // Offset: 0
    keen::float3 cameraPosition; // Offset: 16
    keen::uint32 visibleGroupMask; // Offset: 28
};

struct SdfCaptureDebugShaderParameters {
    keen::GraphicsMatrix44 inverseViewProjectionMatrix; // Offset: 0
    keen::float3 cameraPosition; // Offset: 64
};

struct SdfVoxelRegion {
    keen::int3 origin; // Offset: 0
    keen::uint32 bufferOffset; // Offset: 12
    keen::uint3 size; // Offset: 16
};

struct SdfUpdateShaderParameters {
    keen::SdfVoxelRegion newVoxelRegion0; // Offset: 0
    keen::SdfVoxelRegion newVoxelRegion1; // Offset: 32
    keen::SdfVoxelRegion newVoxelRegion2; // Offset: 64
    keen::SdfVoxelRegion dirtyVoxelRegion; // Offset: 96
    keen::int3 origin; // Offset: 128
    keen::uint32 size; // Offset: 140
};

struct SdfBakingShaderParameters {
    keen::int3 voxelOrigin; // Offset: 0
    keen::uint32 volumeSize; // Offset: 12
    keen::float32 voxelSizeInMeters; // Offset: 16
    keen::uint3 targetOffset; // Offset: 20
};

struct SdfFloodShaderParameters {
    keen::sint32 stepSize; // Offset: 0
};

struct SdfCascadeUpdateShaderParameters {
    keen::uint32 cascadeIndex; // Offset: 0
    keen::uint32 instanceCount; // Offset: 4
};

struct WorldChunkVoxelMaterialCopyShaderParameters {
    keen::uint32 dwordCount; // Offset: 0
    keen::uint32 innerSize; // Offset: 4
    keen::uint32 chunkIndex; // Offset: 8
    keen::uint2 chunkData; // Offset: 16
};

struct SdfModelShaderData {
    keen::uint32 partCount; // Offset: 0
    keen::uint32 partOffset; // Offset: 4
};

struct SdfModelPartShaderData {
    keen::uint32 descriptorIndex; // Offset: 0
};

struct SdfInstanceShaderData {
    keen::uint32 modelIndex; // Offset: 0
    keen::uint32 partCount; // Offset: 4
    keen::uint32 partOffset; // Offset: 8
};

struct SdfInstancePartShaderData {
    keen::GraphicsMatrix43 inverseTransform; // Offset: 0
    keen::GraphicsMatrix43 transform; // Offset: 48
    keen::float3 aabbMin; // Offset: 96
    keen::float3 aabbMax; // Offset: 108
};

struct SdfImageMaterialShaderData {
    keen::float3 albedo; // Offset: 0
    keen::float3 emissive; // Offset: 12
};

struct SdfSystemUpdateShaderParameters {
    keen::uint newModelCount; // Offset: 0
    keen::uint newModelPartCount; // Offset: 4
    keen::uint newMaterialCount; // Offset: 8
};

struct SdfSceneUpdateShaderParameters {
    keen::uint newInstanceCount; // Offset: 0
    keen::uint newInstancePartCount; // Offset: 4
};

struct SdfSystemShaderData {
    keen::uint activeInstanceCount; // Offset: 0
    keen::uint activeInstancePartCount; // Offset: 4
};

struct SdfAoTraceShaderParameters {
    keen::ViewSpacePositionReconstructionData worldSpaceReconstructionData; // Offset: 0
    keen::uint32 frameId; // Offset: 64
    keen::float radius; // Offset: 68
};

struct SdfAoFilterShaderParameters {
    keen::float2 inverseTargetSize; // Offset: 0
    keen::uint32 frameId; // Offset: 8
    keen::uint32 isHistoryValid; // Offset: 12
};

enum class SdfBvhBuildMethod {
    LBVH = 0,
    LOC = 1,
};

struct SdfBvhCommonInstanceData {
    keen::GraphicsMatrix43 worldToUvwMatrix; // Offset: 0
    keen::GraphicsMatrix43 uvwToWorldMatrix; // Offset: 48
    keen::float3 aabbMin; // Offset: 96
    keen::uint descriptorIndex; // Offset: 108
    keen::float3 aabbMax; // Offset: 112
};

struct SdfBvhNodeShaderData {
    keen::float3 aabbMin; // Offset: 0
    keen::uint offset; // Offset: 12
    keen::float3 aabbMax; // Offset: 16
    keen::uint count; // Offset: 28
};

struct SdfBvhDebugVisualizeIntersectionShaderParameters {
    keen::float3 sunDirection; // Offset: 0
    keen::float3 cameraOrigin; // Offset: 16
    keen::float3 farPlaneOrigin; // Offset: 32
    keen::float3 farPlaneX; // Offset: 48
    keen::float3 farPlaneY; // Offset: 64
    keen::float2 inverseTargetSize; // Offset: 80
};

struct SdfBvhDebugTraversalShaderParameters {
    keen::float3 rayOrigin; // Offset: 0
    keen::float3 rayDirection; // Offset: 16
    keen::float rayLength; // Offset: 28
};

enum class SdfBvhDebugStepType {
    None = 0,
    Leaf = 1,
    Inner = 2,
};

struct SdfBvhDebugStepLeafShaderData {
    keen::SdfBvhCommonInstanceData instance; // Offset: 0
    keen::float boxHitDistance; // Offset: 124
    keen::float sdfHitDistance; // Offset: 128
    keen::float hitDistance; // Offset: 132
};

struct SdfBvhDebugStepInnerShaderData {
    keen::float3 aabbMin0; // Offset: 0
    keen::float3 aabbMax0; // Offset: 12
    keen::float3 aabbMin1; // Offset: 24
    keen::float3 aabbMax1; // Offset: 36
    keen::float hitDistance0; // Offset: 48
    keen::float hitDistance1; // Offset: 52
};

struct SdfBvhDebugStepShaderData {
    keen::SdfBvhDebugStepType type; // Offset: 0
    keen::SdfBvhDebugStepLeafShaderData leaf; // Offset: 4
    keen::SdfBvhDebugStepInnerShaderData inner; // Offset: 140
    keen::float closestHit; // Offset: 196
};

struct RenderSdfShadowShaderParameters {
    keen::ViewSpacePositionReconstructionData worldSpaceReconstructionData; // Offset: 0
    keen::float3 sunDirection; // Offset: 64
    keen::float sunConeAngle; // Offset: 76
    keen::uint2 targetSize; // Offset: 80
    keen::uint frameId; // Offset: 88
    keen::float rayBias; // Offset: 92
    keen::uint32 isSdfCacheValid; // Offset: 96
    keen::uint32 pixelSize; // Offset: 100
};

enum class RasterShadowQuality {
    Low = 0,
    Medium = 1,
    High = 2,
    Ultra = 3,
};

struct RenderShadowAtlasMaskShaderParameters {
    keen::ViewSpacePositionReconstructionData cameraCenteredSpaceReconstructionData; // Offset: 0
    keen::RenderShadowAtlasShaderData shadowAtlas; // Offset: 64
    keen::uint2 targetSize; // Offset: 1152
    keen::float texelSize; // Offset: 1160
    keen::float3 toLightDirection; // Offset: 1168
};

struct RenderShadowAtlasDebugShaderParameters {
    keen::ViewSpacePositionReconstructionData cameraCenteredSpaceReconstructionData; // Offset: 0
    keen::RenderShadowAtlasShaderData shadowAtlas; // Offset: 64
    keen::uint2 targetSize; // Offset: 1152
};

struct VoxelWorldShadowDebugShaderParameters {
    keen::VoxelWorldShadowMapShaderData voxelWorldShadowMap; // Offset: 0
    keen::ViewSpacePositionReconstructionData worldSpaceReconstructionData; // Offset: 160
    keen::uint2 targetSize; // Offset: 224
};

struct PrimeShadowMapConstants {
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 0
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 64
    keen::float3 cameraWorldPosition; // Offset: 128
    keen::uint32 depthPyramidMip; // Offset: 140
    keen::float2 depthPyramidAspectRatio; // Offset: 144
    keen::uint32 tileCountX; // Offset: 152
    keen::uint32 tileCountY; // Offset: 156
    keen::uint32 useCameraCenteredPosition; // Offset: 160
    keen::PackedShaderWorldPositionUniform cameraPosition; // Offset: 176
    keen::GraphicsMatrix44 cameraCenteredToClipSpaceMatrix; // Offset: 192
    keen::GraphicsMatrix44 clipSpaceToCameraCenteredMatrix; // Offset: 256
};

enum class RenderShadowMaskQuality {
    Low = 0,
    Medium = 1,
    High = 2,
};

struct RenderShadowMaskFillShaderParameters {
    keen::SdfShaderData sdf; // Offset: 0
    keen::LightCacheLookupShaderData lightCache; // Offset: 16
    keen::GraphicsMatrix44 inverseViewProjectionMatrix; // Offset: 416
    keen::float2 linearDepthParameters; // Offset: 480
    keen::ViewSpacePositionReconstructionData worldSpaceReconstructionData; // Offset: 496
    keen::float2 tileRatio; // Offset: 560
    keen::uint32 pixelSize; // Offset: 568
    keen::uint32 frameId; // Offset: 572
    keen::float3 sunDirection; // Offset: 576
    keen::float32 sunConeAngle; // Offset: 588
    keen::float32 rayBias; // Offset: 592
    keen::uint32 visibleGroupMask; // Offset: 596
    keen::uint32 writeDebugOutput; // Offset: 600
    keen::uint32 enablePixelSdfCache; // Offset: 604
    keen::uint32 enableDebugTarget; // Offset: 608
};

struct RenderShadowMaskFilterShaderParameters {
    keen::uint2 targetSize; // Offset: 0
    keen::float32 historyWeight; // Offset: 8
};

struct RenderShadowMaskUpsampleShaderParameters {
    keen::RenderShadowAtlasShaderData shadowAtlas; // Offset: 0
    keen::uint2 targetSize; // Offset: 1088
    keen::float2 linearDepthParameters; // Offset: 1096
    keen::ViewSpacePositionReconstructionData worldSpaceReconstructionData; // Offset: 1104
    keen::uint32 pixelSize; // Offset: 1168
};

struct RenderContactShadowShaderParameters {
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 0
    keen::GraphicsMatrix44 unjitteredProjectionMatrix; // Offset: 64
    keen::GraphicsMatrix43 viewMatrix; // Offset: 128
    keen::ViewSpacePositionReconstructionData worldSpaceReconstructionData; // Offset: 176
    keen::float rcpNearPlaneDistance; // Offset: 240
    keen::float3 sunDirection; // Offset: 244
    keen::uint2 targetSize; // Offset: 256
    keen::uint32 frameId; // Offset: 264
    keen::uint32 discardContents; // Offset: 268
    keen::uint32 stepCount; // Offset: 272
    keen::float32 rayLength; // Offset: 276
    keen::float32 depthThickness; // Offset: 280
    keen::float32 hardness; // Offset: 284
    keen::uint32 combineWithDenoisedShadows; // Offset: 288
    keen::uint32 enableJitter; // Offset: 292
};

struct RenderContactShadow2ShaderParameters {
    keen::float4 lightCoordinate; // Offset: 0
    keen::float2 invDepthTextureSize; // Offset: 16
    keen::int2 waveOffset; // Offset: 24
    keen::float subSurfaceShadowStrength; // Offset: 32
};

struct UnpackShadowMaskShaderParameters {
    keen::uint2 targetSize; // Offset: 0
};

struct PackShadowMaskShaderParameters {
    keen::uint2 targetSize; // Offset: 0
};

struct SharpnessParameters {
    keen::float32 kDetectRatio; // Offset: 0
    keen::float32 kDetectThres; // Offset: 4
    keen::float32 kMinContrastRatio; // Offset: 8
    keen::float32 kRatioNorm; // Offset: 12
    keen::float32 kContrastBoost; // Offset: 16
    keen::float32 kEps; // Offset: 20
    keen::float32 kSharpStartY; // Offset: 24
    keen::float32 kSharpScaleY; // Offset: 28
    keen::float32 kSharpStrengthMin; // Offset: 32
    keen::float32 kSharpStrengthScale; // Offset: 36
    keen::float32 kSharpLimitMin; // Offset: 40
    keen::float32 kSharpLimitScale; // Offset: 44
    keen::float32 kScaleX; // Offset: 48
    keen::float32 kScaleY; // Offset: 52
    keen::float32 kDstNormX; // Offset: 56
    keen::float32 kDstNormY; // Offset: 60
    keen::float32 kSrcNormX; // Offset: 64
    keen::float32 kSrcNormY; // Offset: 68
    keen::uint32 kInputViewportOriginX; // Offset: 72
    keen::uint32 kInputViewportOriginY; // Offset: 76
    keen::uint32 kInputViewportWidth; // Offset: 80
    keen::uint32 kInputViewportHeight; // Offset: 84
    keen::uint32 kOutputViewportOriginX; // Offset: 88
    keen::uint32 kOutputViewportOriginY; // Offset: 92
    keen::uint32 kOutputViewportWidth; // Offset: 96
    keen::uint32 kOutputViewportHeight; // Offset: 100
};

struct SimpleMaterial {
    keen::bool enableTextureStreaming; // Offset: 0
    keen::bool receiveShadows; // Offset: 1
    keen::ObjectReference<keen::Image> colorMap; // Offset: 4
    keen::ObjectReference<keen::Image> normalMap; // Offset: 20
    keen::HdrColorRgb tintColor; // Offset: 36
};

struct SimpleRfxRenderMaterial {
    keen::StreamedTexture2D_float4 colorMap; // Offset: 0
    keen::uint32 receiveShadows; // Offset: 4
    keen::float3 tintColor; // Offset: 8
};

struct SimpleVoxelPbrMaterial {
    keen::float3 albedo; // Offset: 0
    keen::float roughness; // Offset: 12
    keen::float3 emissive; // Offset: 16
    keen::float metallic; // Offset: 28
    keen::float reflectance; // Offset: 32
};

struct SimpleWorldMaterialShaderLayerWeights {
    keen::float sideWeight; // Offset: 0
    keen::float bottomWeight; // Offset: 4
    keen::float topWeight; // Offset: 8
    keen::float flatnessWeight; // Offset: 12
    keen::float map0Weight; // Offset: 16
    keen::float map1Weight; // Offset: 20
    keen::float2 flatness; // Offset: 24
    keen::float4 sideParameters; // Offset: 32
};

struct SimpleWorldMaterialBlendMap {
    keen::StreamedTexture2D_float map; // Offset: 0
    keen::float tilingFactor; // Offset: 4
};

struct SimpleVoxelLayerInfo {
    keen::uint data; // Offset: 0
};

struct SimpleWorldMaterialResource {
    keen::RenderParameterBlock layerInfosParameterBlock; // Offset: 0
    keen::RenderParameterBlock layerWeightsParameterBlock; // Offset: 52
    keen::RenderParameterBlock layerPbrMaterialsParameterBlock; // Offset: 104
    keen::RenderParameterBlock blendMapsParameterBlock; // Offset: 156
};

struct SimpleBuildingMaterialResource {
};

struct SkinnedTreeInstanceData {
    keen::uint skinMatrixOffset; // Offset: 0
};

struct SkinnedTreeModelSpringParameters {
    keen::float mass; // Offset: 0
    keen::float constant; // Offset: 4
    keen::float damping; // Offset: 8
    keen::float drag; // Offset: 12
};

struct SkinnedTreeModelParameters {
    keen::SkinnedTreeModelSpringParameters trunk; // Offset: 0
    keen::SkinnedTreeModelSpringParameters branch; // Offset: 16
};

struct SkinnedTreeModelSpringData {
    keen::float mass; // Offset: 0
    keen::float constant; // Offset: 4
    keen::float damping; // Offset: 8
    keen::float drag; // Offset: 12
};

struct CpuSkinVector3 {
    keen::vf32_data x; // Offset: 0
    keen::vf32_data y; // Offset: 16
    keen::vf32_data z; // Offset: 32
};

struct CpuSkinMatrix33 {
    keen::vf32_data x; // Offset: 0
    keen::vf32_data y; // Offset: 16
    keen::vf32_data z; // Offset: 32
};

struct CpuSkinMatrix43 {
    keen::CpuSkinMatrix33 rot; // Offset: 0
    keen::vf32_data pos; // Offset: 48
};

struct SkyTextureMaterial {
    keen::ObjectReference<keen::Image> texture; // Offset: 0
    keen::RenderSamplerAddressMode textureAddressMode; // Offset: 16
};

struct SkyTextureRfxRenderMaterial {
    keen::BindlessTexture2D_float4 texture; // Offset: 0
    keen::BindlessSampler sampler; // Offset: 4
};

struct SnowDisplacementUpdateParameters {
    keen::uint worldPixelSize; // Offset: 0
    keen::uint worldTextureSize; // Offset: 4
    keen::uint2 worldTileTopLeft; // Offset: 8
    keen::uint2 worldPositionTopLeft; // Offset: 16
    keen::uint2 oldWorldTileTopLeft; // Offset: 24
    keen::uint2 oldWorldPositionTopLeft; // Offset: 32
    keen::uint worldHeightScale; // Offset: 40
    keen::float rcpHeightScale; // Offset: 44
    keen::uint fadeOutHeightFill; // Offset: 48
    keen::uint heightMin; // Offset: 52
    keen::uint heightMax; // Offset: 56
    keen::uint oldHeightMin; // Offset: 60
    keen::uint bodyCounterOffset; // Offset: 64
};

struct SnowDisplacementBody {
    keen::uint3 packedPosition; // Offset: 0
    keen::float rcpMinSoftness; // Offset: 12
    keen::float rcpMaxSoftness; // Offset: 16
    keen::float heightNoiseScale; // Offset: 20
};

enum class SsaoQuality {
    Low = 0,
    Medium = 1,
    High = 2,
};

struct SsaoData {
    keen::ViewSpacePositionReconstructionData viewspaceReconstructionData; // Offset: 0
    keen::float2 linearDepthParameters; // Offset: 64
    keen::uint2 _padding0; // Offset: 72
    keen::float32 ssaoIntensity; // Offset: 80
    keen::float32 ssaoBias; // Offset: 84
    keen::float32 ssaoScale; // Offset: 88
    keen::float32 ssaoSampleRadius; // Offset: 92
};

struct StochasticScreenSpaceReflectionsConstantData {
    keen::GraphicsMatrix44 g_inv_view_proj; // Offset: 0
    keen::GraphicsMatrix44 g_proj; // Offset: 64
    keen::GraphicsMatrix44 g_inv_proj; // Offset: 128
    keen::GraphicsMatrix43 g_view; // Offset: 192
    keen::GraphicsMatrix43 g_inv_view; // Offset: 240
    keen::GraphicsMatrix44 g_prev_view_proj; // Offset: 288
    keen::float3 g_camera_world_position; // Offset: 352
    keen::uint2 g_buffer_dimensions; // Offset: 368
    keen::float2 g_inv_buffer_dimensions; // Offset: 376
    keen::uint2 g_render_dimensions; // Offset: 384
    keen::float2 g_inv_render_dimensions; // Offset: 392
    keen::float g_temporal_stability_factor; // Offset: 400
    keen::float g_depth_buffer_thickness; // Offset: 404
    keen::float g_depth_buffer_thickness_far; // Offset: 408
    keen::float g_roughness_threshold; // Offset: 412
    keen::float g_temporal_variance_threshold; // Offset: 416
    keen::float g_sdf_ray_max_distance; // Offset: 420
    keen::float g_sdf_ray_start_offset; // Offset: 424
    keen::float g_sdf_hit_offset; // Offset: 428
    keen::uint g_frame_index; // Offset: 432
    keen::uint g_max_traversal_intersections; // Offset: 436
    keen::uint g_min_traversal_occupancy; // Offset: 440
    keen::uint g_most_detailed_mip; // Offset: 444
    keen::uint g_samples_per_quad; // Offset: 448
    keen::uint g_temporal_variance_guided_tracing_enabled; // Offset: 452
    keen::uint g_num_mips; // Offset: 456
    keen::uint g_resolution_downscale; // Offset: 460
    keen::float g_reflect_background; // Offset: 464
    keen::uint g_debug_reflection_rays; // Offset: 468
    keen::float g_edge_bleeding_max_distance; // Offset: 472
    keen::float g_edge_bleeding_offset; // Offset: 476
    keen::uint g_gi_enabled; // Offset: 480
    keen::float g_exposure; // Offset: 484
    keen::uint g_ground_truth_specular; // Offset: 488
};

struct StochasticScreenSpaceReflectionsUpscaleData {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 linearDepthParameters; // Offset: 8
};

struct DebugRootConstantData {
    keen::uint debug_mode; // Offset: 0
};

struct ApplyReflectionsConstants {
    keen::GraphicsMatrix44 clipSpaceToCameraCenteredMatrix; // Offset: 0
    keen::uint2 outputSize; // Offset: 64
    keen::float2 invOutputSize; // Offset: 72
    keen::float specularMax; // Offset: 80
    keen::uint enableHorizonBasedOcclusion; // Offset: 84
    keen::float giLightFactor; // Offset: 88
    keen::uint flags; // Offset: 92
    keen::float specularReflectionsFactor; // Offset: 96
    keen::uint groundTruthSpecular; // Offset: 100
    keen::uint writeToSceneBrightness; // Offset: 104
};

struct SurfacePickerShaderParameters {
    keen::VolumetricFogGridShaderData fogGrid; // Offset: 0
    keen::float3 focusPosition; // Offset: 496
    keen::uint chunkCount; // Offset: 508
    keen::uint seed; // Offset: 512
    keen::float pickingRange; // Offset: 516
    keen::uint debugDrawPicks; // Offset: 520
    keen::uint enableDisplacement; // Offset: 524
};

struct SurfacePickerShaderData {
    keen::StaticArray<keen::uint,6> binSize; // Offset: 0
    keen::StaticArray<keen::uint,6> binOffset; // Offset: 24
    keen::StaticArray<keen::uint,6> binPickIndex; // Offset: 48
    keen::uint culledChunkCount; // Offset: 72
    keen::uint pointCount; // Offset: 76
};

struct SurfacePickerPointShaderData {
    keen::float3 position; // Offset: 0
    keen::float3 normal; // Offset: 12
};

struct SurfacePickerBakedDisplacementShaderData {
    keen::float displacement; // Offset: 0
    keen::float displacementTop; // Offset: 4
    keen::float displacementBottom; // Offset: 8
    keen::float displacementSide; // Offset: 12
};

struct TerraformingCursorMaterial {
    keen::ObjectReference<keen::Image> noiseMap; // Offset: 0
    keen::float3 noiseUvScale; // Offset: 16
    keen::float32 ringThickness; // Offset: 28
    keen::HdrColorRgb ringColor; // Offset: 32
    keen::HdrColorRgb fillColor; // Offset: 48
};

struct TerraformingCursorRfxRenderMaterial {
    keen::float3 noiseUvScale; // Offset: 0
    keen::BindlessTexture3D_float noiseMap; // Offset: 12
    keen::float3 ringColor; // Offset: 16
    keen::float32 ringThickness; // Offset: 28
    keen::float3 fillColor; // Offset: 32
};

struct TextureInfo {
    keen::uint16 width; // Offset: 0
    keen::uint16 height; // Offset: 2
    keen::uint16 depth; // Offset: 4
    keen::uint16 arraySize; // Offset: 6
    keen::uint8 levelCount; // Offset: 8
    keen::TextureType type; // Offset: 9
    keen::PixelFormat format; // Offset: 10
    keen::ContentHash data; // Offset: 12
};

struct TextureSizeInfo {
    keen::TextureInfo info; // Offset: 0
    keen::BlobArray<keen::Guid> sources; // Offset: 28
};

struct TransparentMaterial {
};

enum class TransparentInstanceFlag {
    IsAdditive = 0,
    EnableLighting = 1,
    EnableAlphaClip = 2,
    UseVertexAlphaForAlphaClip = 3,
};

struct TransparentInstanceData {
    keen::uint32 indexCount; // Offset: 0
    keen::uint32 instanceCount; // Offset: 4
    keen::uint32 indexOffset; // Offset: 8
    keen::sint32 vertexOffset; // Offset: 12
    keen::uint32 instanceOffset; // Offset: 16
    keen::BindlessTexture2D_float4 image; // Offset: 20
    keen::BindlessSampler imageSampler; // Offset: 24
    keen::BindlessSampler uvDistortionMapSampler; // Offset: 28
    keen::float32 edgeFadeOutFactor; // Offset: 32
    keen::float3 position; // Offset: 36
    keen::float32 depthFadeDistance; // Offset: 48
    keen::float4 rotation; // Offset: 52
    keen::float3 scale; // Offset: 68
    keen::float3 color; // Offset: 80
    keen::float32 alpha; // Offset: 92
    keen::float2 uvOffset; // Offset: 96
    keen::float2 uvScale; // Offset: 104
    keen::float2 uvDistortionOffset; // Offset: 112
    keen::float2 uvDistortionScale; // Offset: 120
    keen::float32 uvDistortionStrength; // Offset: 128
    keen::BindlessTexture2D_float4 uvDistortionMap; // Offset: 132
    keen::float32 alphaClipValue; // Offset: 136
    keen::float32 alphaClipHalfRange; // Offset: 140
    keen::uint32 flags; // Offset: 144
    keen::BindlessTexture2D_float4 motionVectorImage; // Offset: 148
    keen::float32 motionVectorScale; // Offset: 152
    keen::float32 flipbookTime; // Offset: 156
    keen::uint32 encodedFlipbookSize; // Offset: 160
};

struct TransparentRfxRenderMaterial {
};

struct bool2 {
    keen::bool x; // Offset: 0
    keen::bool y; // Offset: 1
};

struct bool3 {
    keen::bool x; // Offset: 0
    keen::bool y; // Offset: 1
    keen::bool z; // Offset: 2
};

struct bool4 {
    keen::bool x; // Offset: 0
    keen::bool y; // Offset: 1
    keen::bool z; // Offset: 2
    keen::bool w; // Offset: 3
};

typedef keen::uint32 BoolMask;

struct VfxSamplerParameters {
    keen::RenderSamplerAddressMode addressU; // Offset: 0
    keen::RenderSamplerAddressMode addressV; // Offset: 1
    keen::RenderSamplerAddressMode addressW; // Offset: 2
};

enum class ShaderVariableComponentType {
    Float = 0,
    Int = 1,
    Uint = 2,
    Bool = 3,
    Quaternion = 4,
};

struct ShaderVariable {
    keen::string name; // Offset: 0
    keen::ShaderVariableComponentType componentType; // Offset: 8
    keen::uint8 componentCount; // Offset: 9
};

enum class VfxBufferMemberComponentType {
    Float = 0,
    SignedInt = 1,
    UnsignedInt = 2,
    BoolMask = 3,
};

struct VfxBufferMember {
    keen::string name; // Offset: 0
    keen::uint32 componentCount; // Offset: 8
    keen::VfxBufferMemberComponentType componentType; // Offset: 12
    keen::uint32 offsetInBytes; // Offset: 16
};

struct VfxParticleStateBufferInfo {
    keen::BlobArray<keen::VfxBufferMember> members; // Offset: 0
    keen::uint32 sizeInBytes; // Offset: 8
};

enum class VfxParameterType {
    Float = 0,
    Float2 = 1,
    Float3 = 2,
    Float4 = 3,
    Int = 4,
    Int2 = 5,
    Int3 = 6,
    Int4 = 7,
    Color = 8,
    Quaternion = 9,
};

struct VfxMeshPatchPointData {
    keen::uint32 indexCount; // Offset: 0
    keen::uint32 vertexCount; // Offset: 4
    keen::ContentHash vertexData; // Offset: 8
    keen::ContentHash indexData; // Offset: 24
    keen::float4 boundingSphere; // Offset: 40
};

struct VfxModelPatchPointData {
    keen::ObjectReference<keen::Model> model; // Offset: 0
};

struct VfxDecalPatchPointData {
    keen::ObjectReference<keen::Decal> decal; // Offset: 0
};

struct VfxImagePatchPointData {
    keen::uint16 width; // Offset: 0
    keen::uint16 height; // Offset: 2
    keen::uint16 depth; // Offset: 4
    keen::VfxSamplerParameters sampler; // Offset: 6
    keen::uint8 levelCount; // Offset: 9
    keen::TextureType type; // Offset: 10
    keen::PixelFormat format; // Offset: 11
    keen::ContentHash content; // Offset: 12
    keen::string debugName; // Offset: 28
};

struct VfxEmitterPatchPointData {
    keen::uint32 childIndex; // Offset: 0
};

struct VfxCurvePatchPointData {
    keen::ContentHash samples; // Offset: 0
    keen::float32 startTime; // Offset: 16
    keen::float32 totalTime; // Offset: 20
    keen::uint32 sampleCount; // Offset: 24
    keen::string name; // Offset: 28
};

enum class VfxParticleParameterPatchPointType {
    Image = 0,
    Mesh = 1,
    Model = 2,
    Curve = 3,
    Decal = 4,
};

struct VfxParticleParameterPatchPoint {
    keen::VfxParticleParameterPatchPointType type; // Offset: 0
    keen::uint32 offset; // Offset: 4
    keen::uint32 size; // Offset: 8
    keen::uint32 dataIndex; // Offset: 12
};

struct VfxParticleUniformData {
    keen::ContentHash data; // Offset: 0
    keen::BlobArray<keen::VfxParticleParameterPatchPoint> patchPoints; // Offset: 16
    keen::BlobArray<keen::VfxImagePatchPointData> imageData; // Offset: 24
    keen::BlobArray<keen::VfxMeshPatchPointData> meshData; // Offset: 32
    keen::BlobArray<keen::VfxModelPatchPointData> modelData; // Offset: 40
    keen::BlobArray<keen::VfxEmitterPatchPointData> emitterData; // Offset: 48
    keen::BlobArray<keen::VfxCurvePatchPointData> curveData; // Offset: 56
    keen::BlobArray<keen::VfxDecalPatchPointData> decalData; // Offset: 64
};

enum class VfxParticleFeature {
    Emit = 0,
};

typedef keen::Bitmask8<keen::VfxParticleFeature> VfxParticleFeatureMask;

struct VfxParticleResource {
    keen::string name; // Offset: 0
    keen::uint32 parent; // Offset: 8
    keen::uint32 stateSize; // Offset: 12
    keen::uint32 maxCount; // Offset: 16
    keen::ContentHash code; // Offset: 20
    keen::ContentHash strippedCode; // Offset: 36
    keen::VfxParticleUniformData uniformData; // Offset: 52
};

struct VfxUserEffectParameterDescription {
    keen::string name; // Offset: 0
    keen::uint32 nameHash; // Offset: 8
    keen::uint32 offset; // Offset: 12
    keen::uint32 sizeInBytes; // Offset: 16
    keen::Guid inheritanceKey; // Offset: 20
};

struct VfxResource {
    keen::uint64 parameterHash; // Offset: 0
    keen::BlobArray<keen::VfxUserEffectParameterDescription> parameters; // Offset: 8
    keen::VfxUserEffectParameterDataBlock defaultData; // Offset: 16
    keen::BlobArray<keen::VfxParticleResource> particles; // Offset: 80
    keen::BlobArray<keen::VfxParticleStateBufferInfo> stateInfos; // Offset: 88
    keen::float32 cullingDistanceMin; // Offset: 96
    keen::float32 cullingDistanceMax; // Offset: 100
    keen::uint32 killTimeInSeconds; // Offset: 104
    keen::string debugName; // Offset: 108
};

struct VfxNode {
    keen::bool enabled; // Offset: 0
    keen::ObjectReference<keen::VfxParticleDefinition> particle; // Offset: 4
    keen::uint32 maxCount; // Offset: 20
};

struct VfxDefinition {
    keen::float32 cullingDistanceMin; // Offset: 0
    keen::float32 cullingDistanceMax; // Offset: 4
    keen::uint32 killTimeInSeconds; // Offset: 8
};

struct VfxParticleDefinition {
};

enum class VfxParticleValueKind {
    Value = 0,
    Expression = 1,
};

struct VfxParameterDefinitionBase {
    keen::VfxParticleValueKind kind; // Offset: 0
    keen::string expression; // Offset: 4
};

struct VfxParameterDefinition_Float {
    keen::float32 defaultValue; // Offset: 12
};

struct VfxParameterDefinition_Float2 {
    keen::float2 defaultValue; // Offset: 12
};

struct VfxParameterDefinition_Float3 {
    keen::float3 defaultValue; // Offset: 12
};

struct VfxParameterDefinition_Float4 {
    keen::float4 defaultValue; // Offset: 12
};

struct VfxParameterDefinition_Int {
    keen::sint32 defaultValue; // Offset: 12
};

struct VfxParameterDefinition_Int2 {
    keen::int2 defaultValue; // Offset: 12
};

struct VfxParameterDefinition_Int3 {
    keen::int3 defaultValue; // Offset: 12
};

struct VfxParameterDefinition_Int4 {
    keen::int4 defaultValue; // Offset: 12
};

struct VfxParameterDefinition_UInt {
    keen::uint32 defaultValue; // Offset: 12
};

struct VfxParameterDefinition_UInt2 {
    keen::uint2 defaultValue; // Offset: 12
};

struct VfxParameterDefinition_UInt3 {
    keen::uint3 defaultValue; // Offset: 12
};

struct VfxParameterDefinition_UInt4 {
    keen::uint4 defaultValue; // Offset: 12
};

struct VfxParameterDefinition_Bool {
    keen::bool defaultValue; // Offset: 12
};

struct VfxParameterDefinition_Bool2 {
    keen::bool2 defaultValue; // Offset: 12
};

struct VfxParameterDefinition_Bool3 {
    keen::bool3 defaultValue; // Offset: 12
};

struct VfxParameterDefinition_Bool4 {
    keen::bool4 defaultValue; // Offset: 12
};

struct VfxParameterDefinition_Color {
    keen::Color defaultValue; // Offset: 12
};

struct VfxParameterDefinition_Quaternion {
    keen::float4 defaultValue; // Offset: 12
};

struct VfxParameterDefinition_Mesh {
    keen::ObjectReference<keen::Model> defaultValue; // Offset: 12
};

struct VfxParameterDefinition_Model {
    keen::ObjectReference<keen::Model> defaultValue; // Offset: 12
};

struct VfxParameterDefinition_Decal {
    keen::ObjectReference<keen::Decal> defaultValue; // Offset: 12
};

struct VfxParameterDefinition_Emitter {
};

struct VfxParameterDefinition_Image {
    keen::ObjectReference<keen::Image> defaultValue; // Offset: 12
    keen::VfxSamplerParameters sampler; // Offset: 28
};

struct VfxStateDefinitionBase {
    keen::VfxParticleValueKind kind; // Offset: 0
    keen::string expression; // Offset: 4
};

struct VfxStateDefinition_Float {
    keen::float32 defaultValue; // Offset: 12
};

struct VfxStateDefinition_Float2 {
    keen::float2 defaultValue; // Offset: 12
};

struct VfxStateDefinition_Float3 {
    keen::float3 defaultValue; // Offset: 12
};

struct VfxStateDefinition_Float4 {
    keen::float4 defaultValue; // Offset: 12
};

struct VfxStateDefinition_Int {
    keen::sint32 defaultValue; // Offset: 12
};

struct VfxStateDefinition_Int2 {
    keen::int2 defaultValue; // Offset: 12
};

struct VfxStateDefinition_Int3 {
    keen::int3 defaultValue; // Offset: 12
};

struct VfxStateDefinition_Int4 {
    keen::int4 defaultValue; // Offset: 12
};

struct VfxStateDefinition_UInt {
    keen::uint32 defaultValue; // Offset: 12
};

struct VfxStateDefinition_UInt2 {
    keen::uint2 defaultValue; // Offset: 12
};

struct VfxStateDefinition_UInt3 {
    keen::uint3 defaultValue; // Offset: 12
};

struct VfxStateDefinition_UInt4 {
    keen::uint4 defaultValue; // Offset: 12
};

struct VfxStateDefinition_Bool {
    keen::bool defaultValue; // Offset: 12
};

struct VfxStateDefinition_Bool2 {
    keen::bool2 defaultValue; // Offset: 12
};

struct VfxStateDefinition_Bool3 {
    keen::bool3 defaultValue; // Offset: 12
};

struct VfxStateDefinition_Bool4 {
    keen::bool4 defaultValue; // Offset: 12
};

struct VfxStateDefinition_Color {
    keen::Color defaultValue; // Offset: 12
};

struct VfxStateDefinition_Quaternion {
    keen::float4 defaultValue; // Offset: 12
};

struct VfxExpressionBase {
};

struct VfxExpressionValue_Float1 {
    keen::float32 value; // Offset: 0
};

struct VfxExpressionValue_Float2 {
    keen::float2 value; // Offset: 0
};

struct VfxExpressionValue_Float3 {
    keen::float3 value; // Offset: 0
};

struct VfxExpressionValue_Float4 {
    keen::float4 value; // Offset: 0
};

struct VfxExpressionValue_Int1 {
    keen::sint32 value; // Offset: 0
};

struct VfxExpressionValue_Int2 {
    keen::int2 value; // Offset: 0
};

struct VfxExpressionValue_Int3 {
    keen::int3 value; // Offset: 0
};

struct VfxExpressionValue_Int4 {
    keen::int4 value; // Offset: 0
};

struct VfxExpressionValue_UInt1 {
    keen::uint32 value; // Offset: 0
};

struct VfxExpressionValue_UInt2 {
    keen::uint2 value; // Offset: 0
};

struct VfxExpressionValue_UInt3 {
    keen::uint3 value; // Offset: 0
};

struct VfxExpressionValue_UInt4 {
    keen::uint4 value; // Offset: 0
};

struct VfxExpressionValue_Bool {
    keen::bool value; // Offset: 0
};

struct VfxExpressionValue_Bool2 {
    keen::bool2 value; // Offset: 0
};

struct VfxExpressionValue_Bool3 {
    keen::bool3 value; // Offset: 0
};

struct VfxExpressionValue_Bool4 {
    keen::bool4 value; // Offset: 0
};

struct VfxExpressionValue_Color {
    keen::Color value; // Offset: 0
};

struct VfxExpressionValue_Quaternion {
    keen::float4 value; // Offset: 0
};

struct VfxExpressionValue_Particle {
    keen::ObjectReference<keen::VfxNode> value; // Offset: 0
};

struct VfxExpressionValue_Mesh {
    keen::ObjectReference<keen::Model> value; // Offset: 0
};

struct VfxExpressionValue_Model {
    keen::ObjectReference<keen::Model> value; // Offset: 0
};

struct VfxExpressionValue_Decal {
    keen::ObjectReference<keen::Decal> value; // Offset: 0
};

struct VfxExpressionValue_Image {
    keen::ObjectReference<keen::Image> value; // Offset: 0
};

enum class VfxExpressionType {
    Expression = 0,
    Value = 1,
};

struct VfxParameterExpression {
    keen::ObjectReference<keen::VfxParameterDefinitionBase> parameter; // Offset: 0
    keen::VfxExpressionType type; // Offset: 16
    keen::string expression; // Offset: 20
    keen::BlobVariant<keen::VfxExpressionBase> value; // Offset: 28
};

struct VfxStateExpression {
    keen::ObjectReference<keen::VfxStateDefinitionBase> state; // Offset: 0
    keen::VfxExpressionType type; // Offset: 16
    keen::string expression; // Offset: 20
    keen::BlobVariant<keen::VfxExpressionBase> value; // Offset: 28
};

struct VfxEffectParameterBase {
};

struct VfxEffectParameterFloat {
    keen::float32 value; // Offset: 0
};

struct VfxEffectParameterFloat2 {
    keen::float2 value; // Offset: 0
};

struct VfxEffectParameterFloat3 {
    keen::float3 value; // Offset: 0
};

struct VfxEffectParameterFloat4 {
    keen::float4 value; // Offset: 0
};

struct VfxEffectParameterBool {
    keen::bool value; // Offset: 0
};

struct VfxEffectParameterBool2 {
    keen::bool2 value; // Offset: 0
};

struct VfxEffectParameterBool3 {
    keen::bool3 value; // Offset: 0
};

struct VfxEffectParameterBool4 {
    keen::bool4 value; // Offset: 0
};

struct VfxEffectParameterInt {
    keen::sint32 value; // Offset: 0
};

struct VfxEffectParameterInt2 {
    keen::int2 value; // Offset: 0
};

struct VfxEffectParameterInt3 {
    keen::int3 value; // Offset: 0
};

struct VfxEffectParameterInt4 {
    keen::int4 value; // Offset: 0
};

struct VfxEffectParameterUint {
    keen::uint32 value; // Offset: 0
};

struct VfxEffectParameterUint2 {
    keen::uint2 value; // Offset: 0
};

struct VfxEffectParameterUint3 {
    keen::uint3 value; // Offset: 0
};

struct VfxEffectParameterUint4 {
    keen::uint4 value; // Offset: 0
};

struct VfxEffectParameterQuaternion {
    keen::float4 value; // Offset: 0
};

struct VfxEffectParameterColor {
    keen::Color value; // Offset: 0
};

struct VfxEffectParameterGroup {
};

struct VfxGlobalEffectParameterDirectory {
};

struct VfxGlobalEffectParameterInfo {
    keen::Guid inheritanceKey; // Offset: 0
    keen::HashKey32 descriptionHash; // Offset: 16
    keen::DsTypeId typeNameHash; // Offset: 20
};

struct VfxGlobalEffectParameterRegistry {
    keen::BlobArray<keen::VfxGlobalEffectParameterInfo> parameters; // Offset: 0
};

struct VfxEffectParameterInfo {
    keen::VfxUserEffectParameterDescription description; // Offset: 0
    keen::BlobVariant<keen::VfxEffectParameterBase> value; // Offset: 36
    keen::uint32 registerOffset; // Offset: 48
};

struct VfxUserEffectParameterInfos {
    keen::BlobArray<keen::VfxEffectParameterInfo> parameters; // Offset: 0
};

struct VfxProfileEntry {
    keen::Guid effectId; // Offset: 0
    keen::Time emitterGpuTime; // Offset: 16
    keen::Time particleGpuTime; // Offset: 24
    keen::uint32 instanceCount; // Offset: 32
    keen::uint32 chunkCount; // Offset: 36
    keen::uint32 dispatchCount; // Offset: 40
    keen::uint32 memoryUsage; // Offset: 44
};

struct VfxProfileMessage {
    keen::uint64 frameId; // Offset: 0
    keen::Time totalGpuTime; // Offset: 8
    keen::uint32 totalInstanceCount; // Offset: 16
    keen::uint32 totalMemoryUsage; // Offset: 20
    keen::uint32 totalDispatchCount; // Offset: 24
    keen::uint32 viewId; // Offset: 28
    keen::uint32 tickCount; // Offset: 32
    keen::BlobArray<keen::VfxProfileEntry> entries; // Offset: 36
};

struct vfx_converter.ParticleStateInfo {
    keen::BlobVariant<keen::VfxStateDefinitionBase> definition; // Offset: 0
    keen::string name; // Offset: 12
    keen::Guid id; // Offset: 20
    keen::float64 sortKey; // Offset: 40
};

struct vfx_converter.ParticleParameterInfo {
    keen::BlobVariant<keen::VfxParameterDefinitionBase> definition; // Offset: 0
    keen::string name; // Offset: 12
    keen::Guid id; // Offset: 20
    keen::float64 sortKey; // Offset: 40
    keen::BlobArray<keen::vfx_converter::ParticleParameterInfo> spawnParameters; // Offset: 48
};

struct vfx_converter.ParticleDefinitionInfo {
    keen::BlobArray<keen::vfx_converter::ParticleStateInfo> states; // Offset: 0
    keen::BlobArray<keen::vfx_converter::ParticleParameterInfo> parameters; // Offset: 8
    keen::bool isEmitter; // Offset: 16
};

struct VfxConverterConfiguration {
    keen::VfxReference singleEffect; // Offset: 0
};

struct VfxNodeInfo {
    keen::Guid parentNodeId; // Offset: 0
    keen::Guid parentNodeDefinitionId; // Offset: 16
    keen::BlobArray<keen::Guid> childNodeIds; // Offset: 32
    keen::bool isEnabled; // Offset: 40
};

struct VfxBufferEntry {
    keen::Guid id; // Offset: 0
    keen::string name; // Offset: 16
    keen::DsTypeId typeNameHash; // Offset: 24
    keen::uint32 registerOffset; // Offset: 28
    keen::uint32 sizeInRegisters; // Offset: 32
    keen::bool hasCurveExpression; // Offset: 36
    keen::string hlslTypeName; // Offset: 40
    keen::string componentTypeName; // Offset: 48
    keen::uint32 componentCount; // Offset: 56
};

struct VfxBufferInfo {
    keen::BlobArray<keen::VfxBufferEntry> entries; // Offset: 0
    keen::uint32 sizeInRegisters; // Offset: 8
};

struct VfxParticleDefinitionCurveExpression {
    keen::Guid curveId; // Offset: 0
    keen::Guid referencedParameterId; // Offset: 16
};

struct VfxParticleDefinitionCurveExpressions {
    keen::BlobArray<keen::VfxParticleDefinitionCurveExpression> curves; // Offset: 0
};

struct VfxParameterTypeIndices {
    keen::BlobArray<keen::string> types; // Offset: 0
};

struct VfxBaseEffectParameters {
    keen::float4 orientation; // Offset: 0
    keen::float3 position; // Offset: 16
    keen::uint32 startTime; // Offset: 28
    keen::float3 scale; // Offset: 32
    keen::uint32 isActive; // Offset: 44
    keen::float cullingDistanceMin; // Offset: 48
    keen::float cullingDistanceMax; // Offset: 52
    keen::uint32 isHidden; // Offset: 56
    keen::uint32 age; // Offset: 60
};

struct VfxCombinedEffectParameters {
    keen::VfxBaseEffectParameters base; // Offset: 0
    keen::VfxUserEffectParameterDataBlock user; // Offset: 64
};

struct VfxMeshInfo {
    keen::float3 positionScale; // Offset: 0
    keen::uint32 materialIndex; // Offset: 12
    keen::float3 positionOffset; // Offset: 16
    keen::uint32 indexOffset; // Offset: 28
    keen::uint32 vertexOffset; // Offset: 32
    keen::uint32 indexCount; // Offset: 36
    keen::uint32 packedPipelineIndices; // Offset: 40
};

struct VfxModelInfo {
    keen::float4 boundingSphere; // Offset: 0
    keen::uint32 modelSizeFeedbackIndex; // Offset: 16
    keen::uint32 firstMeshOffset; // Offset: 20
    keen::uint32 meshCount; // Offset: 24
};

struct VfxModelInstanceTransform {
    keen::float4 orientation; // Offset: 0
    keen::uint3 packedPosition; // Offset: 16
    keen::float scale; // Offset: 28
};

struct VfxModelInstance {
    keen::VfxModelInstanceTransform transform; // Offset: 0
    keen::VfxModelInstanceTransform previousTransform; // Offset: 32
    keen::float3 color; // Offset: 64
    keen::float alpha; // Offset: 76
    keen::float3 dissolveOffset; // Offset: 80
    keen::float dissolveRadius; // Offset: 92
    keen::float dissolveEdgeBrightness; // Offset: 96
    keen::float alphaClip; // Offset: 100
    keen::uint emissiveFactor; // Offset: 104
};

struct VfxTerraformingCursorInstance {
    keen::float3 boxSize; // Offset: 0
    keen::float sphereRadius; // Offset: 12
    keen::float3 position; // Offset: 16
    keen::uint isBox; // Offset: 28
    keen::float3 uvOffset; // Offset: 32
    keen::float ringAlpha; // Offset: 44
    keen::float ringAlphaClip; // Offset: 48
    keen::float ringAlphaClipHalfRange; // Offset: 52
    keen::float fillAlpha; // Offset: 56
    keen::float fillHardness; // Offset: 60
};

struct VfxCullingInstance {
    keen::float4 orientation; // Offset: 0
    keen::float3 position; // Offset: 16
    keen::float scale; // Offset: 28
    keen::uint modelIndex; // Offset: 32
    keen::uint instanceDataIndex; // Offset: 36
    keen::uint instanceDataTypeId; // Offset: 40
    keen::uint isDissolveActive; // Offset: 44
};

struct VfxModelDrawData {
    keen::float3 positionScale; // Offset: 0
    keen::uint materialIndex; // Offset: 12
    keen::float3 positionOffset; // Offset: 16
    keen::float pad0; // Offset: 28
};

struct VfxIntermediateDraw {
    keen::uint meshCounterIndex; // Offset: 0
    keen::uint instanceIndex; // Offset: 4
};

struct VfxCullingSubView {
    keen::GpuCullingFrustum cameraCenteredFrustum; // Offset: 0
    keen::float minObjectSize; // Offset: 96
};

struct VfxCullingPassConstants {
    keen::uint32 subViewIndex; // Offset: 0
    keen::uint32 normalPipelineShift; // Offset: 4
    keen::uint32 dissolvePipelineShift; // Offset: 8
    keen::uint32 firstBatchIndex; // Offset: 12
};

struct VfxCullInstancesConstants {
    keen::StaticArray<keen::VfxCullingSubView,9> subViews; // Offset: 0
    keen::StaticArray<keen::VfxCullingPassConstants,10> passes; // Offset: 1008
    keen::uint32 subViewCount; // Offset: 1168
    keen::uint32 passCount; // Offset: 1172
    keen::uint32 maxDrawCount; // Offset: 1176
    keen::uint32 maxMeshCount; // Offset: 1180
    keen::uint32 useOcclusionCulling; // Offset: 1184
    keen::float3 cameraWorldPosition; // Offset: 1188
    keen::GraphicsMatrix43 cameraCenteredToViewMatrix; // Offset: 1200
    keen::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 1248
    keen::float modelSizeFeedbackPixelSize; // Offset: 1312
};

struct VfxWriteCulledDrawCommandsPushConstants {
    keen::uint firstBatchIndex; // Offset: 0
    keen::uint maxMeshCount; // Offset: 4
    keen::uint pipelineCount; // Offset: 8
};

struct PreloadVfxList {
};

struct PreloadVfxListResource {
    keen::BlobArray<keen::Guid> vfxIds; // Offset: 0
};

struct VoxelMaterialVfxDataResource {
    keen::BlobArray<keen::uint> materialType; // Offset: 0
};

struct GpuImage2D {
    keen::uint32 index; // Offset: 0
};

struct GpuImage3D {
    keen::uint32 index; // Offset: 0
};

struct GpuSampler {
    keen::uint32 index; // Offset: 0
};

struct GpuCombinedImage2D {
    keen::GpuImage2D image; // Offset: 0
    keen::GpuSampler sampler; // Offset: 4
};

struct GpuCombinedImage3D {
    keen::GpuImage3D image; // Offset: 0
    keen::GpuSampler sampler; // Offset: 4
};

struct GpuMesh {
    keen::uint32 vertexOffset; // Offset: 0
    keen::uint32 indexOffset; // Offset: 4
    keen::uint32 indexCount; // Offset: 8
    keen::uint32 vertexCount; // Offset: 12
    keen::float4 boundingSphere; // Offset: 16
};

struct GpuMeshVertex {
    keen::float3 position; // Offset: 0
    keen::float2 uv; // Offset: 12
    keen::float3 normal; // Offset: 20
    keen::float4 color; // Offset: 32
};

struct GpuDecal {
    keen::uint32 materialDataIndex; // Offset: 0
};

struct GpuCurve {
    keen::uint32 index; // Offset: 0
    keen::uint32 sampleCountMinusOne; // Offset: 4
    keen::float startTime; // Offset: 8
    keen::float inverseTotalTime; // Offset: 12
    keen::float inverseSampleDelta; // Offset: 16
};

struct VfxBaseParticleState {
    keen::uint myParentEmitterIndex; // Offset: 0
    keen::uint instanceIndex; // Offset: 4
    keen::uint rngState; // Offset: 8
    keen::uint tickCount; // Offset: 12
};

struct VfxEmitterState {
    keen::uint particleCounterByteOffset; // Offset: 0
    keen::uint spawnCounterByteOffset; // Offset: 4
    keen::uint maxParticleCount; // Offset: 8
    keen::uint maxSpawnCount; // Offset: 12
    keen::uint particleChunkIndex; // Offset: 16
    keen::uint instanceIndex; // Offset: 20
    keen::uint particleTypeIndex; // Offset: 24
    keen::uint explicitPad0; // Offset: 28
};

struct VfxChunkState {
    keen::uint freeParticleCounterByteOffset; // Offset: 0
    keen::uint currentActiveParticleCounterByteOffset; // Offset: 4
    keen::uint nextActiveParticleCounterByteOffset; // Offset: 8
    keen::uint explicitPad0; // Offset: 12
};

struct VfxUpdateBuffer {
    keen::uint time; // Offset: 0
    keen::float fixedTimeStep; // Offset: 4
    keen::float realTimeStep; // Offset: 8
    keen::uint currentTickId; // Offset: 12
    keen::uint transparentInstanceBufferCapacity; // Offset: 16
    keen::uint transparentInstanceCounterByteOffset; // Offset: 20
    keen::uint injectInstanceBufferCapacity; // Offset: 24
    keen::uint injectInstanceCounterByteOffset; // Offset: 28
    keen::uint pointLightBufferCapacity; // Offset: 32
    keen::uint pointLightCounterByteOffset; // Offset: 36
    keen::uint decalBufferCapacity; // Offset: 40
    keen::uint decalCounterByteOffset; // Offset: 44
    keen::uint grassMovementBodyCounterByteOffset; // Offset: 48
    keen::uint grassMovementBodyListCapacity; // Offset: 52
    keen::float32 exposure; // Offset: 56
    keen::float32 exposureCorrection; // Offset: 60
    keen::float3 cameraPosition; // Offset: 64
    keen::float timeOfDay; // Offset: 76
    keen::uint3 cameraWorldPosition; // Offset: 80
    keen::float4 cameraOrientation; // Offset: 96
    keen::StaticArray<keen::float4,5> frustumPlanes; // Offset: 112
    keen::float3 sunDirection; // Offset: 192
    keen::float32 sunDirectLightFadeFactor; // Offset: 204
    keen::float3 moonDirection; // Offset: 208
    keen::float32 moonDirectLightFadeFactor; // Offset: 220
    keen::uint skipInjectSort; // Offset: 224
    keen::uint worldChunkCount; // Offset: 228
    keen::uint useParallelRadixSort; // Offset: 232
    keen::DynamicHeightmapSamplingShaderData dynamicHeightmap; // Offset: 240
    keen::uint isDynamicHeightmapValid; // Offset: 272
    keen::uint sdfCascadeCount; // Offset: 276
    keen::uint firstSdfImageIndex; // Offset: 280
    keen::float32 sdfInvGridSize; // Offset: 284
    keen::uint isSdfBvhValid; // Offset: 288
    keen::VolumetricFogGridShaderData fogGrid; // Offset: 304
    keen::uint playerCount; // Offset: 800
    keen::StaticArray<keen::float4,16> playerPositions; // Offset: 816
    keen::uint maxCullingInstanceCount; // Offset: 1072
    keen::uint maxModelInstanceCount; // Offset: 1076
    keen::uint maxTerraformingCursorInstanceCount; // Offset: 1080
    keen::uint hideSpiders; // Offset: 1084
    keen::uint snowDisplacementBodyCounterByteOffset; // Offset: 1088
    keen::uint snowDisplacementBodyListCapacity; // Offset: 1092
    keen::WeatherSampleConstants weatherSampleConstants; // Offset: 1104
};

struct VfxPushConstants {
    keen::uint data; // Offset: 0
};

struct VfxPrepareBuffer {
    keen::uint emitterCount; // Offset: 0
};

struct VfxWorldChunk {
    keen::uint vertexOffset; // Offset: 0
    keen::uint vertexCount; // Offset: 4
    keen::uint indexOffset; // Offset: 8
    keen::uint indexCount; // Offset: 12
    keen::uint type; // Offset: 16
    keen::float4 translationAndScale; // Offset: 20
};

struct GpuSortData {
    keen::float highSortKey; // Offset: 0
    keen::float lowSortKey; // Offset: 4
    keen::uint instanceIndex; // Offset: 8
    keen::uint explicitPad0; // Offset: 12
};

struct GpuSortShaderData {
    keen::uint elementCount; // Offset: 0
};

struct GpuSortWritebackShaderData {
    keen::uint elementCounterOffset; // Offset: 0
};

struct VfxChunkUpdateBuffer2 {
    keen::uint particleTypeParametersOffset; // Offset: 0
    keen::uint activeParticleCounterByteOffset; // Offset: 4
    keen::uint nextActiveParticleCounterByteOffset; // Offset: 8
    keen::uint freeParticleCounterByteOffset; // Offset: 12
    keen::uint particleStatesOffset; // Offset: 16
    keen::uint oldActiveParticleIndicesOffset; // Offset: 20
    keen::uint newActiveParticleIndicesOffset; // Offset: 24
    keen::uint freeParticleIndicesOffset; // Offset: 28
    keen::uint parentStatesOffset; // Offset: 32
    keen::uint oldActiveParentParticleIndicesOffset; // Offset: 36
    keen::uint childParticleStatesOffset; // Offset: 40
    keen::uint childParticleFreeListOffset; // Offset: 44
    keen::uint childActiveParticleIndicesOffset; // Offset: 48
    keen::uint chunkId; // Offset: 52
    keen::uint explicitPad0; // Offset: 56
    keen::uint explicitPad1; // Offset: 60
};

struct ViewReprojectionData {
    keen::GraphicsMatrix44 ndcToPreviousNdcMatrix; // Offset: 0
};

struct Fog2DownsampleDepthParameters {
    keen::uint2 sourceSize; // Offset: 0
    keen::float2 invSourceSize; // Offset: 8
};

struct Fog2MinMaxDepthParameters {
    keen::uint2 sourceSize; // Offset: 0
    keen::float2 invSourceSize; // Offset: 8
    keen::uint2 targetSize; // Offset: 16
    keen::uint32 tileSize; // Offset: 24
};

struct Fog2SampleSkyParameters {
    keen::float32 cloudLayerY; // Offset: 0
    keen::float32 planetRadius; // Offset: 4
};

struct Fog2CloudsErosionParameters {
    keen::float3 scrollSpeed; // Offset: 0
    keen::float32 tilingFactor; // Offset: 12
    keen::float32 heightTilingFactor; // Offset: 16
    keen::uint32 noiseTextureIndex; // Offset: 20
    keen::float32 strength; // Offset: 24
};

struct Fog2CloudsParameters {
    keen::float32 yRange; // Offset: 0
    keen::float32 invYRange; // Offset: 4
    keen::float2 texcoordMapping; // Offset: 8
    keen::uint32 cloudTypes; // Offset: 16
    keen::Fog2CloudsErosionParameters erosionPass0; // Offset: 32
    keen::Fog2CloudsErosionParameters erosionPass1; // Offset: 64
    keen::Fog2CloudsErosionParameters erosionPass2; // Offset: 96
    keen::float3 emission; // Offset: 128
    keen::float3 inScatteringDivExtinction; // Offset: 144
    keen::float32 extinctionLn2; // Offset: 156
};

struct Fog2RenderSkyParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::uint2 blueNoiseOffset; // Offset: 16
    keen::uint32 blueNoiseSizeMask; // Offset: 24
    keen::uint32 ditherPatternOffset; // Offset: 28
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 32
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 96
    keen::uint32 rayMarchSampleCount; // Offset: 160
    keen::float3 lightFactorSun; // Offset: 164
    keen::float32 exposure; // Offset: 176
    keen::float3 lightFactorSky; // Offset: 180
    keen::ForwardDirectionalLightData cloudsLight; // Offset: 192
    keen::ForwardDirectionalLightData skyLight0; // Offset: 224
    keen::ForwardDirectionalLightData skyLight1; // Offset: 256
    keen::AtmosphereShaderData atmosphere; // Offset: 288
    keen::Fog2CloudsParameters clouds; // Offset: 352
    keen::Fog2SampleSkyParameters sky; // Offset: 512
    keen::float32 time; // Offset: 528
};

struct Fog2BlurSkyParameters {
    keen::uint2 outputSize; // Offset: 0
};

struct Fog2TfSkyParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::float32 oldWeight; // Offset: 16
    keen::float32 oldToNewExposure; // Offset: 20
    keen::GraphicsMatrix44 oldViewProjectionMatrix; // Offset: 32
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 96
    keen::Fog2SampleSkyParameters sky; // Offset: 160
};

struct CloudsSampleConstants {
    keen::float2 texcoordMappingScale; // Offset: 0
    keen::float2 texcoordMappingOffset; // Offset: 8
};

struct Fog2SampleParameters {
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 0
    keen::float3 cameraPosition; // Offset: 64
    keen::ForwardDirectionalLightData directionalLightData0; // Offset: 80
    keen::uint32 enableWeather; // Offset: 112
    keen::WeatherSampleConstants weatherSampleConstants; // Offset: 128
    keen::CloudsSampleConstants cloudsSampleConstants; // Offset: 256
    keen::AtmosphereShaderData atmosphere; // Offset: 272
    keen::VolumetricShadowRuntimeData volumetricShadow; // Offset: 336
    keen::RenderShadowAtlasShaderData shadowAtlas; // Offset: 576
    keen::VolumetricFogGridShaderData fogGrid; // Offset: 1664
    keen::SdfShaderData fogGridSdf; // Offset: 2160
    keen::GrassMovementData grassMovement; // Offset: 2176
    keen::float32 exposureCorrection; // Offset: 2208
    keen::float32 lightFactorEmissive; // Offset: 2212
    keen::float3 lightFactorSun; // Offset: 2224
    keen::float3 lightFactorSky; // Offset: 2240
    keen::float32 lightFactorPointLights; // Offset: 2252
    keen::GiAmbientFroxelVolumeParameters giFroxelParameters; // Offset: 2256
    keen::float32 lightFactorGi; // Offset: 2320
    keen::float2 surfaceFadeFunction; // Offset: 2324
    keen::float32 surfaceWidthFactor; // Offset: 2332
    keen::float32 surfaceNoiseScrollSpeed; // Offset: 2336
    keen::float32 surfaceNoiseScaleFactor; // Offset: 2340
    keen::uint32 surfaceNoiseDescriptorIndex; // Offset: 2344
    keen::VolumetricFogGridMaterial surfaceMaterial; // Offset: 2352
    keen::SdfShaderData worldSdf; // Offset: 2400
    keen::float worldHeightPositionMapping; // Offset: 2416
    keen::float2 groundFadeFunction; // Offset: 2420
    keen::float2 groundGradientFadeFunction; // Offset: 2432
    keen::float32 groundHeightFactor; // Offset: 2440
    keen::float32 groundNoiseScrollSpeed; // Offset: 2444
    keen::float32 groundNoiseScale; // Offset: 2448
    keen::uint32 groundNoiseDescriptorIndex; // Offset: 2452
    keen::VolumetricFogGridMaterial groundMaterialAbove; // Offset: 2464
    keen::VolumetricFogGridMaterial groundMaterialBelow; // Offset: 2512
    keen::float32 heightExponent; // Offset: 2560
    keen::float32 forestExponent; // Offset: 2564
    keen::float2 heightFadeFunction; // Offset: 2568
    keen::float2 forestFadeFunction; // Offset: 2576
    keen::VolumetricFogGridMaterial heightMaterial; // Offset: 2592
    keen::VolumetricFogGridMaterial forestMaterial; // Offset: 2640
    keen::VolumetricFogGridMaterial rainMaterial; // Offset: 2688
    keen::VolumetricFogGridMaterial snowMaterial; // Offset: 2736
    keen::VolumetricFogGridMaterial blizzardMaterial; // Offset: 2784
    keen::float32 time; // Offset: 2832
    keen::VoxelWorldShadowMapShaderData voxelWorldShadowMap; // Offset: 2848
    keen::uint32 isGiEnabled; // Offset: 3008
    keen::GiAmbientProbesLookupData ambientProbesLookupData; // Offset: 3024
};

struct Fog2RenderParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 16
    keen::Fog2SampleSkyParameters sky; // Offset: 80
    keen::float32 exposure; // Offset: 96
};

struct Fog2RenderBlurResultParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
};

struct Fog2TemporalBlendResultParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::float32 oldWeight; // Offset: 16
    keen::float32 oldDepthDifferenceWeight; // Offset: 20
    keen::float2 linearDepthParameters; // Offset: 24
    keen::float32 oldToNewExposure; // Offset: 32
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 48
    keen::GraphicsMatrix44 oldViewProjectionMatrix; // Offset: 112
};

struct Fog2InitializeShadowVolumeParameters {
    keen::uint32 shadowVolumeResolution; // Offset: 0
    keen::float32 invShadowVolumeResolution; // Offset: 4
    keen::uint32 cascadeIndex; // Offset: 8
    keen::uint32 injectInstanceCounterByteOffset; // Offset: 12
    keen::GraphicsMatrix43 shadowCascadeToWorldMatrix; // Offset: 16
};

struct Fog2IntegrateShadowVolumeCascadeParameters {
    keen::uint32 shadowVolumeResolution; // Offset: 0
    keen::float32 invShadowVolumeResolution; // Offset: 4
    keen::uint32 cascadeIndex; // Offset: 8
    keen::GraphicsMatrix43 shadowCascadeToWorldMatrix; // Offset: 16
    keen::GraphicsMatrix43 worldToNextShadowCascadeMatrix; // Offset: 64
    keen::float32 dk; // Offset: 112
};

struct Fog2IntegrateLastShadowVolumeCascadeParameters {
    keen::uint32 shadowVolumeResolution; // Offset: 0
    keen::float32 invShadowVolumeResolution; // Offset: 4
    keen::uint32 cascadeIndex; // Offset: 8
    keen::GraphicsMatrix43 shadowCascadeToWorldMatrix; // Offset: 16
    keen::float32 dk; // Offset: 64
    keen::VolumetricShadowRuntimeData volumetricShadow; // Offset: 80
};

struct Fog2WriteShadowViewVolumeParameters {
    keen::uint3 viewVolumeSize; // Offset: 0
    keen::float3 invViewVolumeSize; // Offset: 16
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 96
    keen::uint2 blueNoiseOffset; // Offset: 112
    keen::uint32 blueNoiseSizeMask; // Offset: 120
    keen::uint32 manyLightsShadowsEnabled; // Offset: 124
};

struct Fog2TfShadowViewVolumeParameters {
    keen::uint3 viewVolumeSize; // Offset: 0
    keen::float32 oldWeight; // Offset: 12
    keen::float3 invViewVolumeSize; // Offset: 16
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 96
    keen::GraphicsMatrix44 oldViewProjectionMatrix; // Offset: 112
    keen::Fog2ViewVolumeTransform oldViewVolumeTransform; // Offset: 176
};

struct Fog2WriteScatteredLightVolumeParameters {
    keen::uint3 viewVolumeSize; // Offset: 0
    keen::float3 invViewVolumeSize; // Offset: 16
    keen::float32 exposure; // Offset: 28
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 96
    keen::uint2 blueNoiseOffset; // Offset: 112
    keen::uint32 blueNoiseSizeMask; // Offset: 120
    keen::uint32 manyLightsShadowsEnabled; // Offset: 124
    keen::uint32 isShadowViewVolumeValid; // Offset: 128
};

struct Fog2TfScatteredLightVolumeParameters {
    keen::uint3 viewVolumeSize; // Offset: 0
    keen::float32 oldWeight; // Offset: 12
    keen::float3 invViewVolumeSize; // Offset: 16
    keen::float32 oldToNewExposure; // Offset: 28
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 96
    keen::GraphicsMatrix44 oldViewProjectionMatrix; // Offset: 112
    keen::Fog2ViewVolumeTransform oldViewVolumeTransform; // Offset: 176
};

struct Fog2InitializeParticipatingMediaVolumeParameters {
    keen::uint3 viewVolumeSize; // Offset: 0
    keen::float3 invViewVolumeSize; // Offset: 16
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 96
    keen::uint2 blueNoiseOffset; // Offset: 112
    keen::uint32 blueNoiseSizeMask; // Offset: 120
    keen::uint32 injectInstanceCounterByteOffset; // Offset: 124
};

struct Fog2WriteViewVolumeSourceTermParameters {
    keen::uint3 viewVolumeSize; // Offset: 0
    keen::float3 invViewVolumeSize; // Offset: 16
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 96
    keen::float32 exposure; // Offset: 112
    keen::float32 exposureCorrection; // Offset: 116
    keen::uint2 blueNoiseOffset; // Offset: 120
    keen::uint32 blueNoiseSizeMask; // Offset: 128
    keen::uint32 manyLightsShadowsEnabled; // Offset: 132
    keen::uint32 isShadowViewVolumeValid; // Offset: 136
    keen::uint32 isScatteredLightVolumeValid; // Offset: 140
};

struct Fog2TfViewVolumeParameters {
    keen::uint3 viewVolumeSize; // Offset: 0
    keen::float32 oldWeight; // Offset: 12
    keen::float3 invViewVolumeSize; // Offset: 16
    keen::float32 oldToNewExposure; // Offset: 28
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 96
    keen::GraphicsMatrix44 oldViewProjectionMatrix; // Offset: 112
    keen::Fog2ViewVolumeTransform oldViewVolumeTransform; // Offset: 176
};

struct Fog2IntegrateViewVolumeParameters {
    keen::uint3 viewVolumeSize; // Offset: 0
    keen::float3 invViewVolumeSize; // Offset: 16
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 96
    keen::uint2 blueNoiseOffset; // Offset: 112
    keen::uint32 blueNoiseSizeMask; // Offset: 120
};

struct Fog2IntegrateViewVolume2Parameters {
    keen::uint3 viewVolumeSize; // Offset: 0
    keen::float32 windTime; // Offset: 12
    keen::float3 invViewVolumeSize; // Offset: 16
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 96
};

struct Fog2RenderFogGridIntersectionsParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 16
    keen::Fog2SampleSkyParameters sky; // Offset: 80
    keen::float3 fogGridMin; // Offset: 96
    keen::float3 fogGridMax; // Offset: 112
    keen::uint32 maxStepCount; // Offset: 124
};

struct Fog2RenderWeatherMapIntersectionsParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 16
    keen::Fog2SampleSkyParameters sky; // Offset: 80
    keen::float2 weatherMapMin; // Offset: 96
    keen::float2 weatherMapMax; // Offset: 104
    keen::float2 weatherMapVoxelSize; // Offset: 112
    keen::uint32 maxStepCount; // Offset: 120
    keen::uint32 enableWeather; // Offset: 124
};

struct Fog2RenderRaymarchParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 16
    keen::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 80
    keen::Fog2SampleSkyParameters sky; // Offset: 96
    keen::uint2 blueNoiseOffset; // Offset: 112
    keen::uint32 blueNoiseSizeMask; // Offset: 120
    keen::float32 exposure; // Offset: 124
};

struct Fog2CompositeViewVolumeDebugParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 16
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 80
    keen::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 144
    keen::GraphicsMatrix44 viewVolumeViewProjectionMatrix; // Offset: 160
    keen::GraphicsMatrix44 viewVolumeInvViewProjectionMatrix; // Offset: 224
    keen::float32 dk; // Offset: 288
};

struct Fog2RenderUpscaleResultParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::uint2 blueNoiseOffset; // Offset: 8
    keen::uint32 blueNoiseSizeMask; // Offset: 16
    keen::float2 linearDepthParameters; // Offset: 20
};

struct Fog2TestParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 16
};

enum class Fog2CompositeFlag {
    Sky = 0,
    Result = 1,
    ViewVolume = 2,
    ViewVolumeDither = 3,
};

typedef keen::Bitmask32<keen::Fog2CompositeFlag> Fog2CompositeFlags;

struct Fog2CompositeParameters {
    keen::uint2 targetSize; // Offset: 0
    keen::float2 invTargetSize; // Offset: 8
    keen::uint32 flags; // Offset: 16
    keen::Fog2ViewVolumeSampleParameters sampleParameters; // Offset: 32
    keen::uint2 blueNoiseOffset; // Offset: 64
    keen::uint32 blueNoiseSizeMask; // Offset: 72
};

struct Fog2DebugBlitParameters {
    keen::uint2 blitOffset; // Offset: 0
    keen::uint2 blitSize; // Offset: 8
    keen::float32 scale; // Offset: 16
};

struct VolumetricFog2ResourceData {
    keen::ObjectReference<keen::VolumetricFogInitializationMaterial> initializationMaterial; // Offset: 0
    keen::ObjectReference<keen::render::AtmosphereParameters> atmosphere; // Offset: 16
    keen::FogMaterialParameters surfaceMaterial; // Offset: 32
    keen::float32 surfaceWidth; // Offset: 60
    keen::ImageReference surfaceNoise; // Offset: 64
    keen::float32 surfaceNoiseScale; // Offset: 80
    keen::float32 surfaceNoiseScrollSpeed; // Offset: 84
    keen::FloatRange surfaceFadeRange; // Offset: 88
    keen::float32 groundHeightExponent; // Offset: 96
    keen::FogMaterialParameters groundMaterialAbove; // Offset: 100
    keen::FogMaterialParameters groundMaterialBelow; // Offset: 128
    keen::FloatRange groundFadeRange; // Offset: 156
    keen::FloatRange groundGradientFadeRange; // Offset: 164
    keen::ImageReference groundNoise; // Offset: 172
    keen::float32 groundNoiseScale; // Offset: 188
    keen::float32 groundNoiseFlowSpeed; // Offset: 192
    keen::float32 heightExponent; // Offset: 196
    keen::FogMaterialParameters heightMaterial; // Offset: 200
    keen::FloatRange heightFadeRange; // Offset: 228
    keen::float32 forestExponent; // Offset: 236
    keen::FogMaterialParameters forestMaterial; // Offset: 240
    keen::FloatRange forestFadeRange; // Offset: 268
    keen::FogMaterialParameters rainMaterial; // Offset: 276
    keen::FogMaterialParameters snowMaterial; // Offset: 304
    keen::FogMaterialParameters blizzardMaterial; // Offset: 332
};

struct VolumetricFog2Resource {
    keen::Fog2SampleSkyParameters sampleSkyParameters; // Offset: 0
    keen::Fog2CloudsParameters cloudParameters; // Offset: 16
    keen::RenderTexture cloudTypes; // Offset: 176
    keen::RenderTexture cloudErosionPass0; // Offset: 212
    keen::RenderTexture cloudErosionPass1; // Offset: 248
    keen::RenderTexture cloudErosionPass2; // Offset: 284
    keen::float2 surfaceFadeFunction; // Offset: 320
    keen::float32 surfaceWidth; // Offset: 328
    keen::RenderTexture surfaceNoise; // Offset: 332
    keen::float32 surfaceNoiseScale; // Offset: 368
    keen::float32 surfaceNoiseScrollSpeed; // Offset: 372
    keen::FogMaterialParameters surfaceMaterial; // Offset: 376
    keen::float32 groundHeightFactor; // Offset: 404
    keen::FogMaterialParameters groundMaterialAbove; // Offset: 408
    keen::FogMaterialParameters groundMaterialBelow; // Offset: 436
    keen::float2 groundFadeFunction; // Offset: 464
    keen::float2 groundGradientFadeFunction; // Offset: 472
    keen::RenderTexture groundNoise; // Offset: 480
    keen::float32 groundNoiseScale; // Offset: 516
    keen::float32 groundNoiseScrollSpeed; // Offset: 520
    keen::float32 heightExponent; // Offset: 524
    keen::FogMaterialParameters heightMaterial; // Offset: 528
    keen::float2 heightFadeFunction; // Offset: 556
    keen::float32 forestExponent; // Offset: 564
    keen::FogMaterialParameters forestMaterial; // Offset: 568
    keen::float2 forestFadeFunction; // Offset: 596
    keen::FogMaterialParameters rainMaterial; // Offset: 604
    keen::FogMaterialParameters snowMaterial; // Offset: 632
    keen::FogMaterialParameters blizzardMaterial; // Offset: 660
};

typedef keen::StaticArray<keen::Matrix43,4> Fog2ShadowVolumeTransformMatrices;

struct VolumetricFogGridRenderParameters {
    keen::FogMaterialParameters noneMaterial; // Offset: 0
    keen::FogMaterialParameters dangerousMaterial; // Offset: 28
    keen::FogMaterialParameters deadlyMaterial; // Offset: 56
    keen::FogMaterialParameters decorativeMaterial; // Offset: 84
};

struct VolumetricFogGridUpdateShaderData {
    keen::int3 origin; // Offset: 0
    keen::uint3 size; // Offset: 16
    keen::uint32 bufferOffset; // Offset: 28
};

struct GroundFogParameters {
    keen::float32 height; // Offset: 28
    keen::float32 angleFadeoutPosition; // Offset: 32
    keen::float32 angleFadeoutRange; // Offset: 36
    keen::float32 sdfGradientEpsilon; // Offset: 40
    keen::float32 flowSpeed; // Offset: 44
    keen::ObjectReference<keen::Image> noise; // Offset: 48
    keen::float32 noiseTilingSize; // Offset: 64
};

struct CloudErosionPass {
    keen::float32 tilingSize; // Offset: 0
    keen::float32 heightTilingSize; // Offset: 4
    keen::float32 scrollSpeed; // Offset: 8
    keen::float32 strength; // Offset: 12
    keen::ObjectReference<keen::Image> noise; // Offset: 16
};

struct CloudParameters {
    keen::float32 yMin; // Offset: 28
    keen::float32 yMax; // Offset: 32
    keen::ObjectReference<keen::Image> cloudMap; // Offset: 36
    keen::ObjectReference<keen::Image> cloudTypes; // Offset: 52
    keen::CloudErosionPass erosionPass0; // Offset: 68
    keen::CloudErosionPass erosionPass1; // Offset: 100
    keen::CloudErosionPass erosionPass2; // Offset: 132
    keen::float32 shadowStrength; // Offset: 164
    keen::float32 shadowStrengthSlope; // Offset: 168
    keen::float32 shadowStrengthOffset; // Offset: 172
    keen::float32 fadeoutStart; // Offset: 176
    keen::float32 fadeoutRange; // Offset: 180
};

struct VolumetricFogInitializationMaterial {
    keen::GroundFogParameters ground; // Offset: 0
    keen::CloudParameters clouds; // Offset: 68
};

struct CloudLayerShadowParameterBlockData {
    keen::float32 yMin; // Offset: 0
    keen::float32 yMax; // Offset: 4
    keen::float32 invYRange; // Offset: 8
    keen::float32 shadowStrength; // Offset: 12
    keen::float2 shadowSampleMap; // Offset: 16
};

struct AnalyticFogShadowParameterBlock {
    keen::CloudLayerShadowParameterBlockData clouds; // Offset: 0
};

struct AnalyticFogResource {
    keen::RenderParameterBlock analyticFogShadowParameterBlock; // Offset: 0
    keen::RenderTexture cloudMap; // Offset: 52
};

enum class VolumetricFogInjectionShape {
    Box = 0,
    Sphere = 1,
};

struct VolumetricFogInjectInstanceData {
    keen::float3 position; // Offset: 0
    keen::uint32 shape; // Offset: 12
    keen::float4 rotation; // Offset: 16
    keen::float3 size; // Offset: 32
    keen::float32 density; // Offset: 44
    keen::BindlessTexture3D_float densityTexture; // Offset: 48
    keen::BindlessSampler densityTextureSampler; // Offset: 52
    keen::float32 falloff; // Offset: 56
    keen::float3 uvOffset; // Offset: 60
    keen::float3 uvScale; // Offset: 72
    keen::float3 emission; // Offset: 84
    keen::float32 extinction; // Offset: 96
    keen::float3 scattering; // Offset: 100
    keen::float32 g; // Offset: 112
};

enum class WeatherSampleFlag {
    EnableDynamicWetness = 1,
    ApplyWeather = 2,
};

struct VoxelMaterialList {
    keen::ObjectReference<keen::BaseVoxelMaterial> defaultTerrainMaterial; // Offset: 0
};

typedef keen::ObjectReference<keen::BaseVoxelMaterial> VoxelMaterialReference;

struct TerrainMaterialLayer {
    keen::ObjectReference<keen::PbrMaterialParameters> material; // Offset: 0
    keen::float32 tilingSize; // Offset: 16
    keen::bool enableSeparateTilingSizeY; // Offset: 20
    keen::float32 tilingSizeY; // Offset: 24
    keen::float32 parallaxDepth; // Offset: 28
    keen::uint32 parallaxMinLayerCount; // Offset: 32
    keen::uint32 parallaxMaxLayerCount; // Offset: 36
    keen::float32 parallaxFadeoutStart; // Offset: 40
    keen::float32 parallaxFadeoutLength; // Offset: 44
    keen::float32 parallaxMinAngle; // Offset: 48
    keen::float32 parallaxAngleFadeoutLength; // Offset: 52
    keen::PbrTerrainMaterialDisplacementLayer displacement; // Offset: 56
};

struct TerrainMaterialOverlayBlendLayer {
    keen::float32 fadeInDistance; // Offset: 64
    keen::float32 fadeInRange; // Offset: 68
};

struct TerrainMaterialDetailBlendLayer {
    keen::float32 maxOpacity; // Offset: 72
    keen::float32 maxOpacityNormal; // Offset: 76
    keen::PbrTerrainMaterialDetailNormalBlendMode mode; // Offset: 80
};

struct TerrainMaterialColorVariation {
    keen::ObjectReference<keen::Image> map; // Offset: 0
    keen::float32 tilingSize; // Offset: 16
    keen::bool enableMidPoint; // Offset: 20
    keen::Color start; // Offset: 24
    keen::Color mid; // Offset: 28
    keen::Color end; // Offset: 32
    keen::float32 midPosition; // Offset: 36
};

enum class WorldMaterialBlending2MappingDirection {
    Side = 1,
    Top = 2,
    Bottom = 4,
    All = 7,
};

struct WorldMaterial2Layer {
    keen::WorldMaterialBlending2MappingDirection mappingDirection; // Offset: 0
    keen::float32 heightBias; // Offset: 4
    keen::ObjectReference<keen::Image> edgeNoiseMap; // Offset: 8
    keen::float32 edgeNoiseMapTilingSize; // Offset: 24
    keen::float32 edgeNoiseStrength; // Offset: 28
    keen::PbrTerrainMaterialCenterBlendingSmoothness frontRightBlendingSmoothness; // Offset: 32
    keen::bool enableSnowDisplacement; // Offset: 40
    keen::bool disableFrostShader; // Offset: 41
    keen::bool disableSnowShader; // Offset: 42
    keen::bool disableWetnessShader; // Offset: 43
    keen::bool enableFrostShaderGlitter; // Offset: 44
};

enum class WorldMaterial2Area {
    Surface = 0,
    Underworld = 1,
};

enum class WorldMaterial2Side {
    Top = 0,
    Side = 1,
    Bottom = 2,
};

enum class WorldMaterial2BlendingValue {
    Flatness = 0,
};

struct WorldMaterial2BlendingValueMapping {
    keen::float32 position; // Offset: 0
    keen::float32 range; // Offset: 4
};

struct WorldMaterial2Node {
    keen::bool enable; // Offset: 0
};

struct WorldMaterial2AreaNode {
    keen::WorldMaterial2Area area; // Offset: 1
};

struct WorldMaterial2VoxelMaterialNode {
    keen::ObjectReference<keen::BaseVoxelMaterial> voxelMaterial; // Offset: 4
};

struct WorldMaterial2SideSelectorNode {
    keen::WorldMaterial2BlendingValueMapping topMapping; // Offset: 4
    keen::WorldMaterial2BlendingValueMapping bottomMapping; // Offset: 12
};

struct WorldMaterial2SideNode {
    keen::WorldMaterial2Side side; // Offset: 1
};

struct WorldMaterial2BlendingValueNode {
    keen::WorldMaterial2BlendingValue value; // Offset: 1
    keen::WorldMaterial2BlendingValueMapping mapping; // Offset: 4
    keen::bool invert; // Offset: 12
};

struct WorldMaterial2MapNode {
    keen::ObjectReference<keen::Image> map; // Offset: 4
    keen::float32 mapTilingSize; // Offset: 20
};

struct WorldMaterial2LayerNode {
    keen::ObjectReference<keen::WorldMaterial2Layer> material; // Offset: 4
};

struct WorldMaterial2 {
};

enum class WorldMaterialBlending2BlendingMode {
    Blend = 0,
    OverlayNormal = 1,
};

enum class WorldMaterialBlending2BakingBlendValueOperationType {
    Area = 1,
    VoxelMaterial = 2,
    InputValue = 3,
    Map = 4,
    Top = 10,
    Bottom = 11,
    Side = 12,
};

enum class WorldMaterialBlending2BakingInputValue {
    TopSide = 0,
    BottomSide = 1,
    Flatness = 2,
};

struct WorldMaterialBlending2BakingBlendValueOperation {
    keen::uint32 type; // Offset: 0
    keen::float32 param0; // Offset: 4
    keen::float32 param1; // Offset: 8
    keen::float32 param2; // Offset: 12
    keen::float32 param3; // Offset: 16
};

struct WorldMaterialBlending2BakingLayerShaderData {
    keen::StaticArray<keen::WorldMaterialBlending2BakingBlendValueOperation,8> ops; // Offset: 0
    keen::uint32 opCount; // Offset: 160
};

struct WorldMaterialBlending2MaterialBlendLayerShaderData {
    keen::float2 weightFunction; // Offset: 0
};

enum class WorldMaterialBlending2MaterialLayerFlag {
    UsesDetailScattering = 1,
    UsesSnowDisplacement = 2,
    DisableFrostShader = 4,
    DisableSnowShader = 8,
    DisableWetnessShader = 16,
    UsesFrostShaderGlitter = 32,
};

struct WorldMaterialBlending2MaterialLayerRenderingShaderData {
    keen::uint32 mappingDirection; // Offset: 0
    keen::uint32 baseLayerIndex; // Offset: 4
    keen::uint32 blendLayerCount; // Offset: 8
    keen::uint32 detailBlendingMode; // Offset: 12
    keen::float32 heightBlendingFactor; // Offset: 16
    keen::StreamedTexture2D_float edgeNoise; // Offset: 20
    keen::float32 edgeNoiseTilingFactor; // Offset: 24
    keen::float32 edgeNoiseMappingFactor; // Offset: 28
    keen::float4 frontRightBlendSmoothness; // Offset: 32
    keen::float2 detailWeightFunction; // Offset: 48
    keen::float2 detailOpacityMapping; // Offset: 56
    keen::StaticArray<keen::WorldMaterialBlending2MaterialBlendLayerShaderData,4> blendLayerParameters; // Offset: 64
    keen::float3 colorVariationStart; // Offset: 96
    keen::StreamedTexture2D_float4 colorVariationMap; // Offset: 108
    keen::float3 colorVariationMid; // Offset: 112
    keen::float32 colorVariationTilingFactor; // Offset: 124
    keen::float3 colorVariationEnd; // Offset: 128
    keen::uint32 flags; // Offset: 140
    keen::float3 colorVariationParams; // Offset: 144
};

struct WorldMaterialBlending2MaterialLayerTextureShaderData {
    keen::float2 tilingFactor; // Offset: 0
    keen::StreamedTexture2D_float4 emissiveMap; // Offset: 8
    keen::float32 emissiveMapIntensity; // Offset: 12
    keen::float32 emissiveExposureCorrectionFactor; // Offset: 16
    keen::StreamedTexture2D_float4 albedoMap; // Offset: 20
    keen::StreamedTexture2D_float roughnessMap; // Offset: 24
    keen::StreamedTexture2D_float4 normalMap; // Offset: 28
    keen::StreamedTexture2D_float heightMap; // Offset: 32
    keen::StreamedTexture2D_float aoMap; // Offset: 36
    keen::float32 displacementScale; // Offset: 40
    keen::float32 displacementOffset; // Offset: 44
    keen::float32 parallaxFactor; // Offset: 48
    keen::uint32 parallaxMinLayerCount; // Offset: 52
    keen::uint32 parallaxMaxLayerCount; // Offset: 56
    keen::float32 parallaxFadeoutStart; // Offset: 60
    keen::float32 parallaxInverseFadeoutLength; // Offset: 64
    keen::float32 parallaxMinAngleSin; // Offset: 68
    keen::float32 parallaxInverseAngleFadeoutLength; // Offset: 72
    keen::float32 emissiveGiFactor; // Offset: 76
    keen::float32 distortionMapScale; // Offset: 80
    keen::float32 distortionMapSpeed; // Offset: 84
    keen::float32 distortionMapIntensity; // Offset: 88
    keen::float32 lightningMapScrollSpeed; // Offset: 92
    keen::float32 lightningMapIntensity; // Offset: 96
    keen::StreamedTexture2D_float4 distortionMap; // Offset: 100
    keen::StreamedTexture2D_float4 lightningMap; // Offset: 104
    keen::StreamedTexture2D_float4 gradientMap; // Offset: 108
};

struct WorldMaterialBlending2MaterialLayerRange {
    keen::uint32 firstLayer; // Offset: 0
    keen::uint32 layerCount; // Offset: 4
};

struct WorldMaterialBlending2Resource {
    keen::uint32 layerCount; // Offset: 0
    keen::RenderParameterBlock bakingParameterBlock; // Offset: 4
    keen::RenderParameterBlock renderingLayerParameterBlock; // Offset: 56
    keen::RenderParameterBlock renderingTextureParameterBlock; // Offset: 108
    keen::RenderParameterBlock voxelToLayerParameterBlock; // Offset: 160
    keen::BlobArray<keen::RenderModelImageSizeInfo> renderingLayerImageSizeInfos; // Offset: 212
    keen::BlobArray<keen::uint32> renderingLayerImageSizeInfoStartIndices; // Offset: 220
    keen::BlobArray<keen::RenderModelImageSizeInfo> renderingTextureImageSizeInfos; // Offset: 228
    keen::BlobArray<keen::uint32> renderingTextureImageSizeInfoStartIndices; // Offset: 236
    keen::BlobArray<keen::bool> renderingLayerUsesSnowDisplacement; // Offset: 244
};

struct WorldMaterialBlending2DebugResource {
    keen::BlobArray<keen::Guid> layerGuids; // Offset: 0
    keen::BlobArray<keen::string> layerNames; // Offset: 8
};

struct ZoneVisualizationSdfBoundingSphere {
    keen::float3 worldSpacePosition; // Offset: 0
    keen::float32 sqrRadius; // Offset: 12
};

enum class ZoneVisualizationSdfElementType {
    BuildZone = 0,
    NoBuildZone = 1,
};

struct ZoneVisualizationSdfElement {
    keen::float3 halfSize; // Offset: 0
    keen::ZoneVisualizationSdfElementType type; // Offset: 12
};

struct ZoneVisualizationSdfShaderData {
    keen::uint32 elementCount; // Offset: 0
    keen::float32 smoothingRadius; // Offset: 4
};

struct ZoneVisualizationSdfShaderStorageData {
    keen::StaticArray<keen::ZoneVisualizationSdfBoundingSphere,32> boundingSpheres; // Offset: 0
    keen::StaticArray<keen::ZoneVisualizationSdfElement,32> elements; // Offset: 512
};

struct ZoneVisualizationSdfRenderingShaderData {
    keen::float32 borderInverseSize; // Offset: 0
    keen::float32 borderCurveMax; // Offset: 4
    keen::float32 noiseBorderTilingFactor; // Offset: 8
    keen::float32 noisePositionTilingFactor; // Offset: 12
    keen::float32 noiseOffset; // Offset: 16
    keen::float2 buildZoneCameraDistanceFadeFunction; // Offset: 20
    keen::float2 noBuildZoneCameraDistanceFadeFunction; // Offset: 32
    keen::float2 noBuildZoneBuildZoneDistanceFadeFunction; // Offset: 40
    keen::float2 noBuildZonePreviewDistanceFadeFunction; // Offset: 48
    keen::float3 buildZoneBorderColor; // Offset: 64
    keen::float3 noBuildZoneBorderColor; // Offset: 80
    keen::uint32 drawBuildZoneBorder; // Offset: 92
    keen::ZoneVisualizationSdfBoundingSphere previewBuildZoneBoundingSphere; // Offset: 96
    keen::ZoneVisualizationSdfElement previewBuildZone; // Offset: 112
    keen::float3 previewBuildZoneBorderColor; // Offset: 128
};

struct ZoneVisualizationRasterizationShaderData {
    keen::GraphicsMatrix43 viewMatrix; // Offset: 0
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 48
    keen::float3 cameraPosition; // Offset: 112
    keen::float4 color; // Offset: 128
    keen::float2 distanceFarFadeFunction; // Offset: 144
    keen::float2 distanceNearFadeFunction; // Offset: 152
};

struct ZoneVisualizationRasterizationPushConstants {
    keen::float3 boxCenter; // Offset: 0
    keen::float3 boxHalfSize; // Offset: 12
};

struct ZoneVisualizationSettings {
    keen::float32 smoothingRadius; // Offset: 0
    keen::HdrColorRgb buildZoneBorderColor; // Offset: 4
    keen::HdrColorRgb noBuildZoneBorderColor; // Offset: 20
    keen::HdrColorRgb previewBuildZoneBorderColor; // Offset: 36
    keen::float32 borderSize; // Offset: 52
    keen::float32 borderCurveMax; // Offset: 56
    keen::ObjectReference<keen::Image> noiseTexture; // Offset: 60
    keen::float32 noiseBorderTilingSize; // Offset: 76
    keen::float32 noisePositionTilingSize; // Offset: 80
    keen::float32 noiseScrollSpeed; // Offset: 84
    keen::FloatRange buildZoneDistanceFadeRange; // Offset: 88
    keen::FloatRange noBuildZoneDistanceFadeRange; // Offset: 96
    keen::FloatRange noBuildZoneBuildZoneDistanceFadeRange; // Offset: 104
    keen::FloatRange noBuildZonePreviewDistanceFadeRange; // Offset: 112
    keen::HdrColorRgb playableAreaColor; // Offset: 120
    keen::float32 playableAreaAlpha; // Offset: 136
    keen::FloatRange playableAreaDistanceFadeRange; // Offset: 140
    keen::FloatRange playableAreaNearFadeRange; // Offset: 148
    keen::ObjectReference<keen::Model> playableAreaModel; // Offset: 156
};

struct ZoneVisualizationResource {
    keen::float32 smoothingRadius; // Offset: 0
    keen::float32 borderInverseSize; // Offset: 4
    keen::float32 borderCurveMax; // Offset: 8
    keen::RenderTexture noiseTexture; // Offset: 12
    keen::float32 noiseBorderTilingFactor; // Offset: 48
    keen::float32 noisePositionTilingFactor; // Offset: 52
    keen::float32 noiseScrollSpeed; // Offset: 56
    keen::float2 buildZoneCameraDistanceFadeFunction; // Offset: 60
    keen::float2 noBuildZoneCameraDistanceFadeFunction; // Offset: 68
    keen::float2 noBuildZoneBuildZoneDistanceFadeFunction; // Offset: 76
    keen::float2 noBuildZonePreviewDistanceFadeFunction; // Offset: 84
    keen::float3 buildZoneBorderColor; // Offset: 92
    keen::float3 noBuildZoneBorderColor; // Offset: 104
    keen::float3 previewBuildZoneBorderColor; // Offset: 116
    keen::float4 playableAreaColor; // Offset: 128
    keen::float2 playableAreaCameraDistanceFarFadeFunction; // Offset: 144
    keen::float2 playableAreaCameraDistanceNearFadeFunction; // Offset: 152
    keen::uint32 playableAreaMeshVertexCount; // Offset: 160
    keen::uint32 playableAreaMeshIndexCount; // Offset: 164
    keen::ContentHash playableAreaMeshData; // Offset: 168
};

struct BlockOutMeshPointBrushScatteringSettings {
    keen::bool disablePoint; // Offset: 0
    keen::bool disableLowerEdge; // Offset: 1
    keen::bool disableUpperEdge; // Offset: 2
    keen::bool disableWallTriangle0; // Offset: 3
    keen::bool disableWallTriangle1; // Offset: 4
};

struct BlockOutMeshPoint {
    keen::float3 position; // Offset: 0
    keen::float32 height; // Offset: 12
    keen::float2 offset; // Offset: 16
    keen::BlockOutMeshPointBrushScatteringSettings brushScattering; // Offset: 24
};

enum class DistributionRule {
    Everywhere = 0,
    AboveFog = 1,
    BelowFog = 2,
};

enum class DistributionNodeType {
    None = 0,
    VoxelBrush = 1,
    Scene = 2,
    Spawn = 3,
};

struct SceneEntitySpawnData {
    keen::float3 velocity; // Offset: 0
    keen::Color tintColor; // Offset: 12
    keen::float32 triggerRange; // Offset: 16
    keen::float32 triggerRange2; // Offset: 20
    keen::float32 triggerRange3; // Offset: 24
    keen::ecs::Offset triggerOffset; // Offset: 28
    keen::sint32 level; // Offset: 68
    keen::sint32 levelOffset; // Offset: 72
    keen::ecs::EnemySettings enemySettings; // Offset: 76
    keen::ecs::RandomSpawnerEntitySettings randomSpawnerSettings; // Offset: 140
    keen::ecs::EnemyTestFlags enemyTestFlags; // Offset: 144
    keen::AmbientEnvironment ambience; // Offset: 148
    keen::ObjectReference<keen::ecs::EnemyMarkerTag> enemyMarkerTag; // Offset: 152
    keen::LocaTagReference teleporterId; // Offset: 168
    keen::LocaTagReference teleportTargetId; // Offset: 184
    keen::float32 jumpDistance; // Offset: 200
    keen::float32 jumpHeight; // Offset: 204
    keen::Quaternion jumpLaunchOffset; // Offset: 208
    keen::ecs::EntitySpawnValueMask mask; // Offset: 224
};

struct DistributionNode {
    keen::DistributionNodeType type; // Offset: 0
    keen::ObjectReference<keen::Model> voxelBrush; // Offset: 4
    keen::float32 voxelBrushScale; // Offset: 20
    keen::float32 voxelBrushScaleVariation; // Offset: 24
    keen::ObjectReference<keen::Scene> scene; // Offset: 28
    keen::sint32 spawnLevelOffset; // Offset: 44
    keen::ObjectReference<keen::ecs::Template> spawnTemplate; // Offset: 48
    keen::SceneEntitySpawnData spawnData; // Offset: 64
    keen::bool alignRotationToRoad; // Offset: 292
    keen::ObjectReference<keen::AbstractScatterImage> map; // Offset: 296
    keen::ObjectReference<keen::CompositeScatterImage> compositeMap; // Offset: 312
    keen::DistributionRule rule; // Offset: 328
    keen::float32 density; // Offset: 332
    keen::float32 radius; // Offset: 336
    keen::float32 maxHeightDifference; // Offset: 340
    keen::float32 minDistance; // Offset: 344
    keen::float32 minContentDistance; // Offset: 348
    keen::float32 maxRoadDistance; // Offset: 352
    keen::bool onlyAtCrossings; // Offset: 356
    keen::bool snapToRoad; // Offset: 357
    keen::FloatRange rotationRange; // Offset: 360
};

struct DistributionNodeGroupEntry {
    keen::DistributionNodeType type; // Offset: 0
    keen::Guid objectId; // Offset: 4
    keen::ObjectReference<keen::Model> voxelBrush; // Offset: 20
    keen::float32 voxelBrushScale; // Offset: 36
    keen::float32 voxelBrushScaleVariation; // Offset: 40
    keen::ObjectReference<keen::Scene> scene; // Offset: 44
    keen::sint32 spawnLevelOffset; // Offset: 60
    keen::ObjectReference<keen::ecs::Template> spawnTemplate; // Offset: 64
    keen::SceneEntitySpawnData spawnData; // Offset: 80
    keen::BlobArray<keen::WhiteboxTagInfo> whiteboxTags; // Offset: 308
    keen::float32 probabilityWeight; // Offset: 316
    keen::bool alignRotationToRoad; // Offset: 320
    keen::FloatRange rotationRange; // Offset: 324
};

struct RoadCrossingNode {
    keen::ObjectReference<keen::Scene> scene; // Offset: 0
    keen::uint32 weight; // Offset: 16
    keen::bool keepPlainCrossing; // Offset: 20
};

struct ConvertedDistributionNode {
    keen::ObjectReference<keen::AbstractScatterImage> map; // Offset: 0
    keen::DistributionRule rule; // Offset: 16
    keen::float32 density; // Offset: 20
    keen::float32 radius; // Offset: 24
    keen::float32 maxHeightDifference; // Offset: 28
    keen::float32 minDistance; // Offset: 32
    keen::float32 minContentDistance; // Offset: 36
    keen::float32 maxRoadDistance; // Offset: 40
    keen::bool onlyAtCrossings; // Offset: 44
    keen::bool snapToRoad; // Offset: 45
    keen::Guid objectId; // Offset: 48
    keen::BlobArray<keen::DistributionNodeGroupEntry> groupEntries; // Offset: 64
};

struct DistributionNodes {
    keen::BlobArray<keen::ConvertedDistributionNode> nodes; // Offset: 0
    keen::BlobArray<keen::RoadCrossingNode> roadCrossings; // Offset: 8
};

struct ScatterSetImageInfos {
    keen::BlobArray<keen::ObjectReference<keen::ScatterImage>> images; // Offset: 0
};

enum class ScatterResolution {
    One = 0,
    Two = 1,
    Four = 2,
    Eight = 3,
    Sixteen = 4,
};

struct ScatterNodeMap {
    keen::ObjectReference<keen::Image> image; // Offset: 0
    keen::uint2 position; // Offset: 16
    keen::uint2 size; // Offset: 24
    keen::bool wrap; // Offset: 32
};

enum class ScatterNodeFlag {
    UseNormal = 0,
};

typedef keen::Bitmask8<keen::ScatterNodeFlag> ScatterNodeFlags;

enum class ScatterLocation {
    Surface = 0,
    Cave = 1,
    Ceiling = 2,
};

enum class ScatterSetVoxelMap {
    FloorHeight = 0,
    CeilHeight = 1,
    CaveHeight = 2,
    FloorPitch = 3,
    CavePitch = 4,
    FloorBuilding = 5,
    FloorFog = 6,
    CaveFog = 7,
    RoadDistance = 8,
    Blockers = 9,
};

enum class ScatterSetRule {
    Nowhere = 0,
    Everywhere = 1,
    Flat = 2,
    AboveFog = 3,
    BelowFog = 4,
    InCave = 5,
    ForestCore = 6,
    ForestBorder = 7,
    Road = 8,
    RoadBorder = 9,
    Water = 10,
};

enum class ScatterSetFootprintMap {
    Two = 0,
    Four = 1,
    Eight = 2,
    Sixteen = 3,
};

enum class ScatterSetImageMap {
    Forest = 0,
};

struct ScatterScaleRange {
    keen::float32 minValue; // Offset: 0
    keen::float32 maxValue; // Offset: 4
};

struct ScatterYawRange {
    keen::sint32 minValue; // Offset: 0
    keen::sint32 maxValue; // Offset: 4
};

struct ScatterPitchRange {
    keen::uint32 minValue; // Offset: 0
    keen::uint32 maxValue; // Offset: 4
};

enum class ScatterNodeImageType {
    ScatterNodeMap = 0,
    ScatterImage = 1,
    CompositeScatterImage = 2,
};

struct ScatterNode {
    keen::ScatterNodeImageType imageType; // Offset: 0
    keen::ObjectReference<keen::AbstractScatterImage> scatterImage; // Offset: 4
    keen::ObjectReference<keen::CompositeScatterImage> compositeScatterImage; // Offset: 20
    keen::ScatterNodeMap map; // Offset: 36
    keen::ObjectReference<keen::Model> model; // Offset: 72
    keen::ecs::TemplateReference entity; // Offset: 88
    keen::ScatterResolution resolution; // Offset: 104
    keen::ScatterSetRule rule; // Offset: 105
    keen::Biome biome; // Offset: 106
    keen::ScatterLocation location; // Offset: 107
    keen::uint32 footprint; // Offset: 108
    keen::float32 probability; // Offset: 112
    keen::ScatterScaleRange scale; // Offset: 116
    keen::ScatterYawRange yaw; // Offset: 124
    keen::ScatterPitchRange pitch; // Offset: 132
    keen::ScatterNodeFlags flags; // Offset: 140
};

struct ScatterSetMaps {
    keen::ScatterNodeImageType imageType; // Offset: 0
    keen::ObjectReference<keen::Image> forest; // Offset: 4
    keen::ObjectReference<keen::AbstractScatterImage> forestScatterImage; // Offset: 20
    keen::ObjectReference<keen::CompositeScatterImage> forestCompositeScatterImage; // Offset: 36
};

struct ScatterSet3 {
    keen::ScatterSetMaps maps; // Offset: 0
};

struct ScatterSetObject {
    keen::ObjectReference<keen::Model> model; // Offset: 0
    keen::ecs::TemplateResourceReference entity; // Offset: 16
    keen::ScatterSetRule rule; // Offset: 32
    keen::uint32 mapIndex; // Offset: 36
    keen::uint32 footprint; // Offset: 40
    keen::float32 probability; // Offset: 44
    keen::FloatRange scale; // Offset: 48
    keen::FloatRange yaw; // Offset: 56
    keen::FloatRange pitch; // Offset: 64
    keen::ScatterNodeFlags flags; // Offset: 72
    keen::Biome biome; // Offset: 73
    keen::ScatterLocation location; // Offset: 74
    keen::ScatterResolution resolution; // Offset: 75
    keen::BlobString name; // Offset: 76
};

struct ScatterSetMapInfo {
    keen::uint2 size; // Offset: 0
    keen::ContentHash hash; // Offset: 8
    keen::BlobString name; // Offset: 24
    keen::BlobString bauPath; // Offset: 32
};

struct ScatterSetImageData {
    keen::uint2 imageSize; // Offset: 0
    keen::uint2 position; // Offset: 8
    keen::uint2 size; // Offset: 16
    keen::bool wrap; // Offset: 24
    keen::ContentHash hash; // Offset: 28
    keen::BlobString name; // Offset: 44
    keen::BlobString bauPath; // Offset: 52
    keen::Guid scatterImage; // Offset: 60
};

struct ScatterSetLocationObjects {
    keen::BlobArray<keen::uint32> objects; // Offset: 0
};

struct ScatterSetResolutionObjects {
    keen::StaticArray<keen::ScatterSetLocationObjects,3> locations; // Offset: 0
};

struct ScatterSet3Resource {
    keen::BlobArray<keen::ScatterSetImageData> maps; // Offset: 0
    keen::StaticArray<keen::ScatterSetResolutionObjects,5> resolutions; // Offset: 8
    keen::BlobArray<keen::ScatterSetObject> objects; // Offset: 128
};

typedef keen::ObjectReference<keen::ScatterSet3Resource> ScatterSet3ResourceReference;

enum class composite_scatter_image.CompositeOperation {
    Multiply = 0,
    InverseMultiply = 1,
    Min = 2,
    Max = 3,
    Add = 4,
    Sub = 5,
};

enum class composite_scatter_image.InputType {
    ScatterImage = 0,
    CompositeScatterImage = 1,
    Value = 2,
};

enum class composite_scatter_image.InputOperation {
    None = 0,
    Invert = 1,
    RangeToMask = 2,
};

struct composite_scatter_image.Input {
    keen::composite_scatter_image::InputType type; // Offset: 0
    keen::ObjectReference<keen::AbstractScatterImage> scatterImage; // Offset: 4
    keen::ObjectReference<keen::CompositeScatterImage> compositeScatterImage; // Offset: 20
    keen::float32 value; // Offset: 36
    keen::composite_scatter_image::InputOperation inputOperation; // Offset: 40
    keen::float32 inputToMaskMin; // Offset: 44
    keen::float32 inputToMaskMax; // Offset: 48
    keen::composite_scatter_image::CompositeOperation operation; // Offset: 52
};

struct CompositeScatterImage {
    keen::uint32 upscaleFactor; // Offset: 0
    keen::StaticArray<keen::composite_scatter_image::Input,6> inputs; // Offset: 4
    keen::float32 remapSourceFrom; // Offset: 340
    keen::float32 remapSourceTo; // Offset: 344
    keen::float32 outputLevelsFrom; // Offset: 348
    keen::float32 outputLevelsTo; // Offset: 352
};

struct TestCompositeScatterImage {
    keen::ObjectReference<keen::CompositeScatterImage> testObjectReference; // Offset: 0
};

struct DungeonTriggerConfiguration {
};

struct DungeonTriggerSetup {
    keen::BlobString identifier; // Offset: 0
    keen::Color color; // Offset: 8
};

struct DungeonTriggerSlot {
    keen::BlobString identifier; // Offset: 0
    keen::HashKey32 triggerSlotHash; // Offset: 8
};

struct DungeonTriggerInput {
};

struct DungeonTriggerOutput {
    keen::bool sendActivateEvent; // Offset: 12
    keen::bool sendDeactivateEvent; // Offset: 13
    keen::bool sendResultSignal; // Offset: 14
};

struct DungeonTriggerInfo {
    keen::Color color; // Offset: 0
    keen::BlobArray<keen::DungeonTriggerInput> inputs; // Offset: 4
    keen::BlobArray<keen::DungeonTriggerOutput> outputs; // Offset: 12
};

typedef keen::DungeonTriggerInfo EntityTriggerInfo;

struct DungeonTriggerGraph {
};

struct DungeonTriggerGraphNode {
    keen::Vector2 position; // Offset: 0
    keen::Guid roomInstanceId; // Offset: 8
};

struct DungeonTriggerGraphNodeEndPoint {
    keen::ObjectReference<keen::SceneDungeonRoomWhitebox> trigger; // Offset: 24
    keen::ObjectReference<keen::DungeonRoomScene> scene; // Offset: 40
    keen::ObjectReference<keen::SceneDungeonRoomInstance> room; // Offset: 56
};

enum class DungeonLogicOperator {
    Invalid = 0,
    And = 1,
    Or = 2,
    Not = 3,
};

struct DungeonTriggerSettingsNode {
};

struct DungeonTriggerGraphNodeDungeonLogic {
};

struct DungeonTriggerGraphNodeBool {
    keen::bool value; // Offset: 24
};

struct DungeonTriggerGraphNodeAnd {
    keen::DungeonLogicOperator op; // Offset: 24
};

struct DungeonTriggerGraphNodeOr {
    keen::DungeonLogicOperator op; // Offset: 24
};

struct DungeonTriggerGraphNodeNot {
    keen::DungeonLogicOperator op; // Offset: 24
};

struct DungeonTriggerGraphNodeDelay {
    keen::Time duration; // Offset: 24
    keen::DelayMask filter; // Offset: 32
};

struct DungeonTriggerGraphNodeSender {
};

struct DungeonTriggerGraphNodeReceiver {
};

struct DungeonTriggerGraphNodeWhitebox {
};

struct DungeonTriggerGraphLink {
    keen::ObjectReference<keen::DungeonTriggerGraphNode> startNode; // Offset: 0
    keen::ObjectReference<keen::DungeonTriggerGraphNode> endNode; // Offset: 16
    keen::HashKey32 startSlot; // Offset: 32
    keen::HashKey32 endSlot; // Offset: 36
    keen::uint8 startIndex; // Offset: 40
    keen::uint8 endIndex; // Offset: 41
    keen::bool sendActivateEvent; // Offset: 42
    keen::bool sendDeactivateEvent; // Offset: 43
    keen::bool sendResultSignal; // Offset: 44
};

struct PrefabTriggerInfo {
    keen::Guid triggerEntityGuid; // Offset: 0
    keen::HashKey32 triggerSlotHash; // Offset: 16
};

struct PrefabContainmentSet {
    keen::BlobArray<keen::HashKey32> triggerTypes; // Offset: 0
};

struct PrefabTriggerSlotType {
    keen::HashKey32 slotTypeId; // Offset: 0
    keen::bool isInput; // Offset: 4
    keen::Color uiColor; // Offset: 8
    keen::string identifier; // Offset: 12
    keen::bool sendActivateEvent; // Offset: 20
    keen::bool sendDeactivateEvent; // Offset: 21
    keen::bool sendResultSignal; // Offset: 22
};

struct PrefabContainment {
    keen::Guid prefabId; // Offset: 0
    keen::BlobArray<keen::PrefabTriggerInfo> triggerGuids; // Offset: 16
    keen::BlobArray<keen::PrefabTriggerSlotType> slotDefinitions; // Offset: 24
    keen::BlobArray<keen::PrefabContainmentSet> containmentVariations; // Offset: 32
};

struct WhiteboxContainment {
    keen::BlobArray<keen::PrefabTriggerSlotType> slotDefinitions; // Offset: 0
    keen::BlobArray<keen::PrefabContainmentSet> containmentVariations; // Offset: 8
};

enum class WhiteboxTriggerFlags {
    Invalid = 0,
    Settings = 1,
    Sender = 2,
    Receiver = 3,
};

typedef keen::Bitmask8<keen::WhiteboxTriggerFlags> WhiteboxTriggerMask;

struct WhiteboxTriggerSetup {
    keen::string triggerFormula; // Offset: 0
    keen::Time triggerDelay; // Offset: 8
    keen::DelayMask triggerDelayMask; // Offset: 16
    keen::StaticArray<keen::HashKey32,16> triggerIds; // Offset: 20
    keen::HashKey32 triggerSlot; // Offset: 84
    keen::WhiteboxTriggerMask triggerMask; // Offset: 88
    keen::uint8 triggerIndex; // Offset: 89
    keen::bool sendActivateEvent; // Offset: 90
    keen::bool sendDeactivateEvent; // Offset: 91
    keen::bool sendResultSignal; // Offset: 92
    keen::bool initialState; // Offset: 93
};

struct WhiteboxTriggerInfo {
    keen::Guid triggerObjectInstanceId; // Offset: 96
};

struct DungeonTrigger {
    keen::BlobString identifier; // Offset: 0
    keen::WorldTransform transform; // Offset: 8
    keen::Guid roomSceneId; // Offset: 64
    keen::Guid roomInstanceId; // Offset: 80
    keen::Guid whiteboxInstanceId; // Offset: 96
    keen::BlobArray<keen::PrefabContainmentSet> containmentVariations; // Offset: 112
    keen::AxisAlignedBox boundingBox; // Offset: 128
};

struct RoomTriggerList {
    keen::Guid dungeonTriggerGraphId; // Offset: 0
    keen::BlobArray<keen::PrefabTriggerSlotType> slotDefinitions; // Offset: 16
    keen::BlobArray<keen::DungeonTrigger> trigger; // Offset: 24
};

struct DungeonTriggerWhitebox {
    keen::Guid id; // Offset: 0
    keen::BlobArray<keen::WhiteboxTriggerSetup> setups; // Offset: 16
};

struct DungeonTriggerRoom {
    keen::Guid id; // Offset: 0
    keen::BlobArray<keen::DungeonTriggerWhitebox> whiteboxes; // Offset: 16
};

struct DungeonTriggers {
    keen::BlobArray<keen::DungeonTriggerRoom> rooms; // Offset: 0
};

struct EntityAnimationPath {
    keen::AttachmentSlot slot; // Offset: 0
    keen::Time length; // Offset: 8
};

struct EntityAnimationPathPoint {
    keen::float3 offset; // Offset: 0
    keen::Quaternion orientation; // Offset: 12
    keen::bool enableConstantRotationX; // Offset: 28
    keen::float constantRotationX; // Offset: 32
    keen::bool enableConstantRotationY; // Offset: 36
    keen::float constantRotationY; // Offset: 40
    keen::bool enableConstantRotationZ; // Offset: 44
    keen::float constantRotationZ; // Offset: 48
};

struct SceneTemplate {
};

struct SceneWaterTemplate {
};

struct VfxUserEffectParameterDataBlockIncludeDummy0 {
    keen::VfxUserEffectParameterDataBlock dummy; // Offset: 0
};

struct SceneModel {
    keen::ObjectReference<keen::Model> model; // Offset: 64
    keen::ObjectReference<keen::ClothCollider> clothCollider; // Offset: 80
    keen::Color color; // Offset: 96
};

struct EntitySpawnDefinition {
    keen::ecs::TemplateReference templateReference; // Offset: 0
    keen::ObjectReference<keen::Model> model; // Offset: 16
    keen::Color color; // Offset: 32
};

struct TemplatePreviewSubEntity {
    keen::Guid templateId; // Offset: 0
    keen::BlobArray<keen::ObjectReference<keen::Model>> models; // Offset: 16
    keen::ecs::Offset offset; // Offset: 24
    keen::AttachmentSlot slot; // Offset: 64
};

struct TemplatePreviewVfx {
    keen::ObjectReference<keen::VfxDefinition> vfx; // Offset: 0
    keen::ecs::Offset offset; // Offset: 16
    keen::AttachmentSlot slot; // Offset: 56
    keen::BlobOptional<keen::VfxUserEffectParameterDataBlock> initParameters; // Offset: 60
};

struct TemplatePreviewPart {
    keen::ObjectReference<keen::Model> model; // Offset: 0
    keen::ColorCombination paletteColors; // Offset: 16
    keen::ObjectReference<keen::RenderGradientMapResource> gradient; // Offset: 64
    keen::BlobArray<keen::RenderBlendShapeSlot> blendShapes; // Offset: 80
};

struct TemplatePreview {
    keen::BlobArray<keen::TemplatePreviewPart> parts; // Offset: 0
    keen::ObjectReference<keen::ecs::Template> spawnedEntity; // Offset: 8
    keen::TemplatePreviewVfx vfx; // Offset: 24
    keen::BlobArray<keen::TemplatePreviewSubEntity> subEntities; // Offset: 88
    keen::AttachmentSlotMask subEntityAttachmentMask; // Offset: 96
    keen::ObjectReference<keen::AnimationGraph> animationGraph; // Offset: 100
    keen::StaticArray<keen::AnimationJointIndex,14> slotJointIndexMapping; // Offset: 116
    keen::Guid hierarchyId; // Offset: 144
    keen::ecs::ColliderDataArray allColliders; // Offset: 160
    keen::float scale; // Offset: 168
};

struct TemplateInfo {
    keen::BlobString description; // Offset: 0
    keen::bool isPlayerSpawn; // Offset: 8
    keen::bool isMapMarker; // Offset: 9
    keen::bool isFakePlayerSpawner; // Offset: 10
    keen::bool isContainer; // Offset: 11
    keen::bool isActor; // Offset: 12
    keen::bool isAutomatedPlayer; // Offset: 13
    keen::bool isSkinned; // Offset: 14
    keen::bool doNotSave; // Offset: 15
    keen::bool questEntity; // Offset: 16
    keen::bool isNpc; // Offset: 17
    keen::bool isCraftingAssistant; // Offset: 18
    keen::LocaTagId nameLocaId; // Offset: 20
    keen::UiNpcRenderingOptions npcRenderingOptions; // Offset: 24
    keen::WorkshopId workshopId; // Offset: 76
    keen::LocaTagId workshopLabel; // Offset: 80
    keen::CharacterPresetReference characterPresetReference; // Offset: 84
    keen::ItemReference placementItem; // Offset: 100
    keen::GameKnowledgeRequirement knowledgeRequirement; // Offset: 116
    keen::uint32 containerSlotCount; // Offset: 220
    keen::ObjectReference<keen::BaseVoxelMaterial> floorMaterial; // Offset: 224
    keen::float32 floorMaterialRadius; // Offset: 240
    keen::FloorMaterialShape floorMaterialShape; // Offset: 244
    keen::float32 floorMaterialNoiseStrength; // Offset: 248
    keen::ObjectReference<keen::Model> fallbackModel; // Offset: 252
};

struct TemplateInfoCollection {
    keen::BlobArray<keen::Guid> templateGuids; // Offset: 0
    keen::BlobArray<keen::TemplateInfo> templateInfos; // Offset: 8
    keen::BlobArray<keen::AxisAlignedBox> templateBBoxes; // Offset: 16
};

struct TemplateSubentityIds {
    keen::BlobArray<keen::Guid> subentityTemplateGuids; // Offset: 0
};

struct SceneEntitySpawn {
    keen::ObjectReference<keen::EntitySpawnDefinition> entitySpawnDefinition; // Offset: 64
    keen::ObjectReference<keen::ecs::Template> templateReference; // Offset: 80
    keen::ContentHash templatePreviewContentHash; // Offset: 96
    keen::SceneEntitySpawnData spawnData; // Offset: 112
    keen::bool storeSceneId; // Offset: 340
    keen::bool snapToGround; // Offset: 341
    keen::bool enableFloorMaterial; // Offset: 342
};

struct EntitySpawnInfo {
    keen::KnowledgeId unlockKnowledge; // Offset: 0
    keen::BlobArray<keen::SubEntityKnowledgeQuery> subEntityKnowledgeQueries; // Offset: 4
    keen::BlobArray<keen::KnowledgeId> triggerKnowledgeIds; // Offset: 12
    keen::HashKey32 uiWorldEventId; // Offset: 20
    keen::Guid knowledgeQuery; // Offset: 24
    keen::LootContainerId lootContainerId; // Offset: 40
    keen::FogRemovalId fogRemovalId; // Offset: 44
    keen::JointAnimationReference entityAnimation; // Offset: 48
    keen::AttachmentSlotMask entityAnimationSlotMask; // Offset: 64
};

struct SceneVoxelObject {
    keen::ObjectReference<keen::VoxelObjectDefinition> voxelModel; // Offset: 64
    keen::bool isWeathered; // Offset: 80
    keen::Color color; // Offset: 84
};

enum class VoxelBlitFunction {
    Default = 0,
    KeepBuildings = 1,
    Water = 2,
    DestructionVoxels = 3,
};

struct SceneVoxelBrush {
    keen::ObjectReference<keen::Model> model; // Offset: 64
    keen::Color color; // Offset: 80
    keen::VoxelMaterialReference material; // Offset: 84
    keen::bool disableDisplacement; // Offset: 100
    keen::bool resolveBiomePerVoxel; // Offset: 101
    keen::bool paintMaterialOnly; // Offset: 102
    keen::VoxelBlitFunction blitFunction; // Offset: 103
    keen::bool allowNonManifold; // Offset: 104
    keen::ObjectReference<keen::FogRemovalSetup> removableFogId; // Offset: 108
    keen::bool addDestructionEdge; // Offset: 124
};

struct SceneBlockOutBrushPoint {
    keen::float32 height; // Offset: 64
    keen::float2 offset; // Offset: 68
    keen::BlockOutMeshPointBrushScatteringSettings brushScattering; // Offset: 76
};

struct SceneBlockOutBrush {
    keen::VoxelMaterialReference material; // Offset: 64
    keen::Color color; // Offset: 80
    keen::bool enableTopDisplacement; // Offset: 84
    keen::bool enableTopBrushScattering; // Offset: 85
    keen::bool negativeVoxels; // Offset: 86
    keen::bool ignoreDisplacementBlockers; // Offset: 87
    keen::bool resolveBiomePerVoxel; // Offset: 88
    keen::ObjectReference<keen::BlockOutBrushScatteringDefinition> scattering; // Offset: 92
    keen::ObjectReference<keen::FogRemovalSetup> removableFogId; // Offset: 108
};

struct BlockOutBrushScatteringDefinition {
};

struct BlockOutBrushScatteringPointModel {
    keen::ObjectReference<keen::Model> model; // Offset: 0
    keen::FloatRange angleRange; // Offset: 16
    keen::FloatRange heightRange; // Offset: 24
    keen::float32 randomYRotation; // Offset: 32
    keen::float32 nonUniformScaling; // Offset: 36
    keen::float32 shearFactor; // Offset: 40
};

struct BlockOutBrushScatteringPoint {
    keen::BlobArray<keen::BlockOutBrushScatteringPointModel> models; // Offset: 0
};

struct BlockOutBrushScatteringLowerEdgeModel {
    keen::ObjectReference<keen::Model> model; // Offset: 0
    keen::FloatRange angleRange; // Offset: 16
    keen::float32 randomYRotation; // Offset: 24
    keen::FloatRange heightRange; // Offset: 28
    keen::float32 randomScaling; // Offset: 36
    keen::float32 scaleFactor; // Offset: 40
    keen::float32 nonUniformScaling; // Offset: 44
    keen::float32 shearFactor; // Offset: 48
};

struct BlockOutBrushScatteringLowEdge {
    keen::float32 modelsPerMeter; // Offset: 0
    keen::BlobArray<keen::BlockOutBrushScatteringLowerEdgeModel> models; // Offset: 4
};

struct BlockOutBrushScatteringUpperEdgeModel {
    keen::ObjectReference<keen::Model> model; // Offset: 0
    keen::FloatRange angleRange; // Offset: 16
    keen::float32 randomYRotation; // Offset: 24
    keen::FloatRange heightRange; // Offset: 28
    keen::float32 randomScaling; // Offset: 36
    keen::float32 scaleFactor; // Offset: 40
    keen::float32 nonUniformScaling; // Offset: 44
    keen::float32 shearFactor; // Offset: 48
};

struct BlockOutBrushScatteringUpperEdge {
    keen::float32 modelsPerMeter; // Offset: 0
    keen::BlobArray<keen::BlockOutBrushScatteringUpperEdgeModel> models; // Offset: 4
};

struct BlockOutBrushScatteringWallModel {
    keen::ObjectReference<keen::Model> model; // Offset: 0
    keen::FloatRange normalAngleRange; // Offset: 16
    keen::float32 maxOverhangY; // Offset: 24
    keen::float32 randomYRotation; // Offset: 28
};

struct BlockOutBrushScatteringWall {
    keen::float32 modelsPerMeter; // Offset: 0
    keen::BlobArray<keen::BlockOutBrushScatteringWallModel> models; // Offset: 4
};

struct BlockOutBrushScatteringTopModel {
    keen::ObjectReference<keen::Model> model; // Offset: 0
    keen::FloatRange normalAngleRange; // Offset: 16
    keen::float32 randomYRotation; // Offset: 24
    keen::FloatRange randomScale; // Offset: 28
};

struct BlockOutBrushScatteringTop {
    keen::float32 modelsPerMeter; // Offset: 0
    keen::BlobArray<keen::BlockOutBrushScatteringTopModel> models; // Offset: 4
};

struct BlockOutBrushScatteringDefinitionConverterData {
    keen::Guid id; // Offset: 0
    keen::BlobArray<keen::BlockOutBrushScatteringPoint> points; // Offset: 16
    keen::BlobArray<keen::BlockOutBrushScatteringLowEdge> lowerEdges; // Offset: 24
    keen::BlobArray<keen::BlockOutBrushScatteringUpperEdge> upperEdges; // Offset: 32
    keen::BlobArray<keen::BlockOutBrushScatteringWall> walls; // Offset: 40
    keen::BlobArray<keen::BlockOutBrushScatteringTop> tops; // Offset: 48
};

struct BlockOutBrushScatteringDefinitionConverterDependencies {
    keen::Guid id; // Offset: 0
    keen::BlobArray<keen::Guid> models; // Offset: 16
};

struct SceneVoxelMultiBrush {
    keen::BlobArray<keen::SceneVoxelBrush> brushes; // Offset: 64
};

enum class DestructionBubbleMode {
    SetWeatheredFlag = 0,
    ClearWeatheredFlag = 1,
    Destruction = 2,
    DestructionNoEntities = 3,
};

struct SceneDestructionBubble {
    keen::ObjectReference<keen::Model> model; // Offset: 64
    keen::DestructionBubbleMode mode; // Offset: 80
    keen::bool dontDestroyEntities; // Offset: 81
    keen::float32 density; // Offset: 84
};

enum class SceneSurfaceMaterialBubbleMode {
    UnderRoads = 0,
    CoverRoads = 1,
};

struct SceneSurfaceMaterialBubble {
    keen::ObjectReference<keen::Model> model; // Offset: 64
    keen::VoxelMaterialReference material; // Offset: 80
    keen::uint depth; // Offset: 96
    keen::uint height; // Offset: 100
    keen::bool shelteredByTerrain; // Offset: 104
    keen::SceneSurfaceMaterialBubbleMode mode; // Offset: 105
};

struct SceneCurvePoint {
};

struct SceneCurve {
};

struct SceneRoadPoint {
    keen::float32 widthScale; // Offset: 64
};

struct RoadDefinition {
    keen::float32 width; // Offset: 0
    keen::bool snapToGround; // Offset: 4
    keen::float32 snapStepSize; // Offset: 8
    keen::float32 snapAllowedError; // Offset: 12
    keen::float32 snapMaxSlopeChange; // Offset: 16
    keen::ObjectReference<keen::VoxelRoadShapeDefinition> roadShape; // Offset: 20
    keen::VoxelMaterialReference surfaceMaterial; // Offset: 36
    keen::VoxelMaterialReference groundMaterial; // Offset: 52
    keen::float32 distributionNoise; // Offset: 68
    keen::float32 edgeNoiseWidth; // Offset: 72
    keen::float32 edgeNoiseScale; // Offset: 76
    keen::float32 edgeNoisePersistance; // Offset: 80
};

struct SceneRoad {
    keen::ObjectReference<keen::RoadDefinition> definition; // Offset: 64
    keen::bool snapToOtherRoads; // Offset: 80
};

enum class CaveVoxelMode {
    NegativeWithShell = 0,
    NegativeOnly = 1,
    Lake = 2,
    NegativeWithMaterialOverride = 3,
    LakeWithMaterialOverride = 4,
};

struct SceneDungeonCaveCurvePoint {
};

struct SceneDungeonCaveCurve {
    keen::CaveVoxelMode mode; // Offset: 64
    keen::float32 height; // Offset: 68
    keen::VoxelMaterialReference material; // Offset: 72
};

struct SceneTunnelPoint {
};

struct SceneTunnel {
    keen::float32 width; // Offset: 64
    keen::float32 height; // Offset: 68
    keen::VoxelMaterialReference material; // Offset: 72
};

struct SceneScatterBlocker {
    keen::float32 radius; // Offset: 64
    keen::float32 fadeInDistance; // Offset: 68
};

enum class DisplacementBlockerMode {
    SetToZero = 0,
    SetToBlockerHeight = 1,
};

struct SceneDisplacementBlocker {
    keen::float32 radius; // Offset: 64
    keen::float32 fadeInDistance; // Offset: 68
    keen::float32 innerDisplacementFactor; // Offset: 72
    keen::DisplacementBlockerMode mode; // Offset: 76
    keen::bool affectFog; // Offset: 77
};

struct SceneVfx {
    keen::ObjectReference<keen::VfxDefinition> effect; // Offset: 64
    keen::HdrColorRgb color; // Offset: 80
    keen::float4 param0; // Offset: 96
    keen::float4 param1; // Offset: 112
    keen::float4 param2; // Offset: 128
    keen::float4 param3; // Offset: 144
    keen::float32 duration; // Offset: 160
    keen::float3 targetPosition; // Offset: 164
    keen::Time startTime; // Offset: 176
    keen::bool isActive; // Offset: 184
};

struct SceneSound {
    keen::SoundContainerReference soundContainer; // Offset: 64
    keen::float32 activeRange; // Offset: 80
};

struct SceneInstance {
    keen::ObjectReference<keen::Scene> scene; // Offset: 64
    keen::bool connectToRoad; // Offset: 80
    keen::sint32 spawnLevelOffset; // Offset: 84
    keen::HashKey32 whiteboxSeed; // Offset: 88
};

struct SceneGroup {
    keen::bool isLocked; // Offset: 0
};

struct SceneRoadAttachmentPoint {
    keen::ObjectReference<keen::RoadDefinition> roadDefinition; // Offset: 64
};

struct SceneScatterImage {
    keen::ObjectReference<keen::ScatterImage> scatterImage; // Offset: 64
};

struct SceneScatterOrigin {
    keen::float32 distributionRadius; // Offset: 64
};

enum class SceneAreaFlag {
    BigDungeon = 0,
};

typedef keen::Bitmask8<keen::SceneAreaFlag> SceneAreaFlagMask;

struct ScenePlayableArea {
    keen::float3 size; // Offset: 64
    keen::SceneAreaFlagMask flags; // Offset: 76
    keen::LocaTagReference mapMarkerId; // Offset: 80
};

struct SceneCinematicTimelineEvent {
};

struct SceneCinematicCameraSmoothing {
    keen::bool enableSmoothing; // Offset: 0
    keen::float lerpSpeed; // Offset: 4
};

struct SceneCinematicTimeLineAnimationEvent {
    keen::AnimationReference animation; // Offset: 96
    keen::ObjectReference<keen::SceneModel> modelObject; // Offset: 112
};

struct SceneCinematicTimeLineModelAnimationEvent {
};

struct SceneCinematicTimeLineCameraAnimationEvent {
    keen::Angle fovY; // Offset: 128
};

struct SceneCinematicTimeLineCameraEvent {
    keen::SceneCamera key; // Offset: 96
    keen::SceneCamera nextKey; // Offset: 200
    keen::Guid id; // Offset: 304
    keen::SceneCinematicCameraSmoothing smoothing; // Offset: 320
    keen::float lerpSpeed; // Offset: 328
    keen::float nextLerpSpeed; // Offset: 332
};

struct SceneCinematicTimelineEventMaterializeVoxelObject {
    keen::ObjectReference<keen::SceneVoxelObject> voxelObject; // Offset: 96
    keen::SceneVoxelObject voxelData; // Offset: 112
};

struct SequenceTrack {
    keen::Time loopStart; // Offset: 0
    keen::Time loopEnd; // Offset: 8
    keen::bool loop; // Offset: 16
};

struct SceneCinematicTimelineTrack {
};

struct SceneCinematicTimelineCameraTrack {
};

struct SceneCinematicTimeline {
};

struct SceneCinematic {
    keen::ObjectReference<keen::SceneCinematicTimeline> timeline; // Offset: 4
};

struct CinematicDynamicModelObject {
    keen::Guid objectGuid; // Offset: 0
    keen::SceneModel sceneModel; // Offset: 16
};

struct CinematicSequenceResource {
    keen::BlobArray<keen::CinematicDynamicModelObject> dynamicModelObjects; // Offset: 32
};

struct SceneCinematicList {
    keen::BlobArray<keen::Guid> cinematics; // Offset: 0
};

struct SceneModelTemplate {
    keen::ObjectReference<keen::Model> defaultModel; // Offset: 0
};

struct SceneVoxelObjectTemplate {
    keen::ObjectReference<keen::VoxelObjectDefinition> defaultVoxelModel; // Offset: 0
};

struct SceneVoxelBrushTemplate {
    keen::ObjectReference<keen::Model> defaultModel; // Offset: 0
};

struct SceneDestructionBubbleTemplate {
    keen::ObjectReference<keen::Model> defaultModel; // Offset: 0
};

struct SceneSurfaceMaterialBubbleTemplate {
    keen::ObjectReference<keen::Model> defaultModel; // Offset: 0
    keen::VoxelMaterialReference defaultMaterial; // Offset: 16
};

struct SceneVoxelMultiBrushTemplate {
};

struct SceneEntitySpawnTemplate {
    keen::ObjectReference<keen::ecs::Template> defaultEntityTemplate; // Offset: 0
};

struct SceneVfxTemplate {
    keen::ObjectReference<keen::VfxDefinition> defaultEffect; // Offset: 0
};

struct SceneWhiteboxTemplate {
    keen::ObjectReference<keen::WhiteboxDefinition> defaultWhitebox; // Offset: 0
};

struct SceneRoadTemplate {
};

struct SceneScatterBlockerTemplate {
};

struct SceneDisplacementBlockerTemplate {
};

struct SceneSoundTemplate {
};

struct SceneCameraTemplate {
};

struct SceneInstanceTemplate {
    keen::ObjectReference<keen::Scene> defaultScene; // Offset: 0
};

struct DungeonInstanceTemplate {
    keen::ObjectReference<keen::DungeonScene> defaultDungeon; // Offset: 0
};

struct DungeonRoomInstanceTemplate {
    keen::ObjectReference<keen::DungeonRoomScene> defaultDungeonRoom; // Offset: 0
};

struct SceneRoadAttachmentPointTemplate {
};

struct SceneScatterOriginTemplate {
};

struct ScenePlayableAreaTemplate {
};

struct SceneScatterEntity {
    keen::WorldTransform transform; // Offset: 0
    keen::uint16 index; // Offset: 56
};

struct SceneScatterChunkDataEntity {
    keen::uint32 index; // Offset: 0
    keen::WorldTransform transform; // Offset: 8
};

struct SceneScatterChunkData {
    keen::BlobArray<keen::SceneScatterChunkDataEntity> templateEntities; // Offset: 0
    keen::BlobArray<keen::SceneScatterChunkDataEntity> modelEntities; // Offset: 8
};

struct SpawnTemplateModel {
    keen::Guid templateGuid; // Offset: 0
    keen::BlobArray<keen::Guid> modelsGuid; // Offset: 16
};

struct SpawnTemplateModels {
    keen::BlobArray<keen::SpawnTemplateModel> templateModels; // Offset: 0
    keen::uint32 templateCount; // Offset: 8
};

struct SpawnTemplateGuids {
    keen::BlobArray<keen::Guid> templateGuids; // Offset: 0
    keen::uint32 templateCount; // Offset: 8
};

struct SceneScatterResource {
    keen::ScatterSet3ResourceReference scatterSet; // Offset: 0
    keen::uint2 scatterStart; // Offset: 16
    keen::uint2 scatterSize; // Offset: 24
    keen::BlobArray<keen::SceneScatterEntity> templates; // Offset: 32
    keen::BlobArray<keen::SceneScatterEntity> models; // Offset: 40
    keen::BlobArray<keen::Guid> templateGuids; // Offset: 48
    keen::BlobArray<keen::Guid> modelGuids; // Offset: 56
    keen::BlobArray<keen::BlobString> templateNames; // Offset: 64
    keen::BlobArray<keen::BlobString> modelNames; // Offset: 72
    keen::SpawnTemplateModels spawnTemplateModels; // Offset: 80
    keen::uint2 debugMapSize; // Offset: 92
    keen::BlobArray<keen::BlobString> debugMapNames; // Offset: 100
    keen::BlobArray<keen::ContentHash> debugMaps; // Offset: 108
};

typedef keen::ObjectReference<keen::SceneScatterResource> SceneScatterResourceReference;

struct SceneScatterChunkResource {
    keen::BlobArray<keen::SceneScatterEntity> templates; // Offset: 0
    keen::BlobArray<keen::SceneScatterEntity> models; // Offset: 8
    keen::BlobArray<keen::Guid> templateGuids; // Offset: 16
    keen::BlobArray<keen::Guid> modelGuids; // Offset: 24
    keen::BlobArray<keen::BlobString> templateNames; // Offset: 32
    keen::BlobArray<keen::BlobString> modelNames; // Offset: 40
};

struct ScenePlayableAreaBox {
    keen::WorldPosition areaMin; // Offset: 0
    keen::WorldPosition areaMax; // Offset: 24
    keen::SceneAreaFlagMask flags; // Offset: 48
    keen::LocaTagId mapMarkerId; // Offset: 52
};

struct SceneProceduralLayer {
    keen::ContentPass contentPass; // Offset: 0
    keen::ObjectReference<keen::ScatterSet3> scatterSet; // Offset: 4
    keen::WorldDistributionTypeFlags distributionTypeMask; // Offset: 20
    keen::SourceDataReference content; // Offset: 24
    keen::SourceDataReference contentTags; // Offset: 40
    keen::bool connectManualSubscenesToRoad; // Offset: 56
};

enum class SceneObjectType {
    Model = 0,
    PointLight = 1,
    Camera = 2,
    EntitySpawn = 3,
    VoxelObject = 4,
    VoxelBrush = 5,
    VoxelMultiBrush = 6,
    Vfx = 7,
    Sound = 8,
    Road = 9,
    RoadPoint = 10,
    ScatterBlocker = 11,
    DisplacementBlocker = 12,
    SceneInstance = 13,
    ProceduralLayer = 14,
    RoadAttachmentPoint = 15,
    ScatterOrigin = 16,
    PlayableArea = 17,
    Group = 18,
    Whitebox = 19,
    CaveCurve = 20,
    CaveCurvePoint = 21,
    DestructionBubble = 22,
    SurfaceMaterialBubble = 23,
    Tunnel = 24,
    TunnelPoint = 25,
    BlockOutBrush = 26,
    Sun = 27,
};

typedef keen::Bitmask32<keen::SceneObjectType> SceneObjectTypeMask;

struct SceneTreeNode {
    keen::SceneObjectType type; // Offset: 0
    keen::uint32 typeIndex; // Offset: 4
    keen::uint32 childStart; // Offset: 8
    keen::uint32 childCount; // Offset: 12
};

struct SceneDistributionDebugData {
    keen::Vector3 position; // Offset: 0
    keen::Guid objectId; // Offset: 16
    keen::float32 radius; // Offset: 32
    keen::float32 minDistance; // Offset: 36
};

struct SceneDistributionTag {
    keen::WhiteboxTagInfo tagInfo; // Offset: 0
    keen::uint32 sceneIndex; // Offset: 48
};

struct DistributionLootInfo {
    keen::Guid scatterSetId; // Offset: 0
    keen::uint32 objectIndex; // Offset: 16
};

struct SceneContent {
    keen::BlobArray<keen::SceneModel> models; // Offset: 0
    keen::BlobArray<keen::SceneLightResource> pointLights; // Offset: 8
    keen::BlobArray<keen::SceneCamera> cameras; // Offset: 16
    keen::BlobArray<keen::SceneEntitySpawnResource> spawns; // Offset: 24
    keen::BlobArray<keen::SceneVoxelObject> voxelObjects; // Offset: 32
    keen::BlobArray<keen::SceneVoxelBrush> voxelBrushes; // Offset: 40
    keen::BlobArray<keen::SceneDestructionBubble> destructionBubbles; // Offset: 48
    keen::BlobArray<keen::SceneSurfaceMaterialBubble> surfaceMaterialBubbles; // Offset: 56
    keen::BlobArray<keen::SceneVfx> vfxs; // Offset: 64
    keen::BlobArray<keen::SceneSound> sounds; // Offset: 72
    keen::BlobArray<keen::SceneContentRoad> roads; // Offset: 80
    keen::BlobArray<keen::SceneContentRoad> pendingRoads; // Offset: 88
    keen::BlobArray<keen::SceneContentCaveCurve> caves; // Offset: 96
    keen::BlobArray<keen::SceneContentTunnel> tunnels; // Offset: 104
    keen::BlobArray<keen::SceneContentBlockOut> blockOuts; // Offset: 112
    keen::BlobArray<keen::SceneScatterBlocker> scatterBlockers; // Offset: 120
    keen::BlobArray<keen::SceneDisplacementBlocker> displacementBlockers; // Offset: 128
    keen::BlobArray<keen::SceneContentInstance> instances; // Offset: 136
    keen::BlobArray<keen::SceneContentInstance> resolvedInstances; // Offset: 144
    keen::BlobArray<keen::SceneContentInstance> dungeonRoomInstances; // Offset: 152
    keen::BlobArray<keen::ScenePlayableAreaBox> playableAreas; // Offset: 160
    keen::BlobArray<keen::Guid> proceduralLayers; // Offset: 168
    keen::BlobArray<keen::SceneDistributionTag> distributionTags; // Offset: 176
    keen::BlobArray<keen::DistributionLootInfo> spawnLootInfos; // Offset: 184
    keen::BlobArray<keen::DistributionLootInfo> sceneLootInfos; // Offset: 192
    keen::BlobArray<keen::SceneDistributionDebugData> distributionDebugData; // Offset: 200
    keen::bool isDebugDataDirty; // Offset: 208
};

struct SceneContentPasses {
    keen::BlobArray<keen::SceneContent> passes; // Offset: 0
};

struct SceneDestructionBubbles {
    keen::BlobArray<keen::SceneDestructionBubble> bubbles; // Offset: 0
};

struct SceneRuntimeContent {
    keen::BlobArray<keen::SceneModel> models; // Offset: 0
    keen::BlobArray<keen::SceneLightResource> pointLights; // Offset: 8
    keen::BlobArray<keen::SceneCamera> cameras; // Offset: 16
    keen::BlobArray<keen::SceneEntitySpawnResource> spawns; // Offset: 24
    keen::BlobArray<keen::SceneVfx> vfxs; // Offset: 32
    keen::BlobArray<keen::SceneSound> sounds; // Offset: 40
    keen::BlobArray<keen::SceneScatterBlocker> scatterBlockers; // Offset: 48
    keen::BlobArray<keen::SceneContentInstance> instances; // Offset: 56
    keen::BlobArray<keen::ScenePlayableAreaBox> playableAreas; // Offset: 64
    keen::BlobArray<keen::Guid> proceduralLayers; // Offset: 72
};

struct SceneVoxelContent {
    keen::BlobArray<keen::SceneVoxelContentPass> passes; // Offset: 0
    keen::BlobArray<keen::SceneDestructionBubble> destructionBubbles; // Offset: 8
    keen::BlobArray<keen::SceneSurfaceMaterialBubble> surfaceMaterialBubbles; // Offset: 16
    keen::BlobArray<keen::SceneContentRoad> nonConnectingRoads; // Offset: 24
    keen::BlobArray<keen::SceneDisplacementBlocker> displacementBlockers; // Offset: 32
};

struct SceneCombinedContent {
    keen::SceneRuntimeContent runtime; // Offset: 0
    keen::SceneVoxelContent voxel; // Offset: 80
};

struct ContentPassIndex {
    keen::uint64 indexPath; // Offset: 0
    keen::uint32 depth; // Offset: 8
};

struct SceneVoxelContentPass {
    keen::ContentPassIndex passIndex; // Offset: 0
    keen::BlobArray<keen::SceneContentBlockOut> blockOuts; // Offset: 16
    keen::BlobArray<keen::SceneVoxelObject> voxelObjects; // Offset: 24
    keen::BlobArray<keen::SceneVoxelBrush> voxelBrushes; // Offset: 32
    keen::BlobArray<keen::SceneContentCaveCurve> caves; // Offset: 40
    keen::BlobArray<keen::SceneContentTunnel> tunnels; // Offset: 48
    keen::BlobArray<keen::SceneContentRoad> roads; // Offset: 56
    keen::BlobArray<keen::SceneContentInstance> instances; // Offset: 64
    keen::BlobArray<keen::SceneContentInstance> dungeonRoomInstances; // Offset: 72
    keen::BlobArray<keen::Guid> proceduralLayers; // Offset: 80
};

struct SceneContentRoads {
    keen::BlobArray<keen::SceneContentRoad> roads; // Offset: 0
};

struct SceneRoadAttachment {
    keen::Vector3 position; // Offset: 0
    keen::Guid definitionGuid; // Offset: 16
    keen::RoadDefinition definition; // Offset: 32
};

struct SceneAttachments {
    keen::BlobArray<keen::SceneRoadAttachment> roadAttachments; // Offset: 0
};

struct SceneLightResource {
    keen::WorldTransform transform; // Offset: 0
    keen::RenderLight light; // Offset: 56
};

struct SceneContentRoadPoint {
    keen::WorldPosition position; // Offset: 0
    keen::float32 width; // Offset: 24
};

struct SceneContentRoad {
    keen::Guid definition; // Offset: 0
    keen::BlobArray<keen::SceneContentRoadPoint> points; // Offset: 16
    keen::ContentPass contentPass; // Offset: 24
    keen::bool snapToOtherRoads; // Offset: 25
};

struct SceneContentBlockOut {
    keen::Guid objectGuid; // Offset: 0
    keen::WorldTransform transform; // Offset: 16
    keen::BlobArray<keen::BlockOutMeshPoint> points; // Offset: 72
    keen::VoxelMaterialReference material; // Offset: 80
    keen::bool enableTopDisplacement; // Offset: 96
    keen::bool enableTopBrushScattering; // Offset: 97
    keen::bool negativeVoxels; // Offset: 98
    keen::bool ignoreDisplacementBlockers; // Offset: 99
    keen::bool resolveBiomePerVoxel; // Offset: 100
    keen::ObjectReference<keen::BlockOutBrushScatteringDefinition> scattering; // Offset: 104
    keen::ObjectReference<keen::FogRemovalSetup> removableFogId; // Offset: 120
};

struct SceneContentCaveCurvePoint {
    keen::WorldPosition position; // Offset: 0
};

struct SceneContentCaveCurve {
    keen::WorldTransform transform; // Offset: 0
    keen::float32 height; // Offset: 56
    keen::CaveVoxelMode mode; // Offset: 60
    keen::VoxelMaterialReference material; // Offset: 64
    keen::BlobArray<keen::SceneContentCaveCurvePoint> points; // Offset: 80
};

struct SceneContentTunnelPoint {
    keen::WorldPosition position; // Offset: 0
};

struct SceneContentTunnel {
    keen::float32 width; // Offset: 0
    keen::float32 height; // Offset: 4
    keen::VoxelMaterialReference material; // Offset: 8
    keen::BlobArray<keen::SceneContentTunnelPoint> points; // Offset: 24
};

struct SceneEntitySpawnResource {
    keen::WorldTransform transform; // Offset: 0
    keen::ecs::TemplateReference templateReference; // Offset: 56
    keen::SceneEntitySpawnData spawnData; // Offset: 72
    keen::BlobArray<keen::BlobVariant<keen::ecs::SpawnComponent>> components; // Offset: 300
    keen::bool snapToGround; // Offset: 308
    keen::bool enableFloorMaterial; // Offset: 309
};

struct SceneContentInstance {
    keen::WorldTransform transform; // Offset: 0
    keen::Guid instanceGuid; // Offset: 56
    keen::Guid sceneGuid; // Offset: 72
    keen::bool connectToRoad; // Offset: 88
    keen::sint32 spawnLevelOffset; // Offset: 92
};

struct SceneNoBuildZone {
    keen::WorldPosition worldBoxMin; // Offset: 0
    keen::WorldPosition worldBoxMax; // Offset: 24
    keen::AmbientEnvironment ambience; // Offset: 48
};

struct SceneQuestEntity {
    keen::WorldTransform transform; // Offset: 0
    keen::Guid templateGuid; // Offset: 56
};

struct SceneResource {
    keen::ObjectReference<keen::IblResource> ibl; // Offset: 0
    keen::float32 iblIntensity; // Offset: 16
    keen::BlobOptional<keen::render::AtmosphereParameters> atmosphereParameters; // Offset: 20
    keen::BlobArray<keen::SceneTreeNode> nodes; // Offset: 24
    keen::BlobArray<keen::SceneModel> models; // Offset: 32
    keen::BlobArray<keen::SceneLightResource> lights; // Offset: 40
    keen::BlobArray<keen::SceneCamera> cameras; // Offset: 48
    keen::BlobArray<keen::SceneVfx> vfxs; // Offset: 56
    keen::BlobArray<keen::SceneSound> sounds; // Offset: 64
    keen::BlobArray<keen::SceneNoBuildZone> noBuildZones; // Offset: 72
    keen::BlobArray<keen::SceneQuestEntity> questEntities; // Offset: 80
    keen::uint2 entityChunkCount; // Offset: 88
    keen::uint32 moveVersion; // Offset: 96
    keen::SceneScatterResourceReference scatterResource; // Offset: 100
    keen::SceneResetPlayersOutOfBounds resetPlayersOutOfBounds; // Offset: 116
};

struct SceneEntityChunkResource {
    keen::BlobArray<keen::ecs::TemplateReference> templates; // Offset: 0
    keen::BlobArray<keen::bool> templatesDoNotSave; // Offset: 8
    keen::BlobArray<keen::ObjectReference<keen::Model>> models; // Offset: 16
    keen::BlobArray<keen::SceneEntityChunkSpawn> entities; // Offset: 24
    keen::BlobArray<keen::SceneEntityExtraData> entityExtraData; // Offset: 32
};

struct SceneEntityExtraData {
    keen::SceneEntitySpawnData spawnData; // Offset: 0
    keen::BlobArray<keen::BlobVariant<keen::ecs::SpawnComponent>> components; // Offset: 228
    keen::bool enableFloorMaterial; // Offset: 236
};

struct SceneEntityChunkSpawn {
    keen::uint32 index; // Offset: 0
    keen::WorldTransform transform; // Offset: 8
};

struct SceneEntityChunkTemplateInfo {
    keen::Guid templateId; // Offset: 0
    keen::BlobOptional<keen::AxisAlignedBox> boundingBox; // Offset: 16
    keen::ObjectReference<keen::Model> fallbackModel; // Offset: 20
    keen::ObjectReference<keen::BaseVoxelMaterial> floorMaterial; // Offset: 36
    keen::float32 floorMaterialRadius; // Offset: 52
    keen::float32 floorMaterialNoiseStrength; // Offset: 56
    keen::FloorMaterialShape floorMaterialShape; // Offset: 60
    keen::bool doNotSave; // Offset: 61
    keen::bool isSkinned; // Offset: 62
};

struct SceneEntityChunkTemplateInfos {
    keen::BlobArray<keen::SceneEntityChunkTemplateInfo> infos; // Offset: 0
};

struct SceneScatterBlockerChunk {
    keen::BlobArray<keen::SceneScatterBlocker> scatterBlockers; // Offset: 0
};

struct SceneFloorMaterialInstance {
    keen::WorldPosition position; // Offset: 0
    keen::float32 radius; // Offset: 24
    keen::ObjectReference<keen::BaseVoxelMaterial> material; // Offset: 28
    keen::FloorMaterialShape shape; // Offset: 44
    keen::float32 noiseStrength; // Offset: 48
};

struct SceneFloorMaterialChunk {
    keen::BlobArray<keen::SceneFloorMaterialInstance> instances; // Offset: 0
};

typedef keen::ObjectReference<keen::SceneResource> SceneResourceReference;

struct SceneInfo {
    keen::float3 pivot; // Offset: 0
    keen::float32 radius; // Offset: 12
    keen::WorldDistributionTypeFlags distributionTypeFlags; // Offset: 16
    keen::bool hasBuildingVoxels; // Offset: 17
};

struct SceneBoundingBox {
    keen::float3 min; // Offset: 0
    keen::float3 max; // Offset: 12
    keen::float3 pivot; // Offset: 24
};

struct ScatterImageAlias {
    keen::Guid target; // Offset: 0
    keen::Guid replacement; // Offset: 16
};

struct ScatterImageAliases {
    keen::BlobArray<keen::ScatterImageAlias> aliases; // Offset: 0
};

struct ScenePreview {
    keen::BlobArray<keen::Guid> modelIds; // Offset: 0
    keen::BlobArray<keen::WorldTransform> transforms; // Offset: 8
    keen::SceneObjectTypeMask objectTypes; // Offset: 16
};

struct SceneConverterConfig {
    keen::bool validateNonTestScenes; // Offset: 0
};

struct BenchmarkPointDebugContent {
    keen::Guid guid; // Offset: 0
    keen::WorldTransform worldTransform; // Offset: 16
    keen::HashKey32 hash; // Offset: 72
};

struct SceneResolvedDebugContent {
    keen::BlobArray<keen::BenchmarkPointDebugContent> benchmarkPoints; // Offset: 0
};

struct SceneDebugContent {
    keen::BlobArray<keen::BenchmarkPointDebugContent> benchmarkPoints; // Offset: 0
};

struct SceneLevelDistribution {
    keen::ObjectReference<keen::SceneLevelDistributionSet> levelDistributionSet; // Offset: 0
};

struct SceneLevelDistributionSet {
};

struct SceneLevelMap {
    keen::ObjectReference<keen::AbstractScatterImage> scatterImage; // Offset: 0
    keen::uint32 level; // Offset: 16
};

struct SceneLevelMapConvertInfo {
    keen::uint32 level; // Offset: 0
    keen::Guid imageId; // Offset: 4
    keen::ScatterImageMetaData imageMetaData; // Offset: 20
};

struct SceneLevelDistributionConvertParams {
    keen::Guid sceneId; // Offset: 0
    keen::Guid levelDistributionSetObjectId; // Offset: 16
    keen::BlobArray<keen::SceneLevelMapConvertInfo> levelInfos; // Offset: 32
};

struct SceneLevelDistributionSetInfo {
    keen::uint2 mapSize; // Offset: 0
    keen::uint32 upscaleFactor; // Offset: 8
};

struct PrefabLibrary {
    keen::ObjectReference<keen::WhiteboxCollisionSetup> collisions; // Offset: 0
    keen::ObjectReference<keen::DungeonConnectionsConfig> connections; // Offset: 16
};

struct PrefabLibrarySettings {
    keen::ObjectReference<keen::WhiteboxCollisionSetup> collisions; // Offset: 0
};

struct DungeonConnectionInfo {
    keen::BlobArray<keen::DungeonConnectionSetup> connectionPoints; // Offset: 0
};

struct PrefabDirectory {
};

struct Prefab {
    keen::float32 replacementWeight; // Offset: 96
};

struct PrefabEntitySpawn {
    keen::Guid objectId; // Offset: 312
    keen::ContentPass contentPass; // Offset: 328
};

enum class TileContextFlags {
    Ground = 0,
    Wall = 1,
    Ceiling = 2,
    Stairs = 3,
    CornerLeft = 4,
    CornerRight = 5,
    Corridor = 6,
    Column = 7,
};

struct PrefabObjectContextInfo {
    keen::SceneObjectType objectType; // Offset: 0
    keen::ContentPassIndex passIndex; // Offset: 8
    keen::TileContextFlags type; // Offset: 24
    keen::uint32 index; // Offset: 28
    keen::bool forbidden; // Offset: 32
};

struct WhiteboxTriggerScope {
};

struct PrefabLootEntity {
    keen::uint32 spawnIndex; // Offset: 0
    keen::LootContainerInfo entityLootInfo; // Offset: 4
};

struct PrefabContent {
    keen::BlobArray<keen::PrefabEntitySpawn> spawns; // Offset: 0
    keen::BlobArray<keen::SceneModel> models; // Offset: 8
    keen::BlobArray<keen::SceneDestructionBubble> destructionBubbles; // Offset: 16
    keen::BlobArray<keen::SceneLightResource> pointLights; // Offset: 24
    keen::BlobArray<keen::PrefabLootEntity> lootInfos; // Offset: 32
    keen::BlobArray<keen::PrefabObjectContextInfo> contextInfos; // Offset: 40
    keen::BlobArray<keen::SceneContentRoad> roads; // Offset: 48
    keen::BlobArray<keen::SceneDisplacementBlocker> displacementBlockers; // Offset: 56
    keen::BlobArray<keen::PrefabContentPass> passes; // Offset: 64
};

struct PrefabContentPass {
    keen::ContentPassIndex passIndex; // Offset: 0
    keen::BlobArray<keen::SceneVoxelObject> voxelObjects; // Offset: 16
    keen::BlobArray<keen::SceneVoxelBrush> voxelBrushes; // Offset: 24
    keen::BlobArray<keen::SceneContentTunnel> tunnels; // Offset: 32
};

struct PrefabEntityInfo {
    keen::BlobString description; // Offset: 0
    keen::ObjectReference<keen::Prefab> prefab; // Offset: 8
    keen::ObjectReference<keen::ecs::Template> templateReference; // Offset: 24
};

struct PrefabVoxelWorldSceneContent {
    keen::BlobArray<keen::SceneDungeonRoomWhitebox> whiteboxes; // Offset: 0
    keen::BlobArray<keen::SceneVoxelObject> voxelObjects; // Offset: 8
    keen::BlobArray<keen::SceneVoxelBrush> voxelBrushes; // Offset: 16
    keen::BlobArray<keen::SceneDestructionBubble> destructionBubbles; // Offset: 24
    keen::BlobArray<keen::SceneContentRoad> roads; // Offset: 32
    keen::BlobArray<keen::SceneContentTunnel> tunnels; // Offset: 40
};

struct PrefabWhiteboxResolveInfo {
    keen::WorldTransform worldTransform; // Offset: 0
    keen::ContentPass contentPass; // Offset: 56
};

struct WhiteboxEntityList {
    keen::BlobArray<keen::PrefabEntityInfo> singleEntityPrefabs; // Offset: 0
    keen::BlobArray<keen::PrefabEntityInfo> customPrefabs; // Offset: 8
};

struct WhiteboxOptions {
    keen::Guid whiteboxDefinitionId; // Offset: 0
    keen::bool reducePrefabProbability; // Offset: 16
    keen::BlobArray<keen::PrefabInfo> prefabs; // Offset: 20
};

struct PrefabInfo {
    keen::ObjectReference<keen::Prefab> prefab; // Offset: 0
    keen::float32 weight; // Offset: 16
    keen::BlobArray<keen::WhiteboxTagInfo> tags; // Offset: 20
};

enum class WhiteboxTileType {
    None = 0,
    Ground = 1,
    Wall = 2,
    Ceiling = 3,
    Stairs = 4,
    Column = 5,
};

struct WhiteboxDefinitionModelVisibility {
    keen::bool voxelMode; // Offset: 0
    keen::bool editMode; // Offset: 1
    keen::bool brushMode; // Offset: 2
};

struct WhiteboxDefinition {
    keen::ObjectReference<keen::Model> model; // Offset: 0
    keen::WhiteboxDefinitionModelVisibility modelVisibility; // Offset: 16
    keen::bool reducePrefabProbability; // Offset: 19
    keen::WhiteboxTileType type; // Offset: 20
    keen::float2 gridSize; // Offset: 24
    keen::Color tintColor; // Offset: 32
    keen::float3 modelScale; // Offset: 36
};

typedef keen::Bitmask8<keen::TileContextFlags> TileContextFlagMask;

struct WhiteboxTileContext {
    keen::TileContextFlagMask context; // Offset: 0
};

struct SceneDungeonRoomWhitebox {
    keen::BlobString identifier; // Offset: 64
    keen::ObjectReference<keen::WhiteboxDefinition> definition; // Offset: 72
    keen::float32 replacementProbability; // Offset: 88
    keen::float32 randomRotationOffsetX; // Offset: 92
    keen::float32 randomRotationOffsetY; // Offset: 96
    keen::float32 randomRotationOffsetZ; // Offset: 100
    keen::bool snapToGround; // Offset: 104
    keen::SceneEntitySpawnData spawnData; // Offset: 108
};

struct DungeonRoomDirectory {
};

struct DungeonRoomScene {
    keen::uint3 size; // Offset: 176
};

struct DungeonRoomRayDedubg {
    keen::Vector3 start; // Offset: 0
    keen::Vector3 end; // Offset: 16
    keen::bool hit; // Offset: 32
};

struct DungeonRoomCollisionsDebugInfo {
    keen::BlobArray<keen::DungeonRoomRayDedubg> rayChecks; // Offset: 0
    keen::BlobArray<keen::AxisAlignedBox> checkBoundingBoxes; // Offset: 8
};

struct DungeonRoomShapes {
    keen::BlobArray<keen::AxisAlignedBox> boundingBoxes; // Offset: 0
};

struct DungeonRoomSceneLayerGroup {
};

enum class RoomConnectionPointType {
    Door = 0,
    RoadPoint = 1,
};

struct DungeonRoomConnectionPoint {
    keen::Guid objectId; // Offset: 0
    keen::Guid roomInstanceId; // Offset: 16
    keen::Guid roomSceneId; // Offset: 32
    keen::Guid whiteboxDefinitionId; // Offset: 48
    keen::WorldTransform worldTransform; // Offset: 64
    keen::RoomConnectionPointType type; // Offset: 120
    keen::AxisAlignedBox boundingBox; // Offset: 128
    keen::string identifier; // Offset: 160
};

struct DungeonRoomConnectionPoints {
    keen::BlobArray<keen::DungeonRoomConnectionPoint> connections; // Offset: 0
};

struct DungeonConnectionPointInfo {
    keen::DungeonRoomConnectionPoint pointA; // Offset: 0
    keen::DungeonRoomConnectionPoint pointB; // Offset: 176
};

struct DungeonConnectionPoints {
    keen::BlobArray<keen::DungeonConnectionPointInfo> connections; // Offset: 0
};

struct DungeonWhiteboxReplacement {
    keen::Guid whiteboxInstanceId; // Offset: 0
    keen::Guid newWhiteboxDefinitionId; // Offset: 16
};

struct DungeonWhiteboxReplacements {
    keen::BlobArray<keen::DungeonWhiteboxReplacement> replacements; // Offset: 0
};

struct DungeonEntranceInfo {
    keen::Guid whiteboxInstanceId; // Offset: 0
    keen::BlobString identifier; // Offset: 16
    keen::WorldTransform transform; // Offset: 24
    keen::AxisAlignedBox boundingBox; // Offset: 80
};

struct DungeonRoomEntranceList {
    keen::BlobArray<keen::DungeonEntranceInfo> entrances; // Offset: 0
};

struct DungeonRoomEntranceConvertInfo {
    keen::BlobArray<keen::Guid> markedEntrances; // Offset: 0
};

struct WhiteboxCollisionSetup {
};

struct WhiteboxCollisionGroup {
};

struct WhiteboxCollisionItem {
    keen::ObjectReference<keen::WhiteboxDefinition> definition; // Offset: 0
    keen::uint8 weight; // Offset: 16
    keen::float32 range; // Offset: 20
};

struct WhiteboxCollisionGroupInfo {
    keen::BlobArray<keen::WhiteboxCollisionItem> items; // Offset: 0
};

struct WhiteboxCollisionInfo {
    keen::BlobArray<keen::WhiteboxCollisionGroupInfo> groups; // Offset: 0
};

struct WhiteboxContextSetup {
    keen::ObjectReference<keen::WhiteboxTag> groundTag; // Offset: 0
    keen::ObjectReference<keen::WhiteboxTag> ceilingTag; // Offset: 16
};

struct DungeonConnectionsConfig {
};

struct DungeonConnectionSetup {
    keen::ObjectReference<keen::WhiteboxDefinition> connectionWhitebox; // Offset: 0
    keen::ObjectReference<keen::WhiteboxDefinition> replacementOtherConnection; // Offset: 16
    keen::ObjectReference<keen::WhiteboxDefinition> replacementRoadPoint; // Offset: 32
    keen::ObjectReference<keen::WhiteboxDefinition> replacementWithoutConnection; // Offset: 48
    keen::AxisAlignedBox connectionAABB; // Offset: 64
};

enum class WhiteboxNodeType {
    SceneInstance = 0,
    Whitebox = 1,
};

struct WhiteboxConvertInfo {
    keen::HashKey32 id; // Offset: 0
    keen::HashKey32 parentId; // Offset: 4
    keen::WhiteboxNodeType type; // Offset: 8
    keen::Guid replacementObjectId; // Offset: 12
    keen::Guid whiteboxInstanceId; // Offset: 28
    keen::Guid whiteboxDefinitionId; // Offset: 44
    keen::ContentPassIndex passIndex; // Offset: 64
    keen::WhiteboxTileContext roomTileContext; // Offset: 80
    keen::WhiteboxTileContext requiredRoomTileContext; // Offset: 81
    keen::WhiteboxTileContext forbiddenRoomTileContext; // Offset: 82
    keen::BlobArray<keen::WhiteboxTriggerSetup> requiredTriggers; // Offset: 84
    keen::BlobArray<keen::WhiteboxTriggerInfo> triggerInfos; // Offset: 92
    keen::WorldTransform worldTransform; // Offset: 104
    keen::BlobArray<keen::WhiteboxTagInfo> tags; // Offset: 160
    keen::float3 randomRotationOffset; // Offset: 168
    keen::float32 replacementProbability; // Offset: 180
    keen::SceneEntitySpawnData entitySpawnData; // Offset: 184
    keen::Guid triggerGraphId; // Offset: 412
};

struct WhiteboxReplacementPass {
    keen::BlobArray<keen::WhiteboxConvertInfo> replacements; // Offset: 0
    keen::BlobArray<keen::WhiteboxConvertInfo> failedReplacements; // Offset: 8
};

struct WhiteboxReplacementInfoPasses {
    keen::BlobArray<keen::WhiteboxReplacementInfoPass> passes; // Offset: 0
};

struct WhiteboxReplacementInfoPass {
    keen::ContentPassIndex passIndex; // Offset: 0
    keen::BlobArray<keen::WhiteboxReplacementInfo> replacements; // Offset: 16
};

struct WhiteboxReplacementInfo {
    keen::HashKey32 id; // Offset: 0
    keen::Guid sceneId; // Offset: 4
    keen::WorldTransform worldTransform; // Offset: 24
    keen::BlobArray<keen::WhiteboxTriggerInfo> triggers; // Offset: 80
    keen::WhiteboxTileContext roomTileContext; // Offset: 88
    keen::SceneEntitySpawnData entitySpawnData; // Offset: 92
};

struct SceneWhiteboxContentInfo {
    keen::Guid whiteboxInstanceId; // Offset: 0
    keen::Guid whiteboxDefinitionId; // Offset: 16
    keen::uint32 passIndex; // Offset: 32
    keen::WorldTransform worldTransform; // Offset: 40
    keen::float3 randomRotationOffset; // Offset: 96
    keen::float32 replacementProbability; // Offset: 108
    keen::BlobArray<keen::WhiteboxTagInfo> tags; // Offset: 112
    keen::WhiteboxTileContext requiredRoomTileContext; // Offset: 120
    keen::WhiteboxTileContext forbiddenRoomTileContext; // Offset: 121
    keen::SceneEntitySpawnData entitySpawnData; // Offset: 124
    keen::Guid triggerGraphId; // Offset: 352
};

struct SceneWhiteboxInfo {
    keen::BlobArray<keen::SceneWhiteboxContentInfo> whiteboxes; // Offset: 0
};

struct SceneWhiteboxErrorInfo {
    keen::uint32 failedReplacementCount; // Offset: 0
};

struct WhiteboxTagList {
    keen::BlobArray<keen::WhiteboxTagInfo> tags; // Offset: 0
};

struct SceneDungeonRoomInstance {
    keen::BlobString identifier; // Offset: 64
    keen::ObjectReference<keen::DungeonRoomScene> room; // Offset: 72
    keen::sint32 spawnLevelOffset; // Offset: 88
    keen::HashKey32 whiteboxSeed; // Offset: 92
};

struct SceneDungeonRoomLayerGroupInstance {
    keen::ObjectReference<keen::DungeonRoomSceneLayerGroup> layerGroup; // Offset: 64
};

struct DungeonEntranceDefinition {
    keen::ObjectReference<keen::SceneDungeonRoomWhitebox> whitebox; // Offset: 0
};

struct DungeonConnectionPriority {
    keen::ObjectReference<keen::SceneDungeonRoomInstance> room; // Offset: 0
    keen::ObjectReference<keen::SceneDungeonRoomWhitebox> whitebox; // Offset: 16
};

struct DungeonDirectory {
};

struct DungeonScene {
};

struct SceneDungeonInstance {
    keen::ObjectReference<keen::DungeonScene> dungeon; // Offset: 64
    keen::sint32 spawnLevelOffset; // Offset: 80
    keen::HashKey32 whiteboxSeed; // Offset: 84
};

struct SceneWhiteboxPathParameters {
    keen::WorldTransform transform; // Offset: 0
    keen::Guid rootSceneId; // Offset: 56
    keen::Guid sceneInstanceId; // Offset: 72
    keen::uint32 seed; // Offset: 88
};

struct SceneWhiteboxPathList {
    keen::SceneWhiteboxPathParameters rootScene; // Offset: 0
    keen::BlobArray<keen::SceneWhiteboxPathParameters> subscenes; // Offset: 96
    keen::BlobArray<keen::SceneWhiteboxPathParameters> scatterScenes; // Offset: 104
};

struct ContentLabelInfo {
    keen::BlobArray<keen::WhiteboxTagInfo> whiteboxLabels; // Offset: 0
    keen::ObjectLootSettings lootSettings; // Offset: 8
};

struct ecs.EntityTag {
};

struct ForbiddenEntityTags {
};

typedef keen::ObjectReference<keen::Sequence> SequenceReference;

enum class SessionDebugAction {
    Start = 0,
    Stop = 1,
};

struct SessionDebugActionMessage {
    keen::SessionDebugAction action; // Offset: 0
};

struct SessionDebugChannelInfo {
    keen::string name; // Offset: 0
};

struct SessionDebugChannelsMessage {
    keen::BlobArray<keen::SessionDebugChannelInfo> channels; // Offset: 0
};

struct SessionDebugPacketChannel {
    keen::uint16 messageSize; // Offset: 0
    keen::uint8 messageCount; // Offset: 2
};

struct SessionDebugPacketsChannel {
    keen::uint64 totalMessageSize; // Offset: 0
    keen::uint32 totalMessageCount; // Offset: 8
    keen::uint32 messageSize; // Offset: 12
    keen::uint16 messageCount; // Offset: 16
};

typedef keen::StaticArray<keen::SessionDebugPacketChannel,32> SessionDebugPacketChannels;

typedef keen::StaticArray<keen::SessionDebugPacketsChannel,32> SessionDebugPacketsChannels;

struct SessionDebugPacket {
    keen::Time time; // Offset: 0
    keen::Time oldestMessageTime; // Offset: 8
    keen::uint32 machineId; // Offset: 16
    keen::uint32 packetId; // Offset: 20
    keen::uint32 packetSize; // Offset: 24
    keen::uint8 machineIndex; // Offset: 28
    keen::SessionDebugPacketChannels channels; // Offset: 30
};

struct SessionDebugPacketMessage {
    keen::Time time; // Offset: 0
    keen::uint32 machineId; // Offset: 8
    keen::SessionDebugPacketsChannels packetsChannels; // Offset: 16
    keen::uint64 totalPacketsSize; // Offset: 784
    keen::uint32 packetsSize; // Offset: 792
};

struct SessionDebugPacketSendMessage {
    keen::BlobArray<keen::SessionDebugPacket> packets; // Offset: 800
};

struct SessionDebugPacketRecvMessage {
    keen::BlobArray<keen::SessionDebugPacket> packets; // Offset: 800
};

struct SessionDebugMachineStats {
    keen::uint32 machineIndex; // Offset: 0
    keen::uint32 lostPackets; // Offset: 4
    keen::Time roundTripTime; // Offset: 8
    keen::uint64 bandwidthLimitInBps; // Offset: 16
};

struct SessionDebugStatsMessage {
    keen::Time time; // Offset: 0
    keen::BlobArray<keen::SessionDebugMachineStats> machineStats; // Offset: 8
};

struct GameParameters {
    keen::uint32 flameLevel; // Offset: 0
    keen::uint32 gameSettingsPreset; // Offset: 4
};

enum class SoundContentType {
    Unknown = 0,
    Effect = 1,
    Ambience = 2,
    Music = 3,
};

struct Sound {
    keen::SoundContentType contentType; // Offset: 0
};

typedef keen::ObjectReference<keen::Sound> SoundReference;

struct SoundContainer {
};

struct SoundContainerEntryShared {
    keen::float32 chance; // Offset: 0
};

struct SoundContainerEntry {
};

struct SoundContainerSoundEntry {
    keen::SoundReference sound; // Offset: 4
};

struct SoundContainerContainerEntry {
    keen::SoundContainerReference container; // Offset: 4
};

struct SoundContainerResource {
    keen::BlobArray<keen::BlobVariant<keen::SoundContainerResourceEntry>> entries; // Offset: 64
};

struct SoundContainerResourceEntry {
};

typedef keen::ObjectReference<keen::SoundResource> SoundResourceReference;

struct SoundContainerResourceSoundEntry {
    keen::SoundResourceReference sound; // Offset: 4
};

struct SoundContainerResourceContainerEntry {
    keen::SoundContainerResourceReference container; // Offset: 4
};

struct SoundMusicPlaylist {
    keen::BlobArray<keen::SoundReference> tracks; // Offset: 0
    keen::bool shuffle; // Offset: 8
    keen::float32 fadeDuration; // Offset: 12
};

typedef keen::ObjectReference<keen::SoundMusicPlaylist> SoundMusicPlaylistReference;

enum class SoundChannelConfiguration {
    Mono = 0,
    Stereo = 1,
    Quadrophonic = 2,
    FiveDotOne = 3,
    SevenDotOne = 4,
};

enum class SoundDataFormat {
    Uncompressed = 0,
    FramelessQOA = 1,
};

struct SoundResource {
    keen::SoundChannelConfiguration channelConfiguration; // Offset: 0
    keen::SoundDataFormat format; // Offset: 1
    keen::uint16 framesPerSecond; // Offset: 2
    keen::uint32 frameCount; // Offset: 4
    keen::Time duration; // Offset: 8
    keen::BlobArray<keen::uint8> data; // Offset: 16
    keen::ContentHash dataHash; // Offset: 24
    keen::string debugName; // Offset: 40
};

struct GpuInformation {
    keen::string identifier; // Offset: 0
};

struct SessionStarted {
    keen::uint32 userId; // Offset: 0
    keen::uint32 sessionCount; // Offset: 4
    keen::GpuInformation gpu; // Offset: 8
    keen::uint32 gameVersion; // Offset: 16
    keen::uint32 engineVersion; // Offset: 20
};

struct CraftingAction {
    keen::HashKey32 station; // Offset: 0
    keen::uint32 count; // Offset: 4
};

struct FoodBuffData {
    keen::uint32 maxUsedSlots; // Offset: 0
    keen::uint32 activatedFoodBuffs; // Offset: 4
};

struct SessionEnded {
    keen::uint32 userId; // Offset: 0
    keen::uint32 maxPlayer; // Offset: 4
    keen::Time playTime; // Offset: 8
    keen::bool host; // Offset: 16
    keen::uint32 saveGameSize; // Offset: 20
    keen::GpuInformation gpu; // Offset: 24
    keen::uint32 gameVersion; // Offset: 32
    keen::uint32 engineVersion; // Offset: 36
    keen::BlobArray<keen::HashKey32> unlockedKnowledge; // Offset: 40
    keen::BlobArray<keen::CraftingAction> crafting; // Offset: 48
    keen::FoodBuffData foodBuffData; // Offset: 56
    keen::bool didUsePersonelCrafting; // Offset: 64
    keen::ecs::GameSettingsPreset preset; // Offset: 65
    keen::ecs::GameSettings settings; // Offset: 72
};

struct DedicatedSessionStarted {
};

struct DedicatedSessionEnded {
    keen::Time playTime; // Offset: 0
};

enum class DeathCause {
    Impact = 0,
    FallDamage = 1,
    Fog = 2,
};

struct PlayerDeath {
    keen::DeathCause cause; // Offset: 0
    keen::float3 position; // Offset: 4
    keen::Guid causeGuid; // Offset: 16
    keen::bool wasDeadlyFog; // Offset: 32
};

struct tracking.LevelUp {
    keen::sint32 level; // Offset: 0
    keen::Time duration; // Offset: 8
    keen::float3 position; // Offset: 16
};

enum class tracking.MinSpecError {
    Ram = 0,
    VRam = 1,
};

typedef keen::Bitmask8<keen::tracking::MinSpecError> tracking.MinSpecErrorMask;

struct tracking.CrashInfo {
    keen::uint32 userId; // Offset: 0
    keen::Time duration; // Offset: 8
    keen::uint32 gameVersion; // Offset: 16
    keen::uint32 engineVersion; // Offset: 20
    keen::tracking::MinSpecErrorMask minspecError; // Offset: 24
};

struct TtfFontResource {
    keen::ContentHash fontFileHash; // Offset: 0
};

struct TtfFontInfo {
    keen::Guid objectId; // Offset: 0
    keen::ContentHash fontFileHash; // Offset: 16
};

struct TtfFont {
};

typedef keen::ObjectReference<keen::TtfFont> TtfFontReference;

typedef keen::ObjectReference<keen::TtfFontResource> TtfFontResourceReference;

struct UiTestStyles {
    keen::UiCharacterStyle test; // Offset: 0
};

struct UiTestParagraphStyles {
    keen::UiParagraphStyle test; // Offset: 0
    keen::UiParagraphStyle test2; // Offset: 28
};

typedef keen::ObjectReference<keen::UiFont> UiFontReference;

struct UiBundleTest {
    keen::UiTexture test; // Offset: 24
    keen::UiTestStyles namedStyles; // Offset: 72
    keen::UiTestParagraphStyles namedParagraphStyles; // Offset: 160
    keen::UiFontReference font; // Offset: 216
};

struct UiFontRange {
    keen::uint32 firstRune; // Offset: 0
    keen::uint32 lastRune; // Offset: 4
};

struct UiGlyphSet {
    keen::TtfFontReference font; // Offset: 0
    keen::float32 scale; // Offset: 16
    keen::bool useForMetrics; // Offset: 20
    keen::bool bold; // Offset: 21
    keen::bool italic; // Offset: 22
};

struct UiFont {
};

struct UiFontLanguage {
    keen::bool En_Us; // Offset: 0
    keen::bool En_Gb; // Offset: 1
    keen::bool De_De; // Offset: 2
    keen::bool Nl_Nl; // Offset: 3
    keen::bool Fr_Fr; // Offset: 4
    keen::bool It_It; // Offset: 5
    keen::bool Es_Es; // Offset: 6
    keen::bool Es_Mx; // Offset: 7
    keen::bool Ru_Ru; // Offset: 8
    keen::bool Pl_Pl; // Offset: 9
    keen::bool Ja_Jp; // Offset: 10
    keen::bool Id_Id; // Offset: 11
    keen::bool Ko_Kr; // Offset: 12
    keen::bool Ms_My; // Offset: 13
    keen::bool Pt_Pt; // Offset: 14
    keen::bool Pt_Br; // Offset: 15
    keen::bool Th_Th; // Offset: 16
    keen::bool Tr_Tr; // Offset: 17
    keen::bool Vi_Vn; // Offset: 18
    keen::bool Zh_Cn; // Offset: 19
    keen::bool Zh_Tw; // Offset: 20
    keen::bool Fr_Ca; // Offset: 21
    keen::bool Es_419; // Offset: 22
    keen::bool Bg_Bg; // Offset: 23
    keen::bool Cs_Cz; // Offset: 24
    keen::bool Da_Dk; // Offset: 25
    keen::bool Fi_Fi; // Offset: 26
    keen::bool El_Gr; // Offset: 27
    keen::bool Hu_Hu; // Offset: 28
    keen::bool No_No; // Offset: 29
    keen::bool Nb_No; // Offset: 30
    keen::bool Ro_Ro; // Offset: 31
    keen::bool Sv_Se; // Offset: 32
    keen::bool Uk_Ua; // Offset: 33
    keen::bool Default; // Offset: 34
};

typedef keen::Bitmask64<keen::LanguageId> UiFontLanguageMask;

enum class UiFontVariantFlag {
    Normal = 0,
    Bold = 1,
    Italic = 2,
};

typedef keen::Bitmask8<keen::UiFontVariantFlag> UiFontVariantMask;

struct UiGlyphSetResource {
    keen::uint32 fontIndex; // Offset: 0
    keen::float32 scale; // Offset: 4
    keen::BlobArray<keen::UiFontRange> ranges; // Offset: 8
    keen::UiFontVariantMask fontVariantMask; // Offset: 16
};

struct UiFontLanguageGroupResource {
    keen::UiFontLanguageMask groupLanguages; // Offset: 0
    keen::BlobArray<keen::UiGlyphSetResource> glyphSets; // Offset: 8
    keen::uint32 metricsIndex; // Offset: 16
    keen::bool isDefaultLanguageGroup; // Offset: 20
};

struct UiFontResource {
    keen::BlobArray<keen::TtfFontResource> fonts; // Offset: 0
    keen::BlobArray<keen::UiFontLanguageGroupResource> languageGroups; // Offset: 8
};

struct UiFontPreviewLanguageGroupOutput {
    keen::BlobArray<keen::TtfFontResource> fonts; // Offset: 0
    keen::BlobArray<keen::UiGlyphSetResource> glyphSets; // Offset: 8
};

typedef keen::ObjectReference<keen::UiFontResource> UiFontResourceReference;

struct UiRectangle {
    keen::UiPosition position; // Offset: 0
    keen::UiSize size; // Offset: 8
};

struct UiTime {
    keen::uint64 m_timeStamp; // Offset: 0
};

typedef keen::uint64 UiObjectId;

struct UiPassTreeFrameState {
    keen::UiObjectId stateId; // Offset: 0
    keen::uint32 size; // Offset: 8
};

enum class UiFrameFlag {
    ClampOnXAxisAtParentBorder = 0,
    ClampOnYAxisAtParentBorder = 1,
    EqualStretchInXAxis = 2,
    EqualStretchInYAxis = 3,
    WidthIgnoredForStretch = 4,
    HeightIgnoredForStretch = 5,
};

typedef keen::Bitmask8<keen::UiFrameFlag> UiFrameFlags;

struct UiFrameSizes {
    keen::UiPosition offset; // Offset: 0
    keen::UiSize minSize; // Offset: 8
    keen::UiSize prefSize; // Offset: 16
    keen::UiSize maxSize; // Offset: 24
    keen::UiSize stretch; // Offset: 32
};

enum class UiFrameLayoutType {
    None = 0,
    Horizontal = 1,
    Vertical = 2,
    Grid = 3,
    Count = 4,
};

struct UiFrameLayout {
    keen::UiFrameLayoutType type; // Offset: 0
    keen::bool horizontalScroll; // Offset: 4
    keen::bool verticalScroll; // Offset: 5
    keen::bool flow; // Offset: 6
    keen::bool splitter; // Offset: 7
    keen::UiSize spacing; // Offset: 8
    keen::uint32 framesPerGridRow; // Offset: 16
};

struct UiFrameBorder {
    keen::UiBorder margin; // Offset: 0
    keen::UiBorder padding; // Offset: 16
};

struct UiFrameScrollState {
    keen::UiPosition scrollOffset; // Offset: 0
    keen::UiSize scrollAreaSize; // Offset: 8
};

struct UiFrameLayoutState {
    keen::UiSize minSize; // Offset: 0
    keen::UiSize prefSize; // Offset: 8
    keen::UiSize maxSize; // Offset: 16
    keen::UiSize stretch; // Offset: 24
    keen::bool flowChild; // Offset: 32
};

struct UiPassTreeFrame {
    keen::UiObjectId frameId; // Offset: 0
    keen::UiObjectId localFrameId; // Offset: 8
    keen::UiObjectId highestChildUiFrameId; // Offset: 16
    keen::UiFrameFlags flags; // Offset: 24
    keen::uint32 inputMask; // Offset: 28
    keen::UiFrameSizes sizes; // Offset: 32
    keen::UiFrameLayout layout; // Offset: 72
    keen::UiFrameBorder border; // Offset: 92
    keen::UiAlignment alignment; // Offset: 124
    keen::UiAlignment childAlignment; // Offset: 126
    keen::BlobString debugName; // Offset: 128
    keen::BlobArray<keen::UiPassTreeFrame> children; // Offset: 136
    keen::BlobArray<keen::UiPassTreeFrameState> states; // Offset: 144
    keen::UiFrameScrollState scrollState; // Offset: 152
    keen::UiFrameLayoutState layoutState; // Offset: 168
    keen::UiRectangle oldRect; // Offset: 204
    keen::UiRectangle rect; // Offset: 220
    keen::UiPosition offset; // Offset: 236
};

typedef keen::BlobOptional<keen::UiPassTreeFrame> UiPassTreeFrameOpt;

struct UiPassTreeWindow {
    keen::UiObjectId windowId; // Offset: 0
    keen::uint32 zOrder; // Offset: 8
    keen::uint32 inputMask; // Offset: 12
    keen::uint32 flags; // Offset: 16
    keen::UiPosition offset; // Offset: 20
    keen::float32 scale; // Offset: 28
    keen::UiPassTreeFrameOpt rootFrame; // Offset: 32
    keen::BlobString debugName; // Offset: 36
};

struct UiPassTreeScreen {
    keen::UiObjectId screenId; // Offset: 0
    keen::UiRectangle rect; // Offset: 8
    keen::BlobArray<keen::UiPassTreeWindow> windows; // Offset: 24
};

struct UiPassTree {
    keen::uint32 systemUpdateCounter; // Offset: 0
    keen::BlobArray<keen::UiPassTreeScreen> screens; // Offset: 4
};

struct UiSplitterSizes {
    keen::UiSize minSize; // Offset: 0
    keen::UiSize prefSize; // Offset: 8
    keen::UiSize maxSize; // Offset: 16
    keen::UiSize stretch; // Offset: 24
};

struct UiFrameSplitterData {
    keen::UiPosition position; // Offset: 0
    keen::UiPosition positionClamped; // Offset: 8
    keen::UiPosition dragSplitterPosition; // Offset: 16
    keen::UiPosition dragMousePosition; // Offset: 24
    keen::UiSplitterSizes sizes; // Offset: 32
};

struct UiFrameSplitterState {
    keen::StaticArray<keen::UiFrameSplitterData,8> splitter; // Offset: 0
};

struct VoxelTemperatureResource {
    keen::int3 worldOrigin; // Offset: 0
    keen::uint3 worldSize; // Offset: 12
    keen::uint3 sizeInVoxels; // Offset: 24
    keen::BlobArray<keen::uint8> voxelData; // Offset: 36
};

typedef keen::ObjectReference<keen::VoxelTemperatureResource> VoxelTemperatureReference;

enum class VoxelWorldResourceType {
    Solid = 0,
    Fog = 1,
    Water = 2,
    Temperature = 3,
};

struct VoxelWorldResource {
    keen::VoxelWorldResourceType type; // Offset: 0
    keen::uint2 tileCount; // Offset: 4
    keen::int3 origin; // Offset: 12
    keen::ContentHash lowLODData; // Offset: 24
    keen::uint32 lowLODMaxLevel; // Offset: 40
    keen::StaticArray<keen::Guid,256> materialGuids; // Offset: 44
    keen::uint8 defaultTerrainMaterial; // Offset: 4140
};

struct VoxelWorldChunkResource {
    keen::ContentHash highLODData; // Offset: 0
    keen::BlobArray<keen::uint64> waterTileNotEmptyMask; // Offset: 16
};

typedef keen::ObjectReference<keen::VoxelWorldResource> VoxelWorldReference;

struct SolidVoxelMaterialWithId {
    keen::Guid id; // Offset: 0
    keen::Guid stoneMaterialId; // Offset: 16
    keen::bool canReceiveFloorMaterial; // Offset: 32
};

struct BiomeVoxelMaterialMapping {
    keen::Guid id; // Offset: 0
    keen::StaticArray<keen::Guid,7> biomes; // Offset: 16
};

struct VoxelMaterialResolvedList {
    keen::BlobArray<keen::SolidVoxelMaterialWithId> solidMaterials; // Offset: 0
    keen::BlobArray<keen::Guid> buildingMaterials; // Offset: 8
    keen::BlobArray<keen::BiomeVoxelMaterialMapping> biomeMaterials; // Offset: 16
};

struct VoxelMaterialSettings {
    keen::uint8 defaultTerrainMaterial; // Offset: 0
};

struct VoxelDisplacementMaterial {
    keen::Guid id; // Offset: 0
    keen::VoxelWorldDisplacement side; // Offset: 16
    keen::VoxelWorldDisplacement top; // Offset: 44
};

struct VoxelMaterialDisplacement {
    keen::BlobArray<keen::VoxelDisplacementMaterial> materials; // Offset: 0
};

enum class FogVoxelMaterialResolvedType {
    Gameplay = 0,
    Decorative = 1,
};

struct FogVoxelMaterialResolved {
    keen::Guid id; // Offset: 0
    keen::FogVoxelMaterialResolvedType type; // Offset: 16
    keen::uint8 level; // Offset: 17
};

struct FogVoxelMaterialResolvedList {
    keen::BlobArray<keen::FogVoxelMaterialResolved> fogMaterials; // Offset: 0
};

struct WaterVoxelMaterialResolvedList {
    keen::Guid waterMaterial; // Offset: 0
};

struct TemperatureVoxelMaterialResolvedList {
    keen::BlobArray<keen::Guid> temperatureMaterials; // Offset: 0
};

struct BuildingMaterialMappingResource {
    keen::uint8 localId; // Offset: 0
    keen::Guid materialId; // Offset: 4
};

struct BuildingMaterialPaletteResource {
    keen::BlobArray<keen::BuildingMaterialMappingResource> mappings; // Offset: 0
};

enum class ReservedMaterialId {
    Empty = 0,
    Conservative = 1,
    Dirt = 2,
    Count = 3,
};

struct FogRemovalSetup {
    keen::uint8 level; // Offset: 0
};

struct FogRemovalDirectory {
};

struct FogRemovalLink {
    keen::ObjectReference<keen::FogRemovalSetup> fogId; // Offset: 0
};

enum class FogVoxelMappingType {
    Gameplay = 0,
    Decorative = 1,
};

struct FogVoxelMapping {
    keen::FogVoxelMappingType type; // Offset: 0
    keen::uint8 level; // Offset: 1
    keen::FogRemovalId removalId; // Offset: 4
    keen::AxisAlignedBox boundingBox; // Offset: 16
};

struct FogVoxelMappingResource {
    keen::BlobArray<keen::FogVoxelMapping> mapping; // Offset: 0
};

struct VoxelModelResource {
    keen::uint3 size; // Offset: 0
    keen::BlobArray<keen::uint8> data; // Offset: 12
    keen::bool isTerrain; // Offset: 20
};

struct VoxelModelInfo {
    keen::uint3 size; // Offset: 0
    keen::BlobArray<keen::BuildingMaterialMappingResource> materialMap; // Offset: 12
    keen::bool isTerrain; // Offset: 20
};

enum class VoxelObjectPreviewMode {
    OnlyBuildingVoxels = 0,
    BuildingAndDirt = 1,
    AllVoxels = 2,
};

struct VoxelObjectDefinition {
    keen::ObjectReference<keen::BuildingMaterialPalette> materialPalette; // Offset: 0
    keen::ObjectReference<keen::Material> material; // Offset: 16
    keen::bool invertEmptyConservative; // Offset: 32
    keen::VoxelObjectPreviewMode previewMode; // Offset: 33
};

struct TerrainVoxelObjectDefinition {
    keen::ObjectReference<keen::Model> model; // Offset: 0
};

struct VoxelWorldObject {
    keen::ImageReference heightmap; // Offset: 0
    keen::ObjectReference<keen::AbstractScatterImage> compositeHeightmap; // Offset: 16
    keen::float32 heightScale; // Offset: 32
    keen::bool useCompositeScatterImage; // Offset: 36
    keen::bool displaceHeightmap; // Offset: 37
    keen::int3 origin; // Offset: 40
};

struct VoxelWorldInfo {
    keen::int2 minTile; // Offset: 0
    keen::int2 maxTile; // Offset: 8
    keen::sint32 yOffset; // Offset: 16
    keen::uint2 heightMapSize; // Offset: 20
    keen::float32 heightMapHeight; // Offset: 28
};

struct VoxelWorldTerraAction {
    keen::float3 position; // Offset: 0
    keen::float32 radius; // Offset: 12
    keen::uint32 mode; // Offset: 16
};

struct VoxelWorldTerraActions {
    keen::BlobArray<keen::VoxelWorldTerraAction> actions; // Offset: 0
};

struct VoxelRoadShapeDefinition {
    keen::float32 roadWidth; // Offset: 0
};

struct VoxelWorldAutomatedTest {
    keen::ObjectReference<keen::Scene> scene; // Offset: 0
    keen::ObjectReference<keen::SourceFile> referenceVoxelData; // Offset: 16
};

enum class DestructionVoxelBlockType {
    Empty = 0,
    DestructionEdge = 1,
    ModeStart = 2,
};

struct VoxelWorldConverterConfig {
    keen::bool buildWaterVoxels; // Offset: 0
};

struct WeatherPhenomenon {
    keen::ObjectReference<keen::Image> cloudMap; // Offset: 0
    keen::bool tiling; // Offset: 16
};

struct WeatherSnowBorderConfiguration {
    keen::FloatRange fadeRange; // Offset: 0
    keen::ObjectReference<keen::CompositeScatterImage> mask; // Offset: 8
    keen::uint32 maskResolutionDivisor; // Offset: 24
};

struct WeatherSystemConfiguration {
    keen::ObjectReference<keen::Scene> scene; // Offset: 0
    keen::WeatherSnowBorderConfiguration snowBorder; // Offset: 16
    keen::uint32 layerMaskResolutionDivisor; // Offset: 44
};

struct WeatherHeightMap {
    keen::FloatRange fadeRange; // Offset: 0
    keen::ObjectReference<keen::CompositeScatterImage> mask; // Offset: 8
};

struct WeatherPhenomenonProbability {
    keen::float32 probability; // Offset: 0
    keen::TimeRange duration; // Offset: 8
};

struct WeatherLayerConfiguration {
    keen::bool useMaskResolutionDivisor; // Offset: 0
    keen::ObjectReference<keen::CompositeScatterImage> restrictMask; // Offset: 4
    keen::ObjectReference<keen::CompositeScatterImage> excludeMask; // Offset: 20
    keen::bool maskClouds; // Offset: 36
    keen::bool maskRain; // Offset: 37
    keen::WeatherPhenomenonProbability nothingProbability; // Offset: 40
};

enum class WeatherPhenomenonEffect {
    None = 0,
    Rain = 1,
    Blizzard = 2,
};

struct WeatherPhenomenonConfiguration {
    keen::WeatherPhenomenonProbability probability; // Offset: 0
    keen::ObjectReference<keen::WeatherPhenomenon> phenomenon; // Offset: 24
    keen::FloatRange scale; // Offset: 40
    keen::FloatRange rotation; // Offset: 48
    keen::FloatRange moveSpeed; // Offset: 56
    keen::bool alignRotationToMoveSpeed; // Offset: 64
    keen::Time spawnFadeTime; // Offset: 72
    keen::Time despawnFadeTime; // Offset: 80
    keen::WeatherPhenomenonEffect effect; // Offset: 88
    keen::float32 rainThreshold; // Offset: 92
};

struct WeatherSystemMaskResource {
    keen::float2 bboxMin; // Offset: 0
    keen::float2 bboxMax; // Offset: 8
    keen::float2 worldToRelative; // Offset: 16
    keen::uint2 size; // Offset: 24
    keen::BlobArray<keen::uint8> data; // Offset: 32
};

struct WeatherSystemResource {
    keen::HashKey32 dataHash; // Offset: 0
    keen::uint2 worldSize; // Offset: 4
    keen::float2 snowBorderRangeMapping; // Offset: 12
    keen::WeatherSystemMaskResource snowBorderMask; // Offset: 20
    keen::BlobArray<keen::WeatherSystemLayerResource> layers; // Offset: 60
    keen::BlobArray<keen::WeatherSystemLayerMaskResource> layerMasks; // Offset: 68
    keen::BlobArray<keen::WeatherSystemPhenomenonResource> phenomenons; // Offset: 76
    keen::BlobArray<keen::WeatherSystemMaskResource> rainMasks; // Offset: 84
};

typedef keen::uint8 WeatherLayerMaskIndex;

enum class WeatherSystemPhenomenonResourceFlag {
    Tiling = 0,
    MaskCloudMap = 1,
    MaskRain = 2,
};

typedef keen::Bitmask32<keen::WeatherSystemPhenomenonResourceFlag> WeatherSystemPhenomenonResourceFlags;

typedef keen::uint8 WeatherRainMaskIndex;

struct WeatherSystemPhenomenonResource {
    keen::Guid guid; // Offset: 0
    keen::float32 probability; // Offset: 16
    keen::WeatherSystemPhenomenonResourceFlags flags; // Offset: 20
    keen::Time durationMin; // Offset: 24
    keen::Time durationMax; // Offset: 32
    keen::float32 radiusMin; // Offset: 40
    keen::float32 radiusMax; // Offset: 44
    keen::float32 moveSpeedMin; // Offset: 48
    keen::float32 moveSpeedMax; // Offset: 52
    keen::Time spawnFadeTime; // Offset: 56
    keen::Time despawnFadeTime; // Offset: 64
    keen::float32 rainThreshold; // Offset: 72
    keen::WeatherRainMaskIndex rainMaskIndex; // Offset: 76
    keen::ObjectReference<keen::RenderWeatherPhenomenonResource> renderer; // Offset: 80
    keen::WeatherPhenomenonEffect effect; // Offset: 96
};

struct WeatherSystemLayerResource {
    keen::Guid guid; // Offset: 0
    keen::WeatherLayerMaskIndex restrictMaskIndex; // Offset: 16
    keen::WeatherLayerMaskIndex excludeMaskIndex; // Offset: 17
    keen::BlobArray<keen::WeatherPhenomenonIndex> phenomenonIndices; // Offset: 20
    keen::WeatherSystemPhenomenonResource nothingPhenomenon; // Offset: 32
};

struct WeatherSystemLayerMaskResource {
    keen::WeatherSystemMaskResource mask; // Offset: 0
    keen::ObjectReference<keen::RenderWeatherMaskResource> renderer; // Offset: 40
};

struct WeatherSystemDebugState {
    keen::Time currentTime; // Offset: 0
    keen::BlobArray<keen::WeatherSystemDebugLayerState> layers; // Offset: 8
    keen::BlobArray<keen::WeatherSystemDebugInstanceState> instances; // Offset: 16
};

struct WeatherSystemDebugLayerState {
    keen::Guid guid; // Offset: 0
    keen::Time nextPhenomenonTime; // Offset: 16
    keen::uint32 currentInstanceHandle; // Offset: 24
    keen::uint32 previousInstanceHandle; // Offset: 28
};

struct WeatherSystemDebugInstanceState {
    keen::uint32 handle; // Offset: 0
    keen::Guid guid; // Offset: 4
    keen::float2 position; // Offset: 20
    keen::float32 rotation; // Offset: 28
    keen::float32 radius; // Offset: 32
    keen::float32 moveSpeed; // Offset: 36
    keen::float32 fade; // Offset: 40
};

struct WeatherSystemDebugSkipToNextPhenomenonMessage {
    keen::uint32 layerIndex; // Offset: 0
};

typedef keen::uint8 WeatherPhenomenonIndex;

struct weather.save_v0.WeatherSavedLayerInstance {
    keen::WeatherPhenomenonIndex phenomenonIndex; // Offset: 0
    keen::WorldPosition spawnPosition; // Offset: 8
    keen::Angle rotation; // Offset: 32
    keen::float32 radius; // Offset: 36
    keen::float32 moveSpeed; // Offset: 40
    keen::Time spawnTime; // Offset: 48
    keen::Time despawnTime; // Offset: 56
};

struct weather.save_v0.WeatherSavedLayer {
    keen::Time nextPhenomenon; // Offset: 0
    keen::weather::save_v0::WeatherSavedLayerInstance currentInstance; // Offset: 8
    keen::weather::save_v0::WeatherSavedLayerInstance previousInstance; // Offset: 72
};

typedef keen::uint8 WeatherLayerIndex;

struct WeatherSpawnParameters {
    keen::float32 eventProbabilityModifier; // Offset: 0
};

struct g38_options.SettingsHeader {
    keen::uint32 version; // Offset: 0
};

enum class g38_options.pc.v5_dedicated_song_selection_binding.machine.WindowMode {
    Windowed = 0,
    Fullscreen = 1,
};

enum class g38_options.pc.v5_dedicated_song_selection_binding.machine.NvidiaReflexModeSettings {
    Off = 0,
    On = 1,
    Boost = 2,
};

struct g38_options.pc.v5_dedicated_song_selection_binding.machine.GraphicsSettings {
    keen::g38_options::pc::v5_dedicated_song_selection_binding::machine::WindowMode windowMode; // Offset: 0
    keen::int2 windowPosition; // Offset: 4
    keen::uint2 windowSize; // Offset: 12
    keen::uint2 forceBackbufferResolution; // Offset: 20
    keen::float32 renderScale; // Offset: 28
    keen::bool automaticRenderScale; // Offset: 32
    keen::bool vsync; // Offset: 33
    keen::g38_options::pc::v5_dedicated_song_selection_binding::machine::NvidiaReflexModeSettings nvidiaReflex; // Offset: 36
    keen::RenderSettings render; // Offset: 40
    keen::bool useDefaultRenderSettings; // Offset: 120
    keen::bool sleepInBackground; // Offset: 121
};

struct g38_options.pc.v5_dedicated_song_selection_binding.machine.SoundSettings {
    keen::bool muteInBackground; // Offset: 0
};

struct g38_options.pc.v5_dedicated_song_selection_binding.machine.Settings {
    keen::g38_options::pc::v5_dedicated_song_selection_binding::machine::GraphicsSettings graphics; // Offset: 4
    keen::g38_options::pc::v5_dedicated_song_selection_binding::machine::SoundSettings sound; // Offset: 128
};

struct g38_options.pc.v5_dedicated_song_selection_binding.user.GraphicsSettings {
    keen::float32 fov; // Offset: 0
};

struct g38_options.pc.v5_dedicated_song_selection_binding.user.SoundSettings {
    keen::float32 masterVolume; // Offset: 0
    keen::float32 musicVolume; // Offset: 4
    keen::float32 uiVolume; // Offset: 8
    keen::float32 gameVolume; // Offset: 12
    keen::float32 voiceVolume; // Offset: 16
    keen::bool dynamicReverb; // Offset: 20
};

struct g38_options.pc.v5_dedicated_song_selection_binding.user.MouseSettings {
    keen::float32 defaultSensitivity; // Offset: 0
    keen::float32 rangedCombatSensitivity; // Offset: 4
    keen::bool2 invertCameraAxes; // Offset: 8
    keen::AttackDirectionInput attackDirection; // Offset: 10
    keen::bool enableSmoothing; // Offset: 11
};

struct g38_options.pc.v5_dedicated_song_selection_binding.user.GamepadSettings {
    keen::float32 defaultSensitivity; // Offset: 0
    keen::float32 rangedCombatSensitivity; // Offset: 4
    keen::bool2 invertCameraAxes; // Offset: 8
    keen::AttackDirectionInput attackDirection; // Offset: 10
    keen::ControllerButtonStyle controllerButtonStyle; // Offset: 11
};

struct g38_options.pc.v5_dedicated_song_selection_binding.user.InputSettings {
    keen::input_mapping::PresetId selectedKeyboardMousePresetId; // Offset: 0
    keen::input_mapping::PresetId selectedGamepadPresetId; // Offset: 1
    keen::input_mapping::serialize::InputBindings customInputBindings; // Offset: 4
    keen::g38_options::pc::v5_dedicated_song_selection_binding::user::MouseSettings mouse; // Offset: 16
    keen::g38_options::pc::v5_dedicated_song_selection_binding::user::GamepadSettings gamepad; // Offset: 28
};

enum class g38_options.pc.v5_dedicated_song_selection_binding.user.SpiderSetting {
    Show = 0,
    HideSmall = 1,
};

struct g38_options.pc.v5_dedicated_song_selection_binding.user.GameplaySettings {
    keen::float cameraZoomFactor; // Offset: 0
    keen::bool enableIdleCameraTransition; // Offset: 4
    keen::bool reduceDynamicCameraMovement; // Offset: 5
    keen::float screenShakeStrength; // Offset: 8
    keen::bool displayDamageNumbers; // Offset: 12
    keen::bool displayDamagePropertyTexts; // Offset: 13
    keen::bool keepTargetLockWhenSprinting; // Offset: 14
    keen::bool breakTargetLockOnKill; // Offset: 15
    keen::uint32 hudAspectRatioWidth; // Offset: 16
    keen::float textScale; // Offset: 20
    keen::bool useAdditionalSymbolsForItemRarity; // Offset: 24
    keen::bool hideHUD; // Offset: 25
    keen::bool hideHelmet; // Offset: 26
    keen::bool hideGloves; // Offset: 27
    keen::bool showCharacterName; // Offset: 28
    keen::ItemRarity itemDeletionProtectionLevel; // Offset: 29
    keen::g38_options::pc::v5_dedicated_song_selection_binding::user::SpiderSetting hideSpiders; // Offset: 30
};

struct g38_options.pc.v5_dedicated_song_selection_binding.user.HostUserGroup {
    keen::bool enable; // Offset: 0
    keen::string password; // Offset: 4
};

struct g38_options.pc.v5_dedicated_song_selection_binding.user.HostSettings {
    keen::uint32 maxSlots; // Offset: 0
    keen::string password; // Offset: 4
    keen::g38_options::pc::v5_dedicated_song_selection_binding::user::HostUserGroup guests; // Offset: 12
    keen::g38_options::pc::v5_dedicated_song_selection_binding::user::HostUserGroup friends; // Offset: 24
    keen::g38_options::pc::v5_dedicated_song_selection_binding::user::HostUserGroup admins; // Offset: 36
};

struct g38_options.pc.v5_dedicated_song_selection_binding.user.Settings {
    keen::g38_options::pc::v5_dedicated_song_selection_binding::user::GraphicsSettings graphics; // Offset: 4
    keen::g38_options::pc::v5_dedicated_song_selection_binding::user::SoundSettings sound; // Offset: 8
    keen::g38_options::pc::v5_dedicated_song_selection_binding::user::InputSettings input; // Offset: 32
    keen::g38_options::pc::v5_dedicated_song_selection_binding::user::GameplaySettings gameplay; // Offset: 72
    keen::g38_options::pc::v5_dedicated_song_selection_binding::user::HostSettings hostSettings; // Offset: 104
    keen::uint32 playedSessions; // Offset: 152
};

struct g38_options.pc.v4_dedicated_glider_binding.machine.Settings {
};

struct g38_options.pc.v4_dedicated_glider_binding.user.Settings {
    keen::g38_options::pc::v5_dedicated_song_selection_binding::user::Settings legacySettings; // Offset: 0
};

struct g38_options.pc.v3_early_access_release.machine.Settings {
};

struct g38_options.pc.v3_early_access_release.user.Settings {
    keen::g38_options::pc::v5_dedicated_song_selection_binding::user::Settings legacySettings; // Offset: 0
};

struct G38SupportedFeatures {
    keen::RenderSettingsFeatures renderFeatures; // Offset: 0
    keen::bool isNvReflexAvailable; // Offset: 8
};

struct debug.CameraPathKeyframe {
    keen::Matrix43 transform; // Offset: 0
    keen::Time time; // Offset: 64
};

struct debug.CameraRecording {
    keen::BlobArray<keen::debug::CameraPathKeyframe> cameraPath; // Offset: 0
};

typedef keen::AchievementId AchievementId;

typedef keen::AchievementValue AchievementValue;

typedef keen::ObjectReference<keen::ds::LocaTag> LocaTagReference;

typedef keen::ds::LocaTagReference NameLocaTag;

typedef keen::ds::LocaTagReference DescriptionLocaTag;

struct AchievementData {
    keen::ds::NameLocaTag name; // Offset: 0
    keen::ds::DescriptionLocaTag description; // Offset: 16
    keen::bool hasUnlockValue; // Offset: 32
    keen::ds::AchievementValue unlockValue; // Offset: 36
};

typedef keen::ObjectReference<keen::ds::AchievementData> AchievementDataReference;

typedef keen::DsString string;

struct Achievement {
    keen::ds::AchievementId id; // Offset: 0
    keen::bool hasUnlockValue; // Offset: 4
    keen::ds::AchievementValue unlockValue; // Offset: 8
    keen::uint32 dosId; // Offset: 12
    keen::ds::string steamName; // Offset: 16
    keen::ds::string steamStat; // Offset: 56
    keen::int npId; // Offset: 96
    keen::int xsapiId; // Offset: 100
    keen::Guid guid; // Offset: 104
    keen::ds::string dbgName; // Offset: 120
};

struct AchievementDefinitionResource {
    keen::DsArray<keen::ds::Achievement> achievements; // Offset: 0
};

typedef keen::ObjectReference<keen::ds::AchievementDefinitionResource> AchievementDefinitionReference;

struct AchievementSubDirectory {
};

struct AchievementDirectory {
};

typedef keen::AmbientSfxPlaybackType AmbientSfxPlaybackType;

typedef keen::AmbientEitherOrBoth AmbientEitherOrBoth;

typedef keen::ObjectReference<keen::ds::SoundContainer> SoundContainerReference;

typedef keen::AmbientMask AmbientMask;

struct AmbientSoundEffectEntry {
    keen::bool mute; // Offset: 0
    keen::float32 volume; // Offset: 4
    keen::ds::SoundContainerReference soundContainer; // Offset: 8
    keen::ObjectReference<keen::ds::IngameTimeSpan> ingameTimeSpan; // Offset: 24
    keen::ds::AmbientSfxPlaybackType playbackType; // Offset: 40
    keen::ds::AmbientMask additionalTagsInclude; // Offset: 41
    keen::Bitmask8<keen::WeatherState> weather; // Offset: 42
};

typedef keen::AmbientEnvironment AmbientEnvironment;

struct AmbientSoundEffect {
    keen::bool mute; // Offset: 0
    keen::float32 volume; // Offset: 4
    keen::bool inAllEnvironments; // Offset: 8
    keen::ds::AmbientEitherOrBoth inFog; // Offset: 9
    keen::ds::AmbientEitherOrBoth indoors; // Offset: 10
    keen::ds::AmbientEnvironment environment; // Offset: 11
    keen::ds::AmbientMask ambientTagsInclude; // Offset: 12
    keen::ds::AmbientMask ambientTagsExclude; // Offset: 13
};

struct AmbientSoundEffectParameters {
    keen::float sfxLifeTimeInSeconds; // Offset: 0
    keen::float chanceToPlaySound; // Offset: 4
    keen::float environmentMusicFadeValuePerSecond; // Offset: 8
    keen::float loopFadeValuePerSecond; // Offset: 12
    keen::float musicFadeOutToBattleValuePerSecond; // Offset: 16
    keen::float musicFadeOutToBossValuePerSecond; // Offset: 20
    keen::float bossMusicFadeInValuePerSecond; // Offset: 24
    keen::float bossMusicFadeOutValuePerSecond; // Offset: 28
    keen::float combatMusicFadeInValuePerSecond; // Offset: 32
    keen::float combatMusicFadeOutValuePerSecond; // Offset: 36
    keen::float caveLoopsFadeInPerSeconds; // Offset: 40
    keen::float caveLoopsFadeOutPerSeconds; // Offset: 44
    keen::Time caveMusicDelay; // Offset: 48
    keen::float rainIndoorFade; // Offset: 56
    keen::float rainIndoorLoweredVolume; // Offset: 60
    keen::uint32 daytimeFadeValuePlusMinusMinutes; // Offset: 64
    keen::float playerIsInFogThreshold; // Offset: 68
    keen::float startFogEffectsThreshold; // Offset: 72
    keen::float stopFogEffectsThreshold; // Offset: 76
    keen::float playerIsInEnvironmentThreshold; // Offset: 80
    keen::float startEnvironmentEffectsThreshold; // Offset: 84
    keen::float stopEnvironmentEffectsThreshold; // Offset: 88
    keen::float baseAmbienceThreshold; // Offset: 92
    keen::float smallEnvironmentMultiplier; // Offset: 96
    keen::float oneshotDistanceMultiplier; // Offset: 100
    keen::float temporalSmoothingSpeed; // Offset: 104
    keen::Time silenceAfterVictoryDuration; // Offset: 112
    keen::float fogMusicFogVolumeMod; // Offset: 120
    keen::float environmentMusicFogVolumeMod; // Offset: 124
    keen::float environmentMusicEnvVolumeMod; // Offset: 128
    keen::float fogLoopsFogVolumeMod; // Offset: 132
    keen::float environmentLoopsFogVolumeMod; // Offset: 136
    keen::float environmentLoopsEnvVolumeMod; // Offset: 140
    keen::uint32 propsNeededToEnableAmbientTag; // Offset: 144
    keen::Time pauseBetweenBushCollisionSounds; // Offset: 152
};

struct AmbientSfxSubDirectory {
};

struct AmbientSfxDirectory {
};

typedef keen::SoundContainerMode SoundContainerMode;

typedef keen::SoundContainerScene SoundContainerScene;

struct SoundContainerShared {
    keen::ds::SoundContainerMode mode; // Offset: 0
    keen::ds::SoundContainerScene scene; // Offset: 1
    keen::bool loop; // Offset: 2
    keen::bool loopSameChosenEntry; // Offset: 3
    keen::uint32 avoidRepeatingLastX; // Offset: 4
    keen::float32 volume; // Offset: 8
    keen::float32 volumeRandomness; // Offset: 12
    keen::float32 pitch; // Offset: 16
    keen::float32 pitchRandomness; // Offset: 20
    keen::Time sleep; // Offset: 24
    keen::Time sleepRandomness; // Offset: 32
    keen::bool hasPosition; // Offset: 40
    keen::float32 minDistance; // Offset: 44
    keen::float32 maxDistance; // Offset: 48
    keen::bool hasRandomPosition; // Offset: 52
    keen::float32 randomLeftRight; // Offset: 56
    keen::float32 randomFrontBack; // Offset: 60
};

struct AmbientSfxResource {
    keen::bool inAllEnvironments; // Offset: 0
    keen::ds::AmbientEitherOrBoth inFog; // Offset: 1
    keen::ds::AmbientEitherOrBoth indoors; // Offset: 2
    keen::ds::AmbientEnvironment environment; // Offset: 3
    keen::ds::AmbientSfxPlaybackType playbackType; // Offset: 4
    keen::Bitmask8<keen::WeatherState> weather; // Offset: 5
    keen::ds::AmbientMask ambientTagsInclude; // Offset: 6
    keen::ds::AmbientMask ambientTagsExclude; // Offset: 7
    keen::float32 volume; // Offset: 8
    keen::Time startTime; // Offset: 16
    keen::Time endTime; // Offset: 24
    keen::ds::SoundContainerShared soundContainerShared; // Offset: 32
    keen::uint soundStart; // Offset: 96
    keen::uint soundCount; // Offset: 100
    keen::Guid id; // Offset: 104
    keen::DsString debugNameEffect; // Offset: 120
    keen::DsString debugNameEffectEntry; // Offset: 160
};

struct AmbientSfxCollectionResource {
    keen::DsArray<keen::ds::AmbientSfxResource> effects; // Offset: 0
    keen::DsArray<keen::ds::AmbientSfxResource> loops; // Offset: 40
    keen::DsArray<keen::ds::AmbientSfxResource> music; // Offset: 80
    keen::DsArray<keen::ds::SoundResourceReference> sounds; // Offset: 120
};

struct AmbientEventSounds {
    keen::ds::SoundContainerReference battleStartJingle; // Offset: 0
    keen::ds::SoundContainerReference battleEndJingle; // Offset: 16
    keen::ds::SoundContainerReference bossMusicScavenger; // Offset: 32
    keen::ds::SoundContainerReference bossMusicMonstrosity; // Offset: 48
    keen::ds::SoundContainerReference bossMusicFoggerHeavy; // Offset: 64
    keen::ds::SoundContainerReference bossMusicFoggerMage; // Offset: 80
    keen::ds::SoundContainerReference bossMusicVukahBigfoot; // Offset: 96
    keen::ds::SoundContainerReference bossMusicLurchie; // Offset: 112
    keen::ds::SoundContainerReference bossMusicHollow; // Offset: 128
    keen::ds::SoundContainerReference bossMusicCyclops; // Offset: 144
    keen::ds::SoundContainerReference bossMusicDragon; // Offset: 160
    keen::ds::SoundContainerReference bushCollision; // Offset: 176
};

typedef keen::ObjectReference<keen::ds::SoundContainerResource> SoundContainerResourceReference;

struct AmbientEventSoundsResource {
    keen::ds::SoundContainerResourceReference battleStartJingle; // Offset: 0
    keen::ds::SoundContainerResourceReference battleEndJingle; // Offset: 16
    keen::ds::SoundContainerResourceReference bossMusicScavenger; // Offset: 32
    keen::ds::SoundContainerResourceReference bossMusicMonstrosity; // Offset: 48
    keen::ds::SoundContainerResourceReference bossMusicFoggerHeavy; // Offset: 64
    keen::ds::SoundContainerResourceReference bossMusicFoggerMage; // Offset: 80
    keen::ds::SoundContainerResourceReference bossMusicVukahBigfoot; // Offset: 96
    keen::ds::SoundContainerResourceReference bossMusicLurchie; // Offset: 112
    keen::ds::SoundContainerResourceReference bossMusicHollow; // Offset: 128
    keen::ds::SoundContainerResourceReference bossMusicCyclops; // Offset: 144
    keen::ds::SoundContainerResourceReference bossMusicDragon; // Offset: 160
    keen::ds::SoundContainerResourceReference bushCollision; // Offset: 176
};

struct AmbientParameterResource {
    keen::uint16 chanceForSilence; // Offset: 0
    keen::float sfxLifeTimeInSeconds; // Offset: 4
    keen::float environmentMusicFadeValuePerSecond; // Offset: 8
    keen::float loopFadeValuePerSecond; // Offset: 12
    keen::float musicFadeOutToBattleValuePerSecond; // Offset: 16
    keen::float musicFadeOutToBossValuePerSecond; // Offset: 20
    keen::float bossMusicFadeInValuePerSecond; // Offset: 24
    keen::float bossMusicFadeOutValuePerSecond; // Offset: 28
    keen::float combatMusicFadeInValuePerSecond; // Offset: 32
    keen::float combatMusicFadeOutValuePerSecond; // Offset: 36
    keen::float caveLoopsFadeInPerSeconds; // Offset: 40
    keen::float caveLoopsFadeOutPerSeconds; // Offset: 44
    keen::Time caveMusicDelay; // Offset: 48
    keen::float rainIndoorFade; // Offset: 56
    keen::float rainIndoorLoweredVolume; // Offset: 60
    keen::float playerIsInFogThreshold; // Offset: 64
    keen::float startFogEffectsThreshold; // Offset: 68
    keen::float stopFogEffectsThreshold; // Offset: 72
    keen::float playerIsInEnvironmentThreshold; // Offset: 76
    keen::float startEnvironmentEffectsThreshold; // Offset: 80
    keen::float stopEnvironmentEffectsThreshold; // Offset: 84
    keen::float baseAmbienceThreshold; // Offset: 88
    keen::float smallEnvironmentMultiplier; // Offset: 92
    keen::float oneshotDistanceMultiplier; // Offset: 96
    keen::float temporalSmoothingSpeed; // Offset: 100
    keen::Time silenceAfterVictoryDuration; // Offset: 104
    keen::float fogMusicFogVolumeMod; // Offset: 112
    keen::float environmentMusicFogVolumeMod; // Offset: 116
    keen::float environmentMusicEnvVolumeMod; // Offset: 120
    keen::float fogLoopsFogVolumeMod; // Offset: 124
    keen::float environmentLoopsFogVolumeMod; // Offset: 128
    keen::float environmentLoopsEnvVolumeMod; // Offset: 132
    keen::uint32 propsNeededToEnableAmbientTag; // Offset: 136
    keen::Time pauseBetweenBushCollisionSounds; // Offset: 144
};

typedef keen::ObjectReference<keen::ds::VfxDefinition> VfxReference;

typedef keen::ObjectReference<keen::ds::IngameTimeSpan> IngameTimeSpanReference;

struct AmbientVisualEffectEntry {
    keen::ds::VfxReference vfx; // Offset: 0
    keen::ds::IngameTimeSpanReference ingameTimeSpan; // Offset: 16
    keen::Bitmask8<keen::WeatherState> weather; // Offset: 32
};

struct AmbientVisualEffect {
    keen::ds::AmbientEnvironment environment; // Offset: 0
    keen::bool inAllEnvironments; // Offset: 1
    keen::ds::AmbientEitherOrBoth inFog; // Offset: 2
};

struct AmbientVfxSubDirectory {
};

struct AmbientVfxDirectory {
};

struct AmbientVfxResource {
    keen::ds::VfxReference vfx; // Offset: 0
    keen::Time startTime; // Offset: 16
    keen::Time endTime; // Offset: 24
    keen::ds::AmbientEnvironment environment; // Offset: 32
    keen::bool inAllEnvironments; // Offset: 33
    keen::ds::AmbientEitherOrBoth inFog; // Offset: 34
    keen::Bitmask8<keen::WeatherState> weather; // Offset: 35
    keen::Guid id; // Offset: 36
};

struct AmbientVfxCollectionResource {
    keen::DsArray<keen::ds::AmbientVfxResource> effects; // Offset: 0
};

struct AmbientEnvironmentMapResource {
    keen::StaticArray<keen::ds::AmbientEnvironment,256> voxelIdToAmbientEnvironmentMap; // Offset: 0
};

struct AmbientPPPDawnDuskOffsets {
    keen::Time nightAdaptationStartOffset; // Offset: 0
    keen::Time nightAdaptationEndOffset; // Offset: 8
    keen::Time dayAdaptationStartOffset; // Offset: 16
    keen::Time dayAdaptationEndOffset; // Offset: 24
};

struct AmbientPostProcessingParameters {
    keen::float rainWeatherSaturation; // Offset: 0
    keen::float nightAdaptationStrength; // Offset: 4
    keen::ds::AmbientPPPDawnDuskOffsets dawnDuskOffset; // Offset: 8
    keen::bool deathOnlyDesaturates; // Offset: 40
    keen::float deathScreenSaturation; // Offset: 44
    keen::Color color; // Offset: 48
    keen::float defaultSaturation; // Offset: 52
};

struct AmbientPostProcessingResource {
    keen::float rainWeatherSaturation; // Offset: 0
    keen::float nightAdaptationStrength; // Offset: 4
    keen::Time nightAdaptationStartOffset; // Offset: 8
    keen::Time nightAdaptationEndOffset; // Offset: 16
    keen::Time dayAdaptationStartOffset; // Offset: 24
    keen::Time dayAdaptationEndOffset; // Offset: 32
    keen::bool deathOnlyDesaturates; // Offset: 40
    keen::float deathScreenSaturation; // Offset: 44
    keen::Color color; // Offset: 48
    keen::float defaultSaturation; // Offset: 52
};

struct AmbientCollectionResource {
    keen::ObjectReference<keen::ds::AmbientSfxCollectionResource> sfxCollection; // Offset: 0
    keen::ObjectReference<keen::ds::AmbientVfxCollectionResource> vfxCollection; // Offset: 16
    keen::ObjectReference<keen::ds::AmbientParameterResource> parameters; // Offset: 32
    keen::ObjectReference<keen::ds::AmbientEnvironmentMapResource> mapping; // Offset: 48
    keen::ObjectReference<keen::ds::AmbientEventSoundsResource> eventSounds; // Offset: 64
    keen::ObjectReference<keen::ds::AmbientPostProcessingResource> postProcessing; // Offset: 80
};

typedef keen::ambient::ReasonThisSoundDoesNotPlay ambient.ReasonThisSoundDoesNotPlay;

typedef keen::ambient::ReasonThisSoundDoesNotPlayMask ambient.ReasonThisSoundDoesNotPlayMask;

struct ambient.SoundExplanation {
    keen::ds::ambient::ReasonThisSoundDoesNotPlayMask reason; // Offset: 0
    keen::float volumeCurrent; // Offset: 4
    keen::float volumeTarget; // Offset: 8
    keen::Guid soundGuid; // Offset: 12
};

struct ambient.EffectsSoundReasonsDebugMessage {
    keen::Guid effectGuid; // Offset: 0
    keen::ds::ambient::SoundExplanation explanation; // Offset: 16
    keen::uint cellIndex; // Offset: 44
};

struct ambient.DebugMessageBundle {
    keen::DsArray<keen::ds::ambient::EffectsSoundReasonsDebugMessage> data; // Offset: 0
};

typedef keen::BossMusicType BossMusicType;

struct ecs.Component {
};

struct ecs.IsTame {
};

typedef keen::AnimationLoopType AnimationLoopType;

struct AnimationJointQuality {
    keen::ds::string trackName; // Offset: 0
    keen::float32 quality; // Offset: 40
};

typedef keen::AttachmentSlot AttachmentSlot;

typedef keen::AttachmentSlotMask AttachmentSlotMask;

typedef keen::AnimationSpace AnimationSpace;

struct ModelHintSetEntry {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
};

struct ModelHintSet {
};

struct Animation {
    keen::ds::string animation_node; // Offset: 0
    keen::ObjectReference<keen::ds::ModelHierarchy> hierarchy; // Offset: 40
    keen::ObjectReference<keen::ds::Model> modelHint; // Offset: 56
    keen::ObjectReference<keen::ds::ModelHintSet> modelHintSet; // Offset: 72
    keen::ObjectReference<keen::ds::ClothCollider> clothCollider; // Offset: 88
    keen::uint32 startFrame; // Offset: 104
    keen::uint32 endFrame; // Offset: 108
    keen::sint32 refFrame; // Offset: 112
    keen::ds::AnimationSpace space; // Offset: 116
    keen::float32 xanimScale; // Offset: 120
    keen::float32 quality; // Offset: 124
    keen::DsArray<keen::ds::AnimationJointQuality> qualityOverrite; // Offset: 128
    keen::ds::AnimationLoopType loopType; // Offset: 168
    keen::float32 autoLoopEpsilon; // Offset: 172
    keen::bool loopLve; // Offset: 176
    keen::bool exportJointAnimation; // Offset: 177
    keen::bool exportLveAnimation; // Offset: 178
    keen::bool exportSequenceData; // Offset: 179
    keen::bool exportDebugData; // Offset: 180
};

typedef keen::ObjectReference<keen::ds::Animation> AnimationReference;

struct AnimationInfo {
    keen::float32 length; // Offset: 0
    keen::uint32 jointCount; // Offset: 4
    keen::uint32 frameCount; // Offset: 8
    keen::ObjectReference<keen::ds::Model> modelHint; // Offset: 12
    keen::ObjectReference<keen::ds::ModelHintSet> modelHintSet; // Offset: 28
    keen::ObjectReference<keen::ds::ModelHierarchyResource> hierarchy; // Offset: 44
    keen::bool hasLve; // Offset: 60
    keen::bool hasSequences; // Offset: 61
    keen::bool loops; // Offset: 62
    keen::ds::AnimationSpace space; // Offset: 63
    keen::DsString name; // Offset: 64
};

struct AnimationConverterConfiguration {
    keen::bool checkParentNames; // Offset: 0
    keen::bool checkMatrixDecomposition; // Offset: 1
};

struct Sequence {
    keen::Time length; // Offset: 0
    keen::bool loop; // Offset: 8
};

struct AnimationEventSequence {
    keen::ObjectReference<keen::ds::ModelHierarchy> hierarchyPreviewSettings; // Offset: 16
    keen::ObjectReference<keen::ds::ClothCollider> previewClothCollider; // Offset: 32
};

typedef keen::ObjectReference<keen::ds::SequenceResource> AnimationEventSequenceReference;

struct AnimationSequenceContainer {
    keen::DsArray<keen::ds::AnimationEventSequenceReference> sequences; // Offset: 0
};

typedef keen::Blend1DInterpolationCurve Blend1DInterpolationCurve;

struct animationgraph.StateId {
};

struct animationgraph.InputId {
};

struct animationgraph.FloatInputId {
};

struct animationgraph.BoolInputId {
};

struct animationgraph.IntInputId {
};

struct animationgraph.UintInputId {
};

struct animationgraph.IdInputId {
};

struct animationgraph.OverlayId {
};

struct animationgraph.OverlayContextId {
};

typedef keen::ObjectReference<keen::ds::animationgraph::StateId> animationgraph.StateIdReference;

typedef keen::ObjectReference<keen::ds::animationgraph::InputId> animationgraph.InputIdReference;

typedef keen::ObjectReference<keen::ds::animationgraph::OverlayId> animationgraph.OverlayIdReference;

typedef keen::ObjectReference<keen::ds::animationgraph::OverlayContextId> animationgraph.OverlayContextIdReference;

typedef keen::animationgraph::StateIdHash animationgraph.StateIdHash;

typedef keen::animationgraph::InputIdHash animationgraph.InputIdHash;

struct animationgraph.AnimationIdCollection {
};

struct animationgraph.StateIdCollection {
};

struct animationgraph.InputIdCollection {
};

struct animationgraph.OverlayIdCollection {
};

struct animationgraph.OverlayContextIdCollection {
};

struct animationgraph.AnimationDebugEntry {
    keen::Guid guid; // Offset: 0
    keen::HashKey32 hash; // Offset: 16
    keen::DsString debugName; // Offset: 24
};

struct animationgraph.AnimationGraphDebugInfo {
    keen::DsArray<keen::ds::animationgraph::AnimationDebugEntry> entries; // Offset: 0
};

typedef keen::animationgraph::RootMotionFlag animationgraph.RootMotionFlag;

typedef keen::animationgraph::RootMotionMask animationgraph.RootMotionMask;

struct animationgraph.NodeBase {
    keen::ds::animationgraph::StateIdReference id; // Offset: 0
    keen::Vector2 position; // Offset: 16
    keen::float32 defaultBlendInDuration; // Offset: 24
    keen::float3 pivotOffset; // Offset: 28
    keen::bool isIncompatibleWithOverlays; // Offset: 40
    keen::bool restartOnRetrigger; // Offset: 41
};

struct animationgraph.AnimationSpeedGradientController {
    keen::ds::animationgraph::InputIdReference inputName; // Offset: 0
    keen::float32 inputValueA; // Offset: 16
    keen::float32 inputValueB; // Offset: 20
    keen::float32 speedFactorA; // Offset: 24
    keen::float32 speedFactorB; // Offset: 28
};

struct animationgraph.AnimationNode {
    keen::ds::AnimationReference animation; // Offset: 44
};

struct animationgraph.AnimationSpeedGradientNode {
    keen::ds::animationgraph::AnimationSpeedGradientController speedController; // Offset: 60
};

struct animationgraph.BlendData1DBase {
    keen::float32 position; // Offset: 0
};

struct animationgraph.ChoiceData1DBase {
    keen::uint32 choice; // Offset: 0
};

struct animationgraph.NoAnimationBlendData1D {
};

struct animationgraph.NoAnimationChoiceData1D {
};

struct animationgraph.AnimationBlendData1D {
    keen::ds::AnimationReference animation; // Offset: 4
};

struct animationgraph.AnimationChoiceData1D {
    keen::ds::AnimationReference animation; // Offset: 4
};

struct animationgraph.AnimationSpeedGradientBlendData1D {
    keen::ds::animationgraph::AnimationSpeedGradientController speedController; // Offset: 20
};

struct animationgraph.AnimationSpeedGradientChoiceData1D {
    keen::ds::animationgraph::AnimationSpeedGradientController speedController; // Offset: 20
};

struct animationgraph.HierarchyBlendData1D {
    keen::ds::animationgraph::InputIdReference inputName; // Offset: 4
    keen::ds::Blend1DInterpolationCurve curve; // Offset: 20
    keen::bool wrapInputAsAngle; // Offset: 21
};

struct animationgraph.BlendHierarchyDataChoice1D {
    keen::ds::animationgraph::InputIdReference inputName; // Offset: 4
    keen::ds::Blend1DInterpolationCurve curve; // Offset: 20
    keen::bool wrapInputAsAngle; // Offset: 21
};

struct animationgraph.ChoiceHierarchyDataBlend1D {
    keen::ds::animationgraph::InputIdReference inputName; // Offset: 4
};

struct animationgraph.ChoiceHierarchyDataChoice1D {
    keen::ds::animationgraph::InputIdReference inputName; // Offset: 4
};

struct animationgraph.GenderAnimationReference {
    keen::ds::AnimationReference maleAnimation; // Offset: 0
    keen::ds::AnimationReference femaleAnimation; // Offset: 16
};

struct animationgraph.PrimaryItemSpecificAnimationReference {
    keen::ds::AnimationReference unarmedAnimation; // Offset: 0
    keen::ds::AnimationReference singleAndShieldAnimation; // Offset: 16
    keen::ds::AnimationReference singleNoShieldAnimation; // Offset: 32
    keen::ds::AnimationReference dualAnimation; // Offset: 48
    keen::ds::AnimationReference twoHandedAnimation; // Offset: 64
    keen::ds::AnimationReference bowPrimaryAnimation; // Offset: 80
    keen::ds::AnimationReference staffPrimaryAnimation; // Offset: 96
    keen::ds::AnimationReference wandPrimaryAnimation; // Offset: 112
};

struct animationgraph.SecondaryItemSpecificAnimationReference {
    keen::ds::AnimationReference bowAnimation; // Offset: 0
    keen::ds::AnimationReference staffSecondaryAnimation; // Offset: 16
    keen::ds::AnimationReference wandSecondaryAnimation; // Offset: 32
};

struct animationgraph.PrimaryItemSpecificAnimationNode {
    keen::ds::animationgraph::PrimaryItemSpecificAnimationReference animations; // Offset: 44
};

struct animationgraph.SecondaryItemSpecificAnimationNode {
    keen::ds::animationgraph::SecondaryItemSpecificAnimationReference animations; // Offset: 44
};

struct animationgraph.PrimaryItemSpecificBlend1D {
    keen::ds::animationgraph::PrimaryItemSpecificAnimationReference animations; // Offset: 4
};

struct animationgraph.SecondaryItemSpecificBlend1D {
    keen::ds::animationgraph::SecondaryItemSpecificAnimationReference animations; // Offset: 4
};

struct animationgraph.PrimaryItemSpecificChoice1D {
    keen::ds::animationgraph::PrimaryItemSpecificAnimationReference animations; // Offset: 4
};

struct animationgraph.SecondaryItemSpecificChoice1D {
    keen::ds::animationgraph::SecondaryItemSpecificAnimationReference animations; // Offset: 4
};

struct animationgraph.VerySpecialBlockNode {
};

struct animationgraph.MaskedNode {
    keen::DsString delimiterJoint; // Offset: 48
    keen::ds::animationgraph::InputIdReference delimiterInputName; // Offset: 88
    keen::Time lowerBodyBlendInTime; // Offset: 104
    keen::Time lowerBodyBlendOutTime; // Offset: 112
    keen::bool resetLowerBodyOnToggleOn; // Offset: 120
    keen::ObjectReference<keen::ds::animationgraph::NodeBase> upperAnims; // Offset: 124
    keen::ObjectReference<keen::ds::animationgraph::NodeBase> lowerAnims; // Offset: 140
};

struct animationgraph.Blend1D {
    keen::ds::animationgraph::InputIdReference inputName; // Offset: 44
    keen::ds::Blend1DInterpolationCurve curve; // Offset: 60
    keen::bool wrapInputAsAngle; // Offset: 61
};

struct animationgraph.Choice1D {
    keen::ds::animationgraph::InputIdReference inputName; // Offset: 44
};

struct animationgraph.BlendLayerBase {
    keen::float32 weight; // Offset: 0
};

struct animationgraph.AnimationBlendLayer {
    keen::ds::AnimationReference animation; // Offset: 4
};

struct animationgraph.HierarchyBlendLayer {
    keen::ds::animationgraph::HierarchyBlendData1D blendHierarchy; // Offset: 4
};

struct animationgraph.ChoiceHierarchyBlendLayer {
    keen::ds::animationgraph::ChoiceHierarchyDataBlend1D choiceHierarchy; // Offset: 4
};

struct animationgraph.PrimaryItemSpecificBlendLayer {
    keen::ds::animationgraph::PrimaryItemSpecificAnimationReference animations; // Offset: 4
};

struct animationgraph.SecondaryItemSpecificBlendLayer {
    keen::ds::animationgraph::SecondaryItemSpecificAnimationReference animations; // Offset: 4
};

struct animationgraph.BlendLayersNode {
};

typedef keen::ObjectReference<keen::ds::animationgraph::NodeBase> animationgraph.NodeBaseReference;

struct animationgraph.TransitionBase {
    keen::ds::animationgraph::NodeBaseReference startNode; // Offset: 0
    keen::ds::animationgraph::NodeBaseReference endNode; // Offset: 16
    keen::float32 duration; // Offset: 32
};

struct animationgraph.LinearTransition {
    keen::bool sync; // Offset: 36
};

struct animationgraph.AnimationTransition {
    keen::ds::AnimationReference animation; // Offset: 36
    keen::float32 blendIn; // Offset: 52
    keen::float32 blendOut; // Offset: 56
    keen::bool simultaneouslyPlayTargetAnimation; // Offset: 60
};

struct animationgraph.OverlayBase {
    keen::ds::animationgraph::OverlayIdReference id; // Offset: 0
    keen::ds::animationgraph::OverlayContextIdReference context; // Offset: 16
    keen::DsArray<keen::ds::animationgraph::NodeBaseReference> abortUnlessInNodes; // Offset: 32
};

struct animationgraph.AnimationOverlay {
    keen::ds::AnimationReference animation; // Offset: 72
};

struct Group {
};

struct AnimationGraphDirectory {
};

struct AnimationGraph {
    keen::float32 defaultTransitionTime; // Offset: 0
    keen::DsArray<keen::ds::animationgraph::GenderAnimationReference> genderLookupTable; // Offset: 8
    keen::ObjectReference<keen::ds::ClothCollider> clothColliderReference; // Offset: 48
};

struct animation.NodeId {
    keen::uint32 id; // Offset: 0
};

struct animationgraph_resource.TransitionBase {
    keen::ds::animation::NodeId endNodeIndex; // Offset: 0
    keen::Time duration; // Offset: 8
};

struct animationgraph_resource.LinearTransition {
    keen::bool sync; // Offset: 16
};

struct animation.AnimationId {
    keen::uint32 id; // Offset: 0
};

struct animationgraph_resource.GenderSpecificAnimationIndex {
    keen::ds::animation::AnimationId maleAnimation; // Offset: 0
    keen::ds::animation::AnimationId femaleAnimation; // Offset: 4
};

struct animationgraph_resource.ExitAnimation {
    keen::ds::animation::NodeId targetNodeIndex; // Offset: 0
    keen::Time blendIn; // Offset: 8
    keen::Time blendOut; // Offset: 16
    keen::ds::animation::AnimationId animationIndex; // Offset: 24
    keen::bool simultaneouslyPlayTargetAnimation; // Offset: 28
};

struct animationgraph_resource.AnimationSpeedGradientController {
    keen::ds::animationgraph::InputIdReference inputName; // Offset: 0
    keen::float32 inputValueA; // Offset: 16
    keen::float32 inputValueB; // Offset: 20
    keen::float32 speedFactorA; // Offset: 24
    keen::float32 speedFactorB; // Offset: 28
};

struct animationgraph_resource.NodeBase {
    keen::ds::animationgraph::StateIdReference stateIdReference; // Offset: 0
    keen::ds::animationgraph::StateIdHash stateId; // Offset: 16
    keen::DsArray<keen::ds::animationgraph_resource::ExitAnimation> onExits; // Offset: 24
    keen::uint32 defaultInboundTransition; // Offset: 64
    keen::DsArray<keen::uint32> outgoingTransitions; // Offset: 72
    keen::float3 pivotOffset; // Offset: 112
    keen::bool isIncompatibleWithOverlays; // Offset: 124
    keen::bool restartOnRetrigger; // Offset: 125
    keen::bool graphCanBePaused; // Offset: 126
};

struct animationgraph_resource.AnimationNode {
    keen::ds::animation::AnimationId animationIndex; // Offset: 128
};

struct animationgraph_resource.AnimationSpeedGradientNode {
    keen::ds::animationgraph_resource::AnimationSpeedGradientController speedController; // Offset: 136
};

struct animationgraph_resource.BlendDataFloat1DBase {
    keen::float32 position; // Offset: 0
};

struct animationgraph_resource.BlendDataUint1DBase {
    keen::uint32 choice; // Offset: 0
};

struct animationgraph_resource.NoAnimationBlendDataFloat1D {
};

struct animationgraph_resource.AnimationBlendDataFloat1D {
    keen::ds::animation::AnimationId animationIndex; // Offset: 4
};

struct animationgraph_resource.NoAnimationBlendDataUint1D {
};

struct animationgraph_resource.AnimationBlendDataUint1D {
    keen::ds::animation::AnimationId animationIndex; // Offset: 4
};

struct animationgraph_resource.AnimationSpeedGradientBlendDataFloat1D {
    keen::ds::animationgraph_resource::AnimationSpeedGradientController speedController; // Offset: 8
};

struct animationgraph_resource.AnimationSpeedGradientBlendDataUint1D {
    keen::ds::animationgraph_resource::AnimationSpeedGradientController speedController; // Offset: 8
};

struct animationgraph_resource.FloatHierarchy1D {
    keen::ds::animationgraph::InputIdReference floatInputName; // Offset: 0
    keen::bool wrapInputAsAngle; // Offset: 16
    keen::ds::Blend1DInterpolationCurve curve; // Offset: 17
    keen::DsArray<keen::DsVariant<keen::ds::animationgraph_resource::BlendDataFloat1DBase>> blendData; // Offset: 24
};

struct animationgraph_resource.UintHierarchy1D {
    keen::ds::animationgraph::InputIdReference uintInputName; // Offset: 0
    keen::DsArray<keen::DsVariant<keen::ds::animationgraph_resource::BlendDataUint1DBase>> blendData; // Offset: 16
};

struct animationgraph_resource.FloatHierarchyBlendDataFloat1D {
    keen::ds::animationgraph_resource::FloatHierarchy1D hierarchy; // Offset: 8
};

struct animationgraph_resource.FloatHierarchyBlendDataUint1D {
    keen::ds::animationgraph_resource::FloatHierarchy1D hierarchy; // Offset: 8
};

struct animationgraph_resource.UintHierarchyBlendDataFloat1D {
    keen::ds::animationgraph_resource::UintHierarchy1D hierarchy; // Offset: 8
};

struct animationgraph_resource.UintHierarchyBlendDataUint1D {
    keen::ds::animationgraph_resource::UintHierarchy1D hierarchy; // Offset: 8
};

struct animationgraph_resource.BlendFloat1DNode {
    keen::ds::animationgraph_resource::FloatHierarchy1D hierarchy; // Offset: 128
};

struct animationgraph_resource.BlendUint1DNode {
    keen::ds::animationgraph_resource::UintHierarchy1D hierarchy; // Offset: 128
};

struct animationgraph_resource.BlendLayerBase {
    keen::float32 weight; // Offset: 0
};

struct animationgraph_resource.AnimationBlendLayer {
    keen::ds::animation::AnimationId animationIndex; // Offset: 4
};

struct animationgraph_resource.BlendHierarchyBlendLayer {
    keen::ds::animationgraph_resource::FloatHierarchy1D hierarchy; // Offset: 8
};

struct animationgraph_resource.ChoiceHierarchyBlendLayer {
    keen::ds::animationgraph_resource::UintHierarchy1D hierarchy; // Offset: 8
};

struct animationgraph_resource.BlendLayersNode {
    keen::DsArray<keen::DsVariant<keen::ds::animationgraph_resource::BlendLayerBase>> blendLayers; // Offset: 128
};

typedef keen::ObjectReference<keen::ds::animationgraph_resource::NodeBase> animationgraph_resource.NodeBaseReference;

struct animationgraph_resource.VerySpecialBlockNode {
    keen::ds::string delimiterJoint; // Offset: 128
    keen::ds::animationgraph_resource::UintHierarchy1D blockAnimData; // Offset: 168
    keen::ds::animationgraph_resource::FloatHierarchy1D moveAnimData; // Offset: 224
};

struct animationgraph_resource.MaskedNode {
    keen::ds::string delimiterJoint; // Offset: 128
    keen::ds::animationgraph::InputIdReference delimiterInputName; // Offset: 168
    keen::Time lowerBodyBlendInTime; // Offset: 184
    keen::Time lowerBodyBlendOutTime; // Offset: 192
    keen::bool resetLowerBodyOnToggleOn; // Offset: 200
    keen::DsArray<keen::DsVariant<keen::ds::animationgraph_resource::BlendLayerBase>> upperLayers; // Offset: 208
    keen::DsArray<keen::DsVariant<keen::ds::animationgraph_resource::BlendLayerBase>> lowerLayers; // Offset: 248
};

struct animationgraph_resource.AnimationListEntry {
    keen::ds::AnimationReference reference; // Offset: 0
    keen::Time duration; // Offset: 16
    keen::uint32 frameCount; // Offset: 24
    keen::bool hasLve; // Offset: 28
    keen::bool hasSequences; // Offset: 29
    keen::bool loops; // Offset: 30
    keen::ds::AnimationSpace space; // Offset: 31
    keen::DsString name; // Offset: 32
};

struct animationgraph_resource.AnimationListResource {
    keen::DsArray<keen::ds::animationgraph_resource::AnimationListEntry> animations; // Offset: 0
};

struct animationgraph_resource.OverlayBase {
    keen::ds::animationgraph::StateIdHash stateId; // Offset: 0
    keen::ds::animationgraph::OverlayIdReference name; // Offset: 4
    keen::ds::animationgraph::OverlayContextIdReference context; // Offset: 20
    keen::DsArray<keen::ds::animationgraph::StateIdHash> abortUnlessInNodes; // Offset: 40
    keen::DsString dbgName; // Offset: 80
};

struct animationgraph_resource.AnimationOverlay {
    keen::ds::animation::AnimationId maleAnimationIndex; // Offset: 120
    keen::ds::animation::AnimationId femaleAnimationIndex; // Offset: 124
};

typedef keen::AnimationJointIndex AnimationJointIndex;

struct AnimationGraphResource {
    keen::uint32 jointCount; // Offset: 0
    keen::ObjectReference<keen::ds::ModelHierarchyResource> hierarchy; // Offset: 4
    keen::DsArray<keen::DsVariant<keen::ds::animationgraph_resource::NodeBase>> nodes; // Offset: 24
    keen::DsArray<keen::ds::animationgraph_resource::AnimationListEntry> animations; // Offset: 64
    keen::DsArray<keen::DsVariant<keen::ds::animationgraph_resource::TransitionBase>> transitions; // Offset: 104
    keen::DsArray<keen::DsVariant<keen::ds::animationgraph_resource::OverlayBase>> overlays; // Offset: 144
    keen::ds::animationgraph_resource::UintHierarchy1D globalOverlay; // Offset: 184
    keen::StaticArray<keen::ds::AnimationJointIndex,14> slotBoneIndexMapping; // Offset: 240
    keen::ObjectReference<keen::ds::RenderClothColliderResource> clothColliderReference; // Offset: 268
};

typedef keen::ObjectReference<keen::ds::AnimationGraph> AnimationGraphReference;

struct AnimationGraphInputBase {
    keen::ds::animationgraph::InputIdHash hash; // Offset: 0
};

struct AnimationGraphFloatInput {
    keen::float32 value; // Offset: 4
};

struct AnimationGraphUintInput {
    keen::uint32 value; // Offset: 4
};

struct AnimationGraphBoolInput {
    keen::bool value; // Offset: 4
};

struct AnimationGraphIntInput {
    keen::sint32 value; // Offset: 4
};

struct AnimationGraphIdInput {
    keen::ds::animationgraph::StateIdHash value; // Offset: 4
};

struct WarpToTargetConfig {
    keen::WorldTransform targetTransform; // Offset: 0
    keen::Time duration; // Offset: 56
    keen::Time endTime; // Offset: 64
    keen::float32 maxScale; // Offset: 72
    keen::bool isTargetSet; // Offset: 76
    keen::bool abortWarpAboveMaxScale; // Offset: 77
};

struct RootMotionConfig {
    keen::float32 movementMod; // Offset: 0
    keen::ds::WarpToTargetConfig warpToTargetConfig; // Offset: 8
};

typedef keen::OverlayInputsEventType OverlayInputsEventType;

struct OverlayInputsEvent {
    keen::ds::animationgraph::StateIdHash animationStateId; // Offset: 0
    keen::uint32 jointId; // Offset: 4
    keen::ds::OverlayInputsEventType type; // Offset: 8
    keen::uint8 changeCounter; // Offset: 9
};

struct AnimationGraphInputs {
    keen::StaticArray<keen::ds::AnimationGraphFloatInput,8> floatInputs; // Offset: 0
    keen::StaticArray<keen::ds::AnimationGraphUintInput,8> uintInputs; // Offset: 64
    keen::StaticArray<keen::ds::AnimationGraphBoolInput,2> boolInputs; // Offset: 128
    keen::StaticArray<keen::ds::AnimationGraphIntInput,2> intInputs; // Offset: 144
    keen::StaticArray<keen::ds::AnimationGraphIdInput,2> idInputs; // Offset: 160
    keen::StaticArray<keen::ds::OverlayInputsEvent,5> overlayInputs; // Offset: 176
    keen::ds::RootMotionConfig rootMotionConfig; // Offset: 240
    keen::WorldTransform currentTransform; // Offset: 328
};

typedef keen::AnimGraphPreviewEventType AnimGraphPreviewEventType;

struct AnimGraphPreviewSeqenceEntry {
    keen::ds::AnimGraphPreviewEventType eventType; // Offset: 0
    keen::Time timeFromStart; // Offset: 8
    keen::uint32 selectedIndex; // Offset: 16
};

struct AnimGraphPreviewSeqence {
    keen::DsArray<keen::ds::AnimGraphPreviewSeqenceEntry> entries; // Offset: 0
};

struct AnimationGraphInfo {
    keen::DsArray<keen::ds::animationgraph::StateIdReference> nodes; // Offset: 0
    keen::DsArray<keen::ds::animationgraph::InputIdReference> floatInputs; // Offset: 40
    keen::DsArray<keen::ds::animationgraph::InputIdReference> uintInputs; // Offset: 80
    keen::DsArray<keen::ds::animationgraph::InputIdReference> boolInputs; // Offset: 120
    keen::DsArray<keen::ds::animationgraph::OverlayIdReference> overlays; // Offset: 160
    keen::ObjectReference<keen::ds::ModelHierarchyResource> modelHierarchy; // Offset: 200
};

typedef keen::anim_graph::LayerBlendMode anim_graph.LayerBlendMode;

typedef keen::anim_graph::AdditiveType anim_graph.AdditiveType;

typedef keen::anim_graph::TransitionRootMotionMode anim_graph.TransitionRootMotionMode;

struct anim_graph.LayerBlendOptions {
    keen::ds::anim_graph::LayerBlendMode blendMode; // Offset: 0
    keen::ObjectReference<keen::ds::anim_graph::BoneMask> boneMask; // Offset: 4
};

struct anim_graph.BoneMask {
    keen::ObjectReference<keen::ds::ModelHierarchy> hierarchy; // Offset: 0
};

struct anim_graph.BoneMaskEntry {
    keen::ds::string boneName; // Offset: 0
    keen::float32 weight; // Offset: 40
};

struct anim_graph.BoneMaskResource {
    keen::DsArray<keen::ds::anim_graph::BoneMaskEntryResource> entries; // Offset: 0
};

struct anim_graph.BoneMaskEntryResource {
    keen::uint8 boneIndex; // Offset: 0
    keen::float32 weight; // Offset: 4
};

struct anim_graph.AnimationSpeedController {
    keen::ObjectReference<keen::ds::animationgraph::FloatInputId> inputName; // Offset: 0
    keen::HashKey32 inputHash; // Offset: 16
    keen::float32 inputValueA; // Offset: 20
    keen::float32 inputValueB; // Offset: 24
    keen::float32 speedFactorA; // Offset: 28
    keen::float32 speedFactorB; // Offset: 32
};

struct anim_graph.GenderMappingEntry {
    keen::Guid maleAnimation; // Offset: 0
    keen::Guid femaleAnimation; // Offset: 16
};

typedef keen::anim_graph::tool_graph::DataType anim_graph.tool_graph.DataType;

struct anim_graph.tool_graph.GraphParameterBase {
    keen::ObjectReference<keen::ds::animationgraph::InputId> inputId; // Offset: 0
};

struct anim_graph.tool_graph.FloatGraphParameter {
};

struct anim_graph.tool_graph.IntGraphParameter {
};

struct anim_graph.tool_graph.BoolGraphParameter {
};

struct anim_graph.tool_graph.IDGraphParameterValue {
};

struct anim_graph.tool_graph.IDGraphParameter {
};

struct anim_graph.tool_graph.GraphParameterSet {
};

struct anim_graph.tool_graph.PinBase {
    keen::ds::anim_graph::tool_graph::DataType dataType; // Offset: 0
};

struct anim_graph.tool_graph.InputPin {
};

struct anim_graph.tool_graph.OutputPin {
};

struct anim_graph.tool_graph.Link {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> sourcePin; // Offset: 0
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> targetPin; // Offset: 16
};

struct anim_graph.tool_graph.EditorNodeBase {
    keen::Vector2 uiPosition; // Offset: 0
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::EditorGraphBase> secondaryGraph; // Offset: 8
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::EditorGraphBase> childGraph; // Offset: 24
};

struct anim_graph.tool_graph.FloatParameter {
    keen::ObjectReference<keen::ds::animationgraph::FloatInputId> parameter; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> value; // Offset: 56
};

struct anim_graph.tool_graph.FloatConstant {
    keen::float32 value; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> output; // Offset: 44
};

struct anim_graph.tool_graph.FloatAdd {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.FloatSubtract {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.FloatMultiply {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.FloatGreaterThan {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 72
    keen::bool orEqual; // Offset: 88
};

struct anim_graph.tool_graph.FloatLessThan {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 72
    keen::bool orEqual; // Offset: 88
};

struct anim_graph.tool_graph.FloatEquals {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 72
    keen::float32 tolerance; // Offset: 88
};

struct anim_graph.tool_graph.FloatGreaterThanConstant {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> input; // Offset: 40
    keen::float32 value; // Offset: 56
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 60
    keen::bool orEqual; // Offset: 76
};

struct anim_graph.tool_graph.FloatLessThanConstant {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> input; // Offset: 40
    keen::float32 value; // Offset: 56
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 60
    keen::bool orEqual; // Offset: 76
};

struct anim_graph.tool_graph.FloatEqualsConstant {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> input; // Offset: 40
    keen::float32 value; // Offset: 56
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 60
    keen::float32 tolerance; // Offset: 76
};

struct anim_graph.tool_graph.FloatDivide {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.SelectPoseBase {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> outputPose; // Offset: 40
    keen::float32 blendTime; // Offset: 56
};

struct anim_graph.tool_graph.SelectPoseByBool {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> poseA; // Offset: 60
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> poseB; // Offset: 76
};

struct anim_graph.tool_graph.SelectPoseByBoolParameters {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> selectA; // Offset: 40
};

struct anim_graph.tool_graph.FloatRemap {
    keen::FloatRange inputRange; // Offset: 40
    keen::FloatRange outputRange; // Offset: 48
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> inputValue; // Offset: 56
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.IDParameter {
    keen::ObjectReference<keen::ds::animationgraph::IdInputId> parameter; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> value; // Offset: 56
};

struct anim_graph.tool_graph.IDConstant {
    keen::ObjectReference<keen::ds::animationgraph::StateId> value; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> output; // Offset: 56
};

struct anim_graph.tool_graph.IDEquals {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> a; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> b; // Offset: 56
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.IDParameterEqualsConstant {
    keen::ObjectReference<keen::ds::animationgraph::IdInputId> parameter; // Offset: 40
    keen::ObjectReference<keen::ds::animationgraph::StateId> value; // Offset: 56
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 72
    keen::bool ignoreForAnimationSequences; // Offset: 88
};

struct anim_graph.tool_graph.IDEqualsConstant {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> input; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 56
    keen::ObjectReference<keen::ds::animationgraph::StateId> value; // Offset: 72
    keen::bool ignoreForAnimationSequences; // Offset: 88
};

struct anim_graph.tool_graph.IntParameter {
    keen::ObjectReference<keen::ds::animationgraph::IntInputId> parameter; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> value; // Offset: 56
};

struct anim_graph.tool_graph.IntConstant {
    keen::sint32 value; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> output; // Offset: 44
};

struct anim_graph.tool_graph.IntEquals {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> a; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> b; // Offset: 56
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.IntEqualsConstant {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> input; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 56
    keen::sint32 value; // Offset: 72
};

struct anim_graph.tool_graph.IsOverlayActive {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> active; // Offset: 40
    keen::ObjectReference<keen::ds::animationgraph::OverlayId> value; // Offset: 56
};

struct anim_graph.tool_graph.BoolParameter {
    keen::ObjectReference<keen::ds::animationgraph::BoolInputId> parameter; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> value; // Offset: 56
};

struct anim_graph.tool_graph.BoolConstant {
    keen::bool value; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> output; // Offset: 44
};

struct anim_graph.tool_graph.BoolNegate {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> input; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 56
};

struct anim_graph.tool_graph.BoolAnd {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.BoolOr {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.BoolEquals {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> lhs; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> rhs; // Offset: 56
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> result; // Offset: 72
};

struct anim_graph.tool_graph.LayerBlend {
    keen::ds::anim_graph::LayerBlendOptions blendOptions; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> base; // Offset: 60
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> layer; // Offset: 76
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> outputPose; // Offset: 92
};

struct anim_graph.tool_graph.SaveCachedPose {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> inputPose; // Offset: 40
};

struct anim_graph.tool_graph.UseCachedPose {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> pose; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::SaveCachedPose> cachedPose; // Offset: 56
};

struct anim_graph.tool_graph.PoseResult {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> inputPose; // Offset: 40
};

struct anim_graph.tool_graph.StateMachine {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> outputPose; // Offset: 40
};

struct anim_graph.tool_graph.StateMachineState {
    keen::bool restartOnRetrigger; // Offset: 40
    keen::bool startAtRandomTime; // Offset: 41
};

struct anim_graph.tool_graph.TransitionAdvancedOptions {
    keen::uint8 priority; // Offset: 0
    keen::ds::anim_graph::TransitionRootMotionMode rootMotionMode; // Offset: 1
};

struct anim_graph.tool_graph.StateMachineTransition {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::StateMachineState> fromState; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::StateMachineState> toState; // Offset: 56
    keen::bool autoTransition; // Offset: 72
    keen::float32 duration; // Offset: 76
    keen::ds::anim_graph::tool_graph::TransitionAdvancedOptions advancedOptions; // Offset: 80
    keen::bool isGlobalTransition; // Offset: 82
};

struct anim_graph.tool_graph.StateMachineGlobalTransitions {
};

struct anim_graph.tool_graph.StateInputPin {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::StateMachineState> state; // Offset: 4
    keen::float32 duration; // Offset: 20
    keen::ds::anim_graph::TransitionRootMotionMode rootMotionMode; // Offset: 24
};

struct anim_graph.tool_graph.StateMachineGlobalTransitionParameters {
};

struct anim_graph.tool_graph.AdditiveAnimationParameters {
    keen::bool useCurrentAnimationAsReference; // Offset: 0
    keen::uint16 additiveReferenceFrame; // Offset: 2
    keen::ds::AnimationReference additiveReferenceAnimation; // Offset: 4
};

struct anim_graph.tool_graph.AnimationClipSampler {
    keen::ds::AnimationReference animation; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> outputPose; // Offset: 56
    keen::ds::anim_graph::AdditiveType additiveType; // Offset: 72
    keen::ds::anim_graph::tool_graph::AdditiveAnimationParameters additiveParameters; // Offset: 76
    keen::ds::anim_graph::AnimationSpeedController speedController; // Offset: 96
};

struct anim_graph.tool_graph.EmptyAdditivePose {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> outputPose; // Offset: 40
};

struct anim_graph.tool_graph.BlendSpace_1DItem {
    keen::float32 parameterValue; // Offset: 0
    keen::ds::AnimationReference animation; // Offset: 4
};

struct anim_graph.tool_graph.BlendSpace_1D {
    keen::ObjectReference<keen::ds::animationgraph::FloatInputId> parameter; // Offset: 40
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::OutputPin> outputPose; // Offset: 56
    keen::ds::anim_graph::AdditiveType additiveType; // Offset: 72
    keen::uint16 additiveReferenceFrame; // Offset: 74
    keen::ds::AnimationReference additiveReferenceAnimation; // Offset: 76
    keen::bool interpolateInputValue; // Offset: 92
    keen::float interpolationSpeed; // Offset: 96
    keen::ds::anim_graph::AnimationSpeedController speedController; // Offset: 100
};

struct anim_graph.tool_graph.TransitionParameters {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::InputPin> condition; // Offset: 40
};

struct anim_graph.tool_graph.EditorGraphBase {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::EditorNodeBase> parentNode; // Offset: 0
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::EditorNodeBase> mostSignificantNode; // Offset: 16
};

struct anim_graph.tool_graph.FlowGraph {
};

struct anim_graph.tool_graph.StateMachineGraph {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::StateMachineGlobalTransitions> globalTransitions; // Offset: 32
};

struct anim_graph.tool_graph.BlendTree {
};

struct anim_graph.tool_graph.ExpressionTree {
};

struct anim_graph.tool_graph.DefaultIdInputIdValue {
    keen::ObjectReference<keen::ds::animationgraph::IdInputId> key; // Offset: 0
    keen::ObjectReference<keen::ds::animationgraph::StateId> defaultValue; // Offset: 16
};

typedef keen::ObjectReference<keen::ds::ModelBase> PreviewModelReference;

typedef keen::StaticArray<keen::ds::PreviewModelReference,16> PreviewModelArray;

struct anim_graph.tool_graph.AnimationGraph2_0 {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::BlendTree> rootGraph; // Offset: 0
    keen::ObjectReference<keen::ds::ClothCollider> clothColliderReference; // Offset: 16
    keen::ds::PreviewModelArray previewModelOverride; // Offset: 32
    keen::ds::string genderPrefix; // Offset: 288
    keen::DsArray<keen::ds::anim_graph::GenderMappingEntry> genderMapping; // Offset: 328
};

typedef keen::anim_graph::runtime_graph::AnimationNodeType anim_graph.runtime_graph.AnimationNodeType;

struct anim_graph.runtime_graph.AnimationNodeDefinition {
    keen::HashKey32 id; // Offset: 0
    keen::ds::anim_graph::runtime_graph::AnimationNodeType type; // Offset: 4
};

struct anim_graph.runtime_graph.PoseResultNodeDefinition {
    keen::HashKey32 input; // Offset: 8
};

struct anim_graph.runtime_graph.SampleAnimationClipNodeDefinition {
    keen::bool loop; // Offset: 8
    keen::float32 animationDuration; // Offset: 12
    keen::ObjectReference<keen::ds::JointAnimation> animation; // Offset: 16
    keen::ObjectReference<keen::ds::JointAnimation> animationGenderAlternative; // Offset: 32
    keen::ObjectReference<keen::ds::RootMotionAnimation> rootMotionAnimation; // Offset: 48
    keen::ObjectReference<keen::ds::RootMotionAnimation> rootMotionAnimationGenderAlternative; // Offset: 64
    keen::ObjectReference<keen::ds::AnimationSequenceContainer> eventSequenceContainer; // Offset: 80
    keen::ds::anim_graph::AdditiveType additiveType; // Offset: 96
    keen::ObjectReference<keen::ds::JointAnimation> additiveReferenceAnimation; // Offset: 100
    keen::ObjectReference<keen::ds::JointAnimation> additiveReferenceAnimationGenderAlternative; // Offset: 116
    keen::uint16 additiveReferenceFrame; // Offset: 132
    keen::bool animationContentAdditive; // Offset: 134
    keen::ds::anim_graph::AnimationSpeedController speedController; // Offset: 136
};

struct anim_graph.runtime_graph.EmptyAdditivePoseNodeDefinition {
};

struct anim_graph.runtime_graph.BlendSpace_1DItemRuntime {
    keen::float32 parameterValue; // Offset: 0
    keen::float32 animationDuration; // Offset: 4
    keen::ObjectReference<keen::ds::JointAnimation> animation; // Offset: 8
    keen::ObjectReference<keen::ds::JointAnimation> animationGenderAlternative; // Offset: 24
    keen::ObjectReference<keen::ds::AnimationSequenceContainer> eventSequenceContainer; // Offset: 40
};

struct anim_graph.runtime_graph.BlendSpace_1DNodeDefinition {
    keen::DsArray<keen::ds::anim_graph::runtime_graph::BlendSpace_1DItemRuntime> items; // Offset: 8
    keen::ObjectReference<keen::ds::animationgraph::FloatInputId> parameter; // Offset: 48
    keen::ds::anim_graph::AdditiveType additiveType; // Offset: 64
    keen::ObjectReference<keen::ds::JointAnimation> additiveReferenceAnimation; // Offset: 68
    keen::ObjectReference<keen::ds::JointAnimation> additiveReferenceAnimationGenderAlternative; // Offset: 84
    keen::uint16 additiveReferenceFrame; // Offset: 100
    keen::ds::anim_graph::AnimationSpeedController speedController; // Offset: 104
    keen::float interpolationSpeed; // Offset: 140
    keen::bool loop; // Offset: 144
    keen::bool animationContentAdditive; // Offset: 145
};

struct anim_graph.runtime_graph.LayerBlendNodeDefinition {
    keen::HashKey32 base; // Offset: 8
    keen::HashKey32 layer; // Offset: 12
    keen::ds::anim_graph::LayerBlendOptions blendOptions; // Offset: 16
};

struct anim_graph.runtime_graph.SaveCachedPoseNodeDefinition {
    keen::HashKey32 inputPose; // Offset: 8
};

struct anim_graph.runtime_graph.UseCachedPoseNodeDefinition {
    keen::HashKey32 cachedPose; // Offset: 8
};

struct anim_graph.runtime_graph.FloatConstantNodeDefinition {
    keen::float32 value; // Offset: 8
};

struct anim_graph.runtime_graph.FloatParameterNodeDefinition {
    keen::uint32 parameterIndex; // Offset: 8
};

struct anim_graph.runtime_graph.StateMachineGlobalTransitionInfo {
    keen::HashKey32 toState; // Offset: 0
    keen::float32 duration; // Offset: 4
    keen::ds::anim_graph::TransitionRootMotionMode rootMotionMode; // Offset: 8
    keen::HashKey32 conditionNode; // Offset: 12
};

struct anim_graph.runtime_graph.StateMachineNodeDefinition {
    keen::DsArray<keen::HashKey32> states; // Offset: 8
    keen::DsArray<keen::HashKey32> transitions; // Offset: 48
    keen::HashKey32 entryState; // Offset: 88
    keen::StaticArray<keen::ds::anim_graph::runtime_graph::StateMachineGlobalTransitionInfo,32> globalTransitions; // Offset: 92
    keen::uint8 numGlobalTransitions; // Offset: 604
    keen::HashKey32 globalTransitionNodeId; // Offset: 608
    keen::DsString debugName; // Offset: 616
};

struct anim_graph.runtime_graph.StateMachineStateNodeDefinition {
    keen::HashKey32 poseResult; // Offset: 8
    keen::DsString debugName; // Offset: 16
    keen::bool restartOnRetrigger; // Offset: 56
    keen::bool startAtRandomTime; // Offset: 57
};

struct anim_graph.runtime_graph.StateMachineTransitionNodeDefinition {
    keen::HashKey32 fromState; // Offset: 8
    keen::HashKey32 toState; // Offset: 12
    keen::float32 duration; // Offset: 16
    keen::uint8 priority; // Offset: 20
    keen::HashKey32 conditionNode; // Offset: 24
    keen::ds::anim_graph::TransitionRootMotionMode rootMotionMode; // Offset: 28
    keen::bool autoTransition; // Offset: 29
};

struct anim_graph.runtime_graph.IntConstantNodeDefinition {
    keen::sint32 value; // Offset: 8
};

struct anim_graph.runtime_graph.IntParameterNodeDefinition {
    keen::uint32 parameterIndex; // Offset: 8
};

struct anim_graph.runtime_graph.BoolConstantNodeDefinition {
    keen::bool value; // Offset: 8
};

struct anim_graph.runtime_graph.BoolParameterNodeDefinition {
    keen::uint32 parameterIndex; // Offset: 8
};

struct anim_graph.runtime_graph.IDConstantNodeDefinition {
    keen::HashKey32 value; // Offset: 8
};

struct anim_graph.runtime_graph.IDParameterNodeDefinition {
    keen::uint32 parameterIndex; // Offset: 8
};

struct anim_graph.runtime_graph.BoolNegateNodeDefinition {
    keen::HashKey32 input; // Offset: 8
};

struct anim_graph.runtime_graph.BoolAndNodeDefinition {
    keen::HashKey32 lhs; // Offset: 8
    keen::HashKey32 rhs; // Offset: 12
};

struct anim_graph.runtime_graph.BoolOrNodeDefinition {
    keen::HashKey32 lhs; // Offset: 8
    keen::HashKey32 rhs; // Offset: 12
};

struct anim_graph.runtime_graph.BoolEqualsNodeDefinition {
    keen::HashKey32 lhs; // Offset: 8
    keen::HashKey32 rhs; // Offset: 12
};

struct anim_graph.runtime_graph.FloatRemapNodeDefinition {
    keen::HashKey32 input; // Offset: 8
    keen::FloatRange inputRange; // Offset: 12
    keen::FloatRange outputRange; // Offset: 20
};

struct anim_graph.runtime_graph.FloatGreaterThanNodeDefinition {
    keen::HashKey32 lhs; // Offset: 8
    keen::HashKey32 rhs; // Offset: 12
    keen::bool orEqual; // Offset: 16
};

struct anim_graph.runtime_graph.FloatLessThanNodeDefinition {
    keen::HashKey32 lhs; // Offset: 8
    keen::HashKey32 rhs; // Offset: 12
    keen::bool orEqual; // Offset: 16
};

struct anim_graph.runtime_graph.FloatEqualsNodeDefinition {
    keen::HashKey32 lhs; // Offset: 8
    keen::HashKey32 rhs; // Offset: 12
    keen::float32 tolerance; // Offset: 16
};

struct anim_graph.runtime_graph.FloatGreaterThanConstantNodeDefinition {
    keen::HashKey32 input; // Offset: 8
    keen::float32 value; // Offset: 12
    keen::bool orEqual; // Offset: 16
};

struct anim_graph.runtime_graph.FloatLessThanConstantNodeDefinition {
    keen::HashKey32 input; // Offset: 8
    keen::float32 value; // Offset: 12
    keen::bool orEqual; // Offset: 16
};

struct anim_graph.runtime_graph.FloatEqualsConstantNodeDefinition {
    keen::HashKey32 input; // Offset: 8
    keen::float32 value; // Offset: 12
    keen::float32 tolerance; // Offset: 16
};

struct anim_graph.runtime_graph.SelectPoseByBoolNodeDefinition {
    keen::HashKey32 inputA; // Offset: 8
    keen::HashKey32 inputB; // Offset: 12
    keen::HashKey32 selectA; // Offset: 16
    keen::float32 blendTime; // Offset: 20
};

struct anim_graph.runtime_graph.IdParameterEqualsConstantNodeDefinition {
    keen::uint32 parameterIndex; // Offset: 8
    keen::HashKey32 value; // Offset: 12
    keen::bool ignoreForAnimationSequences; // Offset: 16
};

struct anim_graph.runtime_graph.IdEqualsNodeDefinition {
    keen::HashKey32 a; // Offset: 8
    keen::HashKey32 b; // Offset: 12
};

struct anim_graph.runtime_graph.IdEqualsConstantNodeDefinition {
    keen::HashKey32 a; // Offset: 8
    keen::HashKey32 comparatorValue; // Offset: 12
    keen::bool ignoreForAnimationSequences; // Offset: 16
};

struct anim_graph.runtime_graph.IntEqualsNodeDefinition {
    keen::HashKey32 a; // Offset: 8
    keen::HashKey32 b; // Offset: 12
};

struct anim_graph.runtime_graph.IntEqualsConstantNodeDefinition {
    keen::HashKey32 a; // Offset: 8
    keen::sint32 comparatorValue; // Offset: 12
};

struct anim_graph.runtime_graph.IsOverlayActiveNodeDefinition {
    keen::HashKey32 overlay; // Offset: 8
};

struct anim_graph.runtime_graph.ParameterList {
    keen::DsArray<keen::HashKey32> parameterIds; // Offset: 0
};

struct anim_graph.runtime_graph.AnimationGraphResource2_0 {
    keen::ds::anim_graph::runtime_graph::ParameterList floatParameters; // Offset: 0
    keen::ds::anim_graph::runtime_graph::ParameterList uintParameters; // Offset: 40
    keen::ds::anim_graph::runtime_graph::ParameterList intParameters; // Offset: 80
    keen::ds::anim_graph::runtime_graph::ParameterList boolParameters; // Offset: 120
    keen::ds::anim_graph::runtime_graph::ParameterList idParameters; // Offset: 160
    keen::ds::anim_graph::runtime_graph::ParameterList usedInputIds; // Offset: 200
    keen::ObjectReference<keen::ds::ModelHierarchyResource> hierarchy; // Offset: 240
    keen::StaticArray<keen::ds::AnimationJointIndex,14> slotBoneIndexMapping; // Offset: 256
    keen::HashKey32 rootNode; // Offset: 284
    keen::DsArray<keen::DsVariant<keen::ds::anim_graph::runtime_graph::AnimationNodeDefinition>> nodeDefinitions; // Offset: 288
    keen::ObjectReference<keen::ds::RenderClothColliderResource> clothColliderReference; // Offset: 328
    keen::DsArray<keen::ds::anim_graph::GenderMappingEntry> genderMapping; // Offset: 344
};

struct anim_graph.GameUpdateMessage {
    keen::bool isPaused; // Offset: 0
};

struct anim_graph.DebugEntityChangedMessage {
    keen::uint32 selectedEntity; // Offset: 0
};

struct anim_graph.debug.DebugMessageBase {
    keen::Time timestamp; // Offset: 0
    keen::uint32 entityId; // Offset: 8
    keen::Guid rootGraphGuid; // Offset: 12
    keen::Guid templateId; // Offset: 28
};

struct anim_graph.debug.NodeStateUpdateMessage {
    keen::HashKey32 nodeId; // Offset: 48
    keen::bool isActive; // Offset: 52
    keen::bool isFrozen; // Offset: 53
    keen::float32 progress; // Offset: 56
    keen::float32 timeSpentInNode; // Offset: 60
    keen::HashKey32 fromState; // Offset: 64
    keen::HashKey32 toState; // Offset: 68
};

struct anim_graph.debug.InputIdMessage {
    keen::StaticArray<keen::HashKey32,8> floatInputIdHashes; // Offset: 48
    keen::StaticArray<keen::float32,8> floatInputIdValues; // Offset: 80
    keen::StaticArray<keen::HashKey32,8> intInputIdHashes; // Offset: 112
    keen::StaticArray<keen::sint32,8> intInputIdValues; // Offset: 144
    keen::StaticArray<keen::HashKey32,8> boolInputIdHashes; // Offset: 176
    keen::StaticArray<keen::bool,8> boolInputIdValues; // Offset: 208
    keen::StaticArray<keen::HashKey32,8> idInputIdHashes; // Offset: 216
    keen::StaticArray<keen::HashKey32,8> idInputIdValues; // Offset: 248
    keen::StaticArray<keen::HashKey32,8> overlayIdValues; // Offset: 280
};

struct anim_graph.debug.EntityJointMessage {
    keen::StaticArray<keen::AnimationJoint,256> animationJoints; // Offset: 48
    keen::uint8 numJoints; // Offset: 12336
};

struct anim_graph.debug.AnimationGraphInstanceInfoMessage {
    keen::uint32 retriggerCount; // Offset: 48
};

struct anim_graph.debug.StateMachineMessage {
    keen::uint32 stateMachineId; // Offset: 48
    keen::StaticArray<keen::uint32,8> fromState; // Offset: 52
    keen::StaticArray<keen::uint32,8> toState; // Offset: 84
    keen::StaticArray<keen::float32,8> duration; // Offset: 116
    keen::StaticArray<keen::float32,8> elapsed; // Offset: 148
    keen::StaticArray<keen::uint8,8> priority; // Offset: 180
    keen::StaticArray<keen::bool,8> frozen; // Offset: 188
};

typedef keen::ObjectReference<keen::ds::anim_graph::runtime_graph::AnimationGraphResource2_0> AnimationGraphResourceReference;

struct JointAnimationHeader {
    keen::uint32 dataOffset; // Offset: 0
    keen::uint16 startTime; // Offset: 4
    keen::uint16 endTime; // Offset: 6
    keen::uint16 usedOrientationJoints; // Offset: 8
    keen::uint16 nonConstOrientationJoints; // Offset: 10
    keen::uint16 usedPositionJoints; // Offset: 12
    keen::uint16 nonConstPositionJoints; // Offset: 14
    keen::uint16 usedScaleJoints; // Offset: 16
    keen::uint16 nonConstScaleJoints; // Offset: 18
};

struct JointAnimation {
    keen::uint64 hierarchyHash; // Offset: 0
    keen::float32 positionFactor; // Offset: 8
    keen::float32 positionTangent; // Offset: 12
    keen::float32 scaleFactor; // Offset: 16
    keen::DsArray<keen::ds::JointAnimationHeader> headers; // Offset: 24
    keen::ContentHash data; // Offset: 64
    keen::uint16 fps; // Offset: 80
    keen::uint16 frameCount; // Offset: 82
    keen::uint16 jointCount; // Offset: 84
    keen::uint16 flags; // Offset: 86
};

typedef keen::ObjectReference<keen::ds::JointAnimation> JointAnimationReference;

struct LveOrientationKey {
    keen::uint32 time; // Offset: 0
    keen::float4 values; // Offset: 4
    keen::float4 controls; // Offset: 20
};

struct LvePositionKey {
    keen::uint32 time; // Offset: 0
    keen::float3 values; // Offset: 4
    keen::float3 controls; // Offset: 16
};

struct LveAnimation {
    keen::crc32 trackName; // Offset: 0
    keen::DsArray<keen::ds::LveOrientationKey> orientationKeys; // Offset: 8
    keen::DsArray<keen::ds::LvePositionKey> positionKeys; // Offset: 48
    keen::float3 startToEnd; // Offset: 88
    keen::uint16 fps; // Offset: 100
    keen::uint16 frameCount; // Offset: 102
    keen::uint16 flags; // Offset: 104
};

struct RootMotionAnimation {
    keen::DsArray<keen::float4> orientations; // Offset: 0
    keen::DsArray<keen::float3> positions; // Offset: 40
    keen::float3 startToEnd; // Offset: 80
    keen::uint16 fps; // Offset: 92
    keen::uint16 frameCount; // Offset: 94
};

typedef keen::ds::string DsTypeName;

struct vf32_data {
    keen::StaticArray<keen::uint8,16> data; // Offset: 0
};

typedef keen::ContentCategory ContentCategory;

typedef keen::VertexColorChannel VertexColorChannel;

struct ClothMaterial {
    keen::ds::VertexColorChannel simulationWeightVertexColorChannel; // Offset: 0
    keen::bool useMass; // Offset: 1
    keen::float32 mass; // Offset: 4
    keen::bool usePerVertexStiffness; // Offset: 8
    keen::ds::VertexColorChannel perVertexStiffnessVertexColorChannel; // Offset: 9
    keen::float32 gravity; // Offset: 12
    keen::float32 windStrength; // Offset: 16
    keen::float32 dragCoefficient; // Offset: 20
    keen::float32 liftCoefficient; // Offset: 24
    keen::float32 damping; // Offset: 28
    keen::float32 linearInertia; // Offset: 32
    keen::float32 angularInertia; // Offset: 36
    keen::float32 centrifugalInertia; // Offset: 40
    keen::float32 tetherStiffness; // Offset: 44
    keen::float32 phasesStiffness; // Offset: 48
    keen::float32 phasesCompressionLimit; // Offset: 52
    keen::float32 phasesStretchLimit; // Offset: 56
    keen::float32 motionConstraintsMaxRadius; // Offset: 60
    keen::float32 motionConstraintsUnlimitedRadius; // Offset: 64
    keen::float32 motionConstraintsStiffness; // Offset: 68
    keen::float32 solverFrequency; // Offset: 72
    keen::float32 collisionFriction; // Offset: 76
};

struct BvhTreeNodeData {
    keen::Vector3 boundingBoxMin; // Offset: 0
    keen::Vector3 boundingBoxMax; // Offset: 16
    keen::sint32 value; // Offset: 32
};

struct BvhTreeData {
    keen::Vector3 boundingBoxMin; // Offset: 0
    keen::Vector3 boundingBoxMax; // Offset: 16
    keen::DsArray<keen::ds::BvhTreeNodeData> nodes; // Offset: 32
};

typedef keen::CollisionSegmentDirection CollisionSegmentDirection;

struct NavEdge {
    keen::Vector3 start; // Offset: 0
    keen::Vector3 end; // Offset: 16
};

struct NavPortal {
    keen::StaticArray<keen::uint16,2> cellIndices; // Offset: 32
};

struct CollisionShapeId {
    keen::uint32 shapeId; // Offset: 0
    keen::uint32 segmentIndex; // Offset: 4
};

struct NavCell {
    keen::uint16 index; // Offset: 0
    keen::float32 minY; // Offset: 4
    keen::float32 maxY; // Offset: 8
    keen::DsArray<keen::uint16> edgeIndices; // Offset: 16
    keen::DsArray<keen::uint16> portalIndices; // Offset: 56
    keen::DsArray<keen::ds::CollisionShapeId> collisionShapeIds; // Offset: 96
    keen::uint16 extensionPortalIndex; // Offset: 136
    keen::Vector3 centroid; // Offset: 144
};

struct ColliderShape {
};

struct SphereColliderShape {
    keen::float32 radius; // Offset: 0
};

struct SpheroidColliderShape {
    keen::float32 horizontalRadius; // Offset: 0
    keen::float32 verticalRadius; // Offset: 4
};

struct CapsuleColliderShape {
    keen::float32 radius; // Offset: 0
    keen::float32 length; // Offset: 4
};

struct BoxColliderShape {
    keen::float3 halfSize; // Offset: 0
};

struct SegmentColliderShape {
    keen::float3 direction; // Offset: 0
    keen::float32 length; // Offset: 12
};

struct CollisionFace {
    keen::StaticArray<keen::uint16,3> vertices; // Offset: 0
    keen::StaticArray<keen::uint16,3> neighborFaces; // Offset: 6
    keen::uint8 neighborEdgeIndices; // Offset: 12
    keen::uint8 material; // Offset: 13
    keen::uint16 flags; // Offset: 14
};

struct CollisionObject {
    keen::uint32 id; // Offset: 0
    keen::uint32 segmentIndex; // Offset: 4
    keen::DsArray<keen::Vector3> shapeVertices; // Offset: 8
    keen::DsArray<keen::uint16> navCellIndices; // Offset: 48
    keen::float32 health; // Offset: 88
    keen::float32 y; // Offset: 92
};

struct CollisionGridCell {
    keen::uint16 start; // Offset: 0
    keen::uint16 count; // Offset: 2
};

struct CollisionGrid {
    keen::DsArray<keen::ds::CollisionGridCell> gridCells; // Offset: 0
    keen::DsArray<keen::uint16> gridIndicies; // Offset: 40
    keen::DsArray<keen::ds::CollisionGridCell> collShapesPerGrid; // Offset: 80
    keen::DsArray<keen::uint16> collShapesPerGridIndicies; // Offset: 120
    keen::uint16 cellsX; // Offset: 160
    keen::Vector2 origin; // Offset: 164
    keen::Vector2 cellSize; // Offset: 172
};

struct CollisionMeshData {
    keen::DsArray<keen::Vector3> m_vertices; // Offset: 0
    keen::DsArray<keen::ds::CollisionFace> m_faces; // Offset: 40
    keen::ds::CollisionGrid m_grid; // Offset: 80
    keen::DsArray<keen::ds::CollisionObject> m_objects; // Offset: 264
    keen::DsArray<keen::ds::NavCell> m_navCells; // Offset: 304
    keen::DsArray<keen::ds::NavEdge> m_navEdges; // Offset: 344
    keen::DsArray<keen::ds::NavPortal> m_navPortals; // Offset: 384
};

struct WorldCollisionBatch {
    keen::uint32 triangleIndex; // Offset: 0
    keen::uint32 triangleCount; // Offset: 4
};

struct WorldCollision {
    keen::DsArray<keen::ds::WorldCollisionBatch> triangleBatches; // Offset: 0
    keen::DsArray<keen::float32> vertexPositions; // Offset: 40
    keen::DsArray<keen::uint8> materialIds; // Offset: 80
    keen::ds::BvhTreeData bvhTreeData; // Offset: 128
};

struct PaletteColor {
    keen::HdrColorRgb color; // Offset: 0
};

typedef keen::ObjectReference<keen::ds::PaletteColor> PaletteColorReference;

struct ColorPalette {
};

struct ColorPaletteCollection {
};

typedef keen::PaletteColorId PaletteColorId;

struct PaletteColorResource {
    keen::ds::PaletteColorId paletteColorId; // Offset: 0
    keen::HdrColorRgb color; // Offset: 4
};

struct ColorPaletteCollectionResource {
    keen::DsArray<keen::ds::PaletteColorResource> colors; // Offset: 0
};

typedef keen::CommerceProductId CommerceProductId;

struct CommerceProduct {
    keen::ds::CommerceProductId id; // Offset: 0
    keen::uint32 platformIdSteam; // Offset: 4
};

typedef keen::ObjectReference<keen::ds::CommerceProduct> CommerceProductReference;

struct CommerceProductSubDirectory {
};

struct CommerceProductDirectory {
};

struct CommerceProductResource {
    keen::DsArray<keen::ds::CommerceProduct> products; // Offset: 0
};

typedef keen::ObjectReference<keen::ds::CommerceProductResource> CommerceResourceReference;

struct ecs.SpawnComponent {
};

struct ecs.LastTransform {
    keen::WorldTransform transform; // Offset: 0
    keen::float3 velocity; // Offset: 56
};

struct ecs.PlayerFocus {
    keen::WorldPosition position; // Offset: 0
};

struct ecs.StaticTransform {
};

struct ecs.StaticTransformDynamic {
};

struct ecs.DoNotSave {
};

struct ecs.ForceSave {
};

struct ecs.PlayerInRange {
};

struct ecs.CheckPlayerInRange {
    keen::uint8 distanceInMeter; // Offset: 0
};

struct ecs.ServerProgress {
};

struct ecs.StoredSceneId {
    keen::Guid sceneGuid; // Offset: 0
};

struct ecs.EnemyMarkerSettings {
    keen::ObjectReference<keen::ds::ecs::EnemyMarkerTag> tag; // Offset: 0
};

struct ecs.TeleportCount {
    keen::uint8 counter; // Offset: 0
    keen::bool isWaitingForTeleport; // Offset: 1
};

struct ecs.RenderTeleportCount {
    keen::uint8 counter; // Offset: 0
    keen::bool wasTeleported; // Offset: 1
};

struct ecs.ScaleComponent {
    keen::float32 uniformScale; // Offset: 0
};

struct ecs.Velocity {
    keen::float3 velocity; // Offset: 0
};

typedef keen::ecs::ImpulseType ecs.ImpulseType;

struct ecs.ImpulseData {
    keen::float3 impulse; // Offset: 0
    keen::ds::ecs::ImpulseType type; // Offset: 12
    keen::Time startTime; // Offset: 16
    keen::Time endTime; // Offset: 24
};

struct ecs.Impulse {
    keen::float3 impulse; // Offset: 0
    keen::StaticArray<keen::ds::ecs::ImpulseData,4> impulses; // Offset: 16
};

struct ecs.OscillateTransform {
    keen::float3 center; // Offset: 0
    keen::float3 amplitudeAxis; // Offset: 12
    keen::float32 duration; // Offset: 24
    keen::float32 phase; // Offset: 28
};

struct ecs.EntityId {
    keen::uint32 id; // Offset: 0
};

struct ecs.OwnerRelationship {
    keen::ds::ecs::EntityId ownerEntityId; // Offset: 0
};

struct ecs.SpawnTime {
    keen::Time spawnTime; // Offset: 0
};

struct ecs.LifeTime {
    keen::Time lifeTime; // Offset: 0
    keen::Time endOfLife; // Offset: 8
    keen::bool enforceDestroy; // Offset: 16
    keen::bool triggeredDestroy; // Offset: 17
};

struct ecs.Aging {
    keen::float32 speed; // Offset: 0
};

struct ecs.TintColor {
    keen::Color color; // Offset: 0
};

struct ecs.ColorCombinationComponent {
    keen::StaticArray<keen::ds::PaletteColorId,3> colorIds; // Offset: 0
};

typedef keen::HighlightColorIndex HighlightColorIndex;

struct ecs.HighlightColor {
    keen::ds::HighlightColorIndex colorIndex; // Offset: 0
};

struct ecs.Transparency {
    keen::float32 transparency; // Offset: 0
};

struct ecs.Ao {
    keen::uint8 value; // Offset: 0
};

struct ecs.Hide {
    keen::bool isHidden; // Offset: 0
    keen::bool isLocalyHidden; // Offset: 1
};

struct ecs.ModelComponent {
    keen::uint32 modelHandle; // Offset: 0
};

typedef keen::ecs::ToggleModifier ecs.ToggleModifier;

struct ecs.ModelRenderHint {
    keen::bool canReceiveDecals; // Offset: 0
    keen::ds::ecs::ToggleModifier toggleModifier; // Offset: 1
};

struct ecs.ModelDynamic {
    keen::ObjectReference<keen::ds::Model> lastModel; // Offset: 0
};

struct ecs.ModelResource {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
};

struct ecs.ModelResourceDynamic {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
};

struct ecs.VoxelModel {
    keen::uint32 renderNode; // Offset: 0
};

struct ecs.VoxelModelVolatile {
    keen::uint32 pendingRenderNode; // Offset: 4
    keen::ObjectReference<keen::ds::VoxelModelResource> lastModel; // Offset: 8
    keen::uint8 lastMaterialOverride; // Offset: 24
    keen::bool isVoxelModelChangePending; // Offset: 25
};

struct ecs.VoxelModelResourceComponent {
    keen::ObjectReference<keen::ds::VoxelModelResource> model; // Offset: 0
    keen::uint8 materialOverride; // Offset: 16
};

struct ecs.SnowDisplacementComponent {
    keen::uint32 bodyHandle; // Offset: 0
    keen::float3 localOffset; // Offset: 4
    keen::float32 minRadius; // Offset: 16
    keen::float32 maxRadius; // Offset: 20
    keen::float32 heightNoiseScale; // Offset: 24
};

struct ecs.DungeonTriggerTypeComponent {
    keen::ObjectReference<keen::ds::DungeonTriggerSetup> triggerSetup; // Offset: 0
};

struct ecs.AnimationGraphResourceComponent {
    keen::ObjectReference<keen::ds::AnimationGraph> animationGraph; // Offset: 0
};

struct ecs.AnimationGraphResourceComponent2 {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::AnimationGraph2_0> animationGraph; // Offset: 0
};

struct ecs.VfxComponentResource {
    keen::ds::VfxReference vfx; // Offset: 0
};

struct ecs.VfxResourceDynamic {
    keen::ds::VfxReference vfx; // Offset: 0
};

struct VfxUserEffectParameterDataBlock {
    keen::StaticArray<keen::uint32,16> data; // Offset: 0
};

struct ecs.VfxParametersTemplateComponent {
    keen::ds::VfxUserEffectParameterDataBlock parameters; // Offset: 0
};

struct ecs.VfxParametersOverwriteComponent {
    keen::bool useVfxDefaultParameters; // Offset: 0
    keen::ds::VfxUserEffectParameterDataBlock parameters; // Offset: 4
};

struct ecs.OverrideLevel {
    keen::uint32 newLevel; // Offset: 0
};

typedef keen::ecs::ToggleModifierFlags ecs.ToggleModifierFlags;

struct ecs.ToggleTimer {
    keen::Time timer; // Offset: 0
    keen::ds::ecs::ToggleModifier toggleModifier; // Offset: 8
    keen::bool timerRunning; // Offset: 9
    keen::Time lastToggleChange; // Offset: 16
};

struct ecs.DestroyOnState {
    keen::bool wasInOppositeState; // Offset: 0
    keen::bool targetState; // Offset: 1
    keen::bool triggered; // Offset: 2
};

struct ecs.FxComponent {
    keen::uint32 fxHandle; // Offset: 0
    keen::ds::ecs::ToggleModifier toggleModifier; // Offset: 4
};

struct ecs.VfxAnimationIdParameter {
};

struct ecs.Offset {
    keen::float3 localOffset; // Offset: 0
    keen::float3 worldOffset; // Offset: 12
    keen::Quaternion orientationOffset; // Offset: 24
};

struct ecs.VfxComponent {
    keen::ds::ecs::Offset attachmentOffset; // Offset: 8
    keen::ds::AttachmentSlot slot; // Offset: 48
    keen::bool attachToParent; // Offset: 49
};

typedef keen::ecs::TargetType ecs.TargetType;

struct ecs.VfxTargetedComponent {
    keen::ds::ecs::TargetType targetType; // Offset: 52
    keen::float3 targetPosition; // Offset: 56
    keen::bool updateTargetPosition; // Offset: 68
};

struct ecs.TargetEntity {
    keen::ds::ecs::EntityId targetId; // Offset: 0
};

struct ecs.TargetPosition {
    keen::float3 targetPosition; // Offset: 0
};

struct ecs.VfxTargetParameter {
    keen::ds::AttachmentSlot targetSlot; // Offset: 0
    keen::ds::ecs::Offset targetAttachmentOffset; // Offset: 4
    keen::bool attachToTarget; // Offset: 44
    keen::bool updateSourcePosition; // Offset: 45
};

struct ecs.VfxComponentVolatile {
    keen::ds::VfxReference lastVfx; // Offset: 52
};

typedef keen::ObjectReference<keen::ds::Notifier> NotifierReference;

struct ecs.VfxOnResourceDrop {
    keen::ds::NotifierReference notifier; // Offset: 0
    keen::ds::SoundContainerReference sfx; // Offset: 16
    keen::ds::VfxReference vfx; // Offset: 32
};

struct ecs.ToggleDelay {
    keen::Time delay; // Offset: 0
};

struct ecs.ToggleState {
    keen::bool state; // Offset: 0
    keen::Time lastChange; // Offset: 8
};

struct ecs.ServerToggleState {
};

struct ecs.NetworkToggleState {
};

struct ecs.ClientToggleState {
};

struct ecs.ToggleNotifier {
    keen::Time lastEvent; // Offset: 0
    keen::ds::ecs::ToggleModifier flags; // Offset: 8
    keen::ds::NotifierReference notifier; // Offset: 12
    keen::Time duration; // Offset: 32
    keen::ds::AttachmentSlot sourceSlot; // Offset: 40
    keen::ds::ecs::Offset sourceAttachmentOffset; // Offset: 44
    keen::bool attachToSource; // Offset: 84
    keen::ds::AttachmentSlot targetSlot; // Offset: 85
    keen::ds::ecs::Offset targetAttachmentOffset; // Offset: 88
    keen::bool attachToTarget; // Offset: 128
    keen::ds::SoundContainerReference sfx; // Offset: 132
    keen::ds::VfxReference vfx; // Offset: 148
};

struct ecs.BaseAnimationGraphInput {
    keen::ds::animationgraph::StateIdReference initialAnimationStateIdReference; // Offset: 0
    keen::ds::AnimationGraphInputs animationInputs; // Offset: 16
    keen::ds::animationgraph::RootMotionMask animationRootMotionMask; // Offset: 400
    keen::ds::animationgraph::StateIdHash animationStateId; // Offset: 404
    keen::uint32 retriggerCount; // Offset: 408
};

struct ecs.ServerAnimationGraphInput {
    keen::ds::AnimationGraphInputs previousAnimationInputs; // Offset: 416
    keen::uint8 overlayRingbufferIndex; // Offset: 800
};

struct ecs.NetworkAnimationGraphInput {
};

struct ecs.ClientAnimationGraphInputLerp {
    keen::ds::AnimationGraphInputs source; // Offset: 0
    keen::ds::AnimationGraphInputs target; // Offset: 384
    keen::uint32 tick; // Offset: 768
    keen::bool isSet; // Offset: 772
};

struct ecs.ClientAnimationGraphInput {
};

struct ecs.AnimationGraphHandleValue {
    keen::uint32 value; // Offset: 0
};

struct ecs.RenderPoseHandleValue {
    keen::uint32 value; // Offset: 0
};

struct ecs.AnimationGraphBaseComponent {
    keen::ds::ecs::AnimationGraphHandleValue animationGraphHandle; // Offset: 0
    keen::ds::ecs::RenderPoseHandleValue renderPoseHandle; // Offset: 4
};

struct ecs.AnimationGraphComponent {
    keen::ObjectReference<keen::ds::RenderClothColliderResource> usedClothCollider; // Offset: 8
};

struct ecs.AnimationGraphSlotComponent {
    keen::bool slotsInitialized; // Offset: 0
    keen::StaticArray<keen::float3x4,14> slots; // Offset: 4
};

struct ecs.ServerAnimationGraphComponent {
};

struct ecs.ServerAnimationGraphSlotComponent {
};

struct ecs.AnimationGraphHandleValue2 {
    keen::uint32 value; // Offset: 0
};

struct ecs.AnimationGraphComponent2 {
    keen::ds::ecs::AnimationGraphHandleValue2 animationGraphHandle; // Offset: 0
    keen::ds::ecs::RenderPoseHandleValue renderPoseHandle; // Offset: 4
    keen::Guid clothCollider; // Offset: 8
};

struct ecs.ServerAnimationGraphComponent2 {
    keen::ds::ecs::AnimationGraphHandleValue2 animationGraphHandle; // Offset: 0
};

struct ecs.CopyParentAnimationGraphState {
};

struct ecs.AnimatedCamera {
    keen::ds::AttachmentSlot cameraSlot; // Offset: 0
};

struct ecs.RngState {
    keen::uint32 w; // Offset: 0
    keen::uint32 z; // Offset: 4
};

typedef keen::VoxelMaterialId VoxelMaterialId;

struct ecs.WorldCollisionResults {
    keen::bool hasSpheroidCollision; // Offset: 0
    keen::float3 spheroidNormal; // Offset: 4
    keen::bool hasGroundCollision; // Offset: 16
    keen::bool isGroundWalkable; // Offset: 17
    keen::float3 groundNormal; // Offset: 20
    keen::float3 areaGroundNormal; // Offset: 32
    keen::float32 groundDistance; // Offset: 44
    keen::ds::VoxelMaterialId groundVoxelMaterialId; // Offset: 48
    keen::bool preventFallDamage; // Offset: 49
};

struct ecs.OptionalWorldCollisionResults {
    keen::ds::ecs::WorldCollisionResults m_value; // Offset: 0
    keen::bool m_isSet; // Offset: 52
};

struct ecs.WorldCollider {
    keen::float32 width; // Offset: 0
    keen::float32 height; // Offset: 4
    keen::float32 maxStepHeightVoxels; // Offset: 8
    keen::float32 maxStepHeightProps; // Offset: 12
    keen::bool onlyCheckPathCollidersWithBundleCheck; // Offset: 16
    keen::float32 yOffset; // Offset: 20
    keen::bool isWorldColliderReady; // Offset: 24
    keen::bool snapToGround; // Offset: 25
    keen::bool hasDetectedSafePositionBelow; // Offset: 26
    keen::ds::ecs::OptionalWorldCollisionResults results; // Offset: 28
};

struct ecs.Gravity {
    keen::float3 direction; // Offset: 0
    keen::float32 value; // Offset: 12
    keen::bool isActive; // Offset: 16
};

struct ecs.StaticGravityModifier {
    keen::float32 modifier; // Offset: 0
};

struct ecs.Debug {
};

typedef keen::ObjectReference<keen::ds::ecs::ColliderResponseResource> ecs.ColliderResponseResourceReference;

struct ecs.ColliderResponseComponent {
    keen::ds::ecs::ColliderResponseResourceReference colliderResponse; // Offset: 0
};

typedef keen::ecs::ColliderResponseFlag ecs.ColliderResponseFlag;

typedef keen::ecs::ColliderResponseFlags ecs.ColliderResponseFlags;

typedef keen::ecs::CollisionType ecs.CollisionType;

struct ecs.ColliderResponseResourceEntry {
    keen::ds::SoundContainerReference sfx; // Offset: 0
    keen::ds::VfxReference vfx; // Offset: 16
    keen::ds::string sfxDescription; // Offset: 32
    keen::ds::string vfxDescription; // Offset: 72
    keen::ds::string description; // Offset: 112
    keen::float3 eulerOffset; // Offset: 152
    keen::float3 offset; // Offset: 164
    keen::ds::ecs::CollisionType collisionType; // Offset: 176
    keen::ds::AttachmentSlot slot; // Offset: 177
    keen::ds::ecs::ColliderResponseFlags flags; // Offset: 178
};

struct ecs.ColliderResponseResource {
    keen::DsArray<keen::ds::ecs::ColliderResponseResourceEntry> responseEntries; // Offset: 0
    keen::Guid templateId; // Offset: 40
    keen::ds::string templateDescription; // Offset: 56
};

struct ecs.ColliderResponse {
    keen::ds::ecs::CollisionType collisionType; // Offset: 0
    keen::ds::SoundContainerReference sfx; // Offset: 4
    keen::ds::VfxReference vfx; // Offset: 20
    keen::float3 eulerOffset; // Offset: 36
    keen::float3 offset; // Offset: 48
    keen::bool applyLocally; // Offset: 60
    keen::bool orientToNormal; // Offset: 61
    keen::bool overrideSlot; // Offset: 62
    keen::ds::AttachmentSlot slot; // Offset: 63
    keen::bool attach; // Offset: 64
};

struct ecs.ColliderResourceComponent {
    keen::DsArray<keen::ds::ecs::ColliderResourceData> colliders; // Offset: 0
};

typedef keen::ObjectReference<keen::ds::CollisionFeedbackMaterial> CollisionFeedbackMaterialReference;

typedef keen::ItemId ItemId;

typedef keen::ObjectReference<keen::ds::ItemInfo> ItemReference;

typedef keen::PropDamageSusceptibility PropDamageSusceptibility;

struct ecs.CollisionFeedbackMaterialComponent {
    keen::ds::CollisionFeedbackMaterialReference material; // Offset: 0
    keen::ds::ItemId itemId; // Offset: 16
    keen::ds::ItemReference itemRef; // Offset: 20
    keen::ds::PropDamageSusceptibility propDamageSusceptibility; // Offset: 36
};

struct ecs.ColliderId {
    keen::uint64 id; // Offset: 0
};

struct ecs.AbstractCollider {
    keen::ds::ecs::ToggleModifier toggleModifier; // Offset: 0
    keen::ds::ecs::ColliderId colliderId; // Offset: 8
};

struct ecs.StaticCollider {
};

struct ecs.StaticClientCollider {
};

typedef keen::ecs::ColliderMask ecs.ColliderMask;

typedef keen::ecs::ColliderMode ecs.ColliderMode;

struct ecs.Collider {
    keen::bool isPathBlocker; // Offset: 16
    keen::ds::ecs::ColliderMask disabledCollisions; // Offset: 20
    keen::ds::ecs::ColliderMode activeColliderSetup; // Offset: 24
};

struct ecs.ClientCollider {
};

typedef keen::ecs::PlayerSpawnType ecs.PlayerSpawnType;

struct ecs.PlayerSpawnPoint {
    keen::ds::ecs::PlayerSpawnType target; // Offset: 0
    keen::StaticArray<keen::ds::ecs::Offset,5> landingPads; // Offset: 4
};

struct ecs.QueryId {
    keen::uint32 id; // Offset: 0
};

struct ecs.IsPlayerInSight {
    keen::bool isInSight; // Offset: 0
    keen::ds::ecs::QueryId queryId; // Offset: 4
    keen::Time nextQueryUpdate; // Offset: 8
    keen::ds::ecs::Offset sourceOffset; // Offset: 16
    keen::ds::ecs::Offset targetOffset; // Offset: 56
};

typedef keen::ecs::LocalPlayerMask ecs.LocalPlayerMask;

struct ecs.IsLocalPlayerInRange {
    keen::float32 rangeMargin; // Offset: 0
    keen::ds::ecs::LocalPlayerMask arePlayersInRangeMask; // Offset: 4
};

typedef keen::ecs::TriggerShapeType ecs.TriggerShapeType;

struct ecs.TriggerShape {
    keen::ds::ecs::TriggerShapeType shape; // Offset: 0
    keen::float32 rangeX; // Offset: 4
    keen::float32 rangeY; // Offset: 8
    keen::float32 rangeZ; // Offset: 12
    keen::ds::ecs::Offset offset; // Offset: 16
};

typedef keen::FloorMaterialShape FloorMaterialShape;

struct ecs.FloorMaterial {
    keen::ObjectReference<keen::ds::BaseVoxelMaterial> material; // Offset: 0
    keen::float32 radius; // Offset: 16
    keen::ds::FloorMaterialShape shape; // Offset: 20
    keen::float32 noiseStrength; // Offset: 24
};

struct ecs.TriggerShapes {
    keen::DsArray<keen::ds::ecs::TriggerShape> shapes; // Offset: 0
};

struct ecs.FogResistanceState {
    keen::float32 accumulatedValue; // Offset: 0
};

struct ecs.AudioResourceComponent {
    keen::ds::SoundContainerReference soundContainer; // Offset: 0
};

struct ecs.AudioComponent {
    keen::ds::AttachmentSlot slot; // Offset: 8
    keen::ds::ecs::Offset offset; // Offset: 12
    keen::bool stopOnDestroy; // Offset: 52
    keen::bool attach; // Offset: 53
    keen::bool attachToParent; // Offset: 54
};

struct ecs.AudioComponentVolatile {
    keen::ds::SoundContainerReference lastSoundContainer; // Offset: 56
};

struct ecs.AmbientQueryId {
    keen::uint32 id; // Offset: 0
};

struct ecs.AmbientSystemQuery {
    keen::ds::ecs::AmbientQueryId queryId; // Offset: 0
};

typedef keen::LocaTagId LocaTagId;

struct ecs.UiInteractable {
    keen::uint32 handle; // Offset: 0
    keen::ds::LocaTagId verbId; // Offset: 4
    keen::float32 hintRange; // Offset: 8
};

struct ecs.QueryTest {
    keen::Time queryTime; // Offset: 0
    keen::ds::ecs::QueryId queryId; // Offset: 8
};

struct ecs.DespawnLink {
    keen::ds::ecs::EntityId parentEntityId; // Offset: 0
    keen::bool despawnOnDeath; // Offset: 4
};

struct ecs.Transform {
    keen::float3 position; // Offset: 0
    keen::Quaternion orientation; // Offset: 12
};

struct ecs.CurrentTransform {
    keen::WorldTransform transform; // Offset: 0
};

struct ecs.RenderTransform {
    keen::WorldTransform transform; // Offset: 0
    keen::WorldTransform interpolationSource; // Offset: 56
    keen::WorldTransform interpolationTarget; // Offset: 112
    keen::uint32 interpolationNewestTick; // Offset: 168
};

typedef keen::AmbientTags AmbientTags;

struct ecs.SetDataBreakPointMessage {
    keen::uint32 entityId; // Offset: 0
    keen::HashKey32 dynamicType; // Offset: 4
    keen::uint16 offset; // Offset: 8
    keen::uint8 size; // Offset: 10
    keen::bool write; // Offset: 11
};

struct ecs.ComponentMessageEntry {
    keen::DsString name; // Offset: 0
    keen::HashKey32 dynamicType; // Offset: 40
    keen::HashKey32 templateType; // Offset: 44
    keen::uint8 affinity; // Offset: 48
    keen::uint8 queryAffinity; // Offset: 49
};

struct ecs.ComponentMessage {
    keen::DsArray<keen::ds::ecs::ComponentMessageEntry> components; // Offset: 0
};

struct ecs.EcsComponentsMask {
    keen::StaticArray<keen::uint64,9> mask; // Offset: 0
};

struct ecs.EcsSystemsMask {
    keen::uint64 mask; // Offset: 0
};

struct ecs.EcsEventsMask {
    keen::StaticArray<keen::uint64,2> mask; // Offset: 0
};

struct ecs.TemplateMessageEntry {
    keen::Guid guid; // Offset: 0
    keen::DsString name; // Offset: 16
    keen::ds::ecs::EcsComponentsMask componentsMask; // Offset: 56
};

struct ecs.TemplateMessage {
    keen::DsArray<keen::ds::ecs::TemplateMessageEntry> templates; // Offset: 0
};

struct ecs.EntityMessageEntry {
    keen::ds::ecs::EntityId entityId; // Offset: 0
    keen::uint32 templateIndex; // Offset: 4
};

struct ecs.TotalEntityMessage {
    keen::DsArray<keen::ds::ecs::EntityMessageEntry> entities; // Offset: 0
};

struct ecs.ChangeEntityMessage {
    keen::DsArray<keen::ds::ecs::EntityMessageEntry> createdEntities; // Offset: 0
    keen::DsArray<keen::ds::ecs::EntityMessageEntry> destroyedEntities; // Offset: 40
};

struct ecs.TickMessage {
    keen::uint32 tick; // Offset: 0
    keen::uint32 entityCount; // Offset: 4
    keen::uint32 entitiesAdded; // Offset: 8
    keen::uint32 entitiesRemoved; // Offset: 12
    keen::uint32 eventCount; // Offset: 16
    keen::uint32 messageCount; // Offset: 20
};

struct ecs.ProgramInfoComponentDependencies {
    keen::ds::ecs::EcsComponentsMask required; // Offset: 0
    keen::ds::ecs::EcsComponentsMask optional; // Offset: 72
};

struct ecs.ProgramInfoDependencies {
    keen::ds::ecs::ProgramInfoComponentDependencies components; // Offset: 0
    keen::ds::ecs::ProgramInfoComponentDependencies templateComponents; // Offset: 144
    keen::ds::ecs::EcsSystemsMask externalSystems; // Offset: 288
    keen::ds::ecs::EcsComponentsMask entityComponents; // Offset: 296
    keen::ds::ecs::EcsComponentsMask entityTemplates; // Offset: 368
    keen::ds::ecs::EcsEventsMask events; // Offset: 440
    keen::bool isThreadSafe; // Offset: 456
};

struct ecs.ProgramInfoReadWriteDependency {
    keen::ds::ecs::ProgramInfoDependencies read; // Offset: 0
    keen::ds::ecs::ProgramInfoDependencies write; // Offset: 464
    keen::ds::ecs::EcsComponentsMask forbiddenComponents; // Offset: 928
    keen::ds::ecs::EcsComponentsMask requiredComponents; // Offset: 1000
};

struct ecs.ProgramId {
    keen::uint16 id; // Offset: 0
};

struct ecs.ProgramInfo {
    keen::ds::ecs::ProgramId programId; // Offset: 0
    keen::DsString programName; // Offset: 8
    keen::bool isPresentation; // Offset: 48
    keen::bool isDisabled; // Offset: 49
    keen::bool isSystem; // Offset: 50
    keen::bool isInit; // Offset: 51
    keen::bool noPrediction; // Offset: 52
    keen::bool isDeactivated; // Offset: 53
    keen::bool isDeactivatedPrediction; // Offset: 54
    keen::ds::ecs::ProgramInfoReadWriteDependency dependencies; // Offset: 56
};

struct ecs.ProgramsMessage {
    keen::DsArray<keen::ds::ecs::ProgramInfo> programs; // Offset: 0
};

struct ecs.EventTypesMessageEntry {
    keen::ds::string name; // Offset: 0
    keen::uint16 size; // Offset: 40
    keen::bool serverRead; // Offset: 42
    keen::bool serverWrite; // Offset: 43
    keen::bool clientRead; // Offset: 44
    keen::bool clientWrite; // Offset: 45
};

struct ecs.EventTypesMessage {
    keen::DsArray<keen::ds::ecs::EventTypesMessageEntry> events; // Offset: 0
};

struct ecs.ExternalSystemsMessageEntry {
    keen::ds::string name; // Offset: 0
    keen::bool readThreadSafe; // Offset: 40
    keen::bool writeThreadSafe; // Offset: 41
    keen::bool serverRead; // Offset: 42
    keen::bool serverWrite; // Offset: 43
    keen::bool clientRead; // Offset: 44
    keen::bool clientWrite; // Offset: 45
};

struct ecs.ExternalSystemsMessage {
    keen::DsArray<keen::ds::ecs::ExternalSystemsMessageEntry> systems; // Offset: 0
};

struct ecs.TaskSlotsMessageProgram {
    keen::uint16 index; // Offset: 0
    keen::uint16 storageCount; // Offset: 2
    keen::uint16 chunkCount; // Offset: 4
    keen::uint32 entityCount; // Offset: 8
};

struct ecs.TaskSlotsMessageEntry {
    keen::ds::ecs::EcsComponentsMask componentsRead; // Offset: 0
    keen::ds::ecs::EcsComponentsMask componentsWrite; // Offset: 72
    keen::ds::ecs::EcsSystemsMask systemsRead; // Offset: 144
    keen::ds::ecs::EcsSystemsMask systemsWrite; // Offset: 152
    keen::ds::ecs::EcsComponentsMask entitiesRead; // Offset: 160
    keen::ds::ecs::EcsComponentsMask entitiesWrite; // Offset: 232
    keen::bool isThreadSafe; // Offset: 304
    keen::DsArray<keen::ds::ecs::TaskSlotsMessageProgram> programs; // Offset: 312
};

struct ecs.TaskSlotsMessage {
    keen::uint32 tick; // Offset: 0
    keen::DsArray<keen::ds::ecs::TaskSlotsMessageEntry> entries; // Offset: 8
};

struct ecs.SendTaskSlotsMessage {
    keen::uint8 dummy; // Offset: 0
};

struct ecs.StartEntityUpdateMessage {
    keen::ds::ecs::EntityId entityId; // Offset: 0
};

struct ecs.StopEntityUpdateMessage {
    keen::ds::ecs::EntityId entityId; // Offset: 0
};

struct ecs.EntityComponentEntry {
    keen::uint16 index; // Offset: 0
    keen::uint16 offset; // Offset: 2
    keen::uint16 size; // Offset: 4
};

struct ecs.EntityComponentMessage {
    keen::ds::ecs::EntityId entityId; // Offset: 0
    keen::DsArray<keen::ds::ecs::EntityComponentEntry> components; // Offset: 8
    keen::DsArray<keen::uint64> buffer; // Offset: 48
};

struct ecs.EntityTemplateMessage {
    keen::Guid templateGuid; // Offset: 0
    keen::DsArray<keen::uint64> templateData; // Offset: 16
};

struct ecs.StartTimelineMessage {
    keen::DsArray<keen::ds::ecs::EntityId> entityIds; // Offset: 0
};

struct ecs.StopTimelineMessage {
    keen::uint8 dummy; // Offset: 0
};

typedef keen::ecs::AdjustTick ecs.AdjustTick;

struct ecs.TimelineFrameMessage {
    keen::Time time; // Offset: 0
    keen::Time systemTime; // Offset: 8
    keen::Time lastSystemTime; // Offset: 16
    keen::uint32 tickCount; // Offset: 24
    keen::uint32 currentTick; // Offset: 28
    keen::uint32 lastTick; // Offset: 32
    keen::Time frameDuration; // Offset: 40
    keen::Time frameTime; // Offset: 48
    keen::Time nextTickTime; // Offset: 56
    keen::float32 tickInterpolationFactor; // Offset: 64
    keen::ds::ecs::AdjustTick adjustTick; // Offset: 68
};

struct ecs.UpdateGameTimeMessage {
    keen::Time time; // Offset: 0
};

struct ecs.DebugQueryMessage {
    keen::ds::ecs::QueryId queryId; // Offset: 0
};

struct ecs.EntityStateComponent {
    keen::uint16 index; // Offset: 0
    keen::uint16 size; // Offset: 2
    keen::uint16 offset0; // Offset: 4
    keen::uint16 offset1; // Offset: 6
};

struct ecs.TimelineEntityStateData {
    keen::ds::ecs::EntityId entityId; // Offset: 0
    keen::WorldTransform transform; // Offset: 8
    keen::uint32 gridCellId; // Offset: 64
    keen::uint32 dirtyValue; // Offset: 68
    keen::uint32 dataTick; // Offset: 72
    keen::uint16 isCulled; // Offset: 76
    keen::uint16 isCulledPrediction; // Offset: 78
    keen::uint16 playerMask; // Offset: 80
};

struct ecs.TimelineEntityState {
    keen::ds::ecs::TimelineEntityStateData entity0; // Offset: 0
    keen::ds::ecs::TimelineEntityStateData entity1; // Offset: 88
    keen::DsArray<keen::ds::ecs::EntityStateComponent> components; // Offset: 176
    keen::DsArray<keen::uint64> buffer; // Offset: 216
};

struct ecs.TimelineSystemCounts {
    keen::uint32 entities; // Offset: 0
    keen::uint32 sceneEntities; // Offset: 4
    keen::uint32 activeSceneChunks; // Offset: 8
};

struct ecs.TimelineCamera {
    keen::WorldTransform transform0; // Offset: 0
    keen::WorldTransform transform1; // Offset: 56
};

struct ecs.TimelineSystemUpdateMessage {
    keen::Time time0; // Offset: 0
    keen::Time time1; // Offset: 8
    keen::Time frameTime; // Offset: 16
    keen::Time frameDuration; // Offset: 24
    keen::uint32 tick; // Offset: 32
    keen::uint32 lastTick; // Offset: 36
    keen::float32 tickFactor; // Offset: 40
    keen::ds::ecs::TimelineSystemCounts startCounts; // Offset: 44
    keen::ds::ecs::TimelineSystemCounts endCounts; // Offset: 56
    keen::DsArray<keen::ds::ecs::EntityMessageEntry> createdEntities; // Offset: 72
    keen::DsArray<keen::ds::ecs::EntityMessageEntry> destroyedEntities; // Offset: 112
    keen::DsArray<keen::ds::ecs::TimelineEntityState> entities; // Offset: 152
    keen::ds::ecs::TimelineCamera camera; // Offset: 192
};

struct ecs.TimelineReplicationPriorityEntry {
    keen::ds::ecs::EntityId entityId; // Offset: 0
    keen::uint16 priority; // Offset: 4
};

struct ecs.TimelineReplicationPriorityMessage {
    keen::Time time; // Offset: 0
    keen::uint32 tick; // Offset: 8
    keen::uint8 playerIndex; // Offset: 12
    keen::DsArray<keen::ds::ecs::TimelineReplicationPriorityEntry> clientEntries; // Offset: 16
    keen::DsArray<keen::ds::ecs::TimelineReplicationPriorityEntry> predictionEntries; // Offset: 56
};

typedef keen::ecs::TimelineEntitySkipReason ecs.TimelineEntitySkipReason;

struct ecs.TimelineEntitySkipMessage {
    keen::Time time; // Offset: 0
    keen::uint32 tick; // Offset: 8
    keen::uint8 playerIndex; // Offset: 12
    keen::bool prediction; // Offset: 13
    keen::ds::ecs::EntityId entityId; // Offset: 16
    keen::ds::ecs::TimelineEntitySkipReason reason; // Offset: 20
};

struct ecs.TimelineEntitySendMessage {
    keen::Time time; // Offset: 0
    keen::uint32 tick; // Offset: 8
    keen::uint8 playerIndex; // Offset: 12
    keen::bool prediction; // Offset: 13
    keen::bool create; // Offset: 14
    keen::ds::ecs::EntityId entityId; // Offset: 16
    keen::DsArray<keen::uint8> messageData; // Offset: 24
};

struct ecs.TimelineEntityRecvMessage {
    keen::Time time; // Offset: 0
    keen::uint32 tick; // Offset: 8
    keen::ds::ecs::EntityId entityId; // Offset: 12
    keen::bool prediction; // Offset: 16
    keen::bool create; // Offset: 17
};

struct ecs.TimelineEntityProcessMessage {
    keen::Time time; // Offset: 0
    keen::uint32 tick; // Offset: 8
    keen::ds::ecs::EntityId entityId; // Offset: 12
    keen::bool prediction; // Offset: 16
    keen::bool create; // Offset: 17
};

struct ecs.TimelineInputSendMessage {
    keen::Time time; // Offset: 0
    keen::uint32 tick; // Offset: 8
    keen::ds::ecs::EntityId entityId; // Offset: 12
};

struct ecs.TimelineInputRecvMessage {
    keen::Time time; // Offset: 0
    keen::uint32 tick; // Offset: 8
    keen::ds::ecs::EntityId entityId; // Offset: 12
};

struct ecs.TimelineReplicationComponent {
    keen::uint16 index; // Offset: 0
    keen::uint16 count; // Offset: 2
    keen::uint16 deltaSize; // Offset: 4
};

struct ecs.TimelineReplicationTemplate {
    keen::ds::string name; // Offset: 0
    keen::uint32 checkedEntityCount; // Offset: 40
    keen::uint32 updatedEntityCount; // Offset: 44
    keen::DsArray<keen::ds::ecs::TimelineReplicationComponent> components; // Offset: 48
};

struct ecs.TimelineReplicationEvent {
    keen::ds::string name; // Offset: 0
    keen::uint32 size; // Offset: 40
    keen::uint32 count; // Offset: 44
};

struct ecs.TimelineReplicationStatisticsData {
    keen::uint32 prioQueueSize; // Offset: 0
    keen::uint32 dirtyEntities; // Offset: 4
    keen::uint32 changedEntities; // Offset: 8
    keen::uint32 createdEntities; // Offset: 12
    keen::uint32 destroyedEntities; // Offset: 16
    keen::uint32 messageCount; // Offset: 20
    keen::uint32 messageSize; // Offset: 24
    keen::uint32 totalEventCount; // Offset: 28
    keen::uint32 totalEventSize; // Offset: 32
    keen::DsArray<keen::ds::ecs::TimelineReplicationTemplate> templates; // Offset: 40
    keen::DsArray<keen::ds::ecs::TimelineReplicationEvent> events; // Offset: 80
};

struct ecs.TimelineReplicationStatisticsMessage {
    keen::Time time; // Offset: 0
    keen::uint32 playerIndex; // Offset: 8
    keen::ds::ecs::TimelineReplicationStatisticsData client; // Offset: 16
    keen::ds::ecs::TimelineReplicationStatisticsData prediction; // Offset: 136
};

struct ecs.TimelinePredictionEntityState {
    keen::ds::ecs::EntityId entityId; // Offset: 0
    keen::uint32 dataTick; // Offset: 4
    keen::bool isDirty; // Offset: 8
    keen::bool isDestroyed; // Offset: 9
    keen::DsArray<keen::ds::ecs::EntityComponentEntry> components; // Offset: 16
    keen::DsArray<keen::uint64> buffer; // Offset: 56
};

struct ecs.TimelinePredictionUpdateMessage {
    keen::Time time; // Offset: 0
    keen::uint32 startTick; // Offset: 8
    keen::uint32 clientTick; // Offset: 12
    keen::uint32 lastTick; // Offset: 16
    keen::uint32 sourceTick; // Offset: 20
    keen::DsArray<keen::ds::ecs::TimelinePredictionEntityState> entities; // Offset: 24
};

struct ecs.TimelinePredictionTickMessage {
    keen::Time time0; // Offset: 0
    keen::Time time1; // Offset: 8
    keen::uint32 tick; // Offset: 16
    keen::DsArray<keen::ds::ecs::TimelinePredictionEntityState> entities; // Offset: 24
};

struct ecs.SceneCellEntity {
    keen::ds::ecs::EntityId entityId; // Offset: 0
    keen::float3 position; // Offset: 4
    keen::uint16 templateIndex; // Offset: 16
    keen::uint16 clientCulledMask; // Offset: 18
    keen::uint16 predictionCulledMask; // Offset: 20
    keen::bool isUncullable; // Offset: 22
    keen::bool hasPosition; // Offset: 23
    keen::bool isDynamic; // Offset: 24
};

struct ecs.SceneCellMessage {
    keen::uint2 cellPosition; // Offset: 0
    keen::uint32 cellIndex; // Offset: 8
    keen::DsArray<keen::ds::ecs::SceneCellEntity> entities; // Offset: 16
    keen::uint32 sceneEntityCount; // Offset: 56
};

typedef keen::ecs::SceneChunkState ecs.SceneChunkState;

struct ecs.SceneChunkEntry {
    keen::ds::ecs::SceneChunkState state; // Offset: 0
    keen::bool isActive; // Offset: 1
    keen::uint32 entityCount; // Offset: 4
    keen::uint32 destroyedEntityCount; // Offset: 8
    keen::Time unloadAge; // Offset: 16
};

struct ecs.SceneChunksMessage {
    keen::DsArray<keen::ds::ecs::SceneChunkEntry> chunks; // Offset: 0
};

struct ecs.SceneZoneBox {
    keen::float3 min; // Offset: 0
    keen::float3 max; // Offset: 12
};

struct ecs.SceneBuildZonesMessage {
    keen::DsArray<keen::ds::ecs::SceneZoneBox> allowedZones; // Offset: 0
    keen::DsArray<keen::ds::ecs::SceneZoneBox> forbiddenZones; // Offset: 40
    keen::DsArray<keen::ds::ecs::SceneZoneBox> activeZones; // Offset: 80
    keen::DsArray<keen::ds::ecs::SceneZoneBox> playableZones; // Offset: 120
};

struct ecs.SceneMessage {
    keen::Guid sceneGuid; // Offset: 0
    keen::uint2 sceneChunkSize; // Offset: 16
    keen::uint2 entityGridSize; // Offset: 24
    keen::float32 entityGridCellSize; // Offset: 32
};

typedef keen::ecs::SceneControlMessageType ecs.SceneControlMessageType;

struct ecs.SceneControlMessage {
    keen::ds::ecs::SceneControlMessageType type; // Offset: 0
};

struct ecs.SceneHotPointsMessage {
    keen::DsArray<keen::float2> hotPoints; // Offset: 0
};

struct ecs.SceneHotPointsFile {
    keen::DsArray<keen::float2> hotPoints; // Offset: 0
};

struct ecs.ScenePlayerCamera {
    keen::float3 position; // Offset: 0
    keen::float yRotation; // Offset: 12
};

struct ecs.ScenePlayerCamerasMessage {
    keen::StaticArray<keen::ds::ecs::ScenePlayerCamera,16> cameras; // Offset: 0
};

struct ecs.SceneChunkResetMessage {
    keen::uint32 chunkIndex; // Offset: 0
};

typedef keen::ecs::QueryFlags ecs.QueryFlags;

struct ecs.SceneColliderQueryEntry {
    keen::ds::ecs::QueryId queryId; // Offset: 0
    keen::ds::ecs::EntityId entityId; // Offset: 4
    keen::ds::ecs::ProgramId programId; // Offset: 8
    keen::uint32 templateIndex; // Offset: 12
    keen::ds::ecs::QueryFlags flags; // Offset: 16
    keen::float3 position; // Offset: 20
    keen::AxisAlignedBox colliderAabb; // Offset: 32
    keen::ds::string debugName; // Offset: 64
    keen::uint32 resultCount; // Offset: 104
    keen::bool checkWorldTriangles; // Offset: 108
};

struct ecs.RangeQueryId {
    keen::uint32 id; // Offset: 0
};

struct ecs.SceneRangeQueryEntry {
    keen::ds::ecs::RangeQueryId queryId; // Offset: 0
    keen::ds::ecs::EntityId entityId; // Offset: 4
    keen::ds::ecs::ProgramId programId; // Offset: 8
    keen::uint32 templateIndex; // Offset: 12
    keen::uint16 componentId; // Offset: 16
    keen::AxisAlignedBox aabb; // Offset: 32
    keen::float32 range; // Offset: 64
    keen::ds::string debugName; // Offset: 72
    keen::uint32 resultCount; // Offset: 112
};

struct ecs.SceneQueriesMessage {
    keen::uint32 triangleQueryCount; // Offset: 0
    keen::DsArray<keen::ds::ecs::SceneColliderQueryEntry> colliderQueries; // Offset: 8
    keen::DsArray<keen::ds::ecs::SceneRangeQueryEntry> rangeQueries; // Offset: 48
};

struct ecs.TimeControlMessage {
    keen::sint16 tickDelta; // Offset: 0
    keen::Time sleep; // Offset: 8
    keen::Time sleepOnce; // Offset: 16
};

struct ecs.DestroyEntityMessage {
    keen::ds::ecs::EntityId entityId; // Offset: 0
};

typedef keen::ObjectReference<keen::ds::ecs::Template> ecs.TemplateReference;

struct HolisticMapFilterTemplateEntry {
    keen::ds::ecs::TemplateReference templateReference; // Offset: 0
    keen::bool showChildTemplates; // Offset: 16
};

typedef keen::ecs::TestState ecs.TestState;

struct ecs.TestA {
    keen::Time time; // Offset: 0
    keen::uint32 state; // Offset: 8
    keen::ds::ecs::TestState stateB; // Offset: 12
    keen::ds::ecs::TestState stateC; // Offset: 13
    keen::ds::ecs::TestState stateD; // Offset: 14
};

struct ecs.TestB {
    keen::uint32 value; // Offset: 0
};

struct ecs.TestC {
    keen::uint32 value; // Offset: 0
};

struct ecs.TestD {
    keen::uint32 value; // Offset: 0
};

struct ecs.TestTemplateA {
    keen::uint32 value; // Offset: 0
};

struct ecs.DynamicTestTemplateA {
    keen::uint32 defValue; // Offset: 0
    keen::uint32 value; // Offset: 4
};

struct ecs.TestTemplateB {
    keen::uint32 value; // Offset: 0
};

struct ecs.DynamicTestTemplateB {
    keen::uint32 value; // Offset: 0
};

struct ecs.DynamicTypeTestTemplate {
    keen::DsArray<keen::uint32> values; // Offset: 0
};

struct ecs.TestBase {
    keen::DsString name; // Offset: 0
};

struct ecs.DynamicTestBase {
    keen::uint32 value; // Offset: 0
    keen::uint32 notSave; // Offset: 4
    keen::ds::ecs::EntityId mainEntity; // Offset: 8
    keen::Time start; // Offset: 16
    keen::Time duration; // Offset: 24
};

struct ecs.TestBaseEntry {
    keen::uint32 value; // Offset: 0
    keen::ds::ecs::EntityId spouseId; // Offset: 4
    keen::ds::ecs::QueryId queryId; // Offset: 8
};

struct ecs.TestBaseEntryServer {
    keen::uint32 value; // Offset: 0
};

struct ecs.TestBaseEntryTemplateClient {
    keen::uint32 value; // Offset: 0
};

struct ecs.TestBaseEntrySpawnClient {
    keen::uint32 value; // Offset: 0
};

struct ecs.TestBaseEntryAddClient {
    keen::uint32 value; // Offset: 0
};

struct ecs.Event {
};

struct ecs.TestEvent1 {
    keen::uint32 data; // Offset: 0
};

struct ecs.TestEvent2 {
    keen::uint32 data; // Offset: 0
};

struct ecs.TestEventCreate {
    keen::uint32 value; // Offset: 0
};

struct ecs.GridId {
    keen::uint64 id; // Offset: 0
};

struct ecs.PathQueryId {
    keen::uint32 id; // Offset: 0
};

typedef keen::ecs::QueryFlag ecs.QueryFlag;

typedef keen::ecs::QueryResultFlag ecs.QueryResultFlag;

typedef keen::ecs::QueryResultFlags ecs.QueryResultFlags;

typedef keen::ecs::CollisionCheckFlag ecs.CollisionCheckFlag;

typedef keen::ecs::CollisionCheckFlags ecs.CollisionCheckFlags;

struct ecs.Template {
    keen::bool predictEntity; // Offset: 0
    keen::bool farCulling; // Offset: 1
    keen::bool questEntity; // Offset: 2
};

struct ecs.TemplateResource {
    keen::ds::string name; // Offset: 0
    keen::bool predictEntity; // Offset: 40
    keen::bool farCulling; // Offset: 41
    keen::DsArray<keen::DsVariant<keen::ds::ecs::Component>> components; // Offset: 48
};

typedef keen::ObjectReference<keen::ds::ecs::TemplateResource> ecs.TemplateResourceReference;

struct ecs.TemplateSubDirectory {
};

struct ecs.TemplateDirectory {
};

struct ecs.TemplateCollectionResource {
    keen::DsArray<keen::ds::ecs::TemplateResourceReference> templates; // Offset: 0
};

typedef keen::ObjectReference<keen::ds::ecs::TemplateCollectionResource> ecs.TemplateCollectionReference;

struct ecs.ServerInfo {
    keen::Time minDuration; // Offset: 0
    keen::Time avgDuration; // Offset: 8
    keen::Time maxDuration; // Offset: 16
    keen::uint32 sceneEntityCount; // Offset: 24
    keen::uint32 dynamicEntityCount; // Offset: 28
    keen::uint32 sceneChunkCount; // Offset: 32
    keen::uint32 bandwidth; // Offset: 36
};

typedef keen::ecs::ColliderFlags ecs.ColliderFlags;

struct ecs.ColliderFlagData {
    keen::ds::ecs::ColliderMask isA; // Offset: 0
    keen::ds::ecs::ColliderMask checkAgainst; // Offset: 4
};

struct ecs.ColliderModeSetup {
    keen::bool defaultMode; // Offset: 0
    keen::bool sitting; // Offset: 1
    keen::bool lying; // Offset: 2
    keen::bool evading; // Offset: 3
    keen::bool climbingWall; // Offset: 4
    keen::bool death; // Offset: 5
    keen::bool invisible; // Offset: 6
};

struct ecs.ColliderData {
    keen::bool enabled; // Offset: 0
    keen::ds::ecs::ColliderFlagData flags; // Offset: 4
    keen::float3 offset; // Offset: 12
    keen::Quaternion orientation; // Offset: 24
    keen::float32 stickyness; // Offset: 40
    keen::ds::ecs::ColliderModeSetup colliderModeSetup; // Offset: 44
    keen::bool preventFallDamage; // Offset: 51
    keen::bool isSnappingBox; // Offset: 52
};

struct ecs.SphereColliderData {
    keen::ds::SphereColliderShape shape; // Offset: 56
    keen::bool continuous; // Offset: 60
};

struct ecs.SpheroidColliderData {
    keen::ds::SpheroidColliderShape shape; // Offset: 56
};

struct ecs.CapsuleColliderData {
    keen::ds::CapsuleColliderShape shape; // Offset: 56
    keen::bool continuous; // Offset: 64
};

struct ecs.SegmentColliderData {
    keen::ds::SegmentColliderShape shape; // Offset: 56
};

struct ecs.MovingSphereColliderData {
    keen::ds::SphereColliderShape sphereShape; // Offset: 56
    keen::ds::SegmentColliderShape segmentShape; // Offset: 60
};

struct ecs.BoxColliderData {
    keen::ds::BoxColliderShape shape; // Offset: 56
    keen::bool continuous; // Offset: 68
};

struct ecs.LineSegment {
    keen::Vector3 p0; // Offset: 0
    keen::Vector3 p1; // Offset: 16
};

struct ecs.SegmentBundleColliderData {
    keen::StaticArray<keen::ds::ecs::LineSegment,4> segments; // Offset: 64
};

typedef keen::DsArray<keen::DsVariant<keen::ds::ecs::ColliderData>> ecs.ColliderDataArray;

typedef keen::ecs::ColliderResolveFlag ecs.ColliderResolveFlag;

typedef keen::ecs::ColliderResolveMask ecs.ColliderResolveMask;

struct ecs.ColliderResourceData {
    keen::ds::ecs::ColliderDataArray dataArray; // Offset: 0
    keen::ds::ecs::ColliderFlagData combinedFlags; // Offset: 40
    keen::ds::ecs::ColliderResolveMask resolveMask; // Offset: 48
};

struct ecs.CollisionEvent {
    keen::ds::ecs::EntityId entityA; // Offset: 0
    keen::ds::ecs::EntityId entityB; // Offset: 4
    keen::float3 position; // Offset: 8
    keen::float3 normal; // Offset: 20
    keen::float32 sqrDistance; // Offset: 32
    keen::float32 overlap; // Offset: 36
    keen::ds::ecs::ColliderMask colliderFlagsA; // Offset: 40
    keen::ds::ecs::ColliderMask colliderFlagsB; // Offset: 44
    keen::uint8 voxelMaterialId; // Offset: 48
};

typedef keen::ecs::EntitySpawnValue ecs.EntitySpawnValue;

typedef keen::ecs::EntitySpawnValueMask ecs.EntitySpawnValueMask;

typedef keen::ecs::EnemyFeature ecs.EnemyFeature;

typedef keen::ecs::EnemyFeatureMask ecs.EnemyFeatureMask;

struct ecs.EnemyMarkerTag {
};

typedef keen::ObjectReference<keen::ds::actor::ActorSequence> actor.ActorSequenceReference;

struct ecs.EnemySettings {
    keen::ds::animationgraph::StateIdReference idleAnimation; // Offset: 0
    keen::ds::ecs::EnemyFeatureMask enabledFeatures; // Offset: 16
    keen::ds::ecs::EnemyFeatureMask disabledFeatures; // Offset: 20
    keen::float32 checkDistance; // Offset: 24
    keen::ObjectReference<keen::ds::ecs::EnemyMarkerTag> requiredMarkerTag; // Offset: 28
    keen::ds::actor::ActorSequenceReference spawnSequence; // Offset: 44
    keen::float32 maxTargetDistanceToHomeZone; // Offset: 60
};

typedef keen::ecs::RandomSpawnerSetting ecs.RandomSpawnerSetting;

typedef keen::ecs::RandomSpawnerSettingMask ecs.RandomSpawnerSettingMask;

typedef keen::ecs::RandomSpawnerAmount ecs.RandomSpawnerAmount;

struct ecs.RandomSpawnerSettings {
    keen::bool allowUpScaling; // Offset: 0
    keen::bool allowDownScaling; // Offset: 1
    keen::ds::ecs::RandomSpawnerAmount minSpawnerAmount; // Offset: 2
    keen::ds::ecs::RandomSpawnerSettingMask changedSettings; // Offset: 3
};

struct ecs.RandomSpawnerEntitySettings {
    keen::bool allowUpScaling; // Offset: 0
    keen::bool allowDownScaling; // Offset: 1
    keen::ds::ecs::RandomSpawnerAmount minSpawnerAmount; // Offset: 2
};

struct ecs.EntitySpawnData {
    keen::float3 position; // Offset: 0
    keen::Quaternion orientation; // Offset: 12
    keen::ds::ecs::EntityId parentEntityId; // Offset: 28
    keen::Time spawnTime; // Offset: 32
    keen::uint64 randomSeed; // Offset: 40
    keen::float3 velocity; // Offset: 48
    keen::Color tintColor; // Offset: 60
    keen::float32 triggerRange; // Offset: 64
    keen::float32 triggerRange2; // Offset: 68
    keen::float32 triggerRange3; // Offset: 72
    keen::HashKey32 itemId; // Offset: 76
    keen::ds::ecs::EnemySettings enemySettings; // Offset: 80
    keen::ds::ecs::RandomSpawnerEntitySettings randomSpawnerSettings; // Offset: 144
    keen::sint32 level; // Offset: 148
    keen::ds::ecs::EntitySpawnValueMask mask; // Offset: 152
};

typedef keen::ecs::PathGridType ecs.PathGridType;

typedef keen::ecs::PathNodeType ecs.PathNodeType;

struct ecs.PathNodeCostFactors {
    keen::float32 none; // Offset: 0
    keen::float32 building; // Offset: 4
    keen::float32 collider; // Offset: 8
    keen::float32 walkablePlatform; // Offset: 12
    keen::float32 tar; // Offset: 16
    keen::float32 mud; // Offset: 20
    keen::float32 road; // Offset: 24
    keen::float32 fog; // Offset: 28
    keen::float32 deadlyFog; // Offset: 32
    keen::float32 lava; // Offset: 36
    keen::float32 noNpcMovement; // Offset: 40
    keen::float32 npcAvoid; // Offset: 44
    keen::float32 closedDoor; // Offset: 48
};

typedef keen::ecs::PathNodeTypeMask ecs.PathNodeTypeMask;

struct ecs.PathGridMaterialSettings {
    keen::ds::ecs::PathNodeType pathNodeType; // Offset: 0
};

typedef keen::ecs::PathGridMaterialSettingsArray ecs.PathGridMaterialSettingsArray;

struct ecs.PathNodeRequirements {
    keen::ds::ecs::PathNodeTypeMask requiredTypes; // Offset: 0
    keen::ds::ecs::PathNodeTypeMask forbiddenTypes; // Offset: 2
};

typedef keen::ecs::PathQueryTargetType ecs.PathQueryTargetType;

typedef keen::ecs::PathMoveType ecs.PathMoveType;

typedef keen::ecs::PathMoveTypeMask ecs.PathMoveTypeMask;

typedef keen::ecs::PathQueryCheck ecs.PathQueryCheck;

struct ecs.PathGridDistance {
    keen::uint32 halfMeters; // Offset: 0
};

typedef keen::ecs::PathGridInteractionType ecs.PathGridInteractionType;

struct ecs.PathfindingHeightDifferenceSettings {
    keen::float terrain; // Offset: 0
    keen::float building; // Offset: 4
    keen::float collider; // Offset: 8
};

struct ecs.PathfindingSettings {
    keen::ds::ecs::PathfindingHeightDifferenceSettings maxHeightDifferenceSettings; // Offset: 0
};

typedef keen::ecs::LerpTransformTarget ecs.LerpTransformTarget;

struct ecs.AlignedBox {
    keen::float3 min; // Offset: 0
    keen::float3 max; // Offset: 12
};

typedef keen::enemy01::CombatState enemy01.CombatState;

typedef keen::enemy01::CombatStateMask enemy01.CombatStateMask;

typedef keen::enemy01::State enemy01.State;

typedef keen::enemy01::EnemyClass enemy01.EnemyClass;

typedef keen::enemy01::StateMask enemy01.StateMask;

typedef keen::enemy01::StateUpdateType enemy01.StateUpdateType;

typedef keen::enemy01::StateCondition enemy01.StateCondition;

struct enemy01.EnemyVariable {
};

typedef keen::ObjectReference<keen::ds::enemy01::EnemyVariable> enemy01.EnemyVariableReference;

struct enemy01.AbilityConstrain {
    keen::bool negated; // Offset: 0
};

struct enemy01.DistanceConstrain {
    keen::float32 min; // Offset: 4
    keen::float32 max; // Offset: 8
};

struct enemy01.VerticalDistanceConstraint {
    keen::float32 minDistance; // Offset: 4
    keen::float32 maxDistance; // Offset: 8
};

struct enemy01.HorizontalDistanceConstraint {
    keen::float32 minDistance; // Offset: 4
    keen::float32 maxDistance; // Offset: 8
};

struct enemy01.ClearPathConstrain {
    keen::bool checkSolidColliders; // Offset: 1
    keen::bool checkSteeringColliders; // Offset: 2
};

struct enemy01.CooldownConstrain {
    keen::Time duration; // Offset: 8
};

struct enemy01.StateConstrain {
    keen::ds::enemy01::StateMask states; // Offset: 4
};

struct enemy01.CombatStateConstrain {
    keen::ds::enemy01::CombatStateMask combatStates; // Offset: 4
};

struct enemy01.StateDurationConstrain {
    keen::Time duration; // Offset: 8
};

struct enemy01.CurrentCombatStateDurationConstrain {
    keen::Time duration; // Offset: 8
};

struct enemy01.IsRetaliateAllowedConstrain {
    keen::bool isAllowed; // Offset: 1
};

struct enemy01.IsTargetOfMyTargetConstrain {
    keen::bool isTargetOfMyTarget; // Offset: 1
};

struct enemy01.LastHitReceivedConstrain {
    keen::Time minDuration; // Offset: 8
    keen::Time maxDuration; // Offset: 16
};

struct enemy01.ThreatConstrain {
    keen::float32 minThreat; // Offset: 4
};

struct enemy01.AngleToTargetConstrain {
    keen::float32 minAngle; // Offset: 4
    keen::float32 maxAngle; // Offset: 8
};

struct enemy01.AngleFromSlotToTargetConstraint {
    keen::ds::AttachmentSlot slot; // Offset: 1
    keen::float32 minAngle; // Offset: 4
    keen::float32 maxAngle; // Offset: 8
};

struct enemy01.IsInAttackRangeConstrain {
};

struct enemy01.IsInPhaseConstrain {
    keen::ObjectReference<keen::ds::EnemyPhase> phase; // Offset: 4
    keen::Time minDuration; // Offset: 24
};

struct enemy01.IsLastPhaseConstraint {
    keen::ObjectReference<keen::ds::EnemyPhase> phase; // Offset: 4
};

typedef keen::ecs::HitEventFlagMask ecs.HitEventFlagMask;

struct enemy01.HasBeenHitInCurrentPhaseConstrain {
    keen::ds::ecs::HitEventFlagMask requiredHitEventFlags; // Offset: 4
};

typedef keen::actor::StateMask actor.StateMask;

struct enemy01.CombatTargetStateFlagsConstrain {
    keen::ds::actor::StateMask flags; // Offset: 8
};

struct enemy01.IsAttackSelectedConstrain {
    keen::ds::actor::ActorSequenceReference attackSequence; // Offset: 4
};

struct enemy01.IsAnyAttackSelectedConstraint {
};

struct enemy01.EnemyHealthPercentageConstrain {
    keen::float32 minPercentage; // Offset: 4
    keen::float32 maxPercentage; // Offset: 8
};

struct enemy01.CurrentTargetHealthPercentageConstrain {
    keen::float32 minPercentage; // Offset: 4
    keen::float32 maxPercentage; // Offset: 8
};

struct enemy01.IsPlayerTargetConstrain {
    keen::bool isPlayer; // Offset: 1
};

struct enemy01.TargetActorStatesConstrain {
    keen::ds::actor::StateMask requiredStates; // Offset: 8
    keen::ds::actor::StateMask excludedStates; // Offset: 16
};

struct enemy01.ActorStatesConstrain {
    keen::ds::actor::StateMask requiredStates; // Offset: 8
    keen::ds::actor::StateMask excludedStates; // Offset: 16
};

struct enemy01.HasCombatTargetConstrain {
};

struct enemy01.NeedsToFlee {
};

struct enemy01.RandomChanceConstrain {
    keen::float32 chance; // Offset: 4
};

struct enemy01.IsGroupLeaderConstrain {
};

struct enemy01.IsGroupMemberConstrain {
};

struct enemy01.IsGuardingPlayerConstraint {
};

struct enemy01.IsTargetInHomeZoneConstraint {
};

struct enemy01.TargetDistanceToHomeZoneConstraint {
    keen::float32 minDistance; // Offset: 4
    keen::float32 maxDistance; // Offset: 8
};

struct enemy01.IsTargetReachableConstraint {
};

struct enemy01.IsVariableSetConstraint {
    keen::ds::enemy01::EnemyVariableReference variable; // Offset: 4
};

struct enemy01.Ability {
    keen::ds::actor::ActorSequenceReference actionSequence; // Offset: 0
};

struct enemy01.AbilitySelectionContrains {
};

struct enemy01.AbilityExecutionContrains {
};

struct enemy01.AbilityAbortConstraints {
};

typedef keen::DsArray<keen::DsVariant<keen::ds::enemy01::AbilityConstrain>> enemy01.AbilityConstrains;

typedef keen::enemy01::AttackStyle enemy01.AttackStyle;

typedef keen::enemy01::AttackStyleMask enemy01.AttackStyleMask;

typedef keen::enemy01::AttackFlag enemy01.AttackFlag;

typedef keen::enemy01::AttackFlagMask enemy01.AttackFlagMask;

typedef keen::enemy01::CombatTargetChangeMode enemy01.CombatTargetChangeMode;

typedef keen::enemy01::BlockRotationDuration enemy01.BlockRotationDuration;

struct enemy01.Action {
};

typedef keen::DsVariant<keen::ds::enemy01::Action> enemy01.ActionVariant;

typedef keen::DsArray<keen::ds::enemy01::ActionVariant> enemy01.ActionVariants;

struct enemy01.AttackActions {
};

struct enemy01.AttackConstraints {
};

typedef keen::enemy01::AttackCommandMode enemy01.AttackCommandMode;

struct enemy01.AttackCommandData {
    keen::ds::enemy01::AttackCommandMode mode; // Offset: 0
};

struct enemy01.AttackCommandDescription {
};

struct enemy01.AttackCommand {
    keen::ds::enemy01::AbilityConstrains constraints; // Offset: 8
    keen::ds::enemy01::ActionVariants actions; // Offset: 48
};

typedef keen::DsArray<keen::ds::enemy01::AttackCommand> enemy01.AttackCommandArray;

struct enemy01.AttackCommandContainerDescription {
};

struct enemy01.AttackData {
};

struct enemy01.JumpAttackData {
    keen::float32 distanceFactor; // Offset: 0
    keen::float32 minForce; // Offset: 4
    keen::float32 maxForce; // Offset: 8
    keen::float32 height; // Offset: 12
    keen::float32 forwardMomentum; // Offset: 16
};

struct enemy01.DashAttackData {
    keen::float32 overshootDistance; // Offset: 0
    keen::float32 lookAheadLength; // Offset: 4
    keen::float32 collisionAvoidanceLength; // Offset: 8
    keen::float32 collisionOffset; // Offset: 12
    keen::float32 decelerateDistance; // Offset: 16
    keen::float32 decelerateEnforceDistance; // Offset: 20
};

struct enemy01.TeleportAttackData {
    keen::float32 minDistance; // Offset: 0
    keen::float32 maxDistance; // Offset: 4
    keen::uint32 verticalSearchDistance; // Offset: 8
    keen::bool checkLineOfSight; // Offset: 12
    keen::ds::ecs::PathNodeRequirements targetNodeRequirements; // Offset: 14
    keen::float32 minHorizontalSpace; // Offset: 20
    keen::float32 minVerticalSpace; // Offset: 24
};

typedef keen::DsVariant<keen::ds::enemy01::AttackData> enemy01.AttackDataVariant;

struct enemy01.AttackDataDescription {
};

struct enemy01.AttackDesscription {
    keen::ds::enemy01::AttackStyleMask attackStyle; // Offset: 16
    keen::float32 selectionChance; // Offset: 20
    keen::ds::enemy01::AttackFlagMask flags; // Offset: 24
    keen::float32 threat; // Offset: 28
    keen::float32 minRange; // Offset: 32
    keen::float32 maxRange; // Offset: 36
    keen::float32 maxVerticalRange; // Offset: 40
    keen::ObjectReference<keen::ds::enemy01::AttackCooldownGroupId> cooldownGroupID; // Offset: 44
    keen::float32 speed; // Offset: 60
    keen::float32 acceleration; // Offset: 64
    keen::ds::actor::ActorSequenceReference executionAttackSequence; // Offset: 68
    keen::ds::enemy01::BlockRotationDuration blockRotationDuration; // Offset: 84
    keen::ds::enemy01::CombatTargetChangeMode combatTargetChangeMode; // Offset: 85
};

struct enemy01.AttackDesscriptionResource {
    keen::ds::enemy01::AttackDesscription description; // Offset: 0
    keen::ds::enemy01::AbilityConstrains selectionConstrain; // Offset: 88
    keen::ds::enemy01::AbilityConstrains executionConstrain; // Offset: 128
    keen::ds::enemy01::AbilityConstrains abortConstraints; // Offset: 168
    keen::ds::enemy01::AttackCommandArray commands; // Offset: 208
    keen::ds::enemy01::AttackDataVariant data; // Offset: 248
};

typedef keen::enemy01::BehaviorMode enemy01.BehaviorMode;

struct enemy01.BehaviorExecutionContrains {
};

struct enemy01.BehaviorAbortConstraints {
};

struct enemy01.BehaviorActions {
};

struct enemy01.BehaviorSettings {
    keen::Time checkIntervalMin; // Offset: 0
    keen::Time checkIntervalMax; // Offset: 8
    keen::Time cooldownMin; // Offset: 16
    keen::Time cooldownMax; // Offset: 24
    keen::float32 chance; // Offset: 32
};

struct enemy01.BehaviorDesscription {
    keen::ds::enemy01::BehaviorMode mode; // Offset: 0
    keen::ds::enemy01::BehaviorSettings settings; // Offset: 8
};

struct enemy01.BehaviorDesscriptionResource {
    keen::ds::enemy01::AbilityConstrains executionConstrain; // Offset: 48
    keen::ds::enemy01::AbilityConstrains abortConstraints; // Offset: 88
    keen::ds::enemy01::ActionVariants actions; // Offset: 128
};

typedef keen::ObjectReference<keen::ds::enemy01::BehaviorDesscription> enemy01.BehaviorDescriptionReference;

struct enemy01.BehaviorReferenceDescription {
    keen::ds::enemy01::BehaviorDescriptionReference behavior; // Offset: 0
};

struct enemy01.AttackCooldownGroupId {
};

struct enemy01.AttackCooldownGroup {
    keen::ObjectReference<keen::ds::enemy01::AttackCooldownGroupId> id; // Offset: 0
    keen::Time cooldown; // Offset: 16
};

struct enemy01.BlockRotationSettings {
    keen::Time shortBlockRotationDuration; // Offset: 0
    keen::Time mediumBlockRotationDuration; // Offset: 8
    keen::Time longBlockRotationDuration; // Offset: 16
};

struct enemy01.CombatTurnConditions {
    keen::float32 minSpeed; // Offset: 0
    keen::Time minWalkDuration; // Offset: 8
};

struct enemy01.LeaningSettings {
    keen::ds::enemy01::CombatStateMask combatStates; // Offset: 0
    keen::ds::AttachmentSlot slot; // Offset: 4
};

struct enemy01.CombatJumpMoveSettings {
    keen::bool useJumpMoveIfTargetIsNotReachable; // Offset: 0
    keen::Time minJumpMoveDuration; // Offset: 8
    keen::Time maxJumpMoveDuration; // Offset: 16
    keen::uint8 maxJumpUpHeight; // Offset: 24
    keen::uint8 maxJumpDownHeight; // Offset: 25
};

struct enemy01.AttackMoveSettings {
    keen::bool alwaysLookAtCombatTarget; // Offset: 0
};

struct enemy01.SleepDaytimeSetting {
    keen::float chance; // Offset: 0
    keen::Time minSleepDuration; // Offset: 8
    keen::Time maxSleepDuration; // Offset: 16
};

struct enemy01.SleepSetup {
    keen::ds::enemy01::SleepDaytimeSetting daySettings; // Offset: 0
    keen::ds::enemy01::SleepDaytimeSetting nightSettings; // Offset: 24
    keen::Time minInitialCheckDelay; // Offset: 48
    keen::Time maxInitialCheckDelay; // Offset: 56
    keen::Time minCheckInterval; // Offset: 64
    keen::Time maxCheckInterval; // Offset: 72
    keen::ds::animationgraph::StateIdReference sleepAnimation; // Offset: 80
};

struct enemy01.CombatSetup {
    keen::float32 preferedDistance; // Offset: 0
    keen::float32 preferedDistanceVariation; // Offset: 4
    keen::float32 preferedDistanceEngaged; // Offset: 8
    keen::float32 preferedDistanceEngagedVariation; // Offset: 12
    keen::float32 maxVerticalDistance; // Offset: 16
    keen::float32 maxPlayerTargetDistance; // Offset: 20
    keen::float32 maxNonPlayerTargetDistance; // Offset: 24
    keen::uint8 retaliateCount; // Offset: 28
    keen::DsArray<keen::ds::enemy01::AttackCooldownGroup> cooldownGroups; // Offset: 32
    keen::float32 walkStartDistance; // Offset: 72
    keen::float32 runStartDistance; // Offset: 76
    keen::float32 runEndDistance; // Offset: 80
    keen::float32 combatRotationSpeedFactor; // Offset: 84
    keen::ds::animationgraph::StateIdReference combatIdleAnimation; // Offset: 88
    keen::ds::enemy01::BlockRotationSettings blockRotationSettings; // Offset: 104
    keen::Time minAttackDuration; // Offset: 128
    keen::Time maxAttackDuration; // Offset: 136
    keen::ds::enemy01::CombatTurnConditions turnConditions; // Offset: 144
    keen::ds::enemy01::LeaningSettings leaningSettings; // Offset: 160
    keen::ds::enemy01::CombatJumpMoveSettings jumpMoveSettings; // Offset: 168
    keen::ds::enemy01::AttackMoveSettings attackMoveSettings; // Offset: 200
};

struct enemy01.BlockingSetup {
    keen::ds::actor::ActorSequenceReference blockSequence; // Offset: 0
    keen::Time minBlockDuration; // Offset: 16
    keen::Time maxBlockDuration; // Offset: 24
    keen::Time maxTotalBlockDuration; // Offset: 32
    keen::Time minBlockHitExtendDuration; // Offset: 40
    keen::Time maxBlockHitExtendDuration; // Offset: 48
    keen::float32 blockAfterHitChance; // Offset: 56
    keen::bool activateBlockAtStart; // Offset: 60
    keen::bool autoToggleBlock; // Offset: 61
    keen::float32 autoToggleBlockMaxDistance; // Offset: 64
    keen::bool useBlockWalk; // Offset: 68
    keen::ds::animationgraph::StateIdReference blockWalkAnimation; // Offset: 72
    keen::float32 minBlockProjectileDistance; // Offset: 88
    keen::float32 maxBlockProjectileDistance; // Offset: 92
};

struct enemy01.HomeZoneSetup {
    keen::float32 radius; // Offset: 0
};

struct enemy01.AggroPoolSetup {
    keen::float32 maxValue; // Offset: 0
};

struct enemy01.AggroPools {
    keen::ds::enemy01::AggroPoolSetup senses; // Offset: 0
    keen::ds::enemy01::AggroPoolSetup friends; // Offset: 4
    keen::ds::enemy01::AggroPoolSetup enemies; // Offset: 8
};

struct enemy01.AggroSetup {
    keen::float32 viewRange; // Offset: 0
    keen::float32 nightViewRangeFactor; // Offset: 4
    keen::float32 viewConeHalfAngle; // Offset: 8
    keen::float32 aggroFromAttack; // Offset: 12
    keen::float32 aggroInRange; // Offset: 16
    keen::float32 aggroLossOutOfSight; // Offset: 20
    keen::float32 aggroLossUnreachable; // Offset: 24
    keen::float32 aggroDiminishSpeed; // Offset: 28
    keen::float32 noticedAggro; // Offset: 32
    keen::float32 initialAggro; // Offset: 36
    keen::float32 alarmedAggroThreshold; // Offset: 40
    keen::float32 aggroRange; // Offset: 44
    keen::float32 aggroRangeWhileMoving; // Offset: 48
    keen::bool checkPathToTarget; // Offset: 52
    keen::bool checkLineOfSight; // Offset: 53
    keen::ds::enemy01::AggroPools pools; // Offset: 56
    keen::bool preferCloserTargets; // Offset: 68
    keen::float32 preferCloserTargetsDistanceThreshold; // Offset: 72
    keen::bool preferShortestPath; // Offset: 76
    keen::float32 preferShortestPathDistanceThreshold; // Offset: 80
    keen::bool preferTargetsWithLessAttackers; // Offset: 84
};

struct enemy01.CallForHelpSetup {
    keen::float32 chance; // Offset: 0
    keen::float32 minRange; // Offset: 4
    keen::float32 radius; // Offset: 8
};

struct enemy01.RoamingSetup {
    keen::Time minInitialStartDuration; // Offset: 0
    keen::Time maxInitialStartDuration; // Offset: 8
    keen::Time minStartDuration; // Offset: 16
    keen::Time maxStartDuration; // Offset: 24
    keen::float32 minRadius; // Offset: 32
    keen::float32 maxRadius; // Offset: 36
    keen::float32 maxAngle; // Offset: 40
    keen::float32 maxHomeZoneDistance; // Offset: 44
    keen::bool loop; // Offset: 48
    keen::float32 minLoopUpdateDistance; // Offset: 52
    keen::ds::ecs::PathNodeRequirements targetNodeRequirements; // Offset: 56
};

struct enemy01.FleeSetup {
    keen::float32 minFleeRadius; // Offset: 0
    keen::float32 maxFleeRadius; // Offset: 4
    keen::ds::animationgraph::StateIdReference fleeAnimation; // Offset: 8
    keen::Time maxFleeDuration; // Offset: 24
};

struct enemy01.NoiseListenerSetup {
    keen::ds::actor::ActorSequenceReference reactToNoiseSequence; // Offset: 0
    keen::float32 listenRangeFactor; // Offset: 16
    keen::float32 listenRangeFactorWhileSleeping; // Offset: 20
};

struct enemy01.SteeringSetup {
    keen::float32 defaultSteeringWeight; // Offset: 0
    keen::float32 roamingSteeringWeight; // Offset: 4
    keen::float32 closeCombatSteeringWeight; // Offset: 8
    keen::float32 farCombatSteeringWeight; // Offset: 12
};

struct enemy01.ProwlSetup {
    keen::float32 minProwlDistance; // Offset: 0
    keen::float32 maxProwlDistance; // Offset: 4
    keen::float32 maxHeightDifference; // Offset: 8
    keen::Time minProwlDuration; // Offset: 16
    keen::Time maxProwlDuration; // Offset: 24
    keen::Time minProwlCooldown; // Offset: 32
    keen::Time maxProwlCooldown; // Offset: 40
    keen::bool checkClearPath; // Offset: 48
};

struct enemy01.ParrySetup {
    keen::ds::actor::ActorSequenceReference parriedSequence; // Offset: 0
    keen::ds::actor::ActorSequenceReference parriedStunSequence; // Offset: 16
    keen::ds::actor::ActorSequenceReference parriedStunLongDurationSequence; // Offset: 32
    keen::float32 addedThreatAfterParry; // Offset: 48
};

typedef keen::ecs::LocomotionSpeedSelector ecs.LocomotionSpeedSelector;

struct enemy01.MovementSetup {
    keen::float32 maxMovementAngleDefault; // Offset: 0
    keen::float32 maxMovementAngleProwl; // Offset: 4
    keen::float32 maxMovementAngleCombat; // Offset: 8
    keen::float32 maxMovementAngleCombatWithoutRoation; // Offset: 12
    keen::float32 maxMovementAngleRoaming; // Offset: 16
    keen::ds::ecs::LocomotionSpeedSelector returnHomeSpeed; // Offset: 20
};

struct enemy01.GuardSetup {
    keen::float32 startDistance; // Offset: 0
    keen::float32 targetDistance; // Offset: 4
    keen::bool guardParent; // Offset: 8
    keen::bool canGuardPlayer; // Offset: 9
};

struct enemy01.PatrolSetup {
    keen::Time initialStartTimeMin; // Offset: 0
    keen::Time initialStartTimeMax; // Offset: 8
    keen::Time patrolStartMin; // Offset: 16
    keen::Time patrolStartMax; // Offset: 24
    keen::Time patrolPauseMin; // Offset: 32
    keen::Time patrolPauseMax; // Offset: 40
    keen::float startTurnDistamce; // Offset: 48
    keen::ds::animationgraph::StateIdReference patrolAnimation; // Offset: 52
};

struct enemy01.InteractionSetup {
    keen::Time interactionPauseMin; // Offset: 0
    keen::Time interactionPauseMax; // Offset: 8
};

struct enemy01.TauntSetup {
    keen::ds::actor::ActorSequenceReference tauntSequence; // Offset: 0
    keen::float32 tauntChance; // Offset: 16
    keen::Time cooldown; // Offset: 24
};

struct actor.TurnSetup {
    keen::ds::actor::ActorSequenceReference turnLeftSmallSequence; // Offset: 0
    keen::ds::actor::ActorSequenceReference turnLeftBigSequence; // Offset: 16
    keen::ds::actor::ActorSequenceReference turnRightSmallSequence; // Offset: 32
    keen::ds::actor::ActorSequenceReference turnRightBigSequence; // Offset: 48
    keen::float32 minSmallTurnAngle; // Offset: 64
    keen::float32 minBigTurnAngle; // Offset: 68
};

struct enemy01.TurnSetup {
    keen::float32 minIdleTurnAngle; // Offset: 72
    keen::Time minIdleTurnCooldown; // Offset: 80
    keen::Time maxIdleTurnCooldown; // Offset: 88
    keen::float32 minDistance; // Offset: 96
    keen::ds::AttachmentSlot slot; // Offset: 100
};

struct enemy01.SearchForCoverSetup {
    keen::uint8 minCoverDistance; // Offset: 0
    keen::uint8 maxCoverDistance; // Offset: 1
    keen::Time minCoverDuration; // Offset: 8
    keen::Time maxCoverDuration; // Offset: 16
    keen::Time minCoverCooldown; // Offset: 24
    keen::Time maxCoverCooldown; // Offset: 32
};

struct enemy01.RunAroundSetup {
    keen::Time minDuration; // Offset: 0
    keen::Time maxDuration; // Offset: 8
    keen::float32 minRadius; // Offset: 16
    keen::float32 maxRadius; // Offset: 20
};

struct enemy01.PathNodeSetup {
    keen::ds::ecs::PathNodeCostFactors defaultCostFactors; // Offset: 0
    keen::ds::ecs::PathNodeCostFactors roamingCostFactors; // Offset: 52
};

typedef keen::enemy01::CirclingDirection enemy01.CirclingDirection;

struct enemy01.CirclingSetup {
    keen::float initialRadius; // Offset: 0
    keen::float initialHeightOffset; // Offset: 4
    keen::bool useOuterCircleAsCombatPosition; // Offset: 8
    keen::ds::enemy01::CirclingDirection initialDirection; // Offset: 9
    keen::bool changeDirection; // Offset: 10
    keen::Time minDirectionChangeDuration; // Offset: 16
    keen::Time maxDirectionChangeDuration; // Offset: 24
};

typedef keen::ObjectReference<keen::ds::enemy01::CombatSetup> enemy01.CombatSetupReference;

typedef keen::enemy01::LookAtMovementTargetState enemy01.LookAtMovementTargetState;

typedef keen::enemy01::UnreachableJumpMoveState enemy01.UnreachableJumpMoveState;

struct enemy01.EnemyVariableStateEntry {
    keen::ds::enemy01::EnemyVariableReference variable; // Offset: 0
    keen::bool state; // Offset: 16
};

struct enemy01.EnemyVariableStates {
    keen::StaticArray<keen::ds::enemy01::EnemyVariableStateEntry,4> states; // Offset: 0
};

typedef keen::impact::HitReactionType impact.HitReactionType;

struct enemy01.CombatData {
    keen::uint8 selectedAttackIndex; // Offset: 0
    keen::uint8 lastAttackIndex; // Offset: 1
    keen::float3 toTarget; // Offset: 4
    keen::float2 horizontalKeepDistanceDirection; // Offset: 16
    keen::HashKey32 threatPoolId; // Offset: 24
    keen::Time lastChangeEvaluation; // Offset: 32
    keen::Time stateChangeTime; // Offset: 40
    keen::Time stateMinTime; // Offset: 48
    keen::Time stateMaxTime; // Offset: 56
    keen::Time lastAttackTime; // Offset: 64
    keen::Time lastHitReceived; // Offset: 72
    keen::ds::impact::HitReactionType lastHitReactionType; // Offset: 80
    keen::ds::ecs::HitEventFlagMask lastHitEventFlags; // Offset: 84
    keen::Time targetEnteredPrivateSpace; // Offset: 88
    keen::Time prowlAngleChange; // Offset: 96
    keen::float32 selectedPreferedDistance; // Offset: 104
    keen::float32 preferedDistanceMin; // Offset: 108
    keen::float32 preferedDistanceMax; // Offset: 112
    keen::float32 prowlAngle; // Offset: 116
    keen::float32 distanceToTarget; // Offset: 120
    keen::ds::enemy01::CombatState state; // Offset: 124
    keen::bool targetOfMyTarget; // Offset: 125
    keen::uint8 hitsReceivedWhileBlocking; // Offset: 126
    keen::Time lastBlockChanceEvaluationTime; // Offset: 128
    keen::bool shouldBlockLastHit; // Offset: 136
    keen::StaticArray<keen::uint8,16> attackExecutionCount; // Offset: 137
    keen::StaticArray<keen::Time,8> nextAllowedAttackGroupTime; // Offset: 160
    keen::float3 closestReachableTargetPosition; // Offset: 224
    keen::Time nextReachablePositionUpdateTime; // Offset: 240
    keen::bool isTargetReachable; // Offset: 248
    keen::bool isTargetInsideLeash; // Offset: 249
    keen::ds::ecs::EntityId lastTargetId; // Offset: 252
    keen::uint8 commandIndex; // Offset: 256
    keen::uint8 actionIndex; // Offset: 257
    keen::Time lastActionStartTime; // Offset: 264
    keen::Time lastAttackAbortCheckTime; // Offset: 272
    keen::Time nextAllowedProwlTime; // Offset: 280
    keen::Time nextAllowedSearchForCoverTime; // Offset: 288
    keen::Time nextSearchForCoverChangeDistanceTime; // Offset: 296
    keen::uint8 currentSearchForCoverDistance; // Offset: 304
    keen::ds::enemy01::LookAtMovementTargetState lookAtMovementTargetState; // Offset: 305
    keen::Time unreachableJumpMoveStartTime; // Offset: 312
    keen::Time unreachableJumpMoveEndTime; // Offset: 320
    keen::ds::enemy01::UnreachableJumpMoveState unreachableJumpMoveState; // Offset: 328
};

typedef keen::enemy01::CirclingState enemy01.CirclingState;

struct enemy01.CirclingData {
    keen::ds::enemy01::CirclingState state; // Offset: 0
    keen::Angle targetAngle; // Offset: 4
    keen::WorldPosition centerPosition; // Offset: 8
    keen::float radius; // Offset: 32
    keen::ds::enemy01::CirclingDirection direction; // Offset: 36
    keen::Time nextDirectionChangeTime; // Offset: 40
    keen::float centerHeightOffset; // Offset: 48
};

typedef keen::enemy01::EnemyMarkerType enemy01.EnemyMarkerType;

typedef keen::enemy01::EnemyMarkerTypeMask enemy01.EnemyMarkerTypeMask;

struct enemy01.SetCombatStateAction {
    keen::ds::enemy01::CombatState state; // Offset: 0
    keen::Time minTime; // Offset: 8
    keen::Time maxTime; // Offset: 16
};

struct enemy01.SetPhaseAction {
    keen::ObjectReference<keen::ds::EnemyPhase> newPhase; // Offset: 0
};

struct enemy01.SwitchToLastPhaseAction {
};

struct enemy01.SelectAttackAction {
    keen::ds::enemy01::AttackStyle attackStyle; // Offset: 0
};

struct enemy01.GetStunnedAction {
};

struct enemy01.SetImmuneAction {
    keen::bool immune; // Offset: 0
};

typedef keen::ObjectReference<keen::ds::Signal> SignalReference;

struct enemy01.SendToggleEventAction {
    keen::ds::SignalReference triggerId; // Offset: 0
    keen::bool state; // Offset: 16
};

struct enemy01.TriggerStateConditionAction {
    keen::ds::enemy01::StateCondition condition; // Offset: 0
};

struct enemy01.RunAwayAction {
    keen::float32 minDistance; // Offset: 0
    keen::float32 maxDistance; // Offset: 4
};

struct enemy01.MoveForwardAction {
    keen::float32 minDistance; // Offset: 0
    keen::float32 maxDistance; // Offset: 4
    keen::ds::ecs::LocomotionSpeedSelector speed; // Offset: 8
};

struct enemy01.PauseAction {
    keen::float32 minDuration; // Offset: 0
    keen::float32 maxDuration; // Offset: 4
    keen::bool lookAtCombatTarget; // Offset: 8
};

struct enemy01.SetIdleAnimationAction {
    keen::ds::animationgraph::StateIdReference animation; // Offset: 0
};

struct enemy01.SetWalkAnimationAction {
    keen::ds::animationgraph::StateIdReference animation; // Offset: 0
};

struct enemy01.SetMovementSpeedAction {
    keen::ds::ecs::LocomotionSpeedSelector movementType; // Offset: 0
    keen::float32 speed; // Offset: 4
};

struct enemy01.PlayActionSequenceAction {
    keen::ds::actor::ActorSequenceReference sequence; // Offset: 0
    keen::bool waitUntilFinished; // Offset: 16
};

struct enemy01.ChangeSlopeAlignmentAction {
    keen::float32 longitudinalFactor; // Offset: 0
    keen::float32 lateralFactor; // Offset: 4
};

struct enemy01.StartFlyingAction {
};

struct enemy01.EnterFlyingStateAction {
};

struct enemy01.StopFlyingAction {
};

struct enemy01.ToggleAllowFallDownAction {
    keen::bool allowFallDown; // Offset: 0
};

struct enemy01.GuardParentAction {
};

struct enemy01.GuardGroupLeaderAction {
};

struct enemy01.StopGuardAction {
};

struct enemy01.EnableFeatureAction {
    keen::ds::ecs::EnemyFeature feature; // Offset: 0
};

struct enemy01.DisableFeatureAction {
    keen::ds::ecs::EnemyFeature feature; // Offset: 0
};

struct enemy01.SetFleeRadiusAction {
    keen::float32 fleeRadius; // Offset: 0
};

struct enemy01.SelectFriendAction {
    keen::float32 minHealthPercentage; // Offset: 0
    keen::float32 maxHealthPercentage; // Offset: 4
    keen::float32 minDistance; // Offset: 8
    keen::float32 maxDistance; // Offset: 12
};

struct enemy01.SelectEnemyAction {
    keen::float32 minHealthPercentage; // Offset: 0
    keen::float32 maxHealthPercentage; // Offset: 4
    keen::float32 minDistance; // Offset: 8
    keen::float32 maxDistance; // Offset: 12
};

struct enemy01.MoveToTargetAction {
    keen::float32 targetDistance; // Offset: 0
    keen::ds::ecs::TargetType targetType; // Offset: 4
    keen::ds::ecs::LocomotionSpeedSelector speed; // Offset: 5
};

typedef keen::actor::StateFlag actor.StateFlag;

struct enemy01.WaitUntilActorStateIsFinished {
    keen::ds::actor::StateFlag state; // Offset: 0
};

struct enemy01.WaitUntilSequenceIsFinished {
};

struct enemy01.SetWorldColliderYOffsetAction {
    keen::float32 yOffset; // Offset: 0
};

struct enemy01.ToggleBlockAction {
    keen::bool shouldBlock; // Offset: 0
};

struct enemy01.ToggleVerticalLeaningAction {
    keen::bool shouldUseVerticalLeaning; // Offset: 0
};

struct enemy01.SetVariableAction {
    keen::ds::enemy01::EnemyVariableReference variable; // Offset: 0
    keen::bool state; // Offset: 16
};

struct enemy01.ClearVariableAction {
    keen::ds::enemy01::EnemyVariableReference variable; // Offset: 0
};

struct enemy01.SetCirclingRadiusAction {
    keen::float radius; // Offset: 0
};

struct enemy01.SetCirclingHeightOffsetAction {
    keen::float heightOffset; // Offset: 0
};

struct enemy01.MoveToCirclingTargetAction {
    keen::ds::ecs::LocomotionSpeedSelector speed; // Offset: 0
    keen::float32 maxArriveDistance; // Offset: 4
    keen::bool keepCurrentDirection; // Offset: 8
};

struct enemy01.TurnToCirclingTargetAction {
};

struct enemy01.StoreCurrentCirclingTargetAngleAction {
};

struct enemy01.StoreCirclingPositionAsTargetAction {
    keen::ds::ecs::TargetType target; // Offset: 0
    keen::float radius; // Offset: 4
    keen::Angle angleOffset; // Offset: 8
};

typedef keen::ObjectReference<keen::ds::enemy01::AttackDesscriptionResource> ecs.AttackReference;

typedef keen::ObjectReference<keen::ds::enemy01::AttackDesscription> ecs.AttackDescriptionReference;

struct ecs.AttackReferenceDescription {
    keen::ds::ecs::AttackDescriptionReference attack; // Offset: 0
};

struct ecs.EnemyArsenal {
};

typedef keen::ecs::HitReactionTypeMask ecs.HitReactionTypeMask;

struct ecs.Enemy01BehaviorState {
    keen::ds::enemy01::CombatSetup combatSetup; // Offset: 0
    keen::ds::enemy01::HomeZoneSetup homeZoneSetup; // Offset: 208
    keen::ds::enemy01::AggroSetup aggroSetup; // Offset: 212
    keen::ds::enemy01::CallForHelpSetup callForHelpSetup; // Offset: 300
    keen::ds::enemy01::RoamingSetup roamingSetup; // Offset: 312
    keen::ds::enemy01::FleeSetup fleeSetup; // Offset: 376
    keen::ds::enemy01::BlockingSetup blockingSetup; // Offset: 408
    keen::ds::enemy01::NoiseListenerSetup noiseListenerSetup; // Offset: 504
    keen::ds::enemy01::SteeringSetup steeringSetup; // Offset: 528
    keen::ds::enemy01::ProwlSetup prowlSetup; // Offset: 544
    keen::ds::enemy01::ParrySetup parrySetup; // Offset: 600
    keen::ds::enemy01::MovementSetup movementSetup; // Offset: 652
    keen::ds::enemy01::GuardSetup guardSetup; // Offset: 676
    keen::ds::enemy01::InteractionSetup interactionSetup; // Offset: 688
    keen::ds::enemy01::PatrolSetup patrolSetup; // Offset: 704
    keen::ds::enemy01::TauntSetup tauntSetup; // Offset: 776
    keen::ds::enemy01::TurnSetup turnSetup; // Offset: 808
    keen::ds::enemy01::SearchForCoverSetup searchForCoverSetup; // Offset: 912
    keen::ds::enemy01::SleepSetup sleepSetup; // Offset: 952
    keen::ds::enemy01::RunAroundSetup runAroundSetup; // Offset: 1048
    keen::ds::enemy01::PathNodeSetup pathNodeSetup; // Offset: 1072
    keen::ds::enemy01::CirclingSetup circlingSetup; // Offset: 1176
    keen::ds::actor::ActorSequenceReference callForHelpSequence; // Offset: 1208
    keen::ds::actor::ActorSequenceReference spawnSequence; // Offset: 1224
    keen::ds::enemy01::EnemyClass enemyClass; // Offset: 1240
    keen::ds::ecs::EnemyFeatureMask enabledFeatures; // Offset: 1244
    keen::float32 threatFactor; // Offset: 1248
    keen::ds::SignalReference deathSignal; // Offset: 1252
    keen::float32 pushBackScale; // Offset: 1268
    keen::ds::ecs::HitReactionTypeMask disabledHitReactions; // Offset: 1272
    keen::float32 maxHeightDiff; // Offset: 1276
};

struct ecs.FlyingEnemy {
    keen::float32 minRoamingHeight; // Offset: 0
    keen::float32 maxRoamingHeight; // Offset: 4
    keen::float32 minFlyHeight; // Offset: 8
    keen::float32 maxFlyHeight; // Offset: 12
    keen::float32 landingHeight; // Offset: 16
    keen::float32 attackHeightOffset; // Offset: 20
    keen::float32 combatIdleHeightOffset; // Offset: 24
    keen::float32 defaultArriveDistance; // Offset: 28
    keen::float32 attackArriveDistance; // Offset: 32
    keen::bool attackWhileGrounded; // Offset: 36
    keen::ds::animationgraph::StateIdReference idleAnimation; // Offset: 40
};

struct ecs.DynamicEnemy01BehaviorState {
    keen::ds::enemy01::State state; // Offset: 0
    keen::Time stateChangeTime; // Offset: 8
    keen::float3 homeZonePosition; // Offset: 16
    keen::bool movementTargetIsValid; // Offset: 28
    keen::float3 movementTarget; // Offset: 32
    keen::float3 movementStartPosition; // Offset: 44
    keen::Time movementStartTime; // Offset: 56
    keen::ds::enemy01::CombatData combatData; // Offset: 64
    keen::ds::enemy01::CirclingData circlingData; // Offset: 400
    keen::ds::enemy01::EnemyVariableStates variableStates; // Offset: 456
    keen::Time nextAllowedRoamingTime; // Offset: 536
    keen::uint16 targetCounter; // Offset: 544
    keen::Time lastBehaviorCheckTime; // Offset: 552
    keen::Time lastBehaviorExecutionTime; // Offset: 560
    keen::StaticArray<keen::Time,32> nextBehaviorCheckTime; // Offset: 568
    keen::uint8 currentBehaviorIndex; // Offset: 824
    keen::uint8 currentBehaviorActionIndex; // Offset: 825
    keen::ds::ecs::QueryId callForHelpQueryId; // Offset: 828
    keen::ds::ecs::EntityId callForHelpTargetEntityId; // Offset: 832
    keen::Time lastHelpTime; // Offset: 840
    keen::Time returnHomeStartTime; // Offset: 848
    keen::ds::enemy01::StateMask executedStates; // Offset: 856
    keen::ds::ecs::QueryId dashQueryId; // Offset: 860
    keen::ds::ecs::EntityId noiseEntityId; // Offset: 864
    keen::ds::ecs::EntityId projectileEntityId; // Offset: 868
    keen::uint8 controlledByAttacks; // Offset: 872
    keen::Time nextAllowedCombatIdleRotationTime; // Offset: 880
    keen::bool teleportPositionFound; // Offset: 888
    keen::ds::animationgraph::StateIdHash currentIdleAnimation; // Offset: 892
    keen::ds::animationgraph::StateIdHash currentWalkAnimation; // Offset: 896
    keen::float32 currentLongitudinalSlopeAlignmentFactor; // Offset: 900
    keen::float32 currentLateralSlopeAlignmentFactor; // Offset: 904
    keen::ds::ecs::EntityId guardEntityId; // Offset: 908
    keen::float32 currentGuardTargetDistance; // Offset: 912
    keen::ds::ecs::EntityId currentMarkerId; // Offset: 916
    keen::Time nextAllowedInteractionTime; // Offset: 920
    keen::Time nextAllowedPatrolTime; // Offset: 928
    keen::Time nextCheckGuardTime; // Offset: 936
    keen::Time nextCheckTauntTime; // Offset: 944
    keen::Time nextAllowedCombatIdleTurnTime; // Offset: 952
    keen::bool enabled; // Offset: 960
    keen::float3 lastNoisePosition; // Offset: 964
    keen::bool shouldBlock; // Offset: 976
    keen::bool isWalkBlockActive; // Offset: 977
    keen::bool isAttackMove; // Offset: 978
    keen::bool isVerticalLeaningActive; // Offset: 979
    keen::ds::ecs::EnemyFeatureMask enabledFeatures; // Offset: 980
    keen::ds::ecs::EnemyFeatureMask disabledFeatures; // Offset: 984
    keen::Time nextSleepCheckTime; // Offset: 992
    keen::Time sleepEndTime; // Offset: 1000
    keen::ds::ecs::EntityId parriedByEntity; // Offset: 1008
};

typedef keen::ecs::UnitMode ecs.UnitMode;

struct ecs.UnitTransformer {
    keen::ds::ecs::UnitMode mode; // Offset: 0
};

struct ecs.PlayerCountScaling {
    keen::bool scaleHealth; // Offset: 0
    keen::bool scaleDamage; // Offset: 1
    keen::bool scaleStamina; // Offset: 2
    keen::float32 healthScaling; // Offset: 4
    keen::float32 damageScaling; // Offset: 8
    keen::float32 staminaScaling; // Offset: 12
    keen::bool allowDownScaling; // Offset: 16
    keen::uint8 minPlayerCount; // Offset: 17
};

struct ecs.EnemyLevelScaling {
    keen::float32 healthScaleFactor; // Offset: 0
    keen::float32 staminaScaleFactor; // Offset: 4
};

struct ecs.EnemyScaling {
    keen::Time updateInterval; // Offset: 0
    keen::ds::ecs::PlayerCountScaling playerCountScaling; // Offset: 8
    keen::ds::ecs::EnemyLevelScaling enemyLevelScaling; // Offset: 28
};

struct ecs.DynamicEnemyScaling {
    keen::Time nextUpdateTime; // Offset: 0
    keen::uint32 lastTargets; // Offset: 8
    keen::uint32 lastLevel; // Offset: 12
    keen::float32 lastDamageMultiplier; // Offset: 16
    keen::sint32 initialBaseMaxHealth; // Offset: 20
    keen::sint32 initialBaseStrength; // Offset: 24
    keen::sint32 initialBaseDexterity; // Offset: 28
    keen::sint32 initialBaseIntelligence; // Offset: 32
};

struct ecs.EnemyMarkerEntry {
    keen::float3 position; // Offset: 0
    keen::ds::ecs::EntityId entityId; // Offset: 12
    keen::ds::enemy01::EnemyMarkerType markerType; // Offset: 16
};

struct ecs.EnemyMarkerCheck {
    keen::float32 checkDistance; // Offset: 0
    keen::ds::ecs::RangeQueryId queryId; // Offset: 4
    keen::Time nextCheckTime; // Offset: 8
    keen::StaticArray<keen::ds::ecs::EnemyMarkerEntry,8> markers; // Offset: 16
};

struct ecs.EnemyMarker {
    keen::ds::enemy01::EnemyMarkerType markerType; // Offset: 0
    keen::ds::actor::ActorSequenceReference defaultInteractSequence; // Offset: 4
    keen::bool useTargetOffset; // Offset: 20
    keen::ds::ecs::Offset targetOffset; // Offset: 24
    keen::float32 arriveDistance; // Offset: 64
    keen::float32 alarmRange; // Offset: 68
    keen::bool usePatrolPointDirection; // Offset: 72
    keen::bool attackTargets; // Offset: 73
    keen::uint8 maxUsers; // Offset: 74
    keen::uint8 minHorizontalSpace; // Offset: 75
    keen::uint8 minTargetHorizontalSpace; // Offset: 76
};

struct ecs.LastEnemyValue {
    keen::float32 lastEnemyValue; // Offset: 0
};

struct ecs.DynamicEnemyMarker {
    keen::uint8 users; // Offset: 0
};

struct ecs.EnemyArsenalReference {
    keen::ObjectReference<keen::ds::ecs::EnemyArsenal> arsenal; // Offset: 0
};

struct ecs.EnemyAttackAttachment {
    keen::ds::actor::ActorSequenceReference initialSequence; // Offset: 0
};

typedef keen::ecs::EnemyAttackAttachmentState ecs.EnemyAttackAttachmentState;

struct ecs.DynamicEnemyAttackAttachment {
    keen::ds::ecs::EnemyAttackAttachmentState state; // Offset: 0
};

struct enemy.EnemyArsenal {
    keen::DsArray<keen::ds::enemy01::AttackDesscriptionResource> attacks; // Offset: 0
    keen::DsArray<keen::ds::enemy01::BehaviorDesscriptionResource> behaviors; // Offset: 40
};

struct enemy.EnemyArsenalResource {
    keen::Guid guid; // Offset: 0
    keen::DsArray<keen::ds::enemy01::AttackDesscriptionResource> attacks; // Offset: 16
    keen::DsArray<keen::ds::enemy01::BehaviorDesscriptionResource> behaviors; // Offset: 56
};

struct enemy.EnemyArsenalSubDirectory {
};

struct enemy.EnemyArsenalDirectory {
};

struct enemy.EnemyArsenalRegistryResource {
    keen::DsArray<keen::ds::enemy::EnemyArsenalResource> arsenals; // Offset: 0
};

struct enemy01_debug.KillEnemyMessage {
    keen::ds::ecs::EntityId enemyId; // Offset: 0
};

struct enemy01_debug.EnforceEnemyAttackMessage {
    keen::ds::ecs::EntityId enemyId; // Offset: 0
    keen::uint8 attackIndex; // Offset: 4
};

struct enemy01_debug.ToggleDisableEnemyAttackMessage {
    keen::ds::ecs::EntityId enemyId; // Offset: 0
    keen::uint8 attackIndex; // Offset: 4
    keen::bool disabled; // Offset: 5
};

struct enemy01_debug.SetTameStateMessage {
    keen::ds::ecs::EntityId enemyId; // Offset: 0
    keen::bool tamed; // Offset: 4
};

struct enemy01_debug.SetFrozenStateMessage {
    keen::ds::ecs::EntityId enemyId; // Offset: 0
    keen::bool frozen; // Offset: 4
};

struct enemy01_debug.DebugAnimationGraphMessage {
    keen::ds::ecs::EntityId enemyId; // Offset: 0
};

struct enemy01_debug.SetStateMessage {
    keen::ds::ecs::EntityId enemyId; // Offset: 0
    keen::ds::enemy01::State state; // Offset: 4
};

struct enemy01_debug.EnforcePhaseMessage {
    keen::ds::ecs::EntityId enemyId; // Offset: 0
    keen::Guid phaseId; // Offset: 4
};

struct enemy01.DebugAttackState {
    keen::StaticArray<keen::bool,8> constraintStates; // Offset: 0
    keen::bool isValid; // Offset: 8
};

struct enemy01.DebugBehaviorState {
    keen::StaticArray<keen::bool,8> constraintStates; // Offset: 0
    keen::bool isValid; // Offset: 8
    keen::uint32 executionCount; // Offset: 12
};

struct enemy01.StateEntry {
    keen::ds::enemy01::State state; // Offset: 0
    keen::Time time; // Offset: 8
};

struct enemy01.CombatStateEntry {
    keen::ds::enemy01::CombatState state; // Offset: 0
    keen::Time time; // Offset: 8
};

struct ecs.EnemyDebug {
    keen::uint8 enforcedAttackIndex; // Offset: 0
    keen::StaticArray<keen::uint64,1> disabledAttacks; // Offset: 8
    keen::bool tamed; // Offset: 16
    keen::bool frozen; // Offset: 17
    keen::StaticArray<keen::ds::enemy01::DebugAttackState,16> attackStates; // Offset: 18
    keen::StaticArray<keen::ds::enemy01::DebugBehaviorState,32> behaviorStates; // Offset: 164
    keen::StaticArray<keen::ds::enemy01::StateEntry,8> stateHistory; // Offset: 680
    keen::StaticArray<keen::ds::enemy01::CombatStateEntry,8> combatStateHistory; // Offset: 808
    keen::ds::enemy01::State nextState; // Offset: 936
    keen::Guid enforcedPhase; // Offset: 940
};

typedef keen::ecs::EnemyTest ecs.EnemyTest;

typedef keen::ecs::EnemyTestFlags ecs.EnemyTestFlags;

struct ecs.EnemyPatrolTest {
    keen::bool hasReachedPatrolPoint0; // Offset: 0
    keen::bool hasReachedPatrolPoint1; // Offset: 1
};

struct ecs.EnemyTestToggle {
    keen::ds::ecs::EnemyTestFlags tests; // Offset: 0
};

struct ecs.UnitGroup {
    keen::StaticArray<keen::ds::ecs::EntityId,24> members; // Offset: 0
    keen::Time nextUpdateTime; // Offset: 96
};

struct ecs.UnitGroupMember {
    keen::ds::ecs::EntityId groupId; // Offset: 0
    keen::ds::ecs::EntityId groupLeaderId; // Offset: 4
    keen::uint8 memberIndex; // Offset: 8
};

typedef keen::wildlife::State wildlife.State;

typedef keen::wildlife::StateCondition wildlife.StateCondition;

typedef keen::wildlife::Feature wildlife.Feature;

typedef keen::wildlife::FeatureMask wildlife.FeatureMask;

struct wildlife.MovementSetup {
    keen::float32 maxMovementAngleDefault; // Offset: 0
    keen::float32 maxMovementAngleFlee; // Offset: 4
    keen::float32 maxMovementAngleRoaming; // Offset: 8
    keen::float32 maxMovementAngleLanding; // Offset: 12
};

struct wildlife.GlidingSetup {
    keen::float32 minGlidingDistance; // Offset: 0
    keen::float32 maxGlidingDistance; // Offset: 4
};

struct wildlife.PathNodeSetup {
    keen::ds::ecs::PathNodeCostFactors defaultCostFactors; // Offset: 0
    keen::ds::ecs::PathNodeCostFactors roamingCostFactors; // Offset: 52
};

struct wildlife.TamingSetup {
    keen::ds::ecs::TemplateReference favoriteFood; // Offset: 0
    keen::uint8 necessaryTamingSteps; // Offset: 16
    keen::float32 foodBaitSensorRange; // Offset: 20
    keen::float32 foodBaitAngleCheckMinDistance; // Offset: 24
    keen::Time foodBaitEatMaxDuration; // Offset: 32
    keen::Time alertDurationHigh; // Offset: 40
    keen::Time alertDurationMediumFoodEat; // Offset: 48
    keen::float32 foodBaitEatAdaptFleeRadiusDistance; // Offset: 56
    keen::float32 tamingApproachFinishedFleeRadius; // Offset: 60
    keen::float32 foodBaitEatSnoutPivotDistance; // Offset: 64
};

struct ecs.WildlifeTurnSetup {
    keen::bool useTurnSequences; // Offset: 72
};

struct ecs.Wildlife {
    keen::ds::actor::ActorSequenceReference spawnSequence; // Offset: 0
    keen::ds::animationgraph::StateIdReference idleAnimation; // Offset: 16
    keen::Time minIdleDuration; // Offset: 32
    keen::Time maxIdleDuration; // Offset: 40
    keen::float32 minRoamingRadius; // Offset: 48
    keen::float32 maxRoamingRadius; // Offset: 52
    keen::float32 minFleeRadius; // Offset: 56
    keen::float32 maxFleeRadius; // Offset: 60
    keen::float32 fallbackFleeRadius; // Offset: 64
    keen::float32 maxMovementRadius; // Offset: 68
    keen::ds::animationgraph::StateIdReference secureIdleAnimation; // Offset: 72
    keen::Time minFeelSecureDuration; // Offset: 88
    keen::Time maxFeelSecureDuration; // Offset: 96
    keen::float32 callForHelpChance; // Offset: 104
    keen::ds::actor::ActorSequenceReference callForHelpSequence; // Offset: 108
    keen::float32 listenRangeFactor; // Offset: 124
    keen::ds::wildlife::FeatureMask enabledFeatures; // Offset: 128
    keen::ds::wildlife::MovementSetup movementSetup; // Offset: 132
    keen::ds::wildlife::GlidingSetup glidingSetup; // Offset: 148
    keen::ds::ecs::WildlifeTurnSetup turnSetup; // Offset: 156
    keen::ds::wildlife::PathNodeSetup pathNodeSetup; // Offset: 232
    keen::ds::wildlife::TamingSetup tamingSetup; // Offset: 336
    keen::ds::actor::ActorSequenceReference tamingPetInteractionSequence; // Offset: 408
    keen::ds::LocaTagReference tamingPetInteractionVerbLoca; // Offset: 424
};

typedef keen::ecs::AlertState ecs.AlertState;

struct ecs.DynamicWildlife {
    keen::ds::wildlife::State state; // Offset: 0
    keen::ds::wildlife::State lastState; // Offset: 1
    keen::Time feelSecureDuration; // Offset: 8
    keen::Time lastFleeTime; // Offset: 16
    keen::float3 spawnPosition; // Offset: 24
    keen::Time idleEndTime; // Offset: 40
    keen::Time lastStateChangeTime; // Offset: 48
    keen::float3 dangerOrigin; // Offset: 56
    keen::float32 runAwayDistance; // Offset: 68
    keen::float3 currentTargetPosition; // Offset: 72
    keen::Time keepRoamingTargetUntilTime; // Offset: 88
    keen::Time foodBaitEatTimer; // Offset: 96
    keen::ds::ecs::AlertState previousAlertState; // Offset: 104
    keen::Time alertTimeStamp; // Offset: 112
    keen::Time foodBaitNeedinessTimeStamp; // Offset: 120
    keen::Time foodBaitReactionTimeStamp; // Offset: 128
    keen::Time tamingShrinkRadiusTimerStart; // Offset: 136
    keen::ds::ecs::EntityId foodBaitEntityId; // Offset: 144
    keen::uint8 tamingProgress; // Offset: 148
};

struct ecs.NetworkWildlife {
    keen::ds::ecs::AlertState alertState; // Offset: 0
    keen::Time alertTimeStamp; // Offset: 8
    keen::uint8 tamingProgress; // Offset: 16
    keen::bool isEatingFoodBait; // Offset: 17
};

struct ecs.WildlifeTransformer {
    keen::Time timeWithoutHit; // Offset: 0
    keen::Time minDurationWithoutHit; // Offset: 8
};

typedef keen::AmbientEffectPlaybackType AmbientEffectPlaybackType;

struct AmbientEffectEntry {
    keen::ds::SoundContainerReference soundContainer; // Offset: 0
    keen::ObjectReference<keen::ds::IngameTimeSpan> ingameTimeSpan; // Offset: 16
    keen::bool mute; // Offset: 32
    keen::ds::AmbientEffectPlaybackType playbackType; // Offset: 33
    keen::float32 volume; // Offset: 36
};

typedef keen::Biome Biome;

struct AmbientEffect {
    keen::bool inAllBiomes; // Offset: 0
    keen::ds::Biome biome; // Offset: 1
    keen::bool mute; // Offset: 2
    keen::bool whenInFog; // Offset: 3
};

struct AmbientSoundEffectEntryResource {
    keen::ds::SoundContainerReference soundContainer; // Offset: 0
    keen::ds::IngameTimeSpanReference ingameTimeSpan; // Offset: 16
    keen::float32 volume; // Offset: 32
    keen::Guid id; // Offset: 36
    keen::Time startTime; // Offset: 56
    keen::Time endTime; // Offset: 64
    keen::ds::string description; // Offset: 72
    keen::ds::string soundContainerDescription; // Offset: 112
    keen::ds::string ingameTimeSpanDescription; // Offset: 152
    keen::ds::AmbientEffectPlaybackType playbackType; // Offset: 192
};

struct AmbientSoundEffectResource {
    keen::bool inAllBiomes; // Offset: 0
    keen::bool whenInFog; // Offset: 1
    keen::ds::Biome biome; // Offset: 2
    keen::DsArray<keen::ds::AmbientSoundEffectEntryResource> effectEntries; // Offset: 8
    keen::Guid id; // Offset: 48
    keen::ds::string description; // Offset: 64
};

struct AmbientVfxEffectEntry {
    keen::ds::VfxReference vfx; // Offset: 0
    keen::ds::IngameTimeSpanReference ingameTimeSpan; // Offset: 16
};

struct AmbientVfxEffect {
    keen::bool inAllBiomes; // Offset: 0
    keen::ds::Biome biome; // Offset: 1
    keen::bool whenInFog; // Offset: 2
};

struct AmbientVfxEffectEntryResource {
    keen::ds::VfxReference vfx; // Offset: 0
    keen::ds::IngameTimeSpanReference ingameTimeSpan; // Offset: 16
    keen::Time startTime; // Offset: 32
    keen::Time endTime; // Offset: 40
    keen::Guid id; // Offset: 48
    keen::ds::string description; // Offset: 64
    keen::ds::string vfxDescription; // Offset: 104
    keen::ds::string ingameTimeSpanDescription; // Offset: 144
};

struct AmbientVfxEffectResource {
    keen::DsArray<keen::ds::AmbientVfxEffectEntryResource> effectEntries; // Offset: 0
    keen::ds::Biome biome; // Offset: 40
    keen::Guid id; // Offset: 44
    keen::ds::string description; // Offset: 64
    keen::bool whenInFog; // Offset: 104
    keen::bool inAllBiomes; // Offset: 105
};

struct CollisionFeedbackEffect2 {
    keen::bool enabled; // Offset: 0
    keen::ds::SoundContainerReference sfx; // Offset: 4
    keen::ds::VfxReference vfx; // Offset: 20
    keen::ds::ecs::Offset ecsOffset; // Offset: 36
    keen::bool orientToNormal; // Offset: 76
    keen::bool overrideSlot; // Offset: 77
    keen::ds::AttachmentSlot slot; // Offset: 78
    keen::bool attach; // Offset: 79
    keen::bool playOnlyLocalSFX; // Offset: 80
    keen::bool useRootPosition; // Offset: 81
};

struct CollisionFeedbackEffectCollection2 {
    keen::ds::CollisionFeedbackEffect2 onHit; // Offset: 0
    keen::ds::CollisionFeedbackEffect2 onCriticalHit; // Offset: 84
    keen::ds::CollisionFeedbackEffect2 onBlock; // Offset: 168
    keen::ds::CollisionFeedbackEffect2 onBrokenBlock; // Offset: 252
    keen::ds::CollisionFeedbackEffect2 onIneffective; // Offset: 336
    keen::ds::CollisionFeedbackEffect2 onImmune; // Offset: 420
    keen::ds::CollisionFeedbackEffect2 onFlattening; // Offset: 504
    keen::ds::CollisionFeedbackEffect2 onPileUp; // Offset: 588
};

typedef keen::ObjectReference<keen::ds::CollisionFeedbackEffectCollection2> CollisionFeedbackEffectCollectionReference;

typedef keen::MaterialFeedbackEventType MaterialFeedbackEventType;

typedef keen::MaterialFeedbackEventMask MaterialFeedbackEventMask;

typedef keen::MaterialFeedbackEffectSize MaterialFeedbackEffectSize;

struct FoleyEffectCollection {
    keen::ds::ecs::Offset offset; // Offset: 0
    keen::ds::SoundContainerReference evade; // Offset: 40
    keen::ds::SoundContainerReference jump; // Offset: 56
    keen::ds::SoundContainerReference run; // Offset: 72
    keen::ds::SoundContainerReference sprint; // Offset: 88
    keen::ds::SoundContainerReference walk; // Offset: 104
};

struct EnvironmentEffectBase {
    keen::ds::SoundContainerReference sfx; // Offset: 0
    keen::ds::ecs::Offset offset; // Offset: 16
    keen::bool orientToNormal; // Offset: 56
    keen::ds::VfxReference vfx; // Offset: 60
};

typedef keen::EnvironmentEffectType EnvironmentEffectType;

struct EnvironmentEffectPlayerDodgerollStart {
    keen::ds::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectPlayerDodgerollEnd {
    keen::ds::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectPlayerFallDamage {
    keen::ds::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectPlayerJump {
    keen::ds::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectPlayerJumpLand {
    keen::ds::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectPlayerJumpLandSmall {
    keen::ds::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectPlayerRun {
    keen::ds::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectPlayerSprint {
    keen::ds::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectPlayerWalk {
    keen::ds::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectPlayerSlide {
    keen::ds::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectVultureCrashDown {
    keen::ds::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectVultureFlyLiftOff {
    keen::ds::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectVultureFlyTouchDown {
    keen::ds::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectVultureHoverFlap {
    keen::ds::EnvironmentEffectType effectType; // Offset: 76
};

struct EnvironmentEffectNPCWalk {
    keen::ds::EnvironmentEffectType effectType; // Offset: 76
};

struct MaterialFeedbackEventBase {
    keen::ds::SoundContainerReference sfxTiny; // Offset: 0
    keen::ds::SoundContainerReference sfxSmall; // Offset: 16
    keen::ds::SoundContainerReference sfxMedium; // Offset: 32
    keen::ds::SoundContainerReference sfxLarge; // Offset: 48
    keen::ds::ecs::Offset ecsOffset; // Offset: 64
    keen::bool orientToNormal; // Offset: 104
    keen::bool useRootPosition; // Offset: 105
    keen::ds::VfxReference vfx; // Offset: 108
};

struct MaterialFeedbackEventOnPlace {
    keen::ds::MaterialFeedbackEventType type; // Offset: 124
};

struct MaterialFeedbackEventOnPickup {
    keen::ds::MaterialFeedbackEventType type; // Offset: 124
};

struct MaterialFeedbackEventOnTearDown {
    keen::ds::MaterialFeedbackEventType type; // Offset: 124
};

struct MaterialFeedbackEventOnDestruction {
    keen::ds::MaterialFeedbackEventType type; // Offset: 124
};

struct MaterialFeedbackEventOnFlatten {
    keen::ds::MaterialFeedbackEventType type; // Offset: 124
};

struct MaterialFeedbackEventOnPileUp {
    keen::ds::MaterialFeedbackEventType type; // Offset: 124
};

struct CollisionFeedbackMaterial {
    keen::ds::CollisionFeedbackEffectCollectionReference defaultEffectCollection; // Offset: 0
    keen::ds::ItemReference materialItem; // Offset: 16
    keen::ds::PropDamageSusceptibility damageSusceptibility; // Offset: 32
    keen::bool hasFoleyEffects; // Offset: 33
    keen::uint32 foleyEffectImportance; // Offset: 36
    keen::ds::FoleyEffectCollection foleyEffects; // Offset: 40
};

typedef keen::WeatherState WeatherState;

struct WeatherLayerMaterial {
    keen::ds::CollisionFeedbackEffectCollectionReference defaultEffectCollection; // Offset: 0
    keen::ds::WeatherState weather; // Offset: 16
};

struct CollisionFeedbackRule {
    keen::ds::CollisionFeedbackMaterialReference materialA; // Offset: 0
    keen::ds::CollisionFeedbackMaterialReference materialB; // Offset: 16
    keen::ds::CollisionFeedbackEffectCollectionReference effectCollection; // Offset: 32
};

struct CollisionFeedback {
};

typedef keen::ColliderFeedbackEffectFlag ColliderFeedbackEffectFlag;

typedef keen::ColliderFeedbackEffectFlags ColliderFeedbackEffectFlags;

struct MaterialFeedbackEffect {
    keen::ds::string description; // Offset: 0
    keen::ds::ecs::Offset ecsOffset; // Offset: 40
    keen::ds::SoundContainerReference sfx; // Offset: 80
    keen::ds::VfxReference vfx; // Offset: 96
    keen::DsOptional<keen::ds::VfxUserEffectParameterDataBlock> vfxParameters; // Offset: 112
    keen::ds::AttachmentSlot slot; // Offset: 128
    keen::ds::ColliderFeedbackEffectFlags flags; // Offset: 129
};

typedef keen::MaterialFeedbackId MaterialFeedbackId;

struct MaterialFeedback {
    keen::ds::MaterialFeedbackId id; // Offset: 0
    keen::ds::MaterialFeedbackEventMask eventTypeMask; // Offset: 4
    keen::StaticArray<keen::ds::MaterialFeedbackEffect,6> eventEffectsTiny; // Offset: 8
    keen::StaticArray<keen::ds::MaterialFeedbackEffect,6> eventEffectsSmall; // Offset: 824
    keen::StaticArray<keen::ds::MaterialFeedbackEffect,6> eventEffectsMedium; // Offset: 1640
    keen::StaticArray<keen::ds::MaterialFeedbackEffect,6> eventEffectsLarge; // Offset: 2456
    keen::bool hasFoleyEffects; // Offset: 3272
    keen::uint32 foleyEffectImportance; // Offset: 3276
    keen::StaticArray<keen::ds::MaterialFeedbackEffect,5> foleyMaterialFeedbackEffects; // Offset: 3280
    keen::bool hasEnvironmentEffects; // Offset: 3960
    keen::StaticArray<keen::ds::MaterialFeedbackEffect,15> environmentMaterialFeedbackEffects; // Offset: 3968
    keen::Bitmask16<keen::ecs::CollisionType> collisionTypeMask; // Offset: 6008
    keen::StaticArray<keen::ds::MaterialFeedbackEffect,8> collisionTypeEffects; // Offset: 6016
};

typedef keen::ObjectReference<keen::ds::MaterialFeedback> MaterialFeedbackReference;

struct CollisionFeedbackMatrixEntry {
    keen::uint64 materialPairId; // Offset: 0
    keen::StaticArray<keen::ds::MaterialFeedbackEffect,8> effects; // Offset: 8
    keen::Bitmask16<keen::ecs::CollisionType> effectMask; // Offset: 1096
};

struct MaterialFeedbackSubDirectory {
};

struct MaterialFeedbackDirectory {
};

struct MaterialFeedbackCollectionResource {
    keen::Guid id; // Offset: 0
    keen::ds::string description; // Offset: 16
    keen::DsArray<keen::ds::CollisionFeedbackMatrixEntry> collisionEffectMatrixEntry; // Offset: 56
    keen::DsArray<keen::ds::MaterialFeedbackReference> materials; // Offset: 96
    keen::ds::MaterialFeedbackReference rainMaterialLayeredEffects; // Offset: 136
    keen::ds::MaterialFeedbackReference snowMaterialLayeredEffects; // Offset: 152
    keen::ds::MaterialFeedbackReference blizzardMaterialLayeredEffects; // Offset: 168
};

typedef keen::DebugEnvironmentEffectType DebugEnvironmentEffectType;

typedef keen::FoleyType FoleyType;

struct DebugEnvironmentEffect {
    keen::ds::DebugEnvironmentEffectType type; // Offset: 0
    keen::ds::FoleyType foleyType; // Offset: 1
    keen::ds::EnvironmentEffectType environmentEffectType; // Offset: 2
    keen::ds::ecs::CollisionType collisionType; // Offset: 3
    keen::ds::MaterialFeedbackEventType eventType; // Offset: 4
    keen::ds::MaterialFeedbackEffectSize effectSize; // Offset: 5
    keen::ds::WeatherState weatherState; // Offset: 6
    keen::bool collisionRuleFound; // Offset: 7
    keen::ds::MaterialFeedbackId materialA; // Offset: 8
    keen::ds::MaterialFeedbackId materialB; // Offset: 12
    keen::Guid eventGuid; // Offset: 16
    keen::Guid sfx; // Offset: 32
    keen::Guid vfx; // Offset: 48
    keen::float eventSendTime; // Offset: 64
    keen::float eventReceiveTime; // Offset: 68
    keen::float entityFootWorldHeight; // Offset: 72
    keen::float effectWorldHeight; // Offset: 76
};

typedef keen::impact::MajorDirection impact.MajorDirection;

struct actor.ActorSequence {
    keen::ds::impact::MajorDirection majorDirection; // Offset: 16
};

typedef keen::DsArray<keen::DsVariant<keen::ds::SequenceEvent>> SequenceEvents;

struct SequenceResource {
    keen::ds::SequenceEvents events; // Offset: 0
    keen::Time length; // Offset: 40
    keen::bool loop; // Offset: 48
    keen::DsString name; // Offset: 56
};

struct actor.ActorSequenceResource {
    keen::Guid resourceId; // Offset: 96
    keen::ds::impact::MajorDirection majorDirection; // Offset: 112
};

typedef keen::ObjectReference<keen::ds::ecs::EntityTag> ecs.EntityTagReference;

struct ecs.EntityTagReferenceEntry {
    keen::ds::ecs::EntityTagReference tag; // Offset: 0
};

struct SequenceEvent {
    keen::Time time; // Offset: 0
    keen::Time duration; // Offset: 8
    keen::ds::ecs::EntityTagReference requiredEntityTag; // Offset: 16
    keen::StaticArray<keen::ds::ecs::EntityTagReferenceEntry,4> forbiddenTags; // Offset: 32
};

struct actor.SetAnimationEvent {
    keen::ds::animationgraph::StateIdReference animationName; // Offset: 96
    keen::bool usePureLveLocomotion; // Offset: 112
    keen::bool alignLveLocomotionToFloor; // Offset: 113
    keen::bool scaleLveWithMovementInput; // Offset: 114
    keen::bool retriggerAnimation; // Offset: 115
};

struct actor.RootMotionWarpEvent {
    keen::float32 minDistanceToTarget; // Offset: 96
    keen::float32 maxScale; // Offset: 100
    keen::bool abortWarpAboveMaxScale; // Offset: 104
};

struct actor.PreserveVelocity {
};

struct actor.ImpulseEvent {
    keen::float3 worldDistance; // Offset: 96
    keen::float3 localDistance; // Offset: 108
    keen::ds::ecs::ImpulseType impulseType; // Offset: 120
    keen::bool applyOnlyHorizontally; // Offset: 121
};

struct actor.ApplyImpulseEvent {
    keen::float3 worldImpulse; // Offset: 96
    keen::float3 localImpulse; // Offset: 108
};

struct actor.SetAnimationOverlayEvent {
    keen::ds::animationgraph::OverlayIdReference overlayName; // Offset: 96
    keen::DsString jointMaskStart; // Offset: 112
};

struct actor.KeepAliveEvent {
    keen::ds::actor::StateMask keepAliveMask; // Offset: 96
    keen::ds::actor::StateMask abortMask; // Offset: 104
};

struct actor.LoopEvent {
    keen::ds::actor::StateMask keepAliveMask; // Offset: 96
    keen::ds::actor::StateMask abortMask; // Offset: 104
    keen::bool jumpToLoopEndOnAbort; // Offset: 112
};

typedef keen::actor::ScopeEndBehavior actor.ScopeEndBehavior;

struct actor.ScopeEvent {
    keen::ds::actor::ScopeEndBehavior scopeEndBehavior; // Offset: 120
};

struct actor.ChangeColliderSetup {
    keen::ds::ecs::ColliderMode mode; // Offset: 96
};

struct actor.ToggleInteractionActionEvent {
};

struct actor.LootInteractionActionEvent {
    keen::bool lootAll; // Offset: 96
    keen::bool forAllPlayers; // Offset: 97
};

struct actor.ResetFallAltitudeOnApexEvent {
};

typedef keen::actor::SnapType actor.SnapType;

typedef keen::actor::InterpolationMode actor.InterpolationMode;

struct actor.SnapEvent {
    keen::ds::actor::SnapType type; // Offset: 96
    keen::ds::ecs::TargetType targetType; // Offset: 97
    keen::ds::actor::InterpolationMode rotationInterpolationMode; // Offset: 98
};

struct actor.SetAbortByMovement {
    keen::bool value; // Offset: 96
};

struct actor.PushEvent {
    keen::float32 force; // Offset: 96
};

typedef keen::actor::JumpType actor.JumpType;

struct actor.JumpEvent {
};

struct actor.HookEvent {
};

struct actor.SelfDestructEvent {
};

typedef keen::CameraId CameraId;

struct actor.LockCameraIdEvent {
    keen::ds::CameraId cameraId; // Offset: 96
};

struct actor.UnlockCameraIdEvent {
};

typedef keen::CameraOverride CameraOverride;

struct actor.SetCameraOverrideEvent {
    keen::ds::CameraOverride cameraOverride; // Offset: 96
};

struct actor.CameraShakeEvent {
    keen::float32 trauma; // Offset: 96
};

struct actor.CameraShakeImpulseEvent {
    keen::float3 impulse; // Offset: 96
    keen::float32 additionalTrauma; // Offset: 108
};

typedef keen::HudScreenType HudScreenType;

struct actor.OpenUi {
    keen::ds::HudScreenType hudScreen; // Offset: 96
};

struct actor.NegativeFeedbackEvent {
    keen::ds::LocaTagReference messageLocaTag; // Offset: 96
};

typedef keen::ecs::EnemyEventType ecs.EnemyEventType;

struct actor.EnemyCommandEvent {
    keen::ds::ecs::EnemyEventType eventType; // Offset: 96
};

struct actor.TriggerNoiseEvent {
    keen::float32 range; // Offset: 96
};

typedef keen::ecs::SyncedAttackType ecs.SyncedAttackType;

struct actor.SyncAttackEvent {
    keen::ds::ecs::SyncedAttackType type; // Offset: 96
};

struct actor.SyncedSequenceEvent {
    keen::ds::actor::ActorSequenceReference sequence; // Offset: 96
};

struct actor.TriggerKnowledge {
    keen::bool unlockForGroup; // Offset: 96
};

typedef keen::actor::AbilityFlag actor.AbilityFlag;

typedef keen::actor::AbilityMask actor.AbilityMask;

struct actor.MovementFactors {
    keen::float32 forward; // Offset: 0
    keen::float32 backward; // Offset: 4
    keen::float32 lateral; // Offset: 8
};

typedef keen::ObjectReference<keen::ds::skilltree_nodes::Node> skilltree_nodes.NodeReference;

struct actor.DisableAbilityEvent {
    keen::ds::actor::AbilityMask mask; // Offset: 96
    keen::ds::skilltree_nodes::NodeReference overrideSkill; // Offset: 100
};

struct actor.EnableAbilityEvent {
    keen::ds::actor::AbilityMask mask; // Offset: 96
    keen::ds::skilltree_nodes::NodeReference overrideSkill; // Offset: 100
};

struct actor.SetStateEvent {
    keen::ds::actor::StateMask mask; // Offset: 96
};

struct actor.ClearStateEvent {
    keen::ds::actor::StateMask mask; // Offset: 96
};

struct actor.RequestUiCover {
};

struct actor.SetGravityEvent {
    keen::float32 gravityModifier; // Offset: 96
};

struct actor.ResetGravityEvent {
};

struct actor.LerpMovementFactorEvent {
    keen::ds::actor::MovementFactors desiredMovementFactors; // Offset: 96
    keen::Time lerpDuration; // Offset: 112
};

struct actor.LerpRotationFactorEvent {
    keen::float32 desiredRotationSpeedFactor; // Offset: 96
};

struct actor.LerpTransformEvent {
    keen::ds::ecs::LerpTransformTarget lerpTarget; // Offset: 96
    keen::bool lerpPosition; // Offset: 97
    keen::bool lerpOrientation; // Offset: 98
};

struct actor.LerpSubmergeDepthEvent {
    keen::float submergeDelta; // Offset: 96
};

struct actor.StartClimbing {
    keen::bool isLadder; // Offset: 96
    keen::Time lerpDuration; // Offset: 104
};

struct actor.StopClimbing {
    keen::bool isLadder; // Offset: 96
    keen::Time lerpDuration; // Offset: 104
};

struct actor.PlayInstrumentEvent {
};

struct actor.TeleportToTargetEvent {
    keen::ds::ecs::TargetType targetType; // Offset: 96
};

struct actor.PetAnimalEvent {
};

struct actor.UpgradeAnimalEvent {
};

typedef keen::actor::ActionSequenceTrigger actor.ActionSequenceTrigger;

struct actor.SetOpportunity {
    keen::ds::actor::ActionSequenceTrigger triggeredBy; // Offset: 96
    keen::ds::skilltree_nodes::NodeReference requiredSkill; // Offset: 100
    keen::Time followUpTime; // Offset: 120
    keen::Guid eventGuid; // Offset: 128
    keen::bool override; // Offset: 144
};

typedef keen::ObjectReference<keen::ds::ImpactDefinition> ImpactProgramReference;

typedef keen::DsArray<keen::DsVariant<keen::ds::impact::ImpactConfig>> impact.Configurations;

struct actor.SetActionOportunity {
    keen::ds::actor::ActorSequenceReference followUp; // Offset: 152
    keen::ds::ImpactProgramReference costImpact; // Offset: 168
    keen::ds::impact::Configurations impactValues; // Offset: 184
};

struct actor.ClearActionOportunity {
    keen::ds::actor::ActionSequenceTrigger triggeredBy; // Offset: 96
};

typedef keen::actor::SpawnEntityTransform actor.SpawnEntityTransform;

struct actor.RadiusRange {
    keen::float32 minRadius; // Offset: 0
    keen::float32 maxRadius; // Offset: 4
};

struct actor.RandomOrientationOffset {
    keen::Angle minX; // Offset: 0
    keen::Angle maxX; // Offset: 4
    keen::Angle minY; // Offset: 8
    keen::Angle maxY; // Offset: 12
    keen::Angle minZ; // Offset: 16
    keen::Angle maxZ; // Offset: 20
};

struct actor.SpawnEntityBaseEvent {
    keen::ds::skilltree_nodes::NodeReference requiredSkill; // Offset: 96
    keen::ds::ecs::TemplateReference templateReference; // Offset: 112
    keen::ds::actor::SpawnEntityTransform spawnTransform; // Offset: 128
    keen::ds::AttachmentSlot attachmentSlot; // Offset: 129
    keen::ds::AttachmentSlot spawnSlot; // Offset: 130
    keen::ds::ecs::Offset spawnOffset; // Offset: 132
    keen::ds::impact::MajorDirection vfxDirection; // Offset: 172
    keen::ds::ecs::TargetType providedTarget; // Offset: 173
    keen::bool consume; // Offset: 174
    keen::ds::ItemReference onConsumeExchange; // Offset: 176
    keen::bool addWeaponReference; // Offset: 192
    keen::bool despawnAfterSequence; // Offset: 193
    keen::bool endSequenceOnDespawn; // Offset: 194
    keen::bool transferUsedItem; // Offset: 195
    keen::bool copyCustomString; // Offset: 196
    keen::ds::actor::RadiusRange randomSpawnRadius; // Offset: 200
    keen::ds::actor::RandomOrientationOffset randomOrientationOffset; // Offset: 208
    keen::float32 minSpawnRatio; // Offset: 232
    keen::float32 maxSpawnRatio; // Offset: 236
    keen::uint8 minSpawnCount; // Offset: 240
    keen::uint8 maxSpawnCount; // Offset: 241
    keen::bool breakImpactHierarchy; // Offset: 242
    keen::bool ignoreSpawnVelocity; // Offset: 243
    keen::float3 spawnVelocity; // Offset: 244
    keen::bool applyRandomLoot; // Offset: 256
    keen::bool copyCombatAttributes; // Offset: 257
    keen::float32 chance; // Offset: 260
};

struct actor.RefillBurner {
};

struct actor.SpawnEntityEvent {
    keen::bool isProjectile; // Offset: 264
    keen::bool clearProjectiles; // Offset: 265
};

struct actor.TriggerMartyrSkills {
};

struct actor.SpawnEntityPerAggroTargetEvent {
    keen::ds::actor::StateMask excludedTargetStates; // Offset: 264
    keen::bool isProjectile; // Offset: 272
    keen::bool clearProjectiles; // Offset: 273
    keen::bool onlyPlayerTargets; // Offset: 274
    keen::ds::actor::RadiusRange randomPerTargetSpawnRadius; // Offset: 276
    keen::uint8 maxTargets; // Offset: 284
};

struct impact.DamageDistribution {
    keen::float32 physicalCutDamage; // Offset: 0
    keen::float32 physicalPierceDamage; // Offset: 4
    keen::float32 physicalBluntDamage; // Offset: 8
    keen::float32 magicalFireDamage; // Offset: 12
    keen::float32 magicalIceDamage; // Offset: 16
    keen::float32 magicalFogDamage; // Offset: 20
    keen::float32 magicalLightningDamage; // Offset: 24
    keen::float32 healing; // Offset: 28
    keen::float32 poisonDamage; // Offset: 32
    keen::uint32 woodDamage; // Offset: 36
    keen::uint32 stoneDamage; // Offset: 40
    keen::uint32 metalDamage; // Offset: 44
    keen::uint32 explosionDamage; // Offset: 48
};

struct actor.SpawnImpact {
    keen::ds::ImpactProgramReference impact; // Offset: 264
    keen::Guid eventGuid; // Offset: 280
    keen::ds::impact::DamageDistribution damageDistribution; // Offset: 296
    keen::ds::ecs::ColliderResourceData colliderData; // Offset: 352
    keen::ds::impact::Configurations impactValues; // Offset: 408
    keen::bool damageDistributionIsSet; // Offset: 448
};

typedef keen::ObjectReference<keen::ds::BuffType> BuffTypeReference;

struct actor.ApplyBuffEvent {
    keen::ds::BuffTypeReference buffTypeOverride; // Offset: 96
    keen::bool consume; // Offset: 112
    keen::ds::impact::Configurations impactValues; // Offset: 120
    keen::ds::impact::DamageDistribution damageDistribution; // Offset: 160
    keen::bool damageDistributionIsSet; // Offset: 212
};

struct actor.PlaceVoxelObjectEvent {
    keen::bool subtract; // Offset: 96
    keen::bool consume; // Offset: 97
};

struct actor.DetachEntityEvent {
    keen::Vector3 force; // Offset: 96
    keen::Vector3 randomAngleByAxis; // Offset: 112
    keen::Matrix43 launchTransform; // Offset: 128
    keen::bool addGravity; // Offset: 192
};

struct actor.DetachProjectileEntityEvent {
};

struct actor.SetTriggerStateEvent {
    keen::ds::SignalReference trigger; // Offset: 96
    keen::bool state; // Offset: 112
};

struct actor.ShowAmmunition {
};

struct actor.SetVisualAmmunition {
};

struct actor.ResetVisualAmmunition {
};

struct actor.StartCookEvent {
};

struct actor.SpawnCookEntitesEvent {
};

struct actor.ActivateCombatStanceEvent {
};

typedef keen::ObjectReference<keen::ds::ecs::DefaultInventorySetup> ecs.DefaultInventoryReference;

struct actor.TransformToLootEvent {
    keen::ds::ecs::DefaultInventoryReference defaultInventory; // Offset: 96
    keen::bool keepDefaultInventory; // Offset: 112
    keen::uint8 genericSlotCount; // Offset: 113
    keen::uint8 availableSlotCount; // Offset: 114
    keen::ds::actor::ActorSequenceReference defaultAction; // Offset: 116
    keen::ds::LocaTagReference verbLoca; // Offset: 132
    keen::ds::ecs::Offset vfxOnSpawnOffset; // Offset: 148
    keen::ds::VfxReference vfxOnSpawn; // Offset: 188
    keen::ds::VfxUserEffectParameterDataBlock vfxParameters; // Offset: 204
    keen::uint32 lootHealth; // Offset: 268
};

struct actor.AcceptInteractionEvent {
};

typedef keen::actor::VoxelChangeType actor.VoxelChangeType;

struct actor.ChangeVoxel {
    keen::ds::actor::VoxelChangeType changeType; // Offset: 96
};

struct actor.Dismantle {
};

typedef keen::NpcId NpcId;

struct actor.AssignNpc {
    keen::ds::NpcId npcId; // Offset: 96
};

struct actor.TameWildlifeEvent {
};

struct actor.RotationInterpolation {
    keen::Quaternion startOrientation; // Offset: 0
    keen::Quaternion targetOrientation; // Offset: 16
    keen::float3 linearRotationAxis; // Offset: 32
    keen::float32 speed; // Offset: 44
    keen::ds::actor::InterpolationMode interpolationMode; // Offset: 48
};

struct actor.RotationData {
    keen::Time startTime; // Offset: 0
    keen::Quaternion targetOrientation; // Offset: 8
    keen::Time snapDuration; // Offset: 24
};

typedef keen::actor::SequenceResourceId actor.SequenceResourceId;

struct actor.SequenceRuntimeId {
    keen::ds::actor::SequenceResourceId sequenceId; // Offset: 0
    keen::Time triggerTime; // Offset: 8
    keen::ds::ecs::EntityId actorEntityId; // Offset: 16
    keen::uint8 callIndex; // Offset: 20
};

typedef keen::InventorySlotIndex InventorySlotIndex;

struct InventorySlotId {
    keen::ds::ecs::EntityId entityId; // Offset: 0
    keen::ds::InventorySlotIndex slotIndex; // Offset: 4
};

typedef keen::ItemStateMask ItemStateMask;

struct ItemInstanceInfo {
    keen::ds::InventorySlotId slotId; // Offset: 0
    keen::ds::ItemId itemId; // Offset: 8
    keen::ds::ecs::EntityId pide; // Offset: 12
    keen::ds::ItemStateMask stateMask; // Offset: 16
};

typedef keen::SongId SongId;

typedef keen::KnowledgeId KnowledgeId;

struct actor.ActionSequenceTriggerContext {
    keen::ds::actor::SequenceRuntimeId sequenceRuntimeId; // Offset: 0
    keen::ds::actor::ActionSequenceTrigger triggerType; // Offset: 24
    keen::ds::ItemInstanceInfo costItem; // Offset: 28
    keen::ds::ItemInstanceInfo usedItem; // Offset: 48
    keen::ds::ItemInstanceInfo usedAmmunition; // Offset: 68
    keen::ds::actor::JumpType jumpType; // Offset: 88
    keen::float3 directionOverride; // Offset: 92
    keen::ds::SongId songId; // Offset: 104
    keen::Time startTime; // Offset: 112
    keen::ds::ecs::EntityId interactionHostId; // Offset: 120
    keen::uint32 interactionOfferId; // Offset: 124
    keen::StaticArray<keen::ds::KnowledgeId,8> unlockKnowledgeIds; // Offset: 128
    keen::StaticArray<keen::ds::ecs::EntityTagReferenceEntry,4> entityTags; // Offset: 160
};

typedef keen::SkillNodeId SkillNodeId;

struct actor.FollowUp {
    keen::ds::actor::ActionSequenceTriggerContext context; // Offset: 0
    keen::ds::actor::SequenceResourceId originalEventSequence; // Offset: 224
    keen::Guid eventGuid; // Offset: 228
    keen::Time localExecutionTime; // Offset: 248
    keen::ds::SkillNodeId requiredSkill; // Offset: 256
    keen::ds::ImpactProgramReference costImpact; // Offset: 260
    keen::bool wasTriggered; // Offset: 276
};

typedef keen::actor::ActionSequenceFlags actor.ActionSequenceFlags;

typedef keen::actor::ActionSequenceState actor.ActionSequenceState;

struct actor.ActionSequenceSpan {
    keen::Time startTime; // Offset: 0
    keen::Time endTime; // Offset: 8
};

struct actor.ColliderModeData {
    keen::ds::ecs::ColliderMode mode; // Offset: 0
    keen::Time endTime; // Offset: 8
};

struct actor.ActionSequencePlaybackContext {
    keen::Time playedTime; // Offset: 0
    keen::Time currentTime; // Offset: 8
    keen::Time sequenceLength; // Offset: 16
    keen::Time scopeStartTime; // Offset: 24
    keen::Time scopeEndTime; // Offset: 32
    keen::ds::actor::StateMask scopeAbortMask; // Offset: 40
    keen::ds::actor::StateMask scopeKeepAliveMask; // Offset: 48
    keen::bool scopeJumpToScopeEndOnAbort; // Offset: 56
    keen::ds::actor::ActionSequenceState state; // Offset: 57
    keen::StaticArray<keen::ds::actor::ActionSequenceSpan,2> playbackSpan; // Offset: 64
    keen::StaticArray<keen::ds::actor::FollowUp,6> followUps; // Offset: 96
    keen::ds::actor::AbilityMask abilityMask; // Offset: 1776
    keen::ds::actor::StateMask setStateMask; // Offset: 1784
    keen::ds::actor::StateMask unsetStateMask; // Offset: 1792
    keen::ds::actor::StateMask sequenceAbortMask; // Offset: 1800
    keen::ds::actor::StateMask sequenceKeepAliveMask; // Offset: 1808
    keen::bool wrapedAround; // Offset: 1816
};

struct actor.SignalStates {
    keen::StaticArray<keen::Guid,8> activeSignals; // Offset: 0
};

struct actor.ActionSequence {
    keen::ds::actor::ActionSequenceTriggerContext triggerContext; // Offset: 0
    keen::ds::actor::ActionSequencePlaybackContext playbackContext; // Offset: 224
};

struct actor.PlaceItemEvent {
};

struct actor.SetAttackChainVariationEvent {
    keen::ds::ecs::EntityTagReference followUpSequenceTag; // Offset: 96
};

struct PreviewAnimGraph2 {
    keen::ObjectReference<keen::ds::anim_graph::tool_graph::AnimationGraph2_0> animGraphId; // Offset: 0
    keen::bool useFemaleAnimation; // Offset: 16
};

struct ActorActionContainer {
    keen::ObjectReference<keen::ds::AnimationGraph> previewAnimationGraph; // Offset: 0
    keen::ds::PreviewAnimGraph2 previewAnimationGraph2Info; // Offset: 16
};

struct ActorActionContainerRoot {
};

typedef keen::ObjectReference<keen::ds::actor::ActorSequenceResource> ActorSequenceResourceReference;

struct ActorSequenceCollectionResource {
    keen::DsArray<keen::ds::ActorSequenceResourceReference> sequences; // Offset: 0
};

typedef keen::AmmunitionType AmmunitionType;

typedef keen::animal::Needs animal.Needs;

typedef keen::animal::NeedsMask animal.NeedsMask;

typedef keen::animal::InteractionState animal.InteractionState;

typedef keen::animal::InteractionStates animal.InteractionStates;

typedef keen::animal::TargetSearchState animal.TargetSearchState;

typedef keen::animal::TargetSearchStates animal.TargetSearchStates;

typedef keen::animal::State animal.State;

typedef keen::animal::StateCondition animal.StateCondition;

typedef keen::animal::Type animal.Type;

typedef keen::animal::TypeMask animal.TypeMask;

struct animal.IdleSequenceSetup {
    keen::Time minSequenceCooldown; // Offset: 0
    keen::Time maxSequenceCooldown; // Offset: 8
};

struct animal.DecisionSetup {
    keen::float idleWeight; // Offset: 0
    keen::float inspectWeight; // Offset: 4
    keen::float sitWeight; // Offset: 8
    keen::float greetWeight; // Offset: 12
    keen::float roamWeight; // Offset: 16
};

struct animal.IdleSetup {
    keen::Time minDuration; // Offset: 0
    keen::Time maxDuration; // Offset: 8
    keen::float32 sequenceChance; // Offset: 16
};

struct animal.SearchTargetSetup {
    keen::float32 targetRadius; // Offset: 0
    keen::float32 bedRadius; // Offset: 4
};

struct animal.TargetSetup {
    keen::bool isBed; // Offset: 0
    keen::bool isFood; // Offset: 1
    keen::bool isInteresting; // Offset: 2
};

struct animal.HungerSetup {
    keen::Time timeUntilHungerMinDuration; // Offset: 0
    keen::Time timeUntilHungerMaxDuration; // Offset: 8
    keen::Time foodConsumptionRate; // Offset: 16
};

struct animal.ReproductionSetup {
    keen::float32 maxReproductionDistance; // Offset: 0
    keen::float32 baseReproductionChance; // Offset: 4
    keen::Time reproductionRate; // Offset: 8
};

typedef keen::animal::AnimalQueryStatus animal.AnimalQueryStatus;

struct animal.RangeQueryInfo {
    keen::ds::animal::AnimalQueryStatus status; // Offset: 0
    keen::ds::ecs::RangeQueryId queryId; // Offset: 4
};

struct animal.PathQueryInfo {
    keen::ds::animal::AnimalQueryStatus status; // Offset: 0
    keen::ds::ecs::PathQueryId queryId; // Offset: 4
};

typedef keen::animal::ReproductionQueryState animal.ReproductionQueryState;

struct animal.ReproductionState {
    keen::bool requirementsFulfilled; // Offset: 0
    keen::ds::animal::ReproductionQueryState queryState; // Offset: 1
    keen::ds::ecs::EntityId closestFreeBedId; // Offset: 4
    keen::ds::ecs::EntityId closestOtherAnimalId; // Offset: 8
    keen::ds::animal::RangeQueryInfo animalQuery; // Offset: 12
    keen::ds::animal::RangeQueryInfo bedQuery; // Offset: 20
    keen::ds::animal::PathQueryInfo animalPathQuery; // Offset: 28
    keen::ds::animal::PathQueryInfo bedPathQuery; // Offset: 36
};

struct animal.HungerState {
    keen::StaticArray<keen::ds::ecs::EntityId,8> foodTargets; // Offset: 0
    keen::ds::animal::RangeQueryInfo foodSourceQueryInfo; // Offset: 32
    keen::ds::animal::PathQueryInfo pathfindingQuery; // Offset: 40
    keen::uint8 currentPathfindingIndex; // Offset: 48
};

struct active_npc.RoamingSetup {
    keen::float32 minDistanceToCurrentPosition; // Offset: 0
    keen::float32 maxRadiusFromSpawn; // Offset: 4
    keen::ds::ecs::PathNodeRequirements targetNodeRequirements; // Offset: 8
};

struct active_npc.MovementSetup {
    keen::float32 maxMovementAngleDefault; // Offset: 0
    keen::float32 maxMovementAngleRoaming; // Offset: 4
};

struct active_npc.SleepSetup {
    keen::FloatRange sleepTime; // Offset: 0
    keen::FloatRange wakeUpTime; // Offset: 8
};

struct active_npc.PathNodeSetup {
    keen::ds::ecs::PathNodeCostFactors defaultCostFactors; // Offset: 0
    keen::ds::ecs::PathNodeCostFactors roamingCostFactors; // Offset: 52
};

struct ecs.Animal {
    keen::ds::actor::TurnSetup turnSetup; // Offset: 0
    keen::ds::actor::ActorSequenceReference sitSequence; // Offset: 72
    keen::ds::actor::ActorSequenceReference sleepSequence; // Offset: 88
    keen::ds::actor::ActorSequenceReference inspectSequence; // Offset: 104
    keen::ds::actor::ActorSequenceReference beingPetSequence; // Offset: 120
    keen::ds::actor::ActorSequenceReference eatingSequence; // Offset: 136
    keen::ds::actor::ActorSequenceReference sadIdleSequence; // Offset: 152
    keen::ds::actor::ActorSequenceReference greetSequence; // Offset: 168
    keen::float32 minDistanceToPlayer; // Offset: 184
    keen::ds::animal::Type type; // Offset: 188
    keen::ds::animal::DecisionSetup decisionSetup; // Offset: 192
    keen::ds::animal::IdleSetup idleSetup; // Offset: 216
    keen::ds::active_npc::RoamingSetup roamingSetup; // Offset: 240
    keen::ds::active_npc::MovementSetup movementSetup; // Offset: 252
    keen::ds::active_npc::SleepSetup sleepSetup; // Offset: 260
    keen::ds::animal::SearchTargetSetup searchTargetSetup; // Offset: 276
    keen::ds::active_npc::PathNodeSetup pathNodeSetup; // Offset: 284
    keen::ds::animal::HungerSetup hungerSetup; // Offset: 392
    keen::ds::animal::ReproductionSetup reproductionSetup; // Offset: 416
    keen::ds::ecs::TemplateReference babyAnimalVersion; // Offset: 432
    keen::ds::actor::ActorSequenceReference defaultInteractionSequence; // Offset: 448
    keen::ds::LocaTagReference defaultInteractionVerbLoca; // Offset: 464
};

struct ecs.DynamicAnimal {
    keen::ds::animal::State state; // Offset: 0
    keen::ds::animal::State previousState; // Offset: 1
    keen::Time standingNextToPlayerTimer; // Offset: 8
    keen::ds::animal::TargetSearchStates targetSearchStates; // Offset: 16
    keen::ds::ecs::EntityId beingPetByPlayerId; // Offset: 20
    keen::ds::ecs::RangeQueryId queryId; // Offset: 24
    keen::ds::animal::ReproductionState reproductionState; // Offset: 28
    keen::Time timeUntilHungry; // Offset: 72
    keen::Time eatingCooldown; // Offset: 80
    keen::ds::animal::HungerState hungerState; // Offset: 88
    keen::bool bedSearched; // Offset: 140
};

struct ecs.NetworkAnimal {
    keen::ds::animal::NeedsMask needs; // Offset: 0
};

struct ecs.AnimalSaved {
    keen::float3 spawnPosition; // Offset: 0
    keen::Time lastFoodConsumptionTime; // Offset: 16
    keen::Time lastValidReproduction; // Offset: 24
    keen::bool willConsumeFood; // Offset: 32
    keen::Time nextReproductionCheck; // Offset: 40
    keen::ds::animal::NeedsMask needs; // Offset: 48
};

struct ecs.AnimalTarget {
    keen::ds::animal::TargetSetup setup; // Offset: 0
    keen::ds::animal::TypeMask types; // Offset: 4
    keen::ds::ecs::Offset targetOffset; // Offset: 8
};

struct ecs.DynamicAnimalTarget {
    keen::ds::ecs::EntityId associatedAnimal; // Offset: 0
};

struct ecs.BabyAnimal {
    keen::Time growTime; // Offset: 0
    keen::ds::ecs::TemplateReference grownUpEntity; // Offset: 8
    keen::Time growUpTimer; // Offset: 24
    keen::bool canGrowUp; // Offset: 32
};

typedef keen::ecs::AttributeFlags ecs.AttributeFlags;

struct ecs.AttributeComponent {
    keen::HashKey32 rootId; // Offset: 0
    keen::HashKey32 signature; // Offset: 4
    keen::uint32 storageOffset; // Offset: 8
    keen::uint32 storageSize; // Offset: 12
    keen::Bitmask16<keen::ecs::AttributeFlags> flags; // Offset: 16
};

struct ecs.FloatAttribute {
};

struct ecs.UInt32Attribute {
};

struct ecs.SInt32Attribute {
};

struct ecs.BoolAttribute {
};

struct ecs.DurabilityLoad {
    keen::float32 percentage; // Offset: 0
};

struct ecs.DurabilityBurndown {
    keen::Time lastUpdate; // Offset: 0
};

typedef keen::impact::AttributeType impact.AttributeType;

struct impact.AttributeDeclerationBase {
    keen::DsString formula; // Offset: 0
};

struct impact.AttributeDecleration {
    keen::ds::impact::AttributeType type; // Offset: 40
};

typedef keen::impact::AttributeIndex impact.AttributeIndex;

struct AttributeContainer {
};

typedef keen::AttributeCommand AttributeCommand;

typedef keen::AttributeOps AttributeOps;

struct AttributeStructure {
    keen::ds::impact::AttributeIndex parentIndex; // Offset: 0
    keen::ds::impact::AttributeIndex childIndex; // Offset: 2
    keen::ds::impact::AttributeIndex siblingIndex; // Offset: 4
    keen::DsArray<keen::ds::AttributeCommand> calculation; // Offset: 8
};

struct BaseAttributeResource {
    keen::HashKey32 type; // Offset: 0
    keen::DsArray<keen::HashKey32> ids; // Offset: 8
    keen::DsArray<keen::ds::AttributeStructure> structure; // Offset: 48
    keen::DsArray<keen::ds::string> debugNames; // Offset: 88
};

struct AttributeContainerResource {
    keen::DsArray<keen::ds::BaseAttributeResource> attributes; // Offset: 0
};

typedef keen::ObjectReference<keen::ds::impact::AttributeDecleration> AttributeRootReference;

typedef keen::ObjectReference<keen::ds::impact::AttributeDeclerationBase> AttributeReference;

struct AttributeValueBase {
    keen::ds::AttributeReference id; // Offset: 0
};

struct FloatAttributeValue {
    keen::float32 value; // Offset: 16
};

struct SInt32AttributeValue {
    keen::sint32 value; // Offset: 16
};

struct UInt32AttributeValue {
    keen::uint32 value; // Offset: 16
};

struct BoolAttributeValue {
    keen::bool value; // Offset: 16
};

struct BalancingAltarCount {
    keen::uint8 flameLevel; // Offset: 0
    keen::uint8 altarCount; // Offset: 1
};

struct BalancingBuildzoneSize {
    keen::uint8 altarLevel; // Offset: 0
    keen::float3 buildzoneSize; // Offset: 4
};

typedef keen::ExperienceSourceType ExperienceSourceType;

struct ExperienceBalancing {
    keen::ds::ExperienceSourceType source; // Offset: 0
};

struct ExperienceBalanceValue {
    keen::ds::ExperienceSourceType source; // Offset: 0
    keen::HashKey32 experienceValueId; // Offset: 4
    keen::uint32 experienceGain; // Offset: 8
};

struct RandomSpawnerBalancing {
    keen::float32 fewAmountFactor; // Offset: 0
    keen::float32 manyAmountFactor; // Offset: 4
    keen::float32 extremeAmountFactor; // Offset: 8
};

struct AggroPoolThresholdBalancing {
    keen::uint32 twoPoolsThreshold; // Offset: 0
    keen::uint32 threePoolsThreshold; // Offset: 4
    keen::uint32 maxPoolsThreshold; // Offset: 8
};

struct AggroPoolBalancing {
    keen::ds::AggroPoolThresholdBalancing fewThresholds; // Offset: 0
    keen::ds::AggroPoolThresholdBalancing normalThresholds; // Offset: 12
    keen::ds::AggroPoolThresholdBalancing manyThresholds; // Offset: 24
    keen::ds::AggroPoolThresholdBalancing extremeThresholds; // Offset: 36
};

struct BalancingTable {
    keen::uint32 genericWeaponSeed; // Offset: 0
    keen::uint32 flameLevelMax; // Offset: 4
    keen::uint32 altarLevelMax; // Offset: 8
    keen::uint32 playerLevelMax; // Offset: 12
    keen::uint32 playerLevelCap; // Offset: 16
    keen::uint32 itemLevelCap; // Offset: 20
    keen::float32 damageBoostFlame; // Offset: 24
    keen::uint32 apPerFlameLevel; // Offset: 28
    keen::float32 critBonus; // Offset: 32
    keen::float32 baseCritChance; // Offset: 36
    keen::float32 powerCreepWeapon; // Offset: 40
    keen::uint32 htkStartPve; // Offset: 44
    keen::uint32 htkEndPve; // Offset: 48
    keen::float32 damageMod2Handed; // Offset: 52
    keen::uint32 playerBaseHealth; // Offset: 56
    keen::uint32 playerHealthPerAP; // Offset: 60
    keen::uint32 playerBaseMana; // Offset: 64
    keen::uint32 playerManaPerAP; // Offset: 68
    keen::uint32 playerBaseStamina; // Offset: 72
    keen::uint32 playerStaminaPerAP; // Offset: 76
    keen::uint32 playerBaseBodyHeat; // Offset: 80
    keen::float32 freezeDurationFactor; // Offset: 84
    keen::float32 freezeDurationOffset; // Offset: 88
    keen::uint32 disableFreezingBaseLevel; // Offset: 92
    keen::uint32 playerBaseFogResistance; // Offset: 96
    keen::uint32 playerFogResistancePerFlameLevel; // Offset: 100
    keen::uint32 htkStartEvp; // Offset: 104
    keen::uint32 htkEndEvp; // Offset: 108
    keen::uint32 killToLevelUPStart; // Offset: 112
    keen::uint32 killToLevelUPEnd; // Offset: 116
    keen::float32 epicWeaponBonus; // Offset: 120
    keen::uint32 xpNeededFromKnowledge; // Offset: 124
    keen::float32 parryToDepletion; // Offset: 128
    keen::uint32 shotsToDepletion; // Offset: 132
    keen::uint32 avarageCharacterMod; // Offset: 136
    keen::ObjectReference<keen::ds::GameKnowledgeDirectory> knowledgeDirectory; // Offset: 140
    keen::float32 levelDifferenceXpDamper; // Offset: 156
    keen::float32 levelDifferenceXpModMin; // Offset: 160
    keen::float32 levelDifferenceXpModMax; // Offset: 164
    keen::float32 groupSizeXpDamper; // Offset: 168
    keen::float32 groupSizeXpDamperModMin; // Offset: 172
    keen::uint32 skillPointsPerLevel; // Offset: 176
    keen::uint32 maximumTotalMusicComfortBuff; // Offset: 180
    keen::uint32 maximumInstrumentsCountedForComfort; // Offset: 184
    keen::Time timePerInstrumentUntilMaxBuff; // Offset: 192
    keen::float32 defaultArmorBlowthrough; // Offset: 200
    keen::float32 damageScalePerAttributePoint; // Offset: 204
    keen::uint32 xpSeedEnemy; // Offset: 208
    keen::float32 xpSharedOther; // Offset: 212
    keen::float32 perkPower; // Offset: 216
    keen::uint32 perkUpgradeCostSeed; // Offset: 220
    keen::float32 perkCostCreep; // Offset: 224
    keen::uint32 trashStart; // Offset: 228
    keen::uint32 trashEnd; // Offset: 232
    keen::float noiseRainFactor; // Offset: 236
    keen::float buffReapplyPercentage; // Offset: 240
    keen::ds::RandomSpawnerBalancing randomSpawnerBalancing; // Offset: 244
    keen::ds::AggroPoolBalancing aggroPoolBalancing; // Offset: 256
    keen::uint32 maximumAnimalsInWorld; // Offset: 304
    keen::float hookShotCostLevelFactor; // Offset: 308
    keen::uint32 hookShotCostBase; // Offset: 312
    keen::DsArray<keen::uint8> altarsPerFlameLevel; // Offset: 320
    keen::DsArray<keen::float3> buildzoneSizesPerAltarLevel; // Offset: 360
    keen::DsArray<keen::ds::ExperienceBalanceValue> experienceValues; // Offset: 400
};

typedef keen::BalancingLocaIds BalancingLocaIds;

typedef keen::BuffSlotType BuffSlotType;

typedef keen::BuffApplyType BuffApplyType;

struct OnCreateHelper {
    keen::ds::AttachmentSlot slot; // Offset: 0
    keen::ds::ecs::Offset offset; // Offset: 4
    keen::bool attach; // Offset: 44
    keen::ds::SoundContainerReference sfx; // Offset: 48
    keen::ds::VfxReference vfx; // Offset: 64
    keen::bool onlyPlayer; // Offset: 80
    keen::ds::NotifierReference notifier; // Offset: 84
};

struct WhileAppliedHelper {
    keen::ds::AttachmentSlot slot; // Offset: 0
    keen::ds::ecs::Offset offset; // Offset: 4
    keen::ds::SoundContainerReference sfx; // Offset: 44
    keen::ds::VfxReference vfx; // Offset: 60
    keen::ds::VfxUserEffectParameterDataBlock parameters; // Offset: 76
};

typedef keen::BuffTypeId BuffTypeId;

struct UiTextureResource {
    keen::PixelFormat format; // Offset: 0
    keen::uint2 size; // Offset: 4
    keen::uint8 levelCount; // Offset: 12
    keen::ContentHash data; // Offset: 16
};

typedef keen::ObjectReference<keen::ds::Image> ImageReference;

struct UiTexture {
    keen::ds::UiTextureResource texture; // Offset: 0
    keen::ds::ImageReference image; // Offset: 32
};

typedef keen::FactionMask FactionMask;

struct BuffType {
    keen::ds::BuffTypeId buffTypeId; // Offset: 0
    keen::ds::BuffSlotType slot; // Offset: 4
    keen::ds::BuffApplyType applyType; // Offset: 5
    keen::Time defaultLifeTime; // Offset: 8
    keen::ds::NameLocaTag name; // Offset: 16
    keen::ds::DescriptionLocaTag description; // Offset: 32
    keen::bool hideInUi; // Offset: 48
    keen::ds::UiTexture icon; // Offset: 52
    keen::bool hideDurationInUi; // Offset: 100
    keen::bool despawnOnDeath; // Offset: 101
    keen::ds::ImpactProgramReference impact; // Offset: 104
    keen::ds::FactionMask factionExcludeMask; // Offset: 120
    keen::ds::impact::Configurations impactValues; // Offset: 128
    keen::DsArray<keen::ds::ImpactUiValue> uiValues; // Offset: 168
    keen::ds::OnCreateHelper onCreate; // Offset: 208
    keen::ds::WhileAppliedHelper whileApplied; // Offset: 308
};

struct BuffTypeSubDirectory {
};

struct BuffTypDirectory {
};

struct ecs.BuffInstance {
    keen::ds::ecs::EntityId buffEntityId; // Offset: 0
    keen::ds::BuffTypeId typeId; // Offset: 4
    keen::bool cleansed; // Offset: 8
};

struct ecs.BuffContainer {
    keen::StaticArray<keen::ds::ecs::BuffInstance,4> foodBuffs; // Offset: 0
    keen::StaticArray<keen::ds::ecs::BuffInstance,16> genericBuffs; // Offset: 48
    keen::StaticArray<keen::ds::ecs::BuffInstance,16> genericDebuffs; // Offset: 240
    keen::StaticArray<keen::ds::ecs::BuffInstance,1> restedBuff; // Offset: 432
    keen::StaticArray<keen::ds::ecs::BuffInstance,1> terrainDebuff; // Offset: 444
    keen::Time hungerStartTime; // Offset: 456
    keen::bool extendedFoodBuffSlots; // Offset: 464
};

struct impact.DamageSetup {
    keen::float32 physicalCutDamage; // Offset: 0
    keen::float32 physicalPierceDamage; // Offset: 4
    keen::float32 physicalBluntDamage; // Offset: 8
    keen::float32 magicalFireDamage; // Offset: 12
    keen::float32 magicalIceDamage; // Offset: 16
    keen::float32 magicalFogDamage; // Offset: 20
    keen::float32 magicalLightningDamage; // Offset: 24
    keen::float32 healing; // Offset: 28
    keen::float32 poisonDamage; // Offset: 32
    keen::sint32 woodDamage; // Offset: 36
    keen::sint32 stoneDamage; // Offset: 40
    keen::sint32 metalDamage; // Offset: 44
    keen::sint32 explosionDamage; // Offset: 48
};

struct ecs.BuffComponent {
    keen::ds::BuffTypeId buffTypeId; // Offset: 0
    keen::ds::impact::DamageSetup damageSetup; // Offset: 4
    keen::bool isDamageSetupSet; // Offset: 56
};

struct ecs.BuffNetworkData {
    keen::Time restDuration; // Offset: 0
    keen::ds::BuffTypeId buffTypeId; // Offset: 8
    keen::float32 durationPercentage; // Offset: 12
};

struct UiTexturePreload {
    keen::DsArray<keen::ds::UiTexture> textures; // Offset: 0
};

struct BuffTypeCollectionResource {
    keen::DsArray<keen::ds::BuffTypeReference> buffs; // Offset: 0
    keen::ds::UiTexturePreload uiTextures; // Offset: 40
};

typedef keen::InhibitBuildingCheck InhibitBuildingCheck;

typedef keen::InhibitBuildType InhibitBuildType;

typedef keen::InhibitBuildMask InhibitBuildMask;

typedef keen::Gender Gender;

typedef keen::ObjectReference<keen::ds::VoicePack> VoicePackReference;

typedef keen::ObjectReference<keen::ds::ColorPreset> ColorPresetReference;

struct CharacterPreset {
    keen::ds::Gender gender; // Offset: 0
    keen::ds::VoicePackReference voicePackId; // Offset: 4
    keen::ds::ColorPresetReference hairGradient; // Offset: 20
    keen::ds::ColorPresetReference beardGradient; // Offset: 36
    keen::ds::PaletteColorReference skinColor; // Offset: 52
    keen::ds::PaletteColorReference eyeBrowColor; // Offset: 68
    keen::ds::PaletteColorReference eyeColor; // Offset: 84
    keen::ds::ItemReference head; // Offset: 100
    keen::ds::ItemReference hair; // Offset: 116
    keen::ds::ItemReference beard; // Offset: 132
    keen::ds::ItemReference neck; // Offset: 148
    keen::ds::ItemReference collar; // Offset: 164
    keen::ds::ItemReference chest; // Offset: 180
    keen::ds::ItemReference waist; // Offset: 196
    keen::ds::ItemReference crotch; // Offset: 212
    keen::ds::ItemReference upperArms; // Offset: 228
    keen::ds::ItemReference lowerArms; // Offset: 244
    keen::ds::ItemReference hands; // Offset: 260
    keen::ds::ItemReference upperLegs; // Offset: 276
    keen::ds::ItemReference lowerLegs; // Offset: 292
    keen::ds::ItemReference feet; // Offset: 308
    keen::ds::ItemReference armourHead; // Offset: 324
    keen::ds::ItemReference armourUpperBody; // Offset: 340
    keen::ds::ItemReference armourArms; // Offset: 356
    keen::ds::ItemReference armourLowerBody; // Offset: 372
    keen::ds::ItemReference armourFeet; // Offset: 388
};

typedef keen::ObjectReference<keen::ds::ColorGradient> ColorGradientReference;

struct ColorPreset {
    keen::ds::ColorGradientReference colorGradient; // Offset: 0
};

typedef keen::ColorPresetId ColorPresetId;

struct ColorPresetResource {
    keen::ds::ColorPresetId presetId; // Offset: 0
    keen::ObjectReference<keen::ds::RenderGradientMapResource> colorGradient; // Offset: 4
};

struct CharacterPresetSubDirectory {
};

struct CharacterPresetDirectory {
};

typedef keen::ObjectReference<keen::ds::CharacterPresetDirectory> CharacterPresetCollectionReference;

typedef keen::CharacterPresetId CharacterPresetId;

typedef keen::VoicePackId VoicePackId;

struct CharacterPresetResource {
    keen::ds::CharacterPreset references; // Offset: 0
    keen::ds::CharacterPresetId presetId; // Offset: 404
    keen::ds::Gender gender; // Offset: 408
    keen::ds::VoicePackId voicePackId; // Offset: 412
    keen::ds::ColorPresetId hairColorId; // Offset: 416
    keen::ds::ColorPresetId beardColorId; // Offset: 420
    keen::ds::PaletteColorId skinColor; // Offset: 424
    keen::ds::PaletteColorId eyeBrowColor; // Offset: 428
    keen::ds::PaletteColorId eyeColor; // Offset: 432
    keen::ds::ItemId head; // Offset: 436
    keen::ds::ItemId hair; // Offset: 440
    keen::ds::ItemId beard; // Offset: 444
    keen::ds::ItemId neck; // Offset: 448
    keen::ds::ItemId collar; // Offset: 452
    keen::ds::ItemId chest; // Offset: 456
    keen::ds::ItemId waist; // Offset: 460
    keen::ds::ItemId crotch; // Offset: 464
    keen::ds::ItemId upperArms; // Offset: 468
    keen::ds::ItemId lowerArms; // Offset: 472
    keen::ds::ItemId hands; // Offset: 476
    keen::ds::ItemId upperLegs; // Offset: 480
    keen::ds::ItemId lowerLegs; // Offset: 484
    keen::ds::ItemId feet; // Offset: 488
    keen::ds::ItemId armourHead; // Offset: 492
    keen::ds::ItemId armourUpperBody; // Offset: 496
    keen::ds::ItemId armourArms; // Offset: 500
    keen::ds::ItemId armourLowerBody; // Offset: 504
    keen::ds::ItemId armourFeet; // Offset: 508
};

struct ColorCombination {
    keen::ds::PaletteColorReference color0; // Offset: 0
    keen::ds::PaletteColorReference color1; // Offset: 16
    keen::ds::PaletteColorReference color2; // Offset: 32
};

struct CharacterPresetPreviewModelInfo {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
    keen::ds::ColorCombination colorCombination; // Offset: 16
    keen::ObjectReference<keen::ds::RenderGradientMapResource> gradient; // Offset: 64
    keen::DsArray<keen::ds::RenderBlendShapeSlot> blendShapes; // Offset: 80
};

typedef keen::ObjectReference<keen::ds::CharacterPreset> CharacterPresetReference;

typedef keen::BlendShapeMask BlendShapeMask;

struct CharacterPresetPreview {
    keen::ds::CharacterPresetReference preset; // Offset: 0
    keen::DsArray<keen::ds::CharacterPresetPreviewModelInfo> models; // Offset: 16
    keen::ds::BlendShapeMask activeBlendShapes; // Offset: 56
};

typedef keen::ObjectReference<keen::ds::CharacterPreset> CharacterPresetObjectReference;

struct CharacterPresetCollection {
    keen::DsArray<keen::ds::CharacterPresetResource> presets; // Offset: 0
    keen::DsArray<keen::ds::ColorPresetResource> colorGradients; // Offset: 40
};

typedef keen::ColorCombinationId ColorCombinationId;

typedef keen::ObjectReference<keen::ds::ColorCombination> ColorCombinationReference;

typedef keen::ColorCombinationResource ColorCombinationResource;

struct ColorCombinationSubDirectory {
};

struct ColorCombinationDirectory {
};

struct ecs.ComfortQuery {
    keen::ds::ecs::RangeQueryId queryId; // Offset: 0
    keen::Time nextQuery; // Offset: 8
    keen::bool nearWarmth; // Offset: 16
    keen::ds::ecs::EntityId warmthEntityId; // Offset: 20
};

typedef keen::ecs::ComfortCategory ecs.ComfortCategory;

struct ecs.ComfortProvider {
    keen::sint32 comfort; // Offset: 0
    keen::ds::ecs::ComfortCategory category; // Offset: 4
    keen::float32 range; // Offset: 8
    keen::uint32 freezingResistance; // Offset: 12
};

struct ecs.NetworkComfort {
    keen::ds::ecs::EntityId hearthEntityId; // Offset: 0
    keen::uint16 level; // Offset: 4
};

typedef keen::ecs::ShelterQueryState ecs.ShelterQueryState;

struct ecs.Shelter {
    keen::float32 checkRange; // Offset: 0
    keen::float32 requiredShelterPercentage; // Offset: 4
};

typedef keen::ecs::ShelterRay ecs.ShelterRay;

typedef keen::ecs::RayHitMask ecs.RayHitMask;

struct ecs.DynamicShelter {
    keen::uint32 nextQueryTick; // Offset: 0
    keen::float32 shelterPercentage; // Offset: 4
    keen::ds::ecs::RayHitMask queryHits; // Offset: 8
    keen::ds::ecs::ShelterQueryState queryState; // Offset: 10
    keen::bool sheltered; // Offset: 11
    keen::bool shelterStateSet; // Offset: 12
};

struct ecs.Resting {
    keen::Time waitTime0; // Offset: 0
    keen::Time waitTime1; // Offset: 8
    keen::Time waitTime2; // Offset: 16
    keen::Time waitTime3; // Offset: 24
    keen::Time waitTime4; // Offset: 32
};

struct CraftingWorkshopDirectory {
};

struct CraftingWorkshopSubDirectory {
};

struct UiWorkshopRenderingOptions {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
    keen::ds::animationgraph::StateIdReference defaultAnimation; // Offset: 16
    keen::ds::animationgraph::StateIdHash defaultAnimationStateId; // Offset: 32
    keen::ObjectReference<keen::ds::AnimationGraph> animationGraph; // Offset: 36
};

typedef keen::KnowledgeRequirementType KnowledgeRequirementType;

typedef keen::PredefinedKnowledgeTypes PredefinedKnowledgeTypes;

typedef keen::ItemKnowledgeTrigger ItemKnowledgeTrigger;

struct GameKnowledgeRequirementBase {
    keen::ds::KnowledgeRequirementType queryType; // Offset: 0
    keen::ObjectReference<keen::ds::WorldKnowledgeObject> knowledge; // Offset: 4
    keen::ObjectReference<keen::ds::PlayerKnowledgeObject> playerKnowledge; // Offset: 20
    keen::ds::PredefinedKnowledgeTypes predefinedKnowledge; // Offset: 36
    keen::ds::ItemKnowledgeTrigger itemKnowledge; // Offset: 37
    keen::ObjectReference<keen::ds::ItemInfo> item; // Offset: 40
    keen::ObjectReference<keen::ds::NpcDialogOptionBase> dialogOption; // Offset: 56
    keen::ObjectReference<keen::ds::GameKnowledgeQuery> query; // Offset: 72
    keen::ObjectReference<keen::ds::FbUiWorldEvent> triggerUiEvent; // Offset: 88
};

struct GameKnowledgeRequirement {
};

struct WorkshopDefinition {
    keen::ds::LocaTagReference name; // Offset: 0
    keen::ds::ItemReference item; // Offset: 16
    keen::bool isNpc; // Offset: 32
    keen::bool ignoreInJournalUi; // Offset: 33
    keen::ds::GameKnowledgeRequirement unlockRequirement; // Offset: 36
};

typedef keen::ObjectReference<keen::ds::WorkshopDefinition> WorkshopReference;

struct CraftingPropDefinition {
    keen::ds::LocaTagReference name; // Offset: 0
    keen::ds::ItemReference item; // Offset: 16
};

typedef keen::WorkshopId WorkshopId;

struct WorkshopResource {
    keen::bool isNpc; // Offset: 0
    keen::bool ignoreInJournalUi; // Offset: 1
    keen::Guid workshopGuid; // Offset: 4
    keen::ds::WorkshopId workshopId; // Offset: 20
    keen::ds::LocaTagId name; // Offset: 24
    keen::ds::ItemId item; // Offset: 28
    keen::ds::ItemReference itemRef; // Offset: 32
};

typedef keen::CraftingPropMask CraftingPropMask;

typedef keen::CraftingPropId CraftingPropId;

struct CraftingPropResource {
    keen::Guid craftingPropGuid; // Offset: 0
    keen::ds::CraftingPropId craftingPropId; // Offset: 16
    keen::uint8 craftingPropIndex; // Offset: 20
    keen::ds::LocaTagId name; // Offset: 24
    keen::ds::ItemId item; // Offset: 28
    keen::ds::ItemReference itemRef; // Offset: 32
};

struct WorkshopRegistryResource {
    keen::DsArray<keen::ds::WorkshopResource> npcs; // Offset: 0
    keen::DsArray<keen::ds::WorkshopResource> workshops; // Offset: 40
    keen::DsArray<keen::ds::CraftingPropResource> craftingProps; // Offset: 80
};

typedef keen::CustomStringId CustomStringId;

struct debug.EnemySpawnEntry {
    keen::DsString displayName; // Offset: 0
    keen::ds::ecs::TemplateReference entity; // Offset: 40
    keen::uint8 sortPriority; // Offset: 56
};

struct debug.EnemyDebugMenuFilterEntry {
    keen::DsString displayName; // Offset: 0
    keen::DsString filter; // Offset: 40
};

struct debug.EnemyDebugMenu {
    keen::DsArray<keen::ds::debug::EnemySpawnEntry> entries; // Offset: 0
    keen::DsArray<keen::ds::debug::EnemyDebugMenuFilterEntry> filters; // Offset: 40
    keen::sint32 maxLevel; // Offset: 80
};

typedef keen::DialogOptionId DialogOptionId;

struct NpcDialogDirectory {
};

struct NpcDialogDefinition {
    keen::ds::actor::ActorSequenceReference defaultSequence; // Offset: 0
    keen::ds::actor::ActorSequenceReference missingRequirementSequence; // Offset: 16
    keen::ds::LocaTagReference headline; // Offset: 32
    keen::ds::LocaTagReference craftingOption; // Offset: 48
    keen::ds::LocaTagReference itemUpgradeOption; // Offset: 64
    keen::ds::LocaTagReference itemRecyclingOption; // Offset: 80
    keen::ds::LocaTagReference sendBackToFlameOption; // Offset: 96
};

struct NpcDialogGroup {
};

struct NpcDialogOptionBase {
    keen::bool overrideSequence; // Offset: 0
    keen::ds::actor::ActorSequenceReference sequence; // Offset: 4
};

struct NpcDialogInitLine {
    keen::bool isWakeup; // Offset: 20
};

struct NpcDialogFarewellLine {
};

struct NpcDialogTransitionLine {
};

struct NpcDialogOption {
    keen::ds::LocaTagReference name; // Offset: 20
};

struct NpcDialogResponseBase {
};

struct NpcDialogText {
    keen::ds::LocaTagReference body; // Offset: 0
};

struct NpcDialogOptionResourceBase {
    keen::ds::DialogOptionId optionId; // Offset: 0
    keen::bool overrideSequence; // Offset: 4
    keen::ds::actor::ActorSequenceReference sequence; // Offset: 8
    keen::ds::KnowledgeId unlockKnowledge; // Offset: 24
    keen::ds::KnowledgeId knowledgeRequirement; // Offset: 28
    keen::DsArray<keen::ds::LocaTagId> bodyTexts; // Offset: 32
};

struct NpcDialogInitLineResource {
    keen::bool isWakeup; // Offset: 72
};

struct NpcDialogTransitionLineResource {
};

struct NpcDialogFarewellResource {
};

struct NpcDialogOptionResource {
    keen::ds::LocaTagId optionText; // Offset: 72
};

struct NpcDialogResource {
    keen::ds::LocaTagId headline; // Offset: 0
    keen::ds::LocaTagId crafting; // Offset: 4
    keen::ds::LocaTagId itemUpgrade; // Offset: 8
    keen::ds::LocaTagId itemRecycling; // Offset: 12
    keen::ds::LocaTagId sendBackToFlame; // Offset: 16
    keen::ds::actor::ActorSequenceReference defaultSequence; // Offset: 20
    keen::ds::actor::ActorSequenceReference missingRequirementSequence; // Offset: 36
    keen::DsArray<keen::ds::NpcDialogInitLineResource> initLines; // Offset: 56
    keen::DsArray<keen::ds::NpcDialogTransitionLineResource> transitionLines; // Offset: 96
    keen::DsArray<keen::ds::NpcDialogFarewellResource> farewellLines; // Offset: 136
    keen::DsArray<keen::ds::NpcDialogOptionResource> dialogOptions; // Offset: 176
};

typedef keen::EquipmentSlotType EquipmentSlotType;

typedef keen::EquipmentSlot EquipmentSlot;

typedef keen::VisualEquippedItems VisualEquippedItems;

typedef keen::VisualEquipmentMask VisualEquipmentMask;

typedef keen::BlendShapeFlags BlendShapeFlags;

typedef keen::ImpactEquippedItems ImpactEquippedItems;

typedef keen::ImpactEquipmentMask ImpactEquipmentMask;

typedef keen::PerkId PerkId;

struct ecs.ItemImpact {
    keen::ds::ItemInstanceInfo itemInstance; // Offset: 0
    keen::ds::ecs::EntityId entityId; // Offset: 20
    keen::StaticArray<keen::ds::ecs::EntityId,5> perkEntities; // Offset: 24
    keen::StaticArray<keen::ds::PerkId,5> perkIds; // Offset: 44
};

struct ecs.ItemVisual {
    keen::ds::ItemInstanceInfo itemInstance; // Offset: 0
    keen::ds::ecs::EntityId entityId; // Offset: 20
};

struct ecs.EquipmentSlotData {
    keen::ds::InventorySlotId vanityHead; // Offset: 0
    keen::ds::InventorySlotId vanityUpperBody; // Offset: 8
    keen::ds::InventorySlotId vanityArms; // Offset: 16
    keen::ds::InventorySlotId vanityLowerBody; // Offset: 24
    keen::ds::InventorySlotId vanityFeet; // Offset: 32
    keen::ds::InventorySlotId armourHead; // Offset: 40
    keen::ds::InventorySlotId armourUpperBody; // Offset: 48
    keen::ds::InventorySlotId armourArms; // Offset: 56
    keen::ds::InventorySlotId armourLowerBody; // Offset: 64
    keen::ds::InventorySlotId armourFeet; // Offset: 72
    keen::ds::InventorySlotId bodyPartHead; // Offset: 80
    keen::ds::InventorySlotId bodyPartHair; // Offset: 88
    keen::ds::InventorySlotId bodyPartEyeBrow; // Offset: 96
    keen::ds::InventorySlotId bodyPartBeard; // Offset: 104
    keen::ds::InventorySlotId bodyPartNeck; // Offset: 112
    keen::ds::InventorySlotId bodyPartCollar; // Offset: 120
    keen::ds::InventorySlotId bodyPartChest; // Offset: 128
    keen::ds::InventorySlotId bodyPartWaist; // Offset: 136
    keen::ds::InventorySlotId bodyPartCrotch; // Offset: 144
    keen::ds::InventorySlotId bodyPartUpperArms; // Offset: 152
    keen::ds::InventorySlotId bodyPartLowerArms; // Offset: 160
    keen::ds::InventorySlotId bodyPartHands; // Offset: 168
    keen::ds::InventorySlotId bodyPartUpperLegs; // Offset: 176
    keen::ds::InventorySlotId bodyPartLowerLegs; // Offset: 184
    keen::ds::InventorySlotId bodyPartFeet; // Offset: 192
    keen::ds::InventorySlotId ring0; // Offset: 200
    keen::ds::InventorySlotId ring1; // Offset: 208
    keen::ds::InventorySlotId accessory0; // Offset: 216
    keen::ds::InventorySlotId accessory1; // Offset: 224
    keen::ds::InventorySlotId rangedWeapon; // Offset: 232
    keen::ds::InventorySlotId shield; // Offset: 240
    keen::ds::InventorySlotId arrow; // Offset: 248
    keen::ds::InventorySlotId spell; // Offset: 256
    keen::ds::InventorySlotId terrainMaterial; // Offset: 264
    keen::ds::InventorySlotId blueprintMaterialDefault; // Offset: 272
    keen::ds::InventorySlotId blueprintMaterialRoof; // Offset: 280
    keen::ds::InventorySlotId hookShot; // Offset: 288
    keen::ds::InventorySlotId glider; // Offset: 296
    keen::ds::InventorySlotId climbWall; // Offset: 304
    keen::ds::InventorySlotId backpack; // Offset: 312
};

typedef keen::ecs::CspItemIsBroken ecs.CspItemIsBroken;

typedef keen::ecs::CspItemIsBrokenMask ecs.CspItemIsBrokenMask;

struct ActionbarSlotSelection {
    keen::ds::InventorySlotIndex index; // Offset: 0
};

struct ecs.SlotSelection {
    keen::ds::ecs::EquipmentSlotData equipment; // Offset: 0
    keen::StaticArray<keen::ds::ecs::EntityId,2> actionbarEntityIds; // Offset: 320
    keen::ds::ItemInstanceInfo actionItem; // Offset: 328
    keen::ds::ImpactEquipmentMask disabledEquipment; // Offset: 348
    keen::ds::ActionbarSlotSelection actionbarSlotSelection; // Offset: 352
    keen::ds::ecs::CspItemIsBrokenMask cspItemIsBrokenHelper; // Offset: 356
};

struct ecs.FinishedActionbarInit {
};

struct ecs.PackedEquipmentSlotEntityIds {
    keen::ds::ecs::EntityId vanityHead; // Offset: 0
    keen::ds::ecs::EntityId vanityUpperBody; // Offset: 4
    keen::ds::ecs::EntityId vanityArms; // Offset: 8
    keen::ds::ecs::EntityId vanityLowerBody; // Offset: 12
    keen::ds::ecs::EntityId vanityFeet; // Offset: 16
    keen::ds::ecs::EntityId armourHead; // Offset: 20
    keen::ds::ecs::EntityId armourUpperBody; // Offset: 24
    keen::ds::ecs::EntityId armourArms; // Offset: 28
    keen::ds::ecs::EntityId armourLowerBody; // Offset: 32
    keen::ds::ecs::EntityId armourFeet; // Offset: 36
    keen::ds::ecs::EntityId bodyPartHead; // Offset: 40
    keen::ds::ecs::EntityId bodyPartHair; // Offset: 44
    keen::ds::ecs::EntityId bodyPartEyeBrow; // Offset: 48
    keen::ds::ecs::EntityId bodyPartBeard; // Offset: 52
    keen::ds::ecs::EntityId bodyPartNeck; // Offset: 56
    keen::ds::ecs::EntityId bodyPartCollar; // Offset: 60
    keen::ds::ecs::EntityId bodyPartChest; // Offset: 64
    keen::ds::ecs::EntityId bodyPartWaist; // Offset: 68
    keen::ds::ecs::EntityId bodyPartCrotch; // Offset: 72
    keen::ds::ecs::EntityId bodyPartUpperArms; // Offset: 76
    keen::ds::ecs::EntityId bodyPartLowerArms; // Offset: 80
    keen::ds::ecs::EntityId bodyPartHands; // Offset: 84
    keen::ds::ecs::EntityId bodyPartUpperLegs; // Offset: 88
    keen::ds::ecs::EntityId bodyPartLowerLegs; // Offset: 92
    keen::ds::ecs::EntityId bodyPartFeet; // Offset: 96
    keen::ds::ecs::EntityId ring0; // Offset: 100
    keen::ds::ecs::EntityId ring1; // Offset: 104
    keen::ds::ecs::EntityId accessory0; // Offset: 108
    keen::ds::ecs::EntityId accessory1; // Offset: 112
    keen::ds::ecs::EntityId rangedWeapon; // Offset: 116
    keen::ds::ecs::EntityId shield; // Offset: 120
    keen::ds::ecs::EntityId arrow; // Offset: 124
    keen::ds::ecs::EntityId spell; // Offset: 128
    keen::ds::ecs::EntityId terrainMaterial; // Offset: 132
    keen::ds::ecs::EntityId blueprintMaterialDefault; // Offset: 136
    keen::ds::ecs::EntityId blueprintMaterialRoof; // Offset: 140
    keen::ds::ecs::EntityId hookShot; // Offset: 144
    keen::ds::ecs::EntityId glider; // Offset: 148
    keen::ds::ecs::EntityId climbWall; // Offset: 152
    keen::ds::ecs::EntityId backpack; // Offset: 156
};

struct ecs.PackedEquipmentSlotIndices {
    keen::ds::InventorySlotIndex vanityHead; // Offset: 0
    keen::ds::InventorySlotIndex vanityUpperBody; // Offset: 1
    keen::ds::InventorySlotIndex vanityArms; // Offset: 2
    keen::ds::InventorySlotIndex vanityLowerBody; // Offset: 3
    keen::ds::InventorySlotIndex vanityFeet; // Offset: 4
    keen::ds::InventorySlotIndex armourHead; // Offset: 5
    keen::ds::InventorySlotIndex armourUpperBody; // Offset: 6
    keen::ds::InventorySlotIndex armourArms; // Offset: 7
    keen::ds::InventorySlotIndex armourLowerBody; // Offset: 8
    keen::ds::InventorySlotIndex armourFeet; // Offset: 9
    keen::ds::InventorySlotIndex bodyPartHead; // Offset: 10
    keen::ds::InventorySlotIndex bodyPartHair; // Offset: 11
    keen::ds::InventorySlotIndex bodyPartEyeBrow; // Offset: 12
    keen::ds::InventorySlotIndex bodyPartBeard; // Offset: 13
    keen::ds::InventorySlotIndex bodyPartNeck; // Offset: 14
    keen::ds::InventorySlotIndex bodyPartCollar; // Offset: 15
    keen::ds::InventorySlotIndex bodyPartChest; // Offset: 16
    keen::ds::InventorySlotIndex bodyPartWaist; // Offset: 17
    keen::ds::InventorySlotIndex bodyPartCrotch; // Offset: 18
    keen::ds::InventorySlotIndex bodyPartUpperArms; // Offset: 19
    keen::ds::InventorySlotIndex bodyPartLowerArms; // Offset: 20
    keen::ds::InventorySlotIndex bodyPartHands; // Offset: 21
    keen::ds::InventorySlotIndex bodyPartUpperLegs; // Offset: 22
    keen::ds::InventorySlotIndex bodyPartLowerLegs; // Offset: 23
    keen::ds::InventorySlotIndex bodyPartFeet; // Offset: 24
    keen::ds::InventorySlotIndex ring0; // Offset: 25
    keen::ds::InventorySlotIndex ring1; // Offset: 26
    keen::ds::InventorySlotIndex accessory0; // Offset: 27
    keen::ds::InventorySlotIndex accessory1; // Offset: 28
    keen::ds::InventorySlotIndex rangedWeapon; // Offset: 29
    keen::ds::InventorySlotIndex shield; // Offset: 30
    keen::ds::InventorySlotIndex arrow; // Offset: 31
    keen::ds::InventorySlotIndex spell; // Offset: 32
    keen::ds::InventorySlotIndex terrainMaterial; // Offset: 33
    keen::ds::InventorySlotIndex blueprintMaterialDefault; // Offset: 34
    keen::ds::InventorySlotIndex blueprintMaterialRoof; // Offset: 35
    keen::ds::InventorySlotIndex hookShot; // Offset: 36
    keen::ds::InventorySlotIndex glider; // Offset: 37
    keen::ds::InventorySlotIndex climbWall; // Offset: 38
    keen::ds::InventorySlotIndex backpack; // Offset: 39
};

struct ecs.PackedSlotSelection {
    keen::ds::ecs::PackedEquipmentSlotEntityIds equipmentEntityIds; // Offset: 0
    keen::ds::ecs::PackedEquipmentSlotIndices equipmentIndices; // Offset: 160
    keen::StaticArray<keen::ds::ecs::EntityId,2> actionbarEntityIds; // Offset: 200
    keen::ds::ItemInstanceInfo actionItem; // Offset: 208
    keen::ds::ImpactEquipmentMask disabledEquipment; // Offset: 228
    keen::ds::ActionbarSlotSelection actionbarSlotSelection; // Offset: 232
    keen::uint32 cspItemIsBrokenHelper; // Offset: 236
};

struct ecs.CspHackInventoryStockSelection {
    keen::StaticArray<keen::uint16,5> versions; // Offset: 0
};

struct ecs.Equipment {
    keen::ds::VisualEquipmentMask visualMask; // Offset: 0
    keen::ds::ImpactEquipmentMask impactMask; // Offset: 4
    keen::StaticArray<keen::ds::ecs::ItemImpact,11> equipmentImpacts; // Offset: 8
    keen::StaticArray<keen::ds::ecs::ItemVisual,24> equipmentVisuals; // Offset: 712
    keen::ds::CollisionFeedbackMaterialReference blockMaterial; // Offset: 1288
    keen::ds::CollisionFeedbackMaterialReference bodyMaterial; // Offset: 1304
};

struct ecs.RenderEquipment {
    keen::StaticArray<keen::uint32,24> modelHandles; // Offset: 0
    keen::StaticArray<keen::ObjectReference<keen::ds::Model>,24> lastModels; // Offset: 96
    keen::StaticArray<keen::ds::ColorCombinationResource,24> colors; // Offset: 480
    keen::ds::VisualEquipmentMask hideMask; // Offset: 768
    keen::ds::MaterialFeedbackId foleyMaterialId; // Offset: 772
    keen::ds::BlendShapeMask blendShapeMask; // Offset: 776
};

typedef keen::PrimaryAnimationSet PrimaryAnimationSet;

typedef keen::SecondaryAnimationSet SecondaryAnimationSet;

struct ecs.EquipmentAnimationSets {
    keen::ds::PrimaryAnimationSet primaryAnimationSet; // Offset: 0
    keen::ds::SecondaryAnimationSet secondaryAnimationSet; // Offset: 1
};

struct Game38RootObjects {
    keen::ObjectReference<keen::ds::RenderSettingsGpuPresets> renderSettingsGpuPresets; // Offset: 0
    keen::ObjectReference<keen::ds::Scene> scene; // Offset: 16
    keen::ObjectReference<keen::ds::ItemDirectory> itemDirectory; // Offset: 32
    keen::ObjectReference<keen::ds::GameKnowledgeDirectory> gameKnowledgeDirectory; // Offset: 48
    keen::ObjectReference<keen::ds::KnowledgeQueryDirectory> gameKnowledgeQueryResourceDb; // Offset: 64
    keen::ObjectReference<keen::ds::GameKnowledgeQueryTriggerResource> gameKnowledgeQueryTriggerResource; // Offset: 80
    keen::ObjectReference<keen::ds::DefaultLootLabelCollectionRootDirectory> lootLabelCollection; // Offset: 96
    keen::ObjectReference<keen::ds::RecipeList> recipeRegistry; // Offset: 112
    keen::ObjectReference<keen::ds::BalancingTable> balancingTable; // Offset: 128
    keen::ObjectReference<keen::ds::CraftingWorkshopDirectory> workshopRegistry; // Offset: 144
    keen::ObjectReference<keen::ds::BuffTypDirectory> buffTypeCollection; // Offset: 160
    keen::ObjectReference<keen::ds::MidiSongDirectory> midiSongCollection; // Offset: 176
    keen::ObjectReference<keen::ds::ImpactDirectory> impactRegistry; // Offset: 192
    keen::ObjectReference<keen::ds::AttributeContainer> attributeContainer; // Offset: 208
    keen::ObjectReference<keen::ds::ActorActionContainerRoot> actorSequenceCollection; // Offset: 224
    keen::ObjectReference<keen::ds::TerraformingEfficiencyRegistryResource> terraformingEfficiencyRegistry; // Offset: 240
    keen::ObjectReference<keen::ds::VoxelBlueprintRegistryFolder> voxelBlueprintConfig; // Offset: 256
    keen::ObjectReference<keen::ds::VoxelBlueprintItemRegistryResource> voxelBlueprintItemRegistry; // Offset: 272
    keen::ObjectReference<keen::ds::VoxelBlueprintMaterialPoolRegistryFolder> voxelBlueprintMaterialPoolRegistry; // Offset: 288
    keen::ObjectReference<keen::ds::enemy::EnemyArsenalDirectory> enemyArsenalRegistry; // Offset: 304
    keen::ObjectReference<keen::ds::PerkDirectory> perkCollection; // Offset: 320
    keen::ObjectReference<keen::ds::IngameTimeConfig> ingameTimeConfig; // Offset: 336
    keen::ObjectReference<keen::ds::SkillTreeDefinition> skillTree; // Offset: 352
    keen::ObjectReference<keen::ds::ecs::TemplateDirectory> templateCollection; // Offset: 368
    keen::ObjectReference<keen::ds::FbUiBundle> fbUiBundle; // Offset: 384
    keen::ObjectReference<keen::ds::JournalDirectory> journalRegistry; // Offset: 400
    keen::ObjectReference<keen::ds::MapMarkerRegistryTool> mapMarkerRegistry; // Offset: 416
    keen::ObjectReference<keen::ds::MaterialFeedbackDirectory> materialFeedbackCollection; // Offset: 432
    keen::ObjectReference<keen::ds::LocaTagCollection> locaTagCollection; // Offset: 448
    keen::ObjectReference<keen::ds::VoicePackDirectory> voicePacks; // Offset: 464
    keen::ObjectReference<keen::ds::AmbientCollectionResource> ambientCollection; // Offset: 480
    keen::ObjectReference<keen::ds::FbUiMap> fbUiMapResource; // Offset: 496
    keen::ObjectReference<keen::ds::UiFont> uiFontDefault; // Offset: 512
    keen::ObjectReference<keen::ds::UiFont> uiFontFancy; // Offset: 528
    keen::ObjectReference<keen::ds::VfxDefinition> grassVfx; // Offset: 544
    keen::ObjectReference<keen::ds::VfxDefinition> buildingBlockDamageDecalVfx; // Offset: 560
    keen::ObjectReference<keen::ds::VfxDefinition> blueprintHoverHighlightVfx; // Offset: 576
    keen::ObjectReference<keen::ds::ClothCollider> maleClothCollider; // Offset: 592
    keen::ObjectReference<keen::ds::ClothCollider> femaleClothCollider; // Offset: 608
    keen::ObjectReference<keen::ds::Notifier> staminaDrainNotifier; // Offset: 624
    keen::ObjectReference<keen::ds::Notifier> exhaustedNotifier; // Offset: 640
    keen::ObjectReference<keen::ds::Notifier> pickupLootNotifier; // Offset: 656
    keen::ObjectReference<keen::ds::Notifier> itemBrokenNotifier; // Offset: 672
    keen::ObjectReference<keen::ds::RenderSystemResource> renderSystem; // Offset: 688
    keen::ObjectReference<keen::ds::GpcResourceList> gpcResourceList; // Offset: 704
    keen::ObjectReference<keen::ds::VolumetricFogInitializationMaterial> analyticFog; // Offset: 720
    keen::ObjectReference<keen::ds::VoxelMaterialList> buildingMaterialBlending; // Offset: 736
    keen::ObjectReference<keen::ds::WorldMaterial2> worldMaterial2; // Offset: 752
    keen::ObjectReference<keen::ds::VolumetricFog2ResourceData> volumetricFog2; // Offset: 768
    keen::ObjectReference<keen::ds::VolumetricFogGridRenderParameters> volumetricFogGridParameters; // Offset: 784
    keen::ObjectReference<keen::ds::SoundContainer> pregameMusic; // Offset: 800
    keen::ObjectReference<keen::ds::SoundContainer> loreIntroMusic; // Offset: 816
    keen::ObjectReference<keen::ds::SoundContainer> spellChargeFullSfx; // Offset: 832
    keen::ObjectReference<keen::ds::debug::EnemyDebugMenu> enemyDebugMenu; // Offset: 848
    keen::ObjectReference<keen::ds::CharacterPresetCollectionReference> characterPresetCollection; // Offset: 864
    keen::ObjectReference<keen::ds::TwitchDropCollection> twitchDropCollection; // Offset: 880
    keen::ObjectReference<keen::ds::Scene> characterScenePlayer; // Offset: 896
    keen::ObjectReference<keen::ds::Scene> characterScenePlayerPortrait; // Offset: 912
    keen::ObjectReference<keen::ds::Scene> characterScenePlayerPregame; // Offset: 928
    keen::ObjectReference<keen::ds::Scene> characterSceneNpc; // Offset: 944
    keen::ObjectReference<keen::ds::CommerceProductDirectory> commerceProducts; // Offset: 960
    keen::ObjectReference<keen::ds::AchievementDirectory> achievements; // Offset: 976
    keen::ObjectReference<keen::ds::PreloadVfxList> preloadVfxList; // Offset: 992
    keen::ObjectReference<keen::ds::ColorPaletteCollection> colorPaletteCollection; // Offset: 1008
    keen::ObjectReference<keen::ds::WeatherSystemConfiguration> weatherSystemResource; // Offset: 1024
};

struct Game38SharedResources {
    keen::ObjectReference<keen::ds::SceneResource> scene; // Offset: 0
    keen::ObjectReference<keen::ds::ItemKnowledgeResource> gameKnowledge; // Offset: 16
    keen::ObjectReference<keen::ds::GameKnowledgeResource> gameKnowledgeResource; // Offset: 32
    keen::ObjectReference<keen::ds::GameKnowledgeQueryResourceDb> gameKnowledgeQueryResourceDb; // Offset: 48
    keen::ObjectReference<keen::ds::ItemRegistryResource> itemRegistry; // Offset: 64
    keen::ObjectReference<keen::ds::JournalRegistryResource> journalRegistry; // Offset: 80
    keen::ObjectReference<keen::ds::DevItemRegistryResource> devItemRegistry; // Offset: 96
    keen::ObjectReference<keen::ds::RecipeRegistryResource> recipeRegistry; // Offset: 112
    keen::ObjectReference<keen::ds::BalancingTable> balancingTable; // Offset: 128
    keen::ObjectReference<keen::ds::WorkshopRegistryResource> workshopRegistry; // Offset: 144
    keen::ObjectReference<keen::ds::NpcCollection> npcCollection; // Offset: 160
    keen::ObjectReference<keen::ds::DefaultLootLabelCollectionResource> lootLabelCollection; // Offset: 176
    keen::ObjectReference<keen::ds::LootableItemsResource> lootableItems; // Offset: 192
    keen::ObjectReference<keen::ds::LootDistributionTreeResource> lootDistribution; // Offset: 208
    keen::ObjectReference<keen::ds::BuffTypeCollectionResource> buffTypeCollection; // Offset: 224
    keen::ObjectReference<keen::ds::MidiSongCollection> midiSongCollection; // Offset: 240
    keen::ObjectReference<keen::ds::ImpactRegistryResource> impactRegistry; // Offset: 256
    keen::ObjectReference<keen::ds::AttributeContainerResource> attributeContainer; // Offset: 272
    keen::ObjectReference<keen::ds::ActorSequenceCollectionResource> actorSequenceCollection; // Offset: 288
    keen::ObjectReference<keen::ds::TerraformingEfficiencyRegistryResource> terraformingEfficiencyRegistry; // Offset: 304
    keen::ObjectReference<keen::ds::GuidRegistryResource> voxelBlueprintConfig; // Offset: 320
    keen::ObjectReference<keen::ds::VoxelBlueprintItemRegistryResource> voxelBlueprintItemRegistry; // Offset: 336
    keen::ObjectReference<keen::ds::VoxelBlueprintMaterialPoolRegistryResource> voxelBlueprintMaterialPoolRegistry; // Offset: 352
    keen::ObjectReference<keen::ds::enemy::EnemyArsenalRegistryResource> enemyArsenalRegistry; // Offset: 368
    keen::ObjectReference<keen::ds::PerkCollectionResource> perkCollection; // Offset: 384
    keen::ObjectReference<keen::ds::IngameTimeConfig> ingameTimeConfig; // Offset: 400
    keen::ObjectReference<keen::ds::SkillTreeResource> skillTree; // Offset: 416
    keen::ObjectReference<keen::ds::ecs::TemplateCollectionResource> templateCollection; // Offset: 432
    keen::ObjectReference<keen::ds::TwitchDropCollection> twitchDropCollection; // Offset: 448
    keen::ObjectReference<keen::ds::NotifierResource> staminaDrainNotifier; // Offset: 464
    keen::ObjectReference<keen::ds::NotifierResource> exhaustedNotifier; // Offset: 480
    keen::ObjectReference<keen::ds::NotifierResource> pickupLootNotifier; // Offset: 496
    keen::ObjectReference<keen::ds::NotifierResource> itemBrokenNotifier; // Offset: 512
    keen::ObjectReference<keen::ds::CharacterPresetCollection> characterPresetCollection; // Offset: 528
    keen::ObjectReference<keen::ds::animationgraph::AnimationGraphDebugInfo> animationGraphDebugInfo; // Offset: 544
    keen::ObjectReference<keen::ds::CommerceProductResource> commerceProducts; // Offset: 560
    keen::ObjectReference<keen::ds::ColorPaletteCollectionResource> colorPaletteCollection; // Offset: 576
    keen::ObjectReference<keen::ds::GameSettingsPresetsResource> gameSettingPresets; // Offset: 592
    keen::ObjectReference<keen::ds::WeatherSystemResource> weatherSystemResource; // Offset: 608
};

struct Game38ClientResources {
    keen::ds::Game38SharedResources shared; // Offset: 0
    keen::ObjectReference<keen::ds::RenderSettingsGpuPresetsResource> renderSettingsGpuPresets; // Offset: 624
    keen::ObjectReference<keen::ds::FbUiBundle> fbUiBundle; // Offset: 640
    keen::ObjectReference<keen::ds::MapMarkerRegistryResource> mapMarkerRegistry; // Offset: 656
    keen::ObjectReference<keen::ds::ItemKnowledgeResource> itemKnowledge; // Offset: 672
    keen::ObjectReference<keen::ds::VoicePackDirectoryResource> voicePacks; // Offset: 688
    keen::ObjectReference<keen::ds::MaterialFeedbackCollectionResource> materialFeedbackCollection; // Offset: 704
    keen::ObjectReference<keen::ds::LocaTagCollectionResource> locaTagCollection; // Offset: 720
    keen::ObjectReference<keen::ds::RenderColorGradingMapResource> colorGradingFogRegular; // Offset: 736
    keen::ObjectReference<keen::ds::RenderColorGradingMapResource> colorGradingFogDangerous; // Offset: 752
    keen::ObjectReference<keen::ds::RenderColorGradingMapResource> colorGradingLowHealth; // Offset: 768
    keen::ObjectReference<keen::ds::RenderClothColliderResource> maleClothCollider; // Offset: 784
    keen::ObjectReference<keen::ds::RenderClothColliderResource> femaleClothCollider; // Offset: 800
    keen::ObjectReference<keen::ds::FbUiMapResource> fbUiMapResource; // Offset: 816
    keen::ObjectReference<keen::ds::UiFontResource> uiFontDefault; // Offset: 832
    keen::ObjectReference<keen::ds::UiFontResource> uiFontFancy; // Offset: 848
    keen::ObjectReference<keen::ds::VfxResource> grassVfx; // Offset: 864
    keen::ObjectReference<keen::ds::VfxResource> buildingBlockDamageDecalVfx; // Offset: 880
    keen::ObjectReference<keen::ds::VfxResource> blueprintHoverHighlightVfx; // Offset: 896
    keen::ObjectReference<keen::ds::SoundContainerResource> pregameMusic; // Offset: 912
    keen::ObjectReference<keen::ds::SoundContainerResource> loreIntroMusic; // Offset: 928
    keen::ObjectReference<keen::ds::SoundContainerResource> spellChargeFullSfx; // Offset: 944
    keen::ObjectReference<keen::ds::AmbientCollectionResource> ambientCollection; // Offset: 960
    keen::ObjectReference<keen::ds::debug::EnemyDebugMenu> enemyDebugMenu; // Offset: 976
    keen::ObjectReference<keen::ds::SceneResource> characterScenePlayer; // Offset: 992
    keen::ObjectReference<keen::ds::SceneResource> characterScenePlayerPortrait; // Offset: 1008
    keen::ObjectReference<keen::ds::SceneResource> characterScenePlayerPregame; // Offset: 1024
    keen::ObjectReference<keen::ds::SceneResource> characterSceneNpc; // Offset: 1040
    keen::ObjectReference<keen::ds::AchievementDefinitionResource> achievements; // Offset: 1056
    keen::ObjectReference<keen::ds::PreloadVfxListResource> preloadVfxList; // Offset: 1072
};

struct Game38ServerResources {
    keen::ds::Game38SharedResources shared; // Offset: 0
    keen::ObjectReference<keen::ds::GameKnowledgeQueryTriggerResource> gameKnowledgeQueryTriggerResource; // Offset: 624
};

typedef keen::ObjectReference<keen::ds::Midi> MidiReference;

typedef keen::MidiInstrumentType MidiInstrumentType;

struct MidiSong {
    keen::ds::NameLocaTag name; // Offset: 0
    keen::ds::MidiReference midiSong; // Offset: 16
    keen::ds::MidiInstrumentType defaultForInstrument; // Offset: 32
};

struct MidiSongSubDirectory {
};

struct MidiSongDirectory {
};

struct MidiSongResource {
    keen::ds::LocaTagReference name; // Offset: 0
    keen::ds::MidiReference midiSong; // Offset: 16
    keen::ds::KnowledgeId unlockKnowledge; // Offset: 32
    keen::ds::MidiInstrumentType defaultForInstrument; // Offset: 36
};

struct InstrumentSampleCollectionResource {
    keen::ObjectReference<keen::ds::SamplerInstrumentResource> samplesLute; // Offset: 0
    keen::ObjectReference<keen::ds::SamplerInstrumentResource> samplesLuteChord; // Offset: 16
    keen::ObjectReference<keen::ds::SamplerInstrumentResource> samplesFlute; // Offset: 32
    keen::ObjectReference<keen::ds::SamplerInstrumentResource> samplesHarp; // Offset: 48
    keen::ObjectReference<keen::ds::SamplerInstrumentResource> samplesDounDoun; // Offset: 64
    keen::ObjectReference<keen::ds::SamplerInstrumentResource> samplesTambourin; // Offset: 80
};

struct MidiSongCollection {
    keen::DsArray<keen::ObjectReference<keen::ds::MidiSongResource>> songCollection; // Offset: 0
    keen::ds::InstrumentSampleCollectionResource sampleCollection; // Offset: 40
};

typedef keen::ecs::G38TestSuite ecs.G38TestSuite;

typedef keen::ecs::FailTest ecs.FailTest;

typedef keen::ecs::InventoryTest ecs.InventoryTest;

typedef keen::ecs::DungeonTriggerTest ecs.DungeonTriggerTest;

typedef keen::ecs::KnowledgeTest ecs.KnowledgeTest;

typedef keen::ecs::CookingTest ecs.CookingTest;

typedef keen::ecs::FallDamageTestId ecs.FallDamageTestId;

typedef keen::ecs::SlidingTestId ecs.SlidingTestId;

typedef keen::ecs::ClimbLadderTestId ecs.ClimbLadderTestId;

typedef keen::ecs::ClimbWallTestId ecs.ClimbWallTestId;

typedef keen::ecs::HookShotSwingTestId ecs.HookShotSwingTestId;

typedef keen::ecs::HookShotPullTestId ecs.HookShotPullTestId;

typedef keen::ecs::GliderTestId ecs.GliderTestId;

struct ecs.CookingTestComponent {
    keen::ds::ecs::EntityId campfireEntityId; // Offset: 0
    keen::Time cookTime; // Offset: 8
    keen::Time postCookWaitTime; // Offset: 16
    keen::Time sitWaitTime; // Offset: 24
    keen::Time standWaitTime; // Offset: 32
    keen::uint8 campfireEntityDeletionTryCount; // Offset: 40
    keen::uint8 cookingTestComponentDeletionTryCount; // Offset: 41
    keen::bool sitToggled; // Offset: 42
    keen::bool standToggled; // Offset: 43
    keen::bool cookingToggled; // Offset: 44
};

struct ecs.TestValueMemory {
    keen::float3 vectorValue; // Offset: 0
    keen::float32 floatValue; // Offset: 12
};

struct ecs.FakePlayerSpawner {
    keen::ds::ecs::TemplateReference entityTemplate; // Offset: 0
};

typedef keen::VoxelMaterialType VoxelMaterialType;

struct BaseVoxelMaterial {
};

struct BiomeVoxelMaterial {
    keen::ObjectReference<keen::ds::SolidVoxelMaterial> grassland; // Offset: 0
    keen::ObjectReference<keen::ds::SolidVoxelMaterial> desert; // Offset: 16
    keen::ObjectReference<keen::ds::SolidVoxelMaterial> wetland; // Offset: 32
    keen::ObjectReference<keen::ds::SolidVoxelMaterial> steppes; // Offset: 48
    keen::ObjectReference<keen::ds::SolidVoxelMaterial> deepforest; // Offset: 64
    keen::ObjectReference<keen::ds::SolidVoxelMaterial> coldheights; // Offset: 80
};

typedef keen::HardnessCategory HardnessCategory;

struct VoxelWorldDisplacement {
    keen::ds::ImageReference map; // Offset: 0
    keen::float32 scale; // Offset: 16
    keen::float32 origin; // Offset: 20
    keen::float32 uvScale; // Offset: 24
};

typedef keen::VfxMaterialType VfxMaterialType;

struct SolidVoxelMaterial {
    keen::ds::VoxelMaterialType type; // Offset: 0
    keen::ds::ItemReference materialItem; // Offset: 4
    keen::ds::HardnessCategory hardness; // Offset: 20
    keen::sint32 healthPoints; // Offset: 24
    keen::ObjectReference<keen::ds::Recipe> blockCraftingRecipe; // Offset: 28
    keen::uint32 voxelsPerLootItemExchangeRate; // Offset: 44
    keen::ObjectReference<keen::ds::ExperienceBalanceValue> experienceGain; // Offset: 48
    keen::bool canBeFlattened; // Offset: 64
    keen::bool isSlidingMaterial; // Offset: 65
    keen::ds::VoxelWorldDisplacement sideDisplacement; // Offset: 68
    keen::ds::VoxelWorldDisplacement topDisplacement; // Offset: 96
    keen::ObjectReference<keen::ds::SolidVoxelMaterial> stoneMaterial; // Offset: 124
    keen::bool canReceiveFloorMaterial; // Offset: 140
    keen::ObjectReference<keen::ds::PbrBuildingMaterial> pbrBuildingMaterial; // Offset: 144
    keen::ds::CollisionFeedbackMaterialReference collisionFeedbackMaterial; // Offset: 160
    keen::ds::AmbientEnvironment ambientEnvironment; // Offset: 176
    keen::ds::BuffTypeReference buffType; // Offset: 180
    keen::ObjectReference<keen::ds::VoxelObjectDefinition> previewVoxelObject; // Offset: 196
    keen::bool isDangerous; // Offset: 212
    keen::float frictionFactor; // Offset: 216
    keen::float maxSubmergeDepth; // Offset: 220
    keen::float minSubmergePercentage; // Offset: 224
    keen::float maxSubmergePercentage; // Offset: 228
    keen::ds::VfxMaterialType vfxMaterialType; // Offset: 232
    keen::ds::ecs::EntityTagReference entityTag; // Offset: 236
    keen::ds::ecs::PathNodeType pathNodeType; // Offset: 252
};

struct BaseFogVoxelMaterial {
    keen::ds::VoxelWorldDisplacement sideDisplacement; // Offset: 0
    keen::ds::VoxelWorldDisplacement topDisplacement; // Offset: 28
};

struct FogVoxelMaterial {
    keen::uint8 level; // Offset: 56
};

struct DecorativeFogVoxelMaterial {
};

struct WaterVoxelMaterial {
};

typedef keen::TemperatureVoxelType TemperatureVoxelType;

struct TemperatureVoxelMaterial {
    keen::ds::TemperatureVoxelType temperature; // Offset: 0
};

struct VoxelMaterialTerraformingInfo {
    keen::ds::SolidVoxelMaterial solidVoxelMaterial; // Offset: 0
    keen::ds::PropDamageSusceptibility damageSusceptibility; // Offset: 256
};

struct VoxelMaterialScatteringNoise {
    keen::float32 scale; // Offset: 0
    keen::float32 persistence; // Offset: 4
    keen::float32 outMin; // Offset: 8
    keen::float32 outMax; // Offset: 12
};

struct VoxelMaterialScattering {
    keen::ObjectReference<keen::ds::AbstractScatterImage> densityMap; // Offset: 0
    keen::float32 density; // Offset: 16
    keen::ds::VoxelMaterialScatteringNoise densityNoise; // Offset: 20
    keen::ds::VoxelMaterialScatteringNoise depthNoise; // Offset: 36
    keen::float32 maxWidth; // Offset: 52
    keen::ds::VoxelMaterialScatteringNoise detailNoise; // Offset: 56
    keen::ds::VoxelMaterialScatteringNoise dirtDetailNoise; // Offset: 72
};

typedef keen::VoxelMaterialScatteringShape VoxelMaterialScatteringShape;

struct VoxelMaterialScatterTargetMaterial {
    keen::ObjectReference<keen::ds::SolidVoxelMaterial> material; // Offset: 0
    keen::bool enableScattering; // Offset: 16
    keen::ds::VoxelMaterialScatteringShape shape; // Offset: 17
    keen::float32 modulationInputScale; // Offset: 20
    keen::float32 shapeNoiseScale; // Offset: 24
    keen::float32 structureScale; // Offset: 28
    keen::float32 structureFadeSize; // Offset: 32
    keen::float32 outerRadius; // Offset: 36
    keen::float32 geodesScattterRadius; // Offset: 40
    keen::uint32 geodesCount; // Offset: 44
    keen::float2 geodesRadiusRange; // Offset: 48
    keen::float32 geodesShellWidth; // Offset: 56
};

struct VoxelMaterialScatterTargetMaterialList {
    keen::DsArray<keen::ds::VoxelMaterialScatterTargetMaterial> materials; // Offset: 0
};

struct VoxelMaterialScatteringList {
    keen::DsArray<keen::Guid> materialGuids; // Offset: 0
    keen::DsArray<keen::ds::VoxelMaterialScattering> settings; // Offset: 40
    keen::DsArray<keen::ds::VoxelMaterialScatterTargetMaterialList> targetMaterials; // Offset: 80
};

struct ecs.Health {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,8> dataStorage; // Offset: 36
};

struct ecs.Stamina {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,8> dataStorage; // Offset: 36
};

struct ecs.StaminaDepletionMod {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.StaminaDamageMod {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.Mana {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,8> dataStorage; // Offset: 36
};

struct ecs.Revive {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,6> dataStorage; // Offset: 36
};

struct ecs.Durability {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,2> dataStorage; // Offset: 36
};

struct ecs.Movement {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,12> dataStorage; // Offset: 36
};

struct ecs.RangedCombat {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,5> dataStorage; // Offset: 36
};

struct ecs.FogResistance {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,5> dataStorage; // Offset: 36
};

struct ecs.Level {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::uint32,2> dataStorage; // Offset: 36
};

struct ecs.Experience {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::uint32,3> dataStorage; // Offset: 36
};

struct ecs.Threat {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,14> dataStorage; // Offset: 36
};

struct ecs.ThreatBonus {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,3> dataStorage; // Offset: 36
};

struct ecs.DamageMod {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.ToolDamageMod {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.DamageModBackstab {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.DamageModSkillShot {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.DamageModSneak {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.DamageModMerciless {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.DamageModAgainst {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,6> dataStorage; // Offset: 36
};

struct ecs.HealingMod {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.DamageSusceptibility {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,19> dataStorage; // Offset: 36
};

struct ecs.CritChance {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,8> dataStorage; // Offset: 36
};

struct ecs.CritDamageMod {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.Strength {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,3> dataStorage; // Offset: 36
};

struct ecs.Intelligence {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,3> dataStorage; // Offset: 36
};

struct ecs.Dexterity {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,3> dataStorage; // Offset: 36
};

struct ecs.Endurance {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,3> dataStorage; // Offset: 36
};

struct ecs.Constitution {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,3> dataStorage; // Offset: 36
};

struct ecs.Spirit {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,3> dataStorage; // Offset: 36
};

struct ecs.Armor {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,5> dataStorage; // Offset: 36
};

struct ecs.ArmorPoints {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::uint32,28> dataStorage; // Offset: 36
};

struct ecs.Block {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,1> dataStorage; // Offset: 36
};

struct ecs.ParryProficiency {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.Comfort {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,1> dataStorage; // Offset: 36
};

struct ecs.Rested {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.MeleeDamageMod {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,8> dataStorage; // Offset: 36
};

struct ecs.RangedDamageMod {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,8> dataStorage; // Offset: 36
};

struct ecs.MagicDamageMod {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,8> dataStorage; // Offset: 36
};

struct ecs.AllyAggroMultiplier {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,1> dataStorage; // Offset: 36
};

struct ecs.StaminaRechargeMod {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,1> dataStorage; // Offset: 36
};

struct ecs.HealthRechargeMod {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,1> dataStorage; // Offset: 36
};

struct ecs.ManaRechargeMod {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,1> dataStorage; // Offset: 36
};

struct ecs.WeaponCategoryDamageMod {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,9> dataStorage; // Offset: 36
};

struct ecs.BodyHeatMaxMod {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::float32,4> dataStorage; // Offset: 36
};

struct ecs.BodyHeat {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::uint32,8> dataStorage; // Offset: 36
};

struct ecs.FreezingResistance {
    keen::ds::AttributeRootReference definition; // Offset: 20
    keen::StaticArray<keen::sint32,3> dataStorage; // Offset: 36
};

typedef keen::ItemCollectionId ItemCollectionId;

typedef keen::SignalId SignalId;

typedef keen::LootContainerId LootContainerId;

typedef keen::JournalEntryId JournalEntryId;

struct Signal {
};

typedef keen::ItemStateFlag ItemStateFlag;

typedef keen::ds::LocaTagReference CaptionLocaTag;

typedef keen::ds::LocaTagReference LoreLocaTag;

typedef keen::ItemKnowledgeFlag ItemKnowledgeFlag;

typedef keen::ItemKnowledgeMask ItemKnowledgeMask;

struct RecipeItemStackResource {
    keen::ds::ItemReference itemRef; // Offset: 0
    keen::ds::ItemId item; // Offset: 16
    keen::uint32 count; // Offset: 20
};

typedef keen::InventoryActionType InventoryActionType;

struct VersionedData {
    keen::uint16 changeCount; // Offset: 0
};

typedef keen::UiState UiState;

typedef keen::WheelMenuType WheelMenuType;

typedef keen::FactionType FactionType;

typedef keen::InputMode InputMode;

typedef keen::AttackDirectionInput AttackDirectionInput;

typedef keen::ControllerButtonStyle ControllerButtonStyle;

typedef keen::UiInputId UiInputId;

typedef keen::CharacterState CharacterState;

typedef keen::CharacterStateMask CharacterStateMask;

typedef keen::CharacterId CharacterId;

typedef keen::SaveGameSlotIndex SaveGameSlotIndex;

typedef keen::PlayerId PlayerId;

typedef keen::BaseId BaseId;

struct EnemyPhase {
};

struct JumpToObject {
    keen::Guid objectId; // Offset: 0
};

typedef keen::ecs::SpecialInteraction ecs.SpecialInteraction;

typedef keen::PlayerLoginState PlayerLoginState;

typedef keen::GameClientInitState GameClientInitState;

typedef keen::PlayerPermissions PlayerPermissions;

typedef keen::PlayerPermissionsMask PlayerPermissionsMask;

typedef keen::VoxelConstraint VoxelConstraint;

typedef keen::VoxelConstraintMask VoxelConstraintMask;

struct VoxelRequirements {
    keen::ds::VoxelConstraintMask required; // Offset: 0
    keen::ds::VoxelConstraintMask forbidden; // Offset: 1
};

struct ecs.ServerProgressSystem {
    keen::ds::ecs::EntityId progressEntity; // Offset: 0
    keen::uint32 progressLevel; // Offset: 4
    keen::uint32 currentAltarCount; // Offset: 8
    keen::uint32 currentHighestAltarLevel; // Offset: 12
};

struct ecs.BaseIdComponent {
    keen::ds::BaseId baseId; // Offset: 0
    keen::float3 buildZoneSize; // Offset: 16
    keen::Time endOfTimeout; // Offset: 32
    keen::bool wasAbandoned; // Offset: 40
};

struct ecs.ClientBaseIdComponent {
    keen::Time endOfTimeout; // Offset: 0
    keen::bool wasAbandoned; // Offset: 8
    keen::uint16 farmingAnimalCount; // Offset: 10
    keen::uint16 hungryFarmingAnimalCount; // Offset: 12
    keen::uint16 animalsWithoutBedCount; // Offset: 14
    keen::uint16 npcBedCount; // Offset: 16
    keen::uint16 farmingAnimalBedCount; // Offset: 18
    keen::uint16 occupiedFarmingAnimalBedCount; // Offset: 20
};

struct ecs.NoBuildZone {
};

struct ecs.UnlockedJournalEntries {
    keen::uint16 knowledgeChangeCounter; // Offset: 0
    keen::uint16 journalChangeCounter; // Offset: 2
};

struct ecs.HealthBar {
    keen::Time lastChange; // Offset: 0
};

struct ecs.EnergyProvider {
    keen::uint32 energyPerSecond; // Offset: 0
};

struct ecs.EnergyQuery {
    keen::ds::ecs::EntityId entityId; // Offset: 0
    keen::uint32 energyPerSecond; // Offset: 4
    keen::float32 entityDistanceSquared; // Offset: 8
};

typedef keen::ecs::CookingState ecs.CookingState;

typedef keen::ecs::CookingFlags ecs.CookingFlags;

typedef keen::ecs::CookingMask ecs.CookingMask;

struct ecs.CookingData {
    keen::ds::ecs::EntityId cookingHearthEntityId; // Offset: 0
    keen::ds::ecs::EntityId skewerEntityId; // Offset: 4
    keen::ds::ecs::EntityId burnedFoodEntityId; // Offset: 8
    keen::ds::ecs::EntityId cookFoodEntityId; // Offset: 12
    keen::ds::ItemId baseItemId; // Offset: 16
    keen::ds::ItemId cookingItemId; // Offset: 20
    keen::ds::ItemId nextCookingItemId; // Offset: 24
    keen::ds::KnowledgeId nextKnowledgeTriggerId; // Offset: 28
    keen::ds::KnowledgeId cookingKnowledgeTriggerId; // Offset: 32
    keen::uint32 cookingEnergy; // Offset: 36
    keen::uint32 requiredEnergy; // Offset: 40
    keen::ds::ecs::CookingMask mask; // Offset: 44
    keen::ds::ecs::CookingState state; // Offset: 45
};

struct ecs.NetworkCookingData {
    keen::ds::ecs::EntityId cookingHearthEntityId; // Offset: 0
    keen::ds::ecs::CookingMask mask; // Offset: 4
};

struct ecs.CookingNotifier {
    keen::ds::NotifierReference onFoodStateChange; // Offset: 0
    keen::ds::NotifierReference onFoodBurned; // Offset: 16
};

struct ecs.AttributeRegeneration {
    keen::Time lastNegativeChange; // Offset: 0
    keen::float32 accumulatedValue; // Offset: 8
    keen::sint32 lastValue; // Offset: 12
};

struct ecs.HealthRecharge {
};

struct ecs.StaminaRecharge {
};

struct ecs.ManaRegeneration {
};

struct ecs.BodyHeatRecharge {
};

struct ecs.StaminaDepletion {
    keen::float32 accumulatedValue; // Offset: 0
};

struct ecs.BodyHeatDepletion {
    keen::float32 accumulatedValue; // Offset: 0
};

struct ecs.MovementVector {
    keen::float3 velocity; // Offset: 0
    keen::float3 movement; // Offset: 12
};

struct ecs.Projectile {
};

struct ecs.ParriableProjectile {
    keen::ds::ecs::TemplateReference parriedProjectileTemplate; // Offset: 0
    keen::Angle launchPitchAngleOffset; // Offset: 16
    keen::float32 launchSpeedFactor; // Offset: 20
};

struct ecs.ParriedProjectile {
    keen::ds::FactionType originalFaction; // Offset: 0
    keen::ds::ecs::EntityId originalSpawnerId; // Offset: 4
};

typedef keen::ecs::ProjectileMode ecs.ProjectileMode;

struct ecs.CirclingTargetSettings {
    keen::Angle angleOffset; // Offset: 0
    keen::float radius; // Offset: 4
    keen::float heightOffset; // Offset: 8
};

struct ecs.EnemyProjectile {
    keen::ds::ecs::ProjectileMode mode; // Offset: 0
    keen::float32 targetOffsetY; // Offset: 4
    keen::uint8 maxTries; // Offset: 8
    keen::float32 force; // Offset: 12
    keen::bool addGravity; // Offset: 16
    keen::bool useLowAngle; // Offset: 17
    keen::bool lockTargetPosition; // Offset: 18
    keen::DsArray<keen::Angle> hitAngles; // Offset: 24
    keen::Angle minPitch; // Offset: 64
    keen::Angle maxPitch; // Offset: 68
    keen::Angle maxHorizontalAngle; // Offset: 72
    keen::bool useFixedTargetOffset; // Offset: 76
    keen::ds::ecs::Offset targetOffset; // Offset: 80
    keen::bool useCirclingTarget; // Offset: 120
    keen::ds::ecs::CirclingTargetSettings circlingTargetSettings; // Offset: 124
};

struct ecs.StaticUsedItem {
    keen::ds::ItemReference itemReference; // Offset: 0
};

struct ecs.UsedItem {
    keen::ds::ItemId itemId; // Offset: 0
};

struct ecs.PerkContainer {
    keen::StaticArray<keen::ds::PerkId,5> perkIds; // Offset: 0
    keen::StaticArray<keen::bool,5> perkIsUnlocked; // Offset: 20
};

typedef keen::ecs::DismantleVolumeClass ecs.DismantleVolumeClass;

typedef keen::ecs::DismantleMethod ecs.DismantleMethod;

struct ecs.DismantleOverride {
    keen::bool overrideMethod; // Offset: 0
    keen::ds::ecs::DismantleMethod method; // Offset: 1
    keen::bool overrideVolumeClass; // Offset: 2
    keen::ds::ecs::DismantleVolumeClass volumeClass; // Offset: 3
    keen::bool ignoreBuildZoneChecks; // Offset: 4
    keen::bool preventDismantlingWithFilledInventory; // Offset: 5
};

struct ecs.ClientDismantleOverride {
    keen::bool forceImmediateDismantlePrompt; // Offset: 0
};

struct ecs.SubEntitySpawnInfo {
    keen::ds::ecs::TemplateReference templateRef; // Offset: 0
    keen::ds::ecs::Offset offset; // Offset: 16
    keen::ds::AttachmentSlot slot; // Offset: 56
    keen::bool hasKnowledgeRequirement; // Offset: 57
    keen::ds::GameKnowledgeRequirement knowledgeRequirement; // Offset: 60
    keen::ds::KnowledgeId knowledgeRequirementId; // Offset: 164
    keen::bool attach; // Offset: 168
    keen::bool despawnOnDeath; // Offset: 169
    keen::bool addDespawnLink; // Offset: 170
    keen::bool addOwnerRelationship; // Offset: 171
    keen::bool doNotSave; // Offset: 172
    keen::bool copyConditionalDespawn; // Offset: 173
    keen::bool copyLevel; // Offset: 174
    keen::bool addImpactHierarchy; // Offset: 175
};

struct ecs.SubEntities {
    keen::DsArray<keen::ds::ecs::SubEntitySpawnInfo> subEntities; // Offset: 0
    keen::bool hasSavedChildren; // Offset: 40
};

struct ecs.DynamicSubEntities {
    keen::StaticArray<keen::ds::ecs::EntityId,16> subEntities; // Offset: 0
};

struct ecs.SubEntitiesStop {
};

struct ecs.ToggleSubEntities {
    keen::ds::ecs::ToggleModifier toggleModifier; // Offset: 0
};

struct ecs.DynamicToggleSubEntities {
    keen::bool dontSpawn; // Offset: 0
};

struct ecs.SubEntityAttachmentMask {
    keen::ds::AttachmentSlotMask mask; // Offset: 0
};

struct ecs.EntityAnimation {
    keen::ds::JointAnimationReference animation; // Offset: 0
    keen::uint32 animationHandle; // Offset: 16
    keen::Time sampleTime; // Offset: 24
};

struct ecs.DespawnAfterSequence {
    keen::ds::actor::SequenceRuntimeId sequenceId; // Offset: 0
};

struct ecs.WeaponReference {
    keen::ds::ecs::EntityId weaponEntityId; // Offset: 0
    keen::ds::ecs::EntityId weaponOwnerEntityId; // Offset: 4
};

struct ecs.HitReactionConfig {
    keen::ds::animationgraph::OverlayIdReference hitReactionOverlay; // Offset: 0
    keen::ds::actor::ActorSequenceReference hitSequence; // Offset: 16
};

struct ecs.HitReactionBehavior {
    keen::ds::ecs::HitReactionConfig hitReactionBlockLightAttack; // Offset: 0
    keen::ds::ecs::HitReactionConfig hitReactionLight; // Offset: 32
    keen::ds::ecs::HitReactionConfig hitReactionHeavy; // Offset: 64
    keen::ds::ecs::HitReactionConfig hitReactionBoss; // Offset: 96
    keen::ds::ecs::HitReactionConfig hitReactionLongStun; // Offset: 128
    keen::ds::ecs::HitReactionConfig hitReactionTrapStun; // Offset: 160
    keen::ds::ecs::HitReactionConfig hitReactionShortStunBeGoneSkill; // Offset: 192
    keen::ds::ecs::HitReactionConfig hitReactionThrowIntoAir; // Offset: 224
    keen::ds::ecs::HitReactionConfig hitReactionWhileFlying; // Offset: 256
};

typedef keen::ecs::EntityReferenceType ecs.EntityReferenceType;

struct ecs.LerpRenderTransform {
    keen::bool isInitialized; // Offset: 0
    keen::ds::ecs::EntityReferenceType entityReferenceType; // Offset: 1
    keen::ds::AttachmentSlot attachmentSlot; // Offset: 2
    keen::Time lerpDuration; // Offset: 8
    keen::float32 lerpValueStart; // Offset: 16
    keen::float32 lerpValueEnd; // Offset: 20
    keen::Time lerpTimeStart; // Offset: 24
    keen::float3 translateDelta; // Offset: 32
};

struct ecs.HomeToTarget {
    keen::float3 targetLocalOffset; // Offset: 0
    keen::float32 turnSpeed; // Offset: 12
    keen::float32 turnSpeedMinDistanceFactor; // Offset: 16
    keen::float32 turnSpeedMaxDistanceFactor; // Offset: 20
    keen::float32 turnSpeedMinDistance; // Offset: 24
    keen::float32 turnSpeedMaxDistance; // Offset: 28
    keen::float32 acceleration; // Offset: 32
    keen::float32 maxSpeed; // Offset: 36
    keen::bool homeToCollisionTarget; // Offset: 40
    keen::float32 rayLength; // Offset: 44
    keen::bool accelerateDependsOnAngle; // Offset: 48
};

struct ecs.DynamicHomeToTarget {
    keen::float3 targetPosition; // Offset: 0
};

struct ecs.Boomerang {
    keen::Time returnToSpawnerDelay; // Offset: 0
    keen::float32 destroyOnApproachSpawnerDistance; // Offset: 8
};

typedef keen::ecs::AggroTargetState ecs.AggroTargetState;

typedef keen::ecs::AggroPool ecs.AggroPool;

struct ecs.AggroPoolData {
    keen::float32 value; // Offset: 0
    keen::Time lastGain; // Offset: 8
};

typedef keen::ecs::LineOfSightState ecs.LineOfSightState;

typedef keen::ecs::TargetReachableState ecs.TargetReachableState;

struct ecs.AggroTarget {
    keen::StaticArray<keen::ds::ecs::AggroPoolData,3> aggroPools; // Offset: 0
    keen::ds::ecs::AggroTargetState state; // Offset: 48
    keen::ds::ecs::EntityId entityId; // Offset: 52
    keen::float32 value; // Offset: 56
    keen::Time lastLineOfSightQueryTime; // Offset: 64
    keen::ds::ecs::LineOfSightState lineOfSightState; // Offset: 72
    keen::Time lastStateChangeTime; // Offset: 80
    keen::ds::FactionType faction; // Offset: 88
    keen::float pathLength; // Offset: 92
    keen::ds::ecs::TargetReachableState reachableState; // Offset: 96
    keen::float distanceToTarget; // Offset: 100
    keen::float enemyValue; // Offset: 104
};

struct ecs.AggroTargetPathQuery {
    keen::ds::ecs::PathQueryId queryId; // Offset: 0
    keen::Time nextCheckTime; // Offset: 8
    keen::float3 lastStart; // Offset: 16
    keen::float3 lastTarget; // Offset: 28
};

struct ecs.Aggro {
    keen::StaticArray<keen::ds::ecs::AggroTarget,6> targets; // Offset: 0
    keen::StaticArray<keen::ds::ecs::AggroTargetPathQuery,6> pathQueries; // Offset: 672
    keen::Time nextAllowedTargetChangeTime; // Offset: 912
    keen::ds::ecs::QueryId queryId; // Offset: 920
    keen::bool applyEnemyValue; // Offset: 924
    keen::bool allowTargetSwitches; // Offset: 925
};

struct ecs.TriggerNoise {
    keen::float32 range; // Offset: 0
    keen::Time nextTriggerTime; // Offset: 8
    keen::Time triggerInterval; // Offset: 16
};

struct ecs.TriggerWalkingNoise {
    keen::float32 sneakRange; // Offset: 0
    keen::float32 walkRange; // Offset: 4
    keen::float32 runRange; // Offset: 8
    keen::float32 sprintRange; // Offset: 12
    keen::Time nextTriggerTime; // Offset: 16
    keen::Time triggerInterval; // Offset: 24
};

struct ecs.EnemyPhases {
    keen::StaticArray<keen::ObjectReference<keen::ds::EnemyPhase>,8> phases; // Offset: 0
};

struct ecs.DynamicEnemyPhases {
    keen::Guid lastPhase; // Offset: 0
    keen::Guid currentPhase; // Offset: 16
    keen::Time currentPhaseStartTime; // Offset: 32
};

struct ecs.EnemyAiming {
    keen::DsArray<keen::bool> hitPattern; // Offset: 0
    keen::float32 minDistanceToMissTarget; // Offset: 40
};

struct ecs.DynamicEnemyAiming {
    keen::uint8 hitIndex; // Offset: 0
    keen::uint8 hitAngleIndex; // Offset: 1
    keen::StaticArray<keen::ds::ecs::EntityId,8> projectiles; // Offset: 4
};

typedef keen::ecs::ContextualVector2Context ecs.ContextualVector2Context;

struct ecs.ContextualVector2 {
    keen::ds::ecs::ContextualVector2Context context; // Offset: 0
    keen::Vector2 value; // Offset: 4
};

struct ecs.ExecutionTarget {
    keen::float32 executionRange; // Offset: 0
    keen::bool enableSneackAttackExecution; // Offset: 4
    keen::bool enableMercilessAttackExecution; // Offset: 5
    keen::float32 minMercilessAttackHealthPercentage; // Offset: 8
    keen::bool allowMercilessAttackRetrigger; // Offset: 12
    keen::bool canMercilessAttackBeExecuted; // Offset: 13
    keen::bool waitForHealthAboveThreshold; // Offset: 14
    keen::bool waitForStaminaRecharge; // Offset: 15
};

typedef keen::ecs::TransferItemToInventoryFlags ecs.TransferItemToInventoryFlags;

struct ecs.InventoryTransferAction {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::ds::ecs::EntityId sourceEntityId; // Offset: 4
    keen::ds::ecs::EntityId targetEntityId; // Offset: 8
    keen::ds::InventorySlotId sourceSlotId; // Offset: 12
    keen::ds::InventorySlotId targetSlotId; // Offset: 20
    keen::ds::InventoryActionType type; // Offset: 28
    keen::ds::ecs::TransferItemToInventoryFlags flags; // Offset: 29
    keen::uint16 amount; // Offset: 30
};

struct ecs.SelectSongAction {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::HashKey32 songId; // Offset: 4
};

struct ecs.SortInventoryAction {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::ds::ecs::EntityId targetInventoryId; // Offset: 4
};

struct ecs.CreateBuildingItemAction {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::ds::ActionbarSlotSelection selectedIndex; // Offset: 2
    keen::ds::ItemId itemId; // Offset: 4
};

struct ecs.CreateNpcItemAction {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::ds::ItemId itemId; // Offset: 4
};

struct ecs.ActionbarSelectionAction {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::ds::ActionbarSlotSelection selectedIndex; // Offset: 2
};

struct ecs.InventoryStockCycleAction {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::ds::ItemId selectedItemId; // Offset: 4
};

struct ecs.ParryAction {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::StaticArray<keen::ds::ecs::EntityId,4> targetEntityIds; // Offset: 4
};

struct ecs.KickPlayerAction {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::ds::ecs::EntityId targetEntityId; // Offset: 4
};

struct ecs.TwitchDropRewardAction {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::ds::ecs::EntityId targetEntityId; // Offset: 4
    keen::ds::ItemId itemId; // Offset: 8
};

typedef keen::ecs::TombstoneMode ecs.TombstoneMode;

typedef keen::ecs::WeatherFrequency ecs.WeatherFrequency;

typedef keen::ecs::AggroPoolAmount ecs.AggroPoolAmount;

typedef keen::ecs::TamingStartleRepercussion ecs.TamingStartleRepercussion;

struct ecs.GameSettings {
    keen::float playerHealthFactor; // Offset: 0
    keen::float playerManaFactor; // Offset: 4
    keen::float playerStaminaFactor; // Offset: 8
    keen::float playerBodyHeatFactor; // Offset: 12
    keen::bool enableDurability; // Offset: 16
    keen::bool enableStarvingDebuff; // Offset: 17
    keen::float foodBuffDurationFactor; // Offset: 20
    keen::Time fromHungerToStarving; // Offset: 24
    keen::float shroudTimeFactor; // Offset: 32
    keen::ds::ecs::TombstoneMode tombstoneMode; // Offset: 36
    keen::bool enableGliderTurbulences; // Offset: 37
    keen::ds::ecs::WeatherFrequency weatherFrequency; // Offset: 38
    keen::float miningDamageFactor; // Offset: 40
    keen::float plantGrowthSpeedFactor; // Offset: 44
    keen::float resourceDropStackAmountFactor; // Offset: 48
    keen::float factoryProductionSpeedFactor; // Offset: 52
    keen::float perkUpgradeRecyclingFactor; // Offset: 56
    keen::float perkCostFactor; // Offset: 60
    keen::float experienceCombatFactor; // Offset: 64
    keen::float experienceMiningFactor; // Offset: 68
    keen::float experienceExplorationQuestsFactor; // Offset: 72
    keen::ds::ecs::RandomSpawnerAmount randomSpawnerAmount; // Offset: 76
    keen::ds::ecs::AggroPoolAmount aggroPoolAmount; // Offset: 77
    keen::float enemyDamageFactor; // Offset: 80
    keen::float enemyHealthFactor; // Offset: 84
    keen::float enemyStaminaFactor; // Offset: 88
    keen::float enemyPerceptionRangeFactor; // Offset: 92
    keen::float bossDamageFactor; // Offset: 96
    keen::float bossHealthFactor; // Offset: 100
    keen::float threatBonus; // Offset: 104
    keen::bool pacifyAllEnemies; // Offset: 108
    keen::ds::ecs::TamingStartleRepercussion tamingStartleRepercussion; // Offset: 109
    keen::Time dayTimeDuration; // Offset: 112
    keen::Time nightTimeDuration; // Offset: 120
};

struct ecs.AdminChangeGameSettingsAction {
    keen::ds::ecs::GameSettings gameSettings; // Offset: 0
    keen::ds::VersionedData versionData; // Offset: 128
};

struct ecs.AdminApplyInventoryCommand {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::Guid inventoryGuid; // Offset: 4
    keen::bool clearInventories; // Offset: 20
};

struct ecs.AdminSpawnCommand {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::uint16 level; // Offset: 2
    keen::Guid templateGuid; // Offset: 4
    keen::uint8 optionalDistance; // Offset: 20
    keen::uint8 count; // Offset: 21
    keen::bool useRoaming; // Offset: 22
    keen::bool showSpawnSequence; // Offset: 23
    keen::bool spawnAsGroup; // Offset: 24
    keen::bool spawnAsFakePlayer; // Offset: 25
    keen::bool followPlayer; // Offset: 26
    keen::uint8 autoDestroyTicks; // Offset: 27
};

struct ecs.AdminKillFactionCommand {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::ds::FactionMask factionMask; // Offset: 2
    keen::uint32 playerMask; // Offset: 4
};

typedef keen::ItemRarity ItemRarity;

struct ecs.AdminInventoryCreateAction {
    keen::ds::ItemId itemId; // Offset: 0
    keen::ds::VersionedData versionData; // Offset: 4
    keen::uint16 count; // Offset: 6
    keen::ds::ItemRarity rarity; // Offset: 8
    keen::uint8 level; // Offset: 9
    keen::bool createForAllPlayers; // Offset: 10
    keen::bool createFullStack; // Offset: 11
    keen::bool fillEmptyStacks; // Offset: 12
    keen::bool maximizeCharacter; // Offset: 13
    keen::bool cleanupInventory; // Offset: 14
    keen::bool flameLevelUpgrade; // Offset: 15
};

struct ecs.AdminTeleportAction {
    keen::ds::ecs::Transform transform; // Offset: 0
    keen::ds::VersionedData versionData; // Offset: 28
};

struct ecs.AdminSetDayTimeAction {
    keen::Time syncDaytime; // Offset: 0
    keen::Time syncDaytimeTick; // Offset: 8
    keen::ds::VersionedData versionData; // Offset: 16
};

struct ecs.AdminDestroyItemAction {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::ds::InventorySlotId inventorySlotId; // Offset: 4
};

struct ecs.AdminSetFlameLevel {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::uint8 flameLevel; // Offset: 2
};

struct ecs.AdminSetCharacterLevel {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::ds::ecs::EntityId targetEntityId; // Offset: 4
    keen::uint8 level; // Offset: 8
};

struct ecs.AdminPerkAction {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::ds::InventorySlotId inventorySlotId; // Offset: 4
    keen::bool state; // Offset: 12
};

struct ecs.AdminDebugCameraDisplayAction {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::bool enable; // Offset: 2
};

struct ecs.ChangeCustomizationAction {
    keen::ds::InventorySlotId targetSlotId; // Offset: 0
    keen::ds::ItemId itemId; // Offset: 8
    keen::ds::VersionedData versionData; // Offset: 12
};

typedef keen::ecs::FlameAltarActionType ecs.FlameAltarActionType;

struct ecs.FlameAltarAction {
    keen::ds::ecs::EntityId baseEntityId; // Offset: 0
    keen::ds::VersionedData versionData; // Offset: 4
    keen::ds::ecs::FlameAltarActionType type; // Offset: 6
};

struct ecs.TeleportAction {
    keen::ds::ecs::EntityId target; // Offset: 0
    keen::ds::VersionedData versionData; // Offset: 4
};

struct ecs.UnlockSkillAction {
    keen::ds::SkillNodeId skillId; // Offset: 0
    keen::bool resetSkills; // Offset: 4
    keen::ds::VersionedData versionData; // Offset: 6
};

struct ecs.AdminUnlearnSkillAction {
    keen::ds::SkillNodeId skillId; // Offset: 0
    keen::ds::VersionedData versionData; // Offset: 4
};

struct ecs.TriggerKnowledgeAction {
    keen::ds::LocaTagId dialogOptionId; // Offset: 0
    keen::ds::KnowledgeId knowledgeId; // Offset: 4
    keen::ds::VersionedData versionData; // Offset: 8
};

struct ecs.SetPersonalProgressionAction {
    keen::bool enable; // Offset: 0
    keen::ds::VersionedData versionData; // Offset: 2
};

struct ecs.AmbientHelper {
    keen::ds::AmbientMask ambientMask; // Offset: 0
};

struct ecs.WaypointAction {
    keen::WorldPosition position; // Offset: 0
    keen::bool enable; // Offset: 24
    keen::bool isPing; // Offset: 25
    keen::ds::VersionedData versionData; // Offset: 26
};

struct ecs.SelectDialogOptionAction {
    keen::ds::LocaTagId dialogOptionId; // Offset: 0
    keen::ds::ecs::EntityId targetNpc; // Offset: 4
    keen::ds::VersionedData versionData; // Offset: 8
};

struct ecs.NpcInputAction {
    keen::ds::NpcId targetNpc; // Offset: 0
    keen::float roamingRange; // Offset: 4
    keen::ds::VersionedData versionData; // Offset: 8
};

typedef keen::RecipeId RecipeId;

struct ecs.CraftRecipeAction {
    keen::ds::ecs::EntityId craftingStationId; // Offset: 0
    keen::ds::RecipeId recipeId; // Offset: 4
    keen::uint16 recipeAmount; // Offset: 8
    keen::ds::VersionedData versionData; // Offset: 10
};

struct ecs.AutomaticTransferAction {
    keen::ds::ecs::EntityId craftingStationId; // Offset: 0
    keen::ds::RecipeId recipeId; // Offset: 4
    keen::ds::ItemId itemId; // Offset: 8
    keen::uint16 amount; // Offset: 12
    keen::ds::VersionedData versionData; // Offset: 14
};

struct ecs.SelectCraftingStationRecipeAction {
    keen::ds::ecs::EntityId craftingStationId; // Offset: 0
    keen::ds::RecipeId recipeId; // Offset: 4
    keen::ds::VersionedData versionData; // Offset: 8
};

struct ecs.PerkUnlockAction {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::ds::InventorySlotId inventorySlotId; // Offset: 4
};

struct ecs.TrashItemAction {
    keen::ds::VersionedData versionData; // Offset: 0
    keen::ds::InventorySlotId inventorySlotId; // Offset: 4
};

typedef keen::ecs::ChangeEquipment ecs.ChangeEquipment;

struct ecs.ChangeEquipmentAction {
    keen::ds::InventorySlotId inventorySlotId; // Offset: 0
    keen::ds::VersionedData versionData; // Offset: 8
    keen::ds::EquipmentSlot equipmentSlot; // Offset: 10
    keen::ds::ecs::ChangeEquipment type; // Offset: 11
};

typedef keen::ecs::SwapEquipmentTarget ecs.SwapEquipmentTarget;

struct ecs.SwapEquipmentSetAction {
    keen::ds::ecs::EntityId targetInventoryId; // Offset: 0
    keen::ds::ecs::SwapEquipmentTarget target; // Offset: 4
    keen::ds::VersionedData versionData; // Offset: 6
};

struct ecs.ConsumeItemAction {
    keen::ds::InventorySlotId inventorySlotId; // Offset: 0
    keen::ds::VersionedData versionData; // Offset: 8
};

struct ecs.InspectItemAction {
    keen::ds::InventorySlotId inventorySlotId; // Offset: 0
    keen::ds::VersionedData versionData; // Offset: 8
};

struct ecs.RepairAllItemsAction {
    keen::ds::VersionedData versionData; // Offset: 0
};

struct ecs.RequiredCraftingProp {
    keen::ObjectReference<keen::ds::CraftingPropDefinition> type; // Offset: 0
    keen::ds::CraftingPropId craftingPropId; // Offset: 16
};

typedef keen::ecs::FactoryStationState ecs.FactoryStationState;

struct ecs.FactoryStation {
    keen::ds::ecs::FactoryStationState state; // Offset: 0
    keen::ds::RecipeId runningRecipe; // Offset: 4
    keen::ds::RecipeId nextRecipe; // Offset: 8
    keen::Time recipeStart; // Offset: 16
};

struct ecs.FactoryStationClient {
    keen::ds::SoundContainerReference soundLoopRunning; // Offset: 0
    keen::uint32 soundLoopRunningHandle; // Offset: 16
};

struct ecs.UiBlueprintShapeSelection {
    keen::uint8 selectionIndex; // Offset: 0
    keen::bool isSet; // Offset: 1
};

struct ecs.UiPlayerInput {
    keen::sint8 lootSelectionDelta; // Offset: 0
    keen::sint8 blueprintPageSelectionDelta; // Offset: 1
    keen::sint8 blueprintShapeSelectionDelta; // Offset: 2
    keen::ds::ecs::UiBlueprintShapeSelection blueprintShapeSelection; // Offset: 3
    keen::float32 dismantleHoldProgress; // Offset: 8
    keen::bool canCycleInventoryStock; // Offset: 12
    keen::bool isInventoryStockCyclingDisabled; // Offset: 13
    keen::bool isBlueprintPageSelectionModifierActive; // Offset: 14
    keen::bool isTertiaryActionAllowed; // Offset: 15
    keen::bool showTutorial; // Offset: 16
    keen::bool showInventoryStock; // Offset: 17
    keen::bool showActionbarWheel; // Offset: 18
    keen::bool showQuickEquipWheel; // Offset: 19
    keen::bool jumpToNotification; // Offset: 20
};

struct ecs.ClientOnlyPlayerInput {
    keen::sint8 actionbarSelectionDelta; // Offset: 0
    keen::sint8 inventoryStockCycleDelta; // Offset: 1
    keen::sint8 songSelectionDelta; // Offset: 2
    keen::sint8 zoomInputDelta; // Offset: 3
};

struct ecs.ClientCamera {
    keen::WorldPosition position; // Offset: 0
    keen::Quaternion orientation; // Offset: 24
    keen::float32 distance; // Offset: 40
    keen::float32 fovY; // Offset: 44
    keen::float32 aspectRatio; // Offset: 48
    keen::float32 nearPlane; // Offset: 52
    keen::float32 farPlane; // Offset: 56
};

typedef keen::ecs::ClientPlayerState ecs.ClientPlayerState;

typedef keen::ecs::ClientPlayerStateMask ecs.ClientPlayerStateMask;

typedef keen::ecs::PlayerDigitalInput ecs.PlayerDigitalInput;

struct ecs.ClientPlayerInputData {
    keen::ds::ecs::InventoryTransferAction inventoryTransferAction; // Offset: 0
    keen::ds::ecs::ClientCamera camera; // Offset: 32
    keen::ds::ecs::ActionbarSelectionAction actionbarSelectionAction; // Offset: 96
    keen::ds::ecs::SortInventoryAction sortInventoryAction; // Offset: 100
    keen::ds::ecs::SelectSongAction selectSongAction; // Offset: 108
    keen::ds::ecs::InventoryStockCycleAction inventoryStockCycleAction; // Offset: 116
    keen::ds::ecs::CraftRecipeAction craftRecipeAction; // Offset: 124
    keen::ds::ecs::AutomaticTransferAction automaticTransferAction; // Offset: 136
    keen::ds::ecs::SelectCraftingStationRecipeAction selectCraftingStationRecipeAction; // Offset: 152
    keen::ds::ecs::ChangeCustomizationAction changeCustomizationAction; // Offset: 164
    keen::ds::ecs::TeleportAction teleportAction; // Offset: 180
    keen::ds::ecs::UnlockSkillAction unlockSkillAction; // Offset: 188
    keen::ds::ecs::TriggerKnowledgeAction triggerKnowledgeAction; // Offset: 196
    keen::ds::ecs::SetPersonalProgressionAction setPersonalProgressionAction; // Offset: 208
    keen::ds::ecs::SelectDialogOptionAction selectDialogOptionAction; // Offset: 212
    keen::ds::ecs::NpcInputAction npcInputAction; // Offset: 224
    keen::ds::ecs::ChangeEquipmentAction changeEquipmentAction; // Offset: 236
    keen::ds::ecs::SwapEquipmentSetAction swapEquipmentSetAction; // Offset: 248
    keen::ds::ecs::ConsumeItemAction consumeItemAction; // Offset: 256
    keen::ds::ecs::InspectItemAction inspectItemAction; // Offset: 268
    keen::ds::ecs::RepairAllItemsAction repairAllItemsAction; // Offset: 280
    keen::ds::ecs::CreateBuildingItemAction createBuildingItemAction; // Offset: 284
    keen::ds::ecs::CreateNpcItemAction createNpcItemAction; // Offset: 292
    keen::ds::ecs::PerkUnlockAction perkUnlockAction; // Offset: 300
    keen::ds::ecs::TrashItemAction trashItemAction; // Offset: 312
    keen::ds::ecs::FlameAltarAction flameAltarAction; // Offset: 324
    keen::ds::ecs::WaypointAction waypointAction; // Offset: 336
    keen::ds::ecs::ParryAction parryAction; // Offset: 368
    keen::ds::ecs::KickPlayerAction kickPlayerAction; // Offset: 388
    keen::ds::ecs::TwitchDropRewardAction twitchDropRewardAction; // Offset: 396
    keen::Vector2 movementStick; // Offset: 408
    keen::ds::ecs::ContextualVector2 cameraRotationInput; // Offset: 416
    keen::sint16 buildingRotation; // Offset: 428
    keen::uint8 buildingDistance; // Offset: 430
    keen::ds::ecs::ClientPlayerStateMask mask; // Offset: 431
    keen::ds::ecs::PlayerDigitalInput digitalInput; // Offset: 432
    keen::Time respawnActionHoldDuration; // Offset: 440
    keen::Time debugEventTime; // Offset: 448
    keen::Time debugUpdateTime; // Offset: 456
};

struct ecs.AdminClientPlayerInputData {
    keen::ds::ecs::AdminInventoryCreateAction adminInventoryCreateAction; // Offset: 0
    keen::ds::ecs::AdminSpawnCommand adminSpawnCommand; // Offset: 16
    keen::ds::ecs::AdminKillFactionCommand adminKillFaction; // Offset: 44
    keen::ds::ecs::AdminTeleportAction adminTeleport; // Offset: 52
    keen::ds::ecs::AdminApplyInventoryCommand adminApplyInventory; // Offset: 84
    keen::ds::ecs::AdminSetDayTimeAction adminSetDaytime; // Offset: 112
    keen::ds::ecs::AdminDestroyItemAction adminDestroyItemAction; // Offset: 136
    keen::ds::ecs::AdminSetFlameLevel adminSetFlameLevel; // Offset: 148
    keen::ds::ecs::AdminSetCharacterLevel adminSetCharacterLevel; // Offset: 152
    keen::ds::ecs::AdminPerkAction adminPerkAction; // Offset: 164
    keen::ds::ecs::AdminDebugCameraDisplayAction adminDebugCameraDisplayAction; // Offset: 180
    keen::ds::ecs::AdminUnlearnSkillAction adminUnlearnSkillAction; // Offset: 184
    keen::ds::ecs::AdminChangeGameSettingsAction adminChangeGameSettingsAction; // Offset: 192
};

typedef keen::ecs::DoubleInputBindings ecs.DoubleInputBindings;

typedef keen::ecs::DoubleInputBindingsMask ecs.DoubleInputBindingsMask;

struct ecs.ClientPlayerInputHistoryEntry {
    keen::uint32 frameTick; // Offset: 0
    keen::ds::ecs::ClientPlayerInputData data; // Offset: 8
};

typedef keen::ecs::PlayerSettingFlags ecs.PlayerSettingFlags;

typedef keen::ecs::PlayerSettingMask ecs.PlayerSettingMask;

struct ecs.ClientPlayerSettings {
    keen::ds::AttackDirectionInput attackDirectionInput; // Offset: 0
    keen::ds::ecs::PlayerSettingMask flags; // Offset: 1
};

struct ecs.ClientPlayerInputToggleConfig {
    keen::ds::ecs::PlayerDigitalInput configuredAsToggle; // Offset: 0
};

struct ecs.ClientPlayerInput {
    keen::ds::ecs::ClientPlayerInputData data; // Offset: 0
    keen::ds::ecs::AdminClientPlayerInputData adminCommands; // Offset: 464
    keen::ds::ecs::ClientPlayerInputToggleConfig toggleConfig; // Offset: 792
    keen::ds::ecs::DoubleInputBindingsMask doubleInputBindings; // Offset: 800
    keen::ds::InputMode inputMode; // Offset: 801
    keen::ds::ecs::ClientOnlyPlayerInput clientOnlyPlayerInput; // Offset: 802
    keen::ds::ecs::UiPlayerInput uiPlayerInput; // Offset: 808
};

struct ecs.PlayerInput {
    keen::Time serverTime; // Offset: 0
    keen::ds::ecs::ClientPlayerInputData fromClient; // Offset: 8
    keen::ds::ecs::AdminClientPlayerInputData fromAdminClient; // Offset: 472
    keen::ds::ecs::ClientPlayerInputToggleConfig fromClientToggleConfig; // Offset: 800
    keen::ds::ecs::DoubleInputBindingsMask fromClientDoubleInputBindings; // Offset: 808
    keen::ds::InputMode fromClientInputMode; // Offset: 809
    keen::ds::ecs::ClientPlayerSettings fromClientSettings; // Offset: 810
    keen::bool fromClientIsReadyForGameplay; // Offset: 812
};

struct ecs.ServerInputConsumer {
    keen::ds::ecs::PlayerDigitalInput consumedInputs; // Offset: 0
    keen::ds::ecs::PlayerDigitalInput logicalStates; // Offset: 8
    keen::ds::ecs::PlayerDigitalInput totalPreviousInputs; // Offset: 16
};

struct ecs.ServerConsumedPlayerInput {
    keen::ds::ecs::ServerInputConsumer inputConsumer; // Offset: 0
    keen::ds::VersionedData consumedInventoryTransferAction; // Offset: 24
    keen::ds::VersionedData consumedSortInventoryAction; // Offset: 26
    keen::ds::VersionedData consumedSelectSongAction; // Offset: 28
    keen::ds::VersionedData consumedCreateBuildingItemAction; // Offset: 30
    keen::ds::VersionedData consumedCreateNpcItemAction; // Offset: 32
    keen::ds::VersionedData consumedActionbarSelectionAction; // Offset: 34
    keen::ds::VersionedData consumedInventoryStockCycleAction; // Offset: 36
    keen::ds::VersionedData consumedCraftRecipeAction; // Offset: 38
    keen::ds::VersionedData consumedAutomaticTransferAction; // Offset: 40
    keen::ds::VersionedData consumedSelectCraftingStationRecipeAction; // Offset: 42
    keen::ds::VersionedData consumedChangeCustomizationAction; // Offset: 44
    keen::ds::VersionedData consumedTeleportAction; // Offset: 46
    keen::ds::VersionedData consumedUnlockSkillAction; // Offset: 48
    keen::ds::VersionedData consumedTriggerKnowledgeAction; // Offset: 50
    keen::ds::VersionedData consumedSetPersonalProgressionAction; // Offset: 52
    keen::ds::VersionedData consumedWaypointAction; // Offset: 54
    keen::ds::VersionedData consumedSelectDialogOptionAction; // Offset: 56
    keen::ds::VersionedData consumedNpcInputAction; // Offset: 58
    keen::ds::VersionedData consumedChangeEquipmentAction; // Offset: 60
    keen::ds::VersionedData consumedSwapEquipmentSetAction; // Offset: 62
    keen::ds::VersionedData consumedConsumeItemAction; // Offset: 64
    keen::ds::VersionedData consumedInspectItemAction; // Offset: 66
    keen::ds::VersionedData consumedRepairAllItemsActionn; // Offset: 68
    keen::ds::VersionedData consumedPerkUnlockAction; // Offset: 70
    keen::ds::VersionedData consumedTrashItemAction; // Offset: 72
    keen::ds::VersionedData consumedFlameAltarAction; // Offset: 74
    keen::ds::VersionedData consumedParryAction; // Offset: 76
    keen::ds::VersionedData consumedKickPlayerAction; // Offset: 78
    keen::ds::VersionedData consumedtwitchDropAction; // Offset: 80
    keen::ds::VersionedData consumedAdminInventoryCreateAction; // Offset: 82
    keen::ds::VersionedData consumedAdminSpawnAction; // Offset: 84
    keen::ds::VersionedData consumedAdminKillFactionAction; // Offset: 86
    keen::ds::VersionedData consumedAdminTeleport; // Offset: 88
    keen::ds::VersionedData consumedAdminApplyInventory; // Offset: 90
    keen::ds::VersionedData consumedAdminSetDaytime; // Offset: 92
    keen::ds::VersionedData consumedAdminDestroyItemAction; // Offset: 94
    keen::ds::VersionedData consumedAdminSetFlameLevel; // Offset: 96
    keen::ds::VersionedData consumedAdminSetCharacterLevel; // Offset: 98
    keen::ds::VersionedData consumedAdminPerkAction; // Offset: 100
    keen::ds::VersionedData consumedAdminDebugCameraDisplayAction; // Offset: 102
    keen::ds::VersionedData consumedAdminUnlearnSkillAction; // Offset: 104
    keen::ds::VersionedData consumedAdminChangeGameSettingsAction; // Offset: 106
};

struct ecs.InputRepeater {
    keen::bool isAfterFirstRepetition; // Offset: 0
    keen::Time nextRepeatTime; // Offset: 8
};

typedef keen::ecs::ClientOnlyPlayerInputRepeater ecs.ClientOnlyPlayerInputRepeater;

typedef keen::ecs::ClientOnlyPlayerDigitalInput ecs.ClientOnlyPlayerDigitalInput;

struct ecs.ClientInputConsumer {
    keen::ds::ecs::ClientOnlyPlayerDigitalInput consumedInputs; // Offset: 0
    keen::ds::ecs::ClientOnlyPlayerDigitalInput logicalStates; // Offset: 8
    keen::ds::ecs::ClientOnlyPlayerInputRepeater inputRepeaters; // Offset: 16
};

struct ecs.PlayerTestInput {
    keen::ds::ecs::PlayerDigitalInput digitalInput; // Offset: 0
    keen::Vector2 movementStick; // Offset: 8
    keen::float3 cameraDirection; // Offset: 16
};

typedef keen::ranged_weapon::State ranged_weapon.State;

struct ranged_weapon.Input {
    keen::bool aim; // Offset: 0
    keen::bool charge; // Offset: 1
    keen::bool fire; // Offset: 2
};

struct ranged_weapon.WeaponParameters {
    keen::Time chargeDuration; // Offset: 0
    keen::Time fireDuration; // Offset: 8
    keen::bool isChanneling; // Offset: 16
    keen::bool doesNeedAmmunition; // Offset: 17
    keen::bool canQueueFireBeforeFullyCharged; // Offset: 18
    keen::bool restartChargeOnAmmunitionSwitch; // Offset: 19
};

struct ranged_weapon.StateMachine {
    keen::ds::ranged_weapon::State currentState; // Offset: 0
    keen::Time stateStartTime; // Offset: 8
    keen::ds::ranged_weapon::Input previousInput; // Offset: 16
    keen::ds::ranged_weapon::WeaponParameters weaponParameters; // Offset: 24
    keen::bool isInitialUpdate; // Offset: 48
    keen::bool isFireQueued; // Offset: 49
};

typedef keen::ecs::PlayerInputType ecs.PlayerInputType;

typedef keen::ResourceTypesMask ResourceTypesMask;

struct ecs.RangedWeapon {
    keen::ds::ranged_weapon::StateMachine stateMachine; // Offset: 0
    keen::ds::ecs::PlayerInputType originalTrigger; // Offset: 56
    keen::ds::ecs::PlayerInputType currentTrigger; // Offset: 57
    keen::ds::ItemInstanceInfo triggerWeaponInstance; // Offset: 60
    keen::ds::ItemInstanceInfo triggerAmmunitionInstance; // Offset: 80
    keen::ds::ResourceTypesMask missingResourceMask; // Offset: 100
    keen::Time lastMissingResourceEvent; // Offset: 104
    keen::ds::ItemId lastVisualAmmoItemId; // Offset: 112
    keen::ds::ItemId visualAmmoItemId; // Offset: 116
    keen::ds::ecs::EntityId visualAmmoEntityId; // Offset: 120
    keen::bool shallPlayerTurnTowardsTarget; // Offset: 124
    keen::bool previousSneakState; // Offset: 125
};

struct ecs.NetworkRangedWeapon {
    keen::ds::ranged_weapon::State currentState; // Offset: 0
    keen::ds::ranged_weapon::WeaponParameters weaponParameters; // Offset: 8
    keen::Time stateStartTime; // Offset: 32
    keen::ds::ItemInstanceInfo weaponInstance; // Offset: 40
    keen::ds::ItemId ammunitionItemId; // Offset: 60
    keen::bool shallPlayerTurnTowardsTarget; // Offset: 64
};

struct ecs.ClientRangedWeapon {
    keen::ds::ranged_weapon::State previousState; // Offset: 0
    keen::bool isInitialUpdate; // Offset: 1
};

struct ecs.RangedWeaponRender {
};

struct ecs.SpellChargeSfx {
    keen::ds::SoundContainerReference buildUpChargeSfx; // Offset: 0
    keen::ds::SoundContainerReference sustainChargeSfx; // Offset: 16
    keen::bool hasHandledFullyCharged; // Offset: 32
};

typedef keen::ecs::PlayerFlags ecs.PlayerFlags;

typedef keen::ecs::PlayerStateMask ecs.PlayerStateMask;

struct ecs.ParryProjectile {
    keen::ds::ecs::EntityId projectileEntityId; // Offset: 0
    keen::ds::actor::SequenceResourceId anticipationSequenceResourceId; // Offset: 4
};

struct ecs.PlayerState {
    keen::ds::actor::StateMask previousActorState; // Offset: 0
    keen::Time lastSprintEndTime; // Offset: 8
    keen::Time lastBlockEndTime; // Offset: 16
    keen::Time noMovementInputDuration; // Offset: 24
    keen::Time outsideSafeZoneCountdown; // Offset: 32
    keen::float32 sprintTurnSpeedFactor; // Offset: 40
    keen::ds::ecs::PlayerStateMask playerStateMask; // Offset: 44
    keen::ds::LocaTagId dungeonZoneMapMarkerId; // Offset: 48
    keen::ds::ecs::PlayerInputType rangedWeaponArmedViaInput; // Offset: 52
    keen::ds::ecs::ParryProjectile parryProjectile; // Offset: 56
};

struct ecs.PlayerTracking {
    keen::Time levelUpDuration; // Offset: 0
    keen::Time playtimeDuration; // Offset: 8
};

struct ecs.PlayerDebugServer {
    keen::Time debugEventTime; // Offset: 0
    keen::Time clientUpdateTime; // Offset: 8
    keen::Time serverRecvTime; // Offset: 16
    keen::Time serverUpdateTime; // Offset: 24
};

struct ecs.PlayerDebugClient {
    keen::Time debugEventTime; // Offset: 0
    keen::Time debugEventDelta; // Offset: 8
    keen::Time debugEventMappingDelta; // Offset: 16
};

struct ecs.ClientPlayerStaminaHints {
    keen::Time firstSprintUtteranceDelay; // Offset: 0
    keen::Time sprintUtteranceInterval; // Offset: 8
    keen::Time nextUtterance; // Offset: 16
};

struct ecs.PlayerQuestProgressionMode {
    keen::bool isInPersonalProgressionMode; // Offset: 0
    keen::uint32 changeCounter; // Offset: 4
};

struct ecs.PlayerPinnedRecipes {
    keen::ds::RecipeId pinnedRecipe; // Offset: 0
    keen::HashKey32 questEntryId; // Offset: 4
};

struct ecs.PlayerWaypoint {
    keen::bool enabled; // Offset: 0
    keen::WorldPosition waypointPosition; // Offset: 8
};

struct ecs.SkillState {
    keen::ds::ecs::EntityId impcatEntity; // Offset: 0
    keen::bool isUnlocked; // Offset: 4
};

typedef keen::ecs::SkillUnlockMask ecs.SkillUnlockMask;

typedef keen::ecs::UnlockedSkillsMask ecs.UnlockedSkillsMask;

struct ecs.UnlockedSkillNodes {
    keen::StaticArray<keen::ds::SkillNodeId,256> nodes; // Offset: 0
    keen::StaticArray<keen::ds::ecs::EntityId,256> activeSkillImpacts; // Offset: 1024
    keen::uint32 version; // Offset: 2048
};

struct ecs.PlayerSkillsUi {
    keen::ds::ecs::UnlockedSkillsMask skillUnlockMasks; // Offset: 0
};

struct ecs.PlayerGroupMember {
    keen::Time lastUpdateTime; // Offset: 0
    keen::ds::ecs::EntityId entityId; // Offset: 8
};

struct ecs.ServerPlayerGroupMembers {
    keen::StaticArray<keen::ds::ecs::PlayerGroupMember,16> groupMembers; // Offset: 0
};

struct ecs.PickingTarget {
    keen::ds::ecs::QueryId rayQueryId; // Offset: 0
    keen::Time nextUpdate; // Offset: 8
};

typedef keen::ecs::CursorFlag ecs.CursorFlag;

typedef keen::ecs::CursorFlags ecs.CursorFlags;

struct ecs.ServerCursor {
    keen::ds::ecs::QueryId rayQueryId; // Offset: 0
    keen::ds::ecs::QueryId placementBlockerQueryId; // Offset: 4
    keen::StaticArray<keen::ds::ecs::QueryId,2> solidCollisionsQueryIds; // Offset: 8
    keen::ds::ecs::RangeQueryId enemiesQueryId; // Offset: 16
    keen::float3 pointerInfoPosition; // Offset: 20
    keen::ds::VoxelMaterialId hoveredVoxelMaterialId; // Offset: 32
    keen::WorldTransform secondaryActionTransform; // Offset: 40
    keen::float randomYawAngleOffset; // Offset: 96
    keen::Time snapToPlaneDelay; // Offset: 104
    keen::ds::ecs::EntityId hoverVoxelBlueprintOverlayEntityId; // Offset: 112
};

struct ecs.ClientServerCursor {
    keen::WorldTransform transform; // Offset: 0
    keen::ds::ecs::EntityId cursorEntityId; // Offset: 56
    keen::ds::ecs::EntityId hoveredEntityId; // Offset: 60
    keen::ds::ecs::EntityId selectedEntityId; // Offset: 64
    keen::ds::ecs::DismantleMethod selectedEntityDismantleMethod; // Offset: 68
    keen::bool isBlueprintSelected; // Offset: 69
    keen::bool isDismantleAllowed; // Offset: 70
    keen::float3 hoverPosition; // Offset: 72
    keen::float3 hoverNormal; // Offset: 84
    keen::ds::ItemInstanceInfo currentBuildingItemInstance; // Offset: 96
    keen::ds::ItemId previousBuildingItemId; // Offset: 116
    keen::float effectivePlacementVolume; // Offset: 120
    keen::float maxPlacementVolume; // Offset: 124
    keen::ds::ecs::CursorFlags cursorFlagsPrimary; // Offset: 128
    keen::ds::ecs::CursorFlags cursorFlagsSecondary; // Offset: 130
    keen::bool wasLastActionSecondary; // Offset: 132
    keen::bool isSnappingToBoxes; // Offset: 133
    keen::bool isNearBuildingZone; // Offset: 134
    keen::bool canUndoBuildingAction; // Offset: 135
};

struct ecs.ClientCursorVfx {
    keen::uint3 position; // Offset: 0
    keen::uint32 fxHandle; // Offset: 12
};

struct ecs.ClientCursor {
    keen::Time hoveredEntityHightlightPhase; // Offset: 0
    keen::ds::ecs::EntityId previousSelectedEntityId; // Offset: 8
    keen::Color previousSelectedEntityTintColor; // Offset: 12
    keen::ds::ItemId previousBuildingItemId; // Offset: 16
    keen::ds::HighlightColorIndex highlightColorValid; // Offset: 20
    keen::ds::HighlightColorIndex highlightColorInvalid; // Offset: 21
    keen::ds::HighlightColorIndex highlightColorMuted; // Offset: 22
    keen::StaticArray<keen::ds::ecs::ClientCursorVfx,256> blueprintHoverVfx; // Offset: 24
};

struct ecs.Terraforming {
    keen::ds::ecs::RangeQueryId snappingQueryId; // Offset: 0
    keen::ds::ecs::RangeQueryId temporaryMiningQueryId; // Offset: 4
};

struct ecs.VfxZone {
};

struct ecs.Destructible {
};

struct ecs.CameraShakeParams {
    keen::float32 trauma; // Offset: 0
};

struct ecs.NotifierComponent {
    keen::ds::ecs::Offset notifierOffset; // Offset: 0
    keen::ds::NotifierReference notifier; // Offset: 40
    keen::ds::ecs::CameraShakeParams cameraShake; // Offset: 56
    keen::ds::SoundContainerReference sfx; // Offset: 60
    keen::ds::VfxReference vfx; // Offset: 76
};

struct ecs.OnCreate {
    keen::ds::AttachmentSlot slot; // Offset: 92
    keen::bool attach; // Offset: 93
};

struct ecs.OnDestroy {
    keen::float32 noiseRange; // Offset: 92
    keen::float3 hitDirection; // Offset: 96
};

struct ecs.SpawnEntityOnDestroy {
    keen::ds::ecs::TemplateReference spawnEntity; // Offset: 0
    keen::bool keepDespawnLink; // Offset: 16
    keen::bool triggered; // Offset: 17
};

struct ecs.DestroyEntityOnParentRespawn {
    keen::bool checkParent; // Offset: 0
};

typedef keen::FogRemovalId FogRemovalId;

struct ecs.FogRemovalIdComponent {
    keen::ds::FogRemovalId fogRemovalId; // Offset: 0
};

struct ecs.RemoveFog {
};

typedef keen::ecs::EasingType ecs.EasingType;

struct ecs.Dissolve {
    keen::float3 rotationOriginOffset; // Offset: 0
    keen::float32 yOffset; // Offset: 12
    keen::Time duration; // Offset: 16
    keen::float32 rotationAngle; // Offset: 24
    keen::bool calculateOffsets; // Offset: 28
    keen::ds::ecs::EasingType dissolveEasing; // Offset: 29
    keen::ds::ecs::EasingType translationEasing; // Offset: 30
    keen::ds::ecs::EasingType rotationEasing; // Offset: 31
};

struct ecs.DynamicDissolve {
    keen::Time startTime; // Offset: 0
    keen::ds::ecs::EntityId alignmentTarget; // Offset: 8
    keen::bool started; // Offset: 12
};

struct ecs.ClientDissolve {
    keen::uint32 renderModelUpdateCounter; // Offset: 0
    keen::float32 modelCenter; // Offset: 4
    keen::float32 boundingBoxHeight; // Offset: 8
    keen::float32 dissolveEdgeBrightness; // Offset: 12
};

typedef keen::ecs::FadeState ecs.FadeState;

struct ecs.Fade {
    keen::Time duration; // Offset: 0
    keen::float3 dissolveMaskOffset; // Offset: 8
    keen::float32 dissolveMaskRadius; // Offset: 20
    keen::float32 dissolveEdgeBrightness; // Offset: 24
    keen::ds::ecs::FadeState initialState; // Offset: 28
};

struct ecs.DynamicFade {
    keen::Time startTime; // Offset: 0
    keen::ds::ecs::FadeState state; // Offset: 8
};

struct ecs.ActorInput {
    keen::ds::animationgraph::StateIdHash defaultAnimationStateId; // Offset: 0
    keen::ds::actor::ActionSequenceTriggerContext triggerContext; // Offset: 8
    keen::uint8 triggerCallCounter; // Offset: 232
    keen::uint32 sequenceTriggerId; // Offset: 236
    keen::float3 desiredLocalMoveInput; // Offset: 240
    keen::float3 desiredWorldMoveInput; // Offset: 252
    keen::float3 desiredWorldLookDirection; // Offset: 264
    keen::ds::ecs::LocomotionSpeedSelector locomotionSpeed; // Offset: 276
    keen::ds::ecs::LocomotionSpeedSelector lastLocomotionSpeed; // Offset: 277
};

struct ecs.FlapSetup {
    keen::Time minFlapDuration; // Offset: 0
    keen::Time maxFlapDuration; // Offset: 8
    keen::Time minFlapPauseDuration; // Offset: 16
    keen::Time maxFlapPauseDuration; // Offset: 24
};

struct ecs.Flying {
    keen::float32 maxAcceleration; // Offset: 0
    keen::ds::actor::ActorSequenceReference startFlyingSequence; // Offset: 4
    keen::ds::actor::ActorSequenceReference stopFlyingSequence; // Offset: 20
    keen::ds::actor::ActorSequenceReference flyingSequence; // Offset: 36
    keen::ds::actor::ActorSequenceReference hoverSequence; // Offset: 52
    keen::ds::actor::ActorSequenceReference flappingSequence; // Offset: 68
    keen::ds::actor::ActorSequenceReference hitInAirSequence; // Offset: 84
    keen::ds::actor::ActorSequenceReference stuckOnGroundSequence; // Offset: 100
    keen::ds::ecs::FlapSetup flapSetup; // Offset: 120
    keen::bool useFlyAnimationHandling; // Offset: 152
    keen::bool fallOnHit; // Offset: 153
    keen::bool fallOnParryStun; // Offset: 154
    keen::bool flyAfterSpawn; // Offset: 155
};

typedef keen::ecs::FlyingState ecs.FlyingState;

struct ecs.DynamicFlying {
    keen::ds::ecs::FlyingState state; // Offset: 0
    keen::Time nextCheckFlappingTime; // Offset: 8
    keen::bool isSequenceHandlingPaused; // Offset: 16
    keen::bool wasSequenceHandlingPaused; // Offset: 17
    keen::bool isFlappingAllowed; // Offset: 18
    keen::bool fallOnDeath; // Offset: 19
};

struct ecs.CSPDummy {
};

struct ecs.SlotAttachmentBase {
    keen::ds::ecs::Offset offset; // Offset: 0
    keen::ds::AttachmentSlot attachmentSlot; // Offset: 40
    keen::ds::ecs::EntityId attachedToEntityId; // Offset: 44
};

struct ecs.ServerSlotAttachment {
};

struct ecs.SlotAttachment {
};

struct ecs.Friction {
    keen::bool isSliding; // Offset: 0
    keen::float32 frictionFactor; // Offset: 4
};

struct ecs.RotationSpeedEntry {
    keen::float32 rotationSpeed; // Offset: 0
    keen::ds::actor::InterpolationMode interpolationMode; // Offset: 4
};

struct ecs.ActorRotation {
    keen::ds::ecs::RotationSpeedEntry standingRotationSpeed; // Offset: 0
    keen::ds::ecs::RotationSpeedEntry movingRotationSpeed; // Offset: 8
    keen::ds::ecs::RotationSpeedEntry runningRotationSpeed; // Offset: 16
    keen::ds::ecs::RotationSpeedEntry slidingRotationSpeed; // Offset: 24
    keen::ds::ecs::RotationSpeedEntry inAirRotationSpeed; // Offset: 32
    keen::ds::ecs::RotationSpeedEntry dodgingAroundTargetRotationSpeed; // Offset: 40
    keen::ds::ecs::RotationSpeedEntry hookPullingRotationSpeed; // Offset: 48
    keen::ds::ecs::RotationSpeedEntry hookSwingingRotationSpeed; // Offset: 56
    keen::ds::ecs::RotationSpeedEntry climbingRotationSpeed; // Offset: 64
    keen::ds::ecs::RotationSpeedEntry gliderRotationSpeed; // Offset: 72
    keen::float32 minLinearAxisRotationAngle; // Offset: 80
};

typedef keen::ecs::LocomotionState ecs.LocomotionState;

typedef keen::ecs::LocomotionFlags ecs.LocomotionFlags;

typedef keen::ecs::LocomotionMask ecs.LocomotionMask;

struct ecs.LocomotionAccelerationConfig {
    keen::float32 minTurnAngle; // Offset: 0
    keen::float32 maxWalkAcceleration; // Offset: 4
    keen::float32 maxRunAcceleration; // Offset: 8
    keen::float32 maxSprintAcceleration; // Offset: 12
    keen::float32 groundFrictionSusceptibility; // Offset: 16
};

struct ecs.LocomotionSlideConfig {
    keen::float32 downhillAccelerationFactor; // Offset: 0
    keen::float32 downhillAcceleration; // Offset: 4
    keen::float32 lateralAcceleration; // Offset: 8
    keen::float32 uphillAcceleration; // Offset: 12
    keen::float32 maxUphillSpeed; // Offset: 16
};

struct ecs.LocomotionTurnConfig {
    keen::bool useTurnSequences; // Offset: 0
    keen::Angle minTurnAngle; // Offset: 4
    keen::float32 minVelocity; // Offset: 8
    keen::Time minRequiredVelocityDuration; // Offset: 16
    keen::Time minTimeSinceRequiredVelocityWasReached; // Offset: 24
    keen::ds::actor::ActorSequenceReference leftTurnSequence; // Offset: 32
    keen::ds::actor::ActorSequenceReference rightTurnSequence; // Offset: 48
};

struct ecs.LocomotionAvoidHolesConfig {
    keen::bool avoidHoles; // Offset: 0
    keen::float32 checkLength; // Offset: 4
    keen::float32 minHoleDepth; // Offset: 8
};

struct ecs.Locomotion {
    keen::ds::ecs::LocomotionAccelerationConfig accelerationConfig; // Offset: 0
    keen::ds::ecs::LocomotionSlideConfig slideConfig; // Offset: 20
    keen::ds::ecs::LocomotionTurnConfig turnConfig; // Offset: 40
    keen::ds::ecs::LocomotionAvoidHolesConfig avoidHolesConfig; // Offset: 104
};

typedef keen::ecs::JumpRuntimeType ecs.JumpRuntimeType;

struct ecs.GliderTurbulence {
    keen::float3 direction; // Offset: 0
    keen::float32 intensity; // Offset: 12
    keen::Time remainingDuration; // Offset: 16
};

struct ecs.DynamicLocomotion {
    keen::float3 inputVelocity; // Offset: 0
    keen::float3 floorNormal; // Offset: 12
    keen::float3 slopeNormal; // Offset: 24
    keen::ds::actor::MovementFactors movementFactors; // Offset: 36
    keen::float3 rootMotion; // Offset: 48
    keen::ds::animationgraph::RootMotionMask rootMotionMode; // Offset: 60
    keen::ds::ecs::LocomotionState state; // Offset: 61
    keen::Time lastStateSwitchTime; // Offset: 64
    keen::Time slideDetected; // Offset: 72
    keen::Time takeOffTime; // Offset: 80
    keen::Time spheroidCollisionDuration; // Offset: 88
    keen::float32 rotationSpeedFactor; // Offset: 96
    keen::bool isGliderForwardInputDeliberate; // Offset: 100
    keen::bool isNearGround; // Offset: 101
    keen::bool wasTurning; // Offset: 102
    keen::Time sprintJumpRunUpTimer; // Offset: 104
    keen::Time airwolfTimer; // Offset: 112
    keen::ds::ecs::LocomotionMask flags; // Offset: 120
    keen::bool isFastEnoughForTurn; // Offset: 121
    keen::Time speedForTurnSequenceReachedStartTime; // Offset: 128
    keen::Time speedForTurnSequenceReachedEndTime; // Offset: 136
    keen::float slideJumpAirControlSpeed; // Offset: 144
    keen::ds::actor::JumpType jumpType; // Offset: 148
    keen::uint8 jumpCount; // Offset: 149
    keen::WorldPosition previousJumpTakeOffPosition; // Offset: 152
    keen::float airControlMinVelocity; // Offset: 176
    keen::float airControlMaxVelocity; // Offset: 180
    keen::float frictionFactor; // Offset: 184
    keen::float effectiveMovementMod; // Offset: 188
    keen::float gliderUpstreamFactor; // Offset: 192
    keen::ds::ecs::GliderTurbulence gliderTurbulence; // Offset: 200
};

struct ecs.NetworkLocomotion {
    keen::bool hasSlideAnimations; // Offset: 0
    keen::bool hasJumpAnimations; // Offset: 1
    keen::bool hasWalkAnimations; // Offset: 2
    keen::bool hasMoveAnimation; // Offset: 3
    keen::bool leanTowardsMoveDirection; // Offset: 4
    keen::float leanFactor; // Offset: 8
    keen::float maxLeanYawAngle; // Offset: 12
    keen::float maxLeanPitchAngle; // Offset: 16
    keen::float leanFadeOutSpeedFactor; // Offset: 20
    keen::float minLeanYawInterpolationSpeed; // Offset: 24
    keen::float maxLeanYawInterpolationSpeed; // Offset: 28
    keen::float leanYawSpeedInterpolationStartAngle; // Offset: 32
    keen::float leanYawSpeedInterpolationEndAngle; // Offset: 36
    keen::float leanPitchInterpolationSpeed; // Offset: 40
    keen::float leanYawStartAngle; // Offset: 44
    keen::Angle pitchAngleOffset; // Offset: 48
};

struct ecs.DynamicNetworkLocomotion {
    keen::float3 floorNormal; // Offset: 0
    keen::float3 desiredWorldLookDirection; // Offset: 12
    keen::float3 desiredLeanDirection; // Offset: 24
    keen::ds::ecs::LocomotionState state; // Offset: 36
    keen::ds::ecs::LocomotionMask flags; // Offset: 37
    keen::ds::animationgraph::StateIdHash currentIdleAnimation; // Offset: 40
    keen::ds::animationgraph::StateIdHash currentWalkAnimation; // Offset: 44
    keen::float32 gliderTurbulenceScreenShakeIntensity; // Offset: 48
};

struct ecs.ClientLocomotion {
    keen::float32 runSpeed; // Offset: 0
    keen::float32 sprintSpeed; // Offset: 4
    keen::float32 currentLocalRollAngle; // Offset: 8
    keen::float32 currentLocalPitchAngle; // Offset: 12
    keen::float32 currentLocalYawAngle; // Offset: 16
    keen::float32 currentLeanYawAngle; // Offset: 20
    keen::float32 currentLeanPitchAngle; // Offset: 24
    keen::float32 lastAnimationInputSpeed; // Offset: 28
};

struct ecs.GliderUpstreamZone {
};

struct ecs.JumpParameters {
    keen::float32 jumpDistance; // Offset: 0
    keen::float32 jumpHeight; // Offset: 4
    keen::Quaternion launchOffset; // Offset: 8
};

struct ecs.SlopeAlignment {
    keen::float32 defaultLongitudinalFactor; // Offset: 0
    keen::float32 defaultLateralFactor; // Offset: 4
    keen::float32 currentLongitudinalFactor; // Offset: 8
    keen::float32 currentLateralFactor; // Offset: 12
};

struct ecs.BaseActor {
    keen::ds::actor::ActionSequence currentAction; // Offset: 0
    keen::ds::actor::StateMask currentState; // Offset: 2048
    keen::ds::actor::AbilityMask currentAbilityMask; // Offset: 2056
    keen::ds::actor::SequenceRuntimeId sequenceRuntimeId; // Offset: 2064
};

struct ecs.ServerActionSequenceData {
    keen::ds::actor::SequenceRuntimeId sequenceId; // Offset: 0
    keen::ds::actor::SignalStates signalStates; // Offset: 24
    keen::ds::actor::ColliderModeData colliderModeOverride; // Offset: 152
    keen::ds::actor::RotationInterpolation rotationInterpolation; // Offset: 168
    keen::Time rotationInterpolationStartTime; // Offset: 224
    keen::Time rotationInterpolationEndTime; // Offset: 232
    keen::ds::animationgraph::StateIdHash animationStateId; // Offset: 240
    keen::ds::animationgraph::RootMotionMask animationRootMotionMask; // Offset: 244
    keen::ds::ecs::EntityId lastSpawnedEntityId; // Offset: 248
    keen::ds::ecs::EntityId stopEntityId; // Offset: 252
    keen::float3 positionLerpEnd; // Offset: 256
    keen::Time positionLerpDuration; // Offset: 272
    keen::Time positionLerpTime; // Offset: 280
    keen::Quaternion orientationLerpEnd; // Offset: 288
    keen::Time orientationLerpDuration; // Offset: 304
    keen::Time orientationLerpTime; // Offset: 312
    keen::ds::actor::MovementFactors movementFactors; // Offset: 320
    keen::ds::actor::MovementFactors movementFactorsLerpStart; // Offset: 332
    keen::ds::actor::MovementFactors movementFactorsLerpEnd; // Offset: 344
    keen::Time movementFactorsLerpDuration; // Offset: 360
    keen::Time movementFactorsLerpTime; // Offset: 368
    keen::float32 rotationSpeedFactor; // Offset: 376
    keen::float32 rotationFactorLerpStart; // Offset: 380
    keen::float32 rotationFactorLerpEnd; // Offset: 384
    keen::Time rotationFactorLerpDuration; // Offset: 392
    keen::Time rotationFactorLerpTime; // Offset: 400
    keen::float32 gravityModifier; // Offset: 408
    keen::bool isGravityModified; // Offset: 412
};

struct ecs.Actor {
    keen::ds::ecs::ServerActionSequenceData currentServerAction; // Offset: 2088
    keen::ds::actor::ActorSequenceReference deathSequence; // Offset: 2504
    keen::bool deathSequenceWaitsForGroundedState; // Offset: 2520
    keen::bool defaultVisibleState; // Offset: 2521
    keen::bool sendDeathEvent; // Offset: 2522
    keen::ds::actor::SequenceResourceId deathSequenceId; // Offset: 2524
    keen::ds::ecs::ColliderMode currentColliderMode; // Offset: 2528
    keen::ds::actor::RotationInterpolation rotationInterpolation; // Offset: 2532
};

struct ecs.DisableColliderModeChanges {
};

struct ecs.NetworkActor {
    keen::ds::actor::SequenceRuntimeId sequenceRuntimeId; // Offset: 0
    keen::ds::actor::AbilityMask currentAbilityMask; // Offset: 24
    keen::ds::actor::StateMask currentState; // Offset: 32
    keen::ds::ecs::EntityId interactionHostId; // Offset: 40
    keen::StaticArray<keen::ds::ecs::EntityTagReferenceEntry,4> currentActionEntityTags; // Offset: 44
    keen::ds::ItemId usedItemId; // Offset: 108
    keen::ds::actor::ActionSequenceState currentActionState; // Offset: 112
};

struct ecs.ClientActor {
    keen::ds::actor::SequenceRuntimeId lastReceivedSequenceRuntimeId; // Offset: 2088
};

struct ecs.SimpleActorInput {
    keen::ds::actor::ActorSequenceReference sequence; // Offset: 0
    keen::ds::ItemReference usedItem; // Offset: 16
    keen::bool loop; // Offset: 32
};

struct ecs.SimpleToggleActor {
    keen::ds::ecs::SimpleActorInput on; // Offset: 0
    keen::ds::ecs::SimpleActorInput off; // Offset: 36
};

struct ecs.DynamicSimpleToggleActor {
    keen::Time triggerTime; // Offset: 0
};

typedef keen::ecs::TrapState ecs.TrapState;

typedef keen::impact::AttackCategoryMask impact.AttackCategoryMask;

struct ecs.SimpleTrapActor {
    keen::ds::ecs::SimpleActorInput onTriggerEnter; // Offset: 0
    keen::ds::ecs::SimpleActorInput onTriggerLeave; // Offset: 36
    keen::ds::ecs::SimpleActorInput onArm; // Offset: 72
    keen::ds::ecs::SimpleActorInput onDisarm; // Offset: 108
    keen::Time triggerCooldownTime; // Offset: 144
    keen::bool triggerOnHit; // Offset: 152
    keen::ds::impact::AttackCategoryMask disabledDamageTypes; // Offset: 153
    keen::ds::animationgraph::StateIdReference idleArmedAnimation; // Offset: 156
    keen::ds::animationgraph::StateIdReference idleDisarmedAnimation; // Offset: 172
};

struct ecs.DynamicSimpleTrapActor {
    keen::Time lastArmedTime; // Offset: 0
    keen::ds::ecs::TrapState state; // Offset: 8
};

struct ecs.TeleportZone {
    keen::ds::ecs::EntityTagReference zoneTag; // Offset: 0
};

struct ecs.TeleportZoneConnection {
    keen::ds::LocaTagId teleporterId; // Offset: 0
    keen::ds::LocaTagId targetTeleporterId; // Offset: 4
};

struct ecs.Teleport {
    keen::WorldTransform targetTransform; // Offset: 0
    keen::ds::ecs::EntityId targetEntityId; // Offset: 56
    keen::bool applied; // Offset: 60
    keen::bool searchBestSpawnPosition; // Offset: 61
};

struct ecs.FallDamage {
    keen::float32 fallDamageStartDistance; // Offset: 0
    keen::float32 fallDamageLethalDistance; // Offset: 4
    keen::ds::actor::ActorSequenceReference fallDamageSequence; // Offset: 8
};

struct ecs.DynamicFallDamage {
    keen::bool wasFalling; // Offset: 0
    keen::bool resetFallAltitudeOnApex; // Offset: 1
    keen::float32 fallStartAltitude; // Offset: 4
    keen::float32 detectedFallDistance; // Offset: 8
    keen::float32 detectedFallDamagePercentage; // Offset: 12
};

struct ecs.ServerCameraControl {
    keen::bool isCameraIdLocked; // Offset: 0
    keen::ds::CameraId lockedCameraId; // Offset: 1
    keen::Time unlockTime; // Offset: 8
    keen::ds::CameraOverride cameraOverride; // Offset: 16
    keen::Time overrideEndTime; // Offset: 24
};

struct ecs.NetworkCameraControl {
    keen::bool isCameraIdLocked; // Offset: 0
    keen::ds::CameraId lockedCameraId; // Offset: 1
    keen::ds::CameraOverride cameraOverride; // Offset: 2
};

struct ecs.ClientCameraControl {
    keen::ds::CameraId activeCameraId; // Offset: 0
    keen::float32 idleCameraTriggerDelay; // Offset: 4
    keen::float32 buildingCameraSwitchDelay; // Offset: 8
    keen::float32 hipfireCameraSwitchDelay; // Offset: 12
    keen::WorldPosition entityCameraPosition; // Offset: 16
    keen::Quaternion entityCameraOrientation; // Offset: 40
};

typedef keen::ecs::LockedTargetFlags ecs.LockedTargetFlags;

struct ecs.TargetSelector {
    keen::ds::ecs::RangeQueryId queryId; // Offset: 0
    keen::float32 range; // Offset: 4
    keen::Time time; // Offset: 8
};

typedef keen::ecs::TargetImportance ecs.TargetImportance;

struct ecs.TargetInfo {
    keen::WorldTransform targetTransform; // Offset: 0
    keen::ds::ecs::Offset targetingOffset; // Offset: 56
    keen::ds::ecs::EntityId targetId; // Offset: 96
    keen::ds::ecs::TargetImportance targetImportance; // Offset: 100
    keen::ds::ecs::ColliderId colliderId; // Offset: 104
    keen::uint16 changeCounter; // Offset: 112
    keen::Bitmask8<keen::ecs::LockedTargetFlags> flags; // Offset: 114
};

struct ecs.SelectedTargets {
    keen::StaticArray<keen::ds::ecs::TargetInfo,16> targets; // Offset: 0
    keen::ds::actor::SequenceResourceId interactionSequencePredictionHelper; // Offset: 1920
};

struct ecs.NetworkSelectedTargets {
    keen::StaticArray<keen::ds::ecs::EntityId,16> targetIds; // Offset: 0
    keen::bool combatTargetSupportsHardLock; // Offset: 64
};

struct ecs.ParentTargets {
};

struct ecs.ServerTarget {
    keen::bool hardLockTarget; // Offset: 0
    keen::ds::ecs::TargetImportance targetImportance; // Offset: 1
};

struct ecs.HardLockTarget {
};

struct ecs.ClearPathToTarget {
    keen::float32 yOffset; // Offset: 0
    keen::ds::ecs::QueryId queryId; // Offset: 4
    keen::bool hasHitSolidCollider; // Offset: 8
    keen::bool hasHitSteeringCollider; // Offset: 9
};

struct ecs.Loot {
    keen::ds::ItemId itemId; // Offset: 0
    keen::bool awaitingDestroy; // Offset: 4
};

struct ecs.Orb {
    keen::ds::NotifierReference pickupNotifier; // Offset: 0
    keen::ds::ecs::TemplateReference pickupTemplate; // Offset: 16
    keen::ds::ImpactProgramReference program; // Offset: 32
    keen::bool awaitingDestroy; // Offset: 48
    keen::ds::SoundContainerReference sfx; // Offset: 52
    keen::ds::VfxReference vfx; // Offset: 68
};

struct ecs.SceneLootNodeId {
    keen::ds::LootContainerId id; // Offset: 0
};

struct ecs.RandomLoot {
    keen::ObjectReference<keen::ds::DefaultLootLabelCollection> defaultLabels; // Offset: 0
};

struct ecs.RandomLootProbability {
    keen::float32 spawnProbability; // Offset: 0
};

struct ecs.RandomLootSlotCount {
    keen::uint8 slotsMin; // Offset: 0
    keen::uint8 slotsMax; // Offset: 1
};

struct ecs.RandomLootContainer {
    keen::uint32 spawnedLootVersion; // Offset: 0
    keen::ds::LootContainerId parentNodeId; // Offset: 4
    keen::ds::LootContainerId defaultLabelsId; // Offset: 8
};

struct ecs.RandomLootPlayerScale {
    keen::uint8 playerCount; // Offset: 0
};

struct ecs.RandomLootLock {
};

struct ecs.PickupLootSlot {
    keen::ds::ecs::TemplateReference genericPickupItem; // Offset: 0
    keen::ds::ecs::EntityId spawnedPickupEntity; // Offset: 16
};

struct ecs.RandomLootInventory {
};

struct ecs.RandomLootOnDestroy {
    keen::bool triggered; // Offset: 0
};

struct ecs.DisableRandomLootOnDestroy {
};

struct ecs.RandomLootEntitySpawner {
    keen::ds::ecs::TemplateReference lootEntity; // Offset: 0
    keen::ds::ecs::EntityId spawnedEntityId; // Offset: 16
};

struct ecs.LocaTagComponent {
    keen::ds::LocaTagReference locaTag; // Offset: 0
};

struct LocaTag {
    keen::ds::string keenglish; // Offset: 0
    keen::ds::string description; // Offset: 40
};

typedef keen::ds::LocaTag ecs.MapMarkerLocaTag;

typedef keen::ObjectReference<keen::ds::MapMarkerType> MapMarkerTypeReference;

struct ecs.MapMarker {
    keen::ds::LocaTagReference markerId; // Offset: 0
    keen::ds::MapMarkerTypeReference markerType; // Offset: 16
    keen::float rangeScale; // Offset: 32
};

typedef keen::ecs::MapMarkerVisibilityType ecs.MapMarkerVisibilityType;

typedef keen::ecs::MapMarkerVisibilityStateMask ecs.MapMarkerVisibilityStateMask;

struct ecs.MapMarkerVisibilityState {
    keen::ds::ecs::MapMarkerVisibilityType visibility; // Offset: 0
    keen::Time lastChange; // Offset: 8
    keen::uint16 knowledgeChangeCounter; // Offset: 16
};

struct ecs.MapMarkerToggleState {
    keen::ds::ecs::MapMarkerVisibilityStateMask visibilityMap; // Offset: 0
};

struct ecs.Location {
    keen::ds::ecs::LocalPlayerMask isInLocation; // Offset: 0
};

struct ecs.IsPlayerInRange {
    keen::bool onlyPlayer; // Offset: 0
    keen::ds::actor::StateMask ignoreStates; // Offset: 8
    keen::Time updateDelay; // Offset: 16
    keen::float32 deactivateRange; // Offset: 24
    keen::float32 minRange; // Offset: 28
};

struct ecs.DynamicIsPlayerInRange {
    keen::ds::ecs::RangeQueryId queryId; // Offset: 0
    keen::ds::ecs::EntityId closestActorId; // Offset: 4
    keen::Time startTime; // Offset: 8
};

typedef keen::ecs::ToggleType ecs.ToggleType;

typedef keen::ecs::ToggleMask ecs.ToggleMask;

struct ecs.ToggleInShape {
    keen::ds::ecs::ToggleMask ignoreState; // Offset: 0
};

struct ecs.InertialFrame {
    keen::float3 velocity; // Offset: 0
    keen::float3 normal; // Offset: 12
};

struct SlopeDefinition {
    keen::Angle steepFloorAngle; // Offset: 0
    keen::Angle slidingAngle; // Offset: 4
    keen::Angle fallDamageAngle; // Offset: 8
    keen::Angle slidingMaterialMinAngle; // Offset: 12
};

struct ecs.SlopeConfig {
    keen::ds::SlopeDefinition slopeDefinition; // Offset: 0
    keen::ObjectReference<keen::ds::SlopeDefinition> slopeDefinitionObject; // Offset: 16
};

typedef keen::ecs::HookShotType ecs.HookShotType;

struct ecs.PlayerFx {
    keen::ds::ecs::EntityId fxEntityId; // Offset: 0
    keen::ds::ecs::EntityId attachEntityId; // Offset: 4
};

struct ecs.PlayerFxSpawner {
    keen::ds::ecs::PlayerFx hookShotTargetFx; // Offset: 0
    keen::ds::ecs::PlayerFx hookShotRopeFx; // Offset: 8
    keen::ds::ecs::PlayerFx gliderUpstreamFx; // Offset: 16
};

typedef keen::ecs::HookShotState ecs.HookShotState;

struct ecs.HookShot {
    keen::ds::ecs::EntityId triggerAnchorEntityId; // Offset: 0
    keen::Time triggerTime; // Offset: 8
    keen::ds::actor::ActionSequenceTrigger sequenceTrigger; // Offset: 16
    keen::ds::ItemInstanceInfo triggerItemInstance; // Offset: 20
    keen::ds::ecs::HookShotType hookShotType; // Offset: 40
    keen::ds::ecs::HookShotState hookShotState; // Offset: 41
    keen::ds::actor::SequenceResourceId sequenceResourceId; // Offset: 44
    keen::ds::actor::SequenceRuntimeId sequenceId; // Offset: 48
    keen::ds::ecs::EntityId anchorEntityId; // Offset: 72
    keen::WorldPosition anchorPosition; // Offset: 80
    keen::float3 hookPullActorTargetOffset; // Offset: 104
    keen::float3 hookPullAnchorNormal; // Offset: 116
    keen::float3 hookPullOriginalVelocity; // Offset: 128
    keen::float3 hookSwingOriginalHorizontalDirection; // Offset: 140
    keen::Time hookSwingEndTime; // Offset: 152
    keen::float32 hookSwingRopeLength; // Offset: 160
    keen::bool isEnemyHookAnchor; // Offset: 164
    keen::bool useHookShotCamera; // Offset: 165
    keen::bool hasTouchedGroundAfterHook; // Offset: 166
};

struct ecs.ClientHookShot {
    keen::Time triggerTime; // Offset: 0
    keen::WorldPosition anchorPosition; // Offset: 8
    keen::bool useHookShotCamera; // Offset: 32
    keen::ds::ecs::HookShotType hookShotType; // Offset: 33
};

struct ecs.HookShotDiscoverMemory {
    keen::StaticArray<keen::ds::ecs::EntityId,16> entityIds; // Offset: 0
    keen::uint16 discoveredMask; // Offset: 64
};

struct ecs.HookShotInteractionOffer {
    keen::WorldTransform targetTransform; // Offset: 0
    keen::float3 actorTargetOffset; // Offset: 56
    keen::uint32 anchorEntityLevel; // Offset: 68
    keen::ds::ecs::HookShotType hookShotType; // Offset: 72
    keen::uint8 index; // Offset: 73
    keen::bool hasPriority; // Offset: 74
};

struct ecs.HookShotTargeting {
    keen::ds::ecs::HookShotInteractionOffer bestInteractionOffer; // Offset: 0
    keen::ds::ecs::HookShotDiscoverMemory discoverMemory; // Offset: 80
};

struct ecs.HookShotAnchor {
    keen::ds::ecs::HookShotType hookShotType; // Offset: 0
    keen::float3 targetOffset; // Offset: 4
};

struct ecs.HookShotAnchorSubEntity {
    keen::ds::ecs::TemplateReference anchorEntityTemplate; // Offset: 0
    keen::ds::ecs::Offset attachmentOffset; // Offset: 16
};

struct ecs.HookPullImpulse {
    keen::ds::ecs::ImpulseData impulseData; // Offset: 0
    keen::ds::ecs::EntityId pullingEntityId; // Offset: 32
};

typedef keen::ecs::ClimbType ecs.ClimbType;

typedef keen::ecs::ClimbState ecs.ClimbState;

typedef keen::ecs::LadderQueryType ecs.LadderQueryType;

struct ecs.LadderQuery {
    keen::ds::ecs::QueryId queryId; // Offset: 0
    keen::bool isValid; // Offset: 4
    keen::bool enable; // Offset: 5
};

struct ecs.Climb {
    keen::ds::ecs::ClimbType climbType; // Offset: 0
    keen::ds::ecs::ClimbState climbState; // Offset: 1
    keen::float3 climbNormal; // Offset: 4
    keen::Time climbBlockingTimeEnd; // Offset: 16
    keen::StaticArray<keen::ds::ecs::LadderQuery,3> ladderCollisionQueries; // Offset: 24
    keen::ds::ecs::EntityId ladderEntityId; // Offset: 48
    keen::ds::ecs::RangeQueryId laddersQueryId; // Offset: 52
    keen::bool ladderStepPhase; // Offset: 56
};

struct ecs.Ladder {
    keen::float3 topOffset; // Offset: 0
    keen::float3 bottomOffset; // Offset: 12
    keen::float3 normal; // Offset: 24
};

struct ecs.LerpTransformData {
    keen::ds::ecs::LerpTransformTarget target; // Offset: 0
    keen::Time localTime; // Offset: 8
    keen::Time duration; // Offset: 16
};

struct ecs.LerpTransform {
    keen::StaticArray<keen::WorldTransform,3> targetTransforms; // Offset: 0
    keen::ds::ecs::LerpTransformData positionLerpData; // Offset: 168
    keen::ds::ecs::LerpTransformData orientationLerpData; // Offset: 192
};

struct ecs.BasicSpawnerComponent {
    keen::ds::ecs::TemplateReference entityTemplate; // Offset: 0
};

struct ecs.TriggerSpawner {
    keen::bool isTriggered; // Offset: 16
    keen::ds::ecs::EntityId spawnedEntityId; // Offset: 20
    keen::Time spawnTimeout; // Offset: 24
    keen::Time nextAllowedSpawnTime; // Offset: 32
};

struct ecs.TriggerBoxMultiSpawner {
    keen::bool linkDestroyToEventSender; // Offset: 16
    keen::bool randomizeOrientation; // Offset: 17
    keen::Time lastTriggerTime; // Offset: 24
    keen::float32 minDistanceToEventSender; // Offset: 32
};

typedef keen::ecs::SpawnTarget ecs.SpawnTarget;

typedef keen::ecs::SpawnMode ecs.SpawnMode;

typedef keen::ecs::SpawnOrientationMode ecs.SpawnOrientationMode;

typedef keen::ecs::SpawnCondition ecs.SpawnCondition;

typedef keen::ecs::SpawnConditionFlags ecs.SpawnConditionFlags;

struct ecs.SpawnGroupId {
};

struct ecs.SpawnGroup {
    keen::ObjectReference<keen::ds::ecs::SpawnGroupId> spawnGroupId; // Offset: 0
    keen::uint8 minSpawnAmount; // Offset: 16
    keen::uint8 maxSpawnAmount; // Offset: 17
    keen::float weight; // Offset: 20
};

struct ecs.SpawnerEntry {
    keen::ds::ecs::TemplateReference entityTemplate; // Offset: 0
    keen::ObjectReference<keen::ds::ecs::SpawnGroupId> spawnGroupId; // Offset: 16
    keen::ds::ecs::SpawnConditionFlags spawnConditions; // Offset: 32
    keen::float weight; // Offset: 36
};

struct ecs.SpawnPositionSettings {
    keen::float horizontalSearchDistance; // Offset: 0
    keen::float verticalSearchDistance; // Offset: 4
    keen::float minHorizontalSpace; // Offset: 8
    keen::float minVerticalSpace; // Offset: 12
    keen::ds::ecs::PathNodeRequirements nodeRequirements; // Offset: 16
    keen::ds::ecs::PathGridType pathGridType; // Offset: 20
};

struct ecs.RandomSpawner {
    keen::DsArray<keen::ds::ecs::SpawnerEntry> spawnEntries; // Offset: 0
    keen::DsArray<keen::ds::ecs::SpawnGroup> spawnGroups; // Offset: 40
    keen::float32 minSpawnRange; // Offset: 80
    keen::float32 maxSpawnRange; // Offset: 84
    keen::Time initialSpawnTimeout; // Offset: 88
    keen::Time minSpawnTimeout; // Offset: 96
    keen::Time maxSpawnTimeout; // Offset: 104
    keen::uint8 minSpawnAmount; // Offset: 112
    keen::uint8 maxSpawnAmount; // Offset: 113
    keen::Time minSpawnDelay; // Offset: 120
    keen::Time maxSpawnDelay; // Offset: 128
    keen::uint8 maxTotalSpawnCount; // Offset: 136
    keen::bool destroyOnSpawnFinished; // Offset: 137
    keen::ds::ecs::SpawnMode spawnMode; // Offset: 138
    keen::ds::ecs::SpawnTarget spawnTarget; // Offset: 139
    keen::ds::ecs::SpawnOrientationMode spawnOrientationMode; // Offset: 140
    keen::float32 minEntityDistance; // Offset: 144
    keen::float32 maxEntityDistance; // Offset: 148
    keen::float32 maxSpawnAngle; // Offset: 152
    keen::bool waitUntilEntitiesAreDestroyed; // Offset: 156
    keen::bool allowRespawn; // Offset: 157
    keen::bool useKeepAliveConditions; // Offset: 158
    keen::bool searchForGroundPosition; // Offset: 159
    keen::ds::ecs::SpawnPositionSettings spawnPositionSettings; // Offset: 160
    keen::bool spawnAsUnitGroup; // Offset: 184
    keen::bool despawnEntities; // Offset: 185
    keen::bool checkDeathState; // Offset: 186
    keen::float32 conditionalDespawnMinRange; // Offset: 188
    keen::float32 defaultDespawnMinRange; // Offset: 192
    keen::bool useUpScaling; // Offset: 196
    keen::bool useDownScaling; // Offset: 197
    keen::ds::ecs::RandomSpawnerAmount minSpawnerAmount; // Offset: 198
};

struct ecs.RandomSpawnerCommand {
    keen::Time spawnTime; // Offset: 0
    keen::ds::ecs::Transform transform; // Offset: 8
    keen::uint8 spawnEntryIndex; // Offset: 36
    keen::bool isAdditionalScalingCommand; // Offset: 37
};

struct ecs.DynamicRandomSpawner {
    keen::Time nextSpawnTime; // Offset: 0
    keen::ds::ecs::EntityId currentGroupId; // Offset: 8
    keen::StaticArray<keen::ds::ecs::EntityId,8> spawnedEntities; // Offset: 12
    keen::StaticArray<keen::ds::ecs::RandomSpawnerCommand,12> spawnCommands; // Offset: 48
    keen::bool wasSpawnedEntityAlive; // Offset: 528
    keen::bool wasAnySpawnedEntityKilled; // Offset: 529
    keen::uint8 totalSpawnCount; // Offset: 530
    keen::uint8 spawnCommandCount; // Offset: 531
    keen::Time trySpawnDuration; // Offset: 536
};

struct ecs.ConditionalDespawn {
    keen::float32 conditionalDespawnMinRange; // Offset: 0
    keen::float32 defaultDespawnMinRange; // Offset: 4
    keen::ds::ecs::SpawnConditionFlags keepAliveConditions; // Offset: 8
    keen::Time nextQueryUpdateTime; // Offset: 16
};

struct ecs.ClientToggleFromActorState {
    keen::ds::ecs::EntityReferenceType entityReferenceType; // Offset: 0
    keen::ds::actor::StateMask setIf; // Offset: 8
    keen::ds::actor::StateMask setIfNot; // Offset: 16
};

struct ecs.NetworkHealth {
    keen::uint32 health; // Offset: 0
    keen::uint32 healthMax; // Offset: 4
};

struct ecs.NetworkStamina {
    keen::uint16 stamina; // Offset: 0
    keen::uint16 staminaMax; // Offset: 2
};

struct ecs.NetworkLevel {
    keen::uint16 level; // Offset: 0
};

struct ecs.NetworkServerProgress {
    keen::uint16 level; // Offset: 0
    keen::uint16 currentAltarCount; // Offset: 2
    keen::uint16 currentHighestAltarLevel; // Offset: 4
};

struct ecs.BaseAttributesData {
    keen::uint8 strength; // Offset: 0
    keen::uint8 strengthFromSkill; // Offset: 1
    keen::uint8 dexterity; // Offset: 2
    keen::uint8 dexterityFromSkill; // Offset: 3
    keen::uint8 intelligence; // Offset: 4
    keen::uint8 intelligenceFromSkill; // Offset: 5
    keen::uint8 constitution; // Offset: 6
    keen::uint8 constitutionFromSkill; // Offset: 7
    keen::uint8 endurance; // Offset: 8
    keen::uint8 enduranceFromSkill; // Offset: 9
    keen::uint8 spirit; // Offset: 10
    keen::uint8 spiritFromSkill; // Offset: 11
};

struct ecs.ArmorAttributes {
    keen::float32 physicalBlowthrough; // Offset: 0
    keen::float32 magicalBlowthrough; // Offset: 4
    keen::uint16 physicalArmor; // Offset: 8
    keen::uint16 cutArmor; // Offset: 10
    keen::uint16 bluntArmor; // Offset: 12
    keen::uint16 pierceArmor; // Offset: 14
    keen::uint16 magicalArmor; // Offset: 16
    keen::uint16 fireArmor; // Offset: 18
    keen::uint16 iceArmor; // Offset: 20
    keen::uint16 fogArmor; // Offset: 22
    keen::uint16 lightningArmor; // Offset: 24
};

typedef keen::ecs::ReviveState ecs.ReviveState;

struct ecs.NetworkReviveData {
    keen::ds::ecs::ReviveState state; // Offset: 0
    keen::float duration; // Offset: 4
    keen::float left; // Offset: 8
};

struct ecs.NetworkPlayerAttributes {
    keen::ds::ecs::ArmorAttributes armorAttributes; // Offset: 0
    keen::ds::ecs::BaseAttributesData baseAttributes; // Offset: 28
    keen::ds::ecs::NetworkReviveData revivieData; // Offset: 40
    keen::float32 movementNormal; // Offset: 52
    keen::float32 movementSprint; // Offset: 56
    keen::float32 movementSneak; // Offset: 60
    keen::float32 reviveDuration; // Offset: 64
    keen::float32 reviveHealth; // Offset: 68
    keen::float32 critChance; // Offset: 72
    keen::float32 critChanceMagic; // Offset: 76
    keen::float32 critChanceMelee; // Offset: 80
    keen::float32 critChanceRanged; // Offset: 84
    keen::uint16 critDamageMod; // Offset: 88
    keen::uint16 damageMod; // Offset: 90
    keen::uint16 meleeDamageMod; // Offset: 92
    keen::uint16 rangedDamageMod; // Offset: 94
    keen::uint16 magicDamageMod; // Offset: 96
    keen::uint16 damageModSneak; // Offset: 98
    keen::uint16 damageModMerciless; // Offset: 100
    keen::uint16 damageModBackstab; // Offset: 102
    keen::uint16 damageModSkillshot; // Offset: 104
    keen::uint16 poisonSusceptibility; // Offset: 106
    keen::uint16 health; // Offset: 108
    keen::uint16 healthMax; // Offset: 110
    keen::uint16 healthReg; // Offset: 112
    keen::uint16 healthRegDelay; // Offset: 114
    keen::uint16 stamina; // Offset: 116
    keen::uint16 staminaMax; // Offset: 118
    keen::uint16 staminaReg; // Offset: 120
    keen::uint16 staminaRegDelay; // Offset: 122
    keen::uint16 mana; // Offset: 124
    keen::uint16 manaMax; // Offset: 126
    keen::uint16 manaReg; // Offset: 128
    keen::uint16 manaRegDelay; // Offset: 130
    keen::uint16 bodyHeat; // Offset: 132
    keen::uint16 bodyHeatMax; // Offset: 134
    keen::uint16 bodyHeatReg; // Offset: 136
    keen::uint16 bodyHeatRegDelay; // Offset: 138
    keen::uint16 experience; // Offset: 140
    keen::uint16 experienceRequired; // Offset: 142
    keen::uint16 fogResistance; // Offset: 144
    keen::uint16 fogResistanceMax; // Offset: 146
    keen::uint16 level; // Offset: 148
    keen::uint16 staffDamage; // Offset: 150
    keen::uint16 wandDamage; // Offset: 152
    keen::uint16 oneHandedDamage; // Offset: 154
    keen::uint16 twoHandedDamage; // Offset: 156
    keen::uint16 bowDamage; // Offset: 158
    keen::uint16 daggerDamage; // Offset: 160
    keen::uint16 throwableDamage; // Offset: 162
    keen::uint16 unarmedDamage; // Offset: 164
    keen::uint16 magicalFoeDamage; // Offset: 166
    keen::uint16 meleeFoeDamage; // Offset: 168
    keen::uint16 rangedFoeDamage; // Offset: 170
    keen::uint16 flyingFoeDamage; // Offset: 172
    keen::uint16 skeletonFoeDamage; // Offset: 174
    keen::uint16 healing; // Offset: 176
    keen::uint16 freezingResistance; // Offset: 178
    keen::uint8 comfortLevel; // Offset: 180
};

typedef keen::ecs::GatherResourceType ecs.GatherResourceType;

struct ecs.MiningNode {
    keen::ds::ecs::GatherResourceType resourceType; // Offset: 0
    keen::ds::NotifierReference onResourceDepletion; // Offset: 4
    keen::ds::ecs::Offset offset; // Offset: 20
    keen::ds::SoundContainerReference sfx; // Offset: 60
    keen::ds::VfxReference vfx; // Offset: 76
    keen::uint8 aliveDropCount; // Offset: 92
    keen::uint8 numberOfDrops; // Offset: 93
};

struct ecs.DynamicMiningNode {
    keen::bool isInitialized; // Offset: 0
    keen::bool canBeDestroyed; // Offset: 1
    keen::uint8 remainingDropCount; // Offset: 2
};

struct ecs.WiggleComponent {
    keen::Time startTime; // Offset: 0
    keen::float3 rotationAxis; // Offset: 8
    keen::Time duration; // Offset: 24
    keen::float32 intensity; // Offset: 32
    keen::float32 bounciness; // Offset: 36
};

struct ecs.HealthBasedScale {
    keen::float32 minSize; // Offset: 0
    keen::uint8 percentage; // Offset: 4
};

struct ecs.InventoryEmptyState {
    keen::bool toggleVFX; // Offset: 0
    keen::bool isEmpty; // Offset: 1
};

struct ecs.CopyInventoryEmptyStateFromParent {
};

struct ecs.TransformHistoryEntry {
    keen::uint32 tick; // Offset: 0
    keen::WorldTransform transform; // Offset: 8
};

struct ecs.TransformationHistory {
    keen::StaticArray<keen::ds::ecs::TransformHistoryEntry,60> history; // Offset: 0
    keen::Time lastSampleTime; // Offset: 3840
    keen::uint32 lastIndex; // Offset: 3848
    keen::uint32 maxIndex; // Offset: 3852
};

struct ecs.ServerTransformationHistory {
};

struct ecs.ClientTransformationHistory {
};

struct ecs.GameEvent {
    keen::Time timeStamp; // Offset: 0
};

struct ecs.BaseHitEvent {
    keen::WorldTransform targetTransform; // Offset: 8
    keen::float3 volumeMin; // Offset: 64
    keen::float3 volumeMax; // Offset: 76
    keen::bool hasVolume; // Offset: 88
    keen::float32 miningDamagedVolume; // Offset: 92
    keen::float32 miningRemovedVolume; // Offset: 96
    keen::bool hasMiningVolume; // Offset: 100
    keen::ds::CollisionFeedbackMaterialReference materialA; // Offset: 104
    keen::ds::CollisionFeedbackMaterialReference materialB; // Offset: 120
    keen::float3 position; // Offset: 136
    keen::float3 normal; // Offset: 148
    keen::float3 hitDirection; // Offset: 160
    keen::ds::ecs::EntityId rootSourceId; // Offset: 172
    keen::ds::ecs::EntityId targetId; // Offset: 176
    keen::ds::ecs::HitEventFlagMask flags; // Offset: 180
};

struct impact.ImpactId {
    keen::uint32 id; // Offset: 0
};

typedef keen::impact::PushBackForce impact.PushBackForce;

typedef keen::WeaponCategoryId WeaponCategoryId;

struct ecs.HitEvent {
    keen::ds::ecs::EntityId rootTargetId; // Offset: 184
    keen::ds::ecs::EntityId sourceId; // Offset: 188
    keen::ds::ecs::EntityId permissionSourceId; // Offset: 192
    keen::ds::ecs::EntityId weaponPideId; // Offset: 196
    keen::ds::ecs::EntityId armorPideId; // Offset: 200
    keen::float32 hitAngle; // Offset: 204
    keen::float32 range; // Offset: 208
    keen::sint32 healthChange; // Offset: 212
    keen::sint32 staminaChange; // Offset: 216
    keen::float32 aggro; // Offset: 220
    keen::float32 noiseRange; // Offset: 224
    keen::ds::impact::ImpactId impactId; // Offset: 228
    keen::ds::impact::PushBackForce pushBackForce; // Offset: 232
    keen::ds::impact::HitReactionType hitReaction; // Offset: 234
    keen::ds::impact::MajorDirection hitDirectionConfig; // Offset: 236
    keen::ds::impact::AttackCategoryMask attackCategory; // Offset: 237
    keen::ds::WeaponCategoryId weaponCategory; // Offset: 240
    keen::ds::FactionType targetFaction; // Offset: 244
};

struct ecs.HitHistory {
    keen::StaticArray<keen::ds::ecs::HitEvent,10> history; // Offset: 0
    keen::StaticArray<keen::WorldTransform,10> targetTransform; // Offset: 2480
    keen::uint32 lastIndex; // Offset: 3040
    keen::uint32 maxIndex; // Offset: 3044
};

struct ecs.ExperienceSource {
    keen::ds::ecs::EntityId lastHitPlayerId; // Offset: 0
    keen::float xpMod; // Offset: 4
};

struct ecs.FogOfWarDiscovery {
    keen::float32 discoveryRange; // Offset: 0
};

typedef keen::FogType FogType;

struct ecs.EnvironmentSensor {
    keen::ds::FogType fogType; // Offset: 0
    keen::ds::TemperatureVoxelType temperature; // Offset: 1
};

struct ecs.ToggleAnimation {
    keen::ds::animationgraph::StateIdReference animationStateOn; // Offset: 0
    keen::ds::animationgraph::StateIdReference animationStateOff; // Offset: 16
};

struct ecs.ToggleOnHit {
    keen::ds::impact::AttackCategoryMask disabledDamageTypes; // Offset: 0
    keen::bool canToggleOn; // Offset: 1
    keen::bool canToggleOff; // Offset: 2
};

struct ecs.LinkToggleStateToSignalState {
    keen::ds::SignalReference signal; // Offset: 0
    keen::bool targetState; // Offset: 16
};

struct ecs.LinkToggleStateToParentSignalState {
    keen::ds::SignalReference signal; // Offset: 0
    keen::bool targetState; // Offset: 16
};

struct ecs.LinkToggleStateToParentToggleState {
    keen::bool targetState; // Offset: 0
};

struct ecs.LinkClientToggleStateToParentToggleState {
    keen::bool targetState; // Offset: 0
};

struct ecs.SendToggleStateToParentToggleState {
};

struct ecs.LinkToggleStateToEnemyPhase {
    keen::ObjectReference<keen::ds::EnemyPhase> phase; // Offset: 0
    keen::bool targetState; // Offset: 16
};

struct ecs.LinkToggleStateToParentEnemyPhase {
    keen::ObjectReference<keen::ds::EnemyPhase> phase; // Offset: 0
    keen::bool targetState; // Offset: 16
};

struct ecs.SignalTransmitter {
    keen::ds::SignalReference signal; // Offset: 0
    keen::ds::SignalId signalId; // Offset: 16
    keen::bool state; // Offset: 20
    keen::bool sendActivatedEvent; // Offset: 21
    keen::bool sendDeactivatedEvent; // Offset: 22
    keen::bool sendResultSignal; // Offset: 23
};

struct ecs.SignalReceiver {
    keen::ds::SignalId signalId; // Offset: 0
    keen::ds::ecs::EntityId lastSenderId; // Offset: 4
    keen::ds::SignalReference signal; // Offset: 8
};

typedef keen::DelayMask DelayMask;

struct ecs.SignalDelay {
    keen::Time duration; // Offset: 0
    keen::ds::DelayMask filterMask; // Offset: 8
    keen::Time toggleTime; // Offset: 16
    keen::bool nextState; // Offset: 24
    keen::bool initialized; // Offset: 25
};

struct ecs.MagicalBarrier {
};

struct ecs.MagicalBarrierConnection {
    keen::bool initialized; // Offset: 0
    keen::ds::ecs::EntityId barrierEntityId; // Offset: 4
    keen::ds::ecs::EntityId spawnedSubentityId; // Offset: 8
    keen::ObjectReference<keen::ds::ecs::TemplateReference> spawnEntity; // Offset: 12
};

struct ecs.LocalSignalReceiver {
    keen::ds::SignalReference signal; // Offset: 0
};

struct ecs.MultiSignalReceiver {
    keen::bool evaluate; // Offset: 0
    keen::StaticArray<keen::ds::AttributeCommand,32> calculation; // Offset: 4
    keen::StaticArray<keen::ds::SignalId,16> signalIds; // Offset: 132
    keen::StaticArray<keen::bool,16> signalStates; // Offset: 196
    keen::bool receiveActivatedEvent; // Offset: 212
    keen::bool receiveDeactivatedEvent; // Offset: 213
    keen::bool hasEvaluatedToTrueOnce; // Offset: 214
};

struct ecs.MultiSignalReceiverCounter {
    keen::uint8 activeCount; // Offset: 0
    keen::uint8 requiredCount; // Offset: 1
};

struct ecs.LoreReading {
    keen::ds::LocaTagReference description; // Offset: 0
    keen::ds::ItemId displayedItemId; // Offset: 16
    keen::ds::LocaTagReference entryName; // Offset: 20
    keen::ds::LocaTagReference unlockMapMarker; // Offset: 36
    keen::ds::ItemReference displayedItem; // Offset: 52
};

struct ecs.NonModalHint {
    keen::bool hasCloseRangeActivation; // Offset: 0
    keen::float fullTextActivation; // Offset: 4
    keen::ds::LocaTagReference description; // Offset: 8
    keen::bool hasKnowledeRequirement; // Offset: 24
    keen::bool useSceneKnowledgeRequirement; // Offset: 25
    keen::ds::GameKnowledgeRequirement knowledgeRequirement; // Offset: 28
    keen::ds::KnowledgeId queryId; // Offset: 132
};

struct ecs.DynamicNonModalHint {
    keen::bool isActive; // Offset: 0
    keen::bool isInCloseRange; // Offset: 1
    keen::float squaredPlayerDistance; // Offset: 4
};

struct ecs.TargetingTransform {
    keen::ds::AttachmentSlot attachmentSlot; // Offset: 0
    keen::ds::ecs::Offset offset; // Offset: 4
};

struct ecs.UiOffsets {
    keen::ds::ecs::Offset healthBarOffset; // Offset: 0
    keen::ds::ecs::Offset interactionPromptOffset; // Offset: 40
};

struct ecs.Boss {
};

struct ecs.BossHealthBar {
    keen::ds::LocaTagReference displayName; // Offset: 0
    keen::float32 maxPlayerDistance; // Offset: 16
};

struct ecs.BossDisplay {
    keen::ds::ecs::RangeQueryId rangeQueryId; // Offset: 0
    keen::ds::ecs::EntityId bossEntityId; // Offset: 4
    keen::bool displayHealthBar; // Offset: 8
    keen::bool isEngagedWithPlayer; // Offset: 9
    keen::ds::LocaTagId displayName; // Offset: 12
};

struct ecs.BossMusicTag {
    keen::ds::BossMusicType bossMusic; // Offset: 0
};

struct ecs.Faction {
    keen::ds::FactionType faction; // Offset: 0
};

struct ecs.ControlCombatTarget {
    keen::ds::ecs::EntityId targetId; // Offset: 0
    keen::ds::actor::SequenceRuntimeId attackSequenceId; // Offset: 8
};

struct ecs.ItemState {
    keen::ds::InventorySlotId containedInSlotId; // Offset: 0
    keen::ds::ItemId itemId; // Offset: 8
    keen::uint16 baseDamageUi; // Offset: 12
    keen::ds::ItemStateMask itemState; // Offset: 14
    keen::ds::ItemRarity itemRarityUi; // Offset: 15
    keen::uint8 itemLevelUi; // Offset: 16
    keen::uint8 durabilityRatioUi; // Offset: 17
};

typedef keen::ecs::CreateItemLootState ecs.CreateItemLootState;

struct ecs.CreateItemLoot {
    keen::ds::ecs::CreateItemLootState lootCreationState; // Offset: 0
};

struct ecs.ItemEquippedLifetime {
};

struct ecs.SpawnedCollectionItem {
    keen::ds::ItemId itemId; // Offset: 0
    keen::uint32 modelHandle; // Offset: 4
};

struct ecs.ItemCollectionComponent {
    keen::ds::LocaTagReference uiMenuName; // Offset: 0
    keen::ds::LocaTagReference uiSlottingVerb; // Offset: 16
    keen::bool spawnCollectionModels; // Offset: 32
    keen::ObjectReference<keen::ds::ItemCollectionSetup> collection; // Offset: 36
    keen::ObjectReference<keen::ds::ModelHierarchy> hierarchy; // Offset: 52
    keen::ObjectReference<keen::ds::Animation> pose; // Offset: 68
    keen::ObjectReference<keen::ds::ClothCollider> clothColliderReference; // Offset: 84
    keen::DsArray<keen::ds::ItemCollectionSlotResource> slots; // Offset: 104
    keen::HashKey32 poseId; // Offset: 144
};

struct ecs.DynamicItemCollectionComponent {
    keen::StaticArray<keen::ds::ecs::SpawnedCollectionItem,8> spawnedCollectionItems; // Offset: 0
};

struct ecs.TriggerCollectionCompletionKnowledge {
    keen::ds::KnowledgeId completionKnowledgeId; // Offset: 0
};

struct ecs.MovementSensor {
    keen::ds::ecs::RangeQueryId queryId; // Offset: 0
};

struct ecs.FleeSensor {
    keen::float32 viewConeHalfAngle; // Offset: 0
    keen::float32 alertZoneMediumWidth; // Offset: 4
    keen::float32 originalFleeRadius; // Offset: 8
    keen::float32 fleeRadius; // Offset: 12
    keen::bool checkViewCone; // Offset: 16
    keen::bool checkBackCone; // Offset: 17
    keen::Time ignoreCalmEnemiesUntilTime; // Offset: 24
    keen::ds::ecs::AlertState alertState; // Offset: 32
    keen::ds::ecs::EntityId highestDangerEntityId; // Offset: 36
    keen::WorldPosition highestDangerPosition; // Offset: 40
    keen::bool forceUpdate; // Offset: 64
};

struct ecs.FriendSensor {
    keen::float32 checkRadius; // Offset: 0
    keen::StaticArray<keen::ds::ecs::EntityId,8> friendsInRange; // Offset: 4
};

struct ecs.EnemySensor {
    keen::float32 checkRadius; // Offset: 0
    keen::uint8 enemiesInRange; // Offset: 4
};

struct ecs.CheckLineAboveSensor {
    keen::float32 lineCheckHeightAbove; // Offset: 0
};

struct ecs.SafePlayerPosition {
    keen::Time minSafeDuration; // Offset: 0
    keen::float32 minFallHeight; // Offset: 8
};

struct ecs.DynamicSafePlayerPosition {
    keen::WorldTransform transform; // Offset: 0
    keen::Time currentSafeDuration; // Offset: 56
};

struct ecs.Crafting {
    keen::ObjectReference<keen::ds::WorkshopDefinition> workshop; // Offset: 0
    keen::ds::WorkshopId workshopId; // Offset: 16
};

struct ecs.LevelBasedModel {
    keen::sint32 level; // Offset: 0
    keen::ObjectReference<keen::ds::Model> model; // Offset: 4
};

struct ecs.LevelBasedBuildingRange {
    keen::sint32 level; // Offset: 0
    keen::float3 box; // Offset: 4
};

struct ecs.UpgradableBuildingRange {
};

struct ecs.UpgradeData {
    keen::ds::ecs::TemplateReference upgradeEntity; // Offset: 0
    keen::sint32 level; // Offset: 16
};

struct ecs.Upgrade {
    keen::DsArray<keen::ds::ecs::UpgradeData> levels; // Offset: 0
};

struct ecs.DynamicUpgrade {
    keen::ds::ecs::EntityId entityId; // Offset: 0
    keen::sint32 spawnedLevel; // Offset: 4
};

struct ecs.StoreAttributes {
    keen::float32 health; // Offset: 0
    keen::float32 stamina; // Offset: 4
    keen::float32 mana; // Offset: 8
    keen::float32 bodyHeat; // Offset: 12
    keen::bool restoreAttributes; // Offset: 16
};

struct ecs.GrassEffector {
};

struct ecs.SnappingBoxWorld {
    keen::ds::ecs::AlignedBox worldBox; // Offset: 0
    keen::ds::ecs::AlignedBox snappingBox; // Offset: 24
    keen::ds::ItemId containedItemId; // Offset: 48
    keen::uint8 version; // Offset: 52
};

struct ecs.SnappingBoxLocal {
    keen::ds::ecs::AlignedBox localBox; // Offset: 0
    keen::ds::ItemId containedItemId; // Offset: 24
};

struct ecs.TemporaryMining {
    keen::int3 voxelPosition; // Offset: 0
    keen::float32 relativeHealth; // Offset: 12
};

struct ecs.ClientCycleInventoryStock {
    keen::uint8 inventoryStockType; // Offset: 0
    keen::bool canCycle; // Offset: 1
    keen::bool isCyclingDisabled; // Offset: 2
    keen::bool showStock; // Offset: 3
};

struct ecs.ClientLineOfSightState {
    keen::ds::ecs::LineOfSightState lineOfSightState; // Offset: 0
};

struct UiNpcRenderingOptions {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
    keen::ds::animationgraph::StateIdReference defaultAnimation; // Offset: 16
    keen::ds::animationgraph::StateIdHash defaultAnimationStateId; // Offset: 32
    keen::ObjectReference<keen::ds::AnimationGraph> animationGraph; // Offset: 36
};

struct ecs.NpcSetup {
    keen::ds::LocaTagReference name; // Offset: 0
    keen::bool includeInNpcRegistry; // Offset: 16
    keen::bool isCraftingAssistant; // Offset: 17
    keen::ds::LocaTagReference workshopLabel; // Offset: 20
    keen::ds::CharacterPresetReference preset; // Offset: 36
    keen::ds::GameKnowledgeRequirement unlockRequirement; // Offset: 52
    keen::ds::ItemReference placementItem; // Offset: 156
    keen::ds::UiNpcRenderingOptions uiRendering; // Offset: 172
};

struct ecs.CharacterSetup {
    keen::ds::Gender gender; // Offset: 0
    keen::ds::VoicePackId voicePackId; // Offset: 4
    keen::ds::CharacterPresetId presetId; // Offset: 8
    keen::ds::ItemId hair; // Offset: 12
    keen::ds::ItemId beard; // Offset: 16
    keen::ds::ColorPresetId hairColorId; // Offset: 20
    keen::ds::ColorPresetId beardColorId; // Offset: 24
    keen::ds::PaletteColorId skinColor; // Offset: 28
    keen::ds::PaletteColorId eyeBrowColor; // Offset: 32
    keen::ds::PaletteColorId eyeColor; // Offset: 36
    keen::HashKey32 versionHash; // Offset: 40
};

struct ecs.NewCharacterSetup {
};

struct ecs.EquipmentCheck {
};

struct ecs.PlayerLowHealth {
    keen::Time blendOutDuration; // Offset: 0
    keen::Time lastTriggerTime; // Offset: 8
};

struct ecs.GroundCheck {
    keen::bool groundPositionFound; // Offset: 0
    keen::float3 position; // Offset: 4
    keen::float3 normal; // Offset: 16
    keen::Time nextCheckTime; // Offset: 32
};

struct ecs.ProcShuffleBag {
    keen::uint8 procEarlyCount; // Offset: 0
    keen::uint8 procOnTimeCount; // Offset: 1
    keen::uint8 procLateCount; // Offset: 2
    keen::sint8 nextHitCountOffset; // Offset: 3
};

struct ecs.TerrainLootMemory {
    keen::ds::ecs::ProcShuffleBag procShuffleBag; // Offset: 0
    keen::float32 volume; // Offset: 4
    keen::float32 restVolumeAfterPayout; // Offset: 8
};

struct ecs.BuildingLootMemory {
    keen::uint32 volume; // Offset: 0
};

struct ecs.MinerSkillMemory {
    keen::ds::ecs::ProcShuffleBag procShuffleBag; // Offset: 0
    keen::float32 payoutCounter; // Offset: 4
};

struct ecs.TerraformingLootMemory {
    keen::StaticArray<keen::ds::ecs::TerrainLootMemory,128> terrainMemory; // Offset: 0
    keen::StaticArray<keen::ds::ecs::BuildingLootMemory,128> buildingMemory; // Offset: 1536
    keen::ds::ecs::MinerSkillMemory minerSkillMemory; // Offset: 2048
};

struct ecs.TransformToLoot {
    keen::ds::ecs::Offset vfxOnSpawnOffset; // Offset: 0
    keen::ds::ecs::DefaultInventoryReference defaultInventory; // Offset: 40
    keen::ds::actor::ActorSequenceReference defaultAction; // Offset: 56
    keen::ds::LocaTagReference verbLoca; // Offset: 72
    keen::ds::VfxReference vfxOnSpawn; // Offset: 88
    keen::ds::VfxUserEffectParameterDataBlock vfxParameters; // Offset: 104
    keen::uint8 genericSlotCount; // Offset: 168
    keen::uint8 availableSlotCount; // Offset: 169
    keen::bool keepDefaultInventory; // Offset: 170
    keen::uint32 lootHealth; // Offset: 172
};

struct ecs.PlayerStateIndicatorComponent {
    keen::ds::SoundContainerReference soundContainerLowHealth; // Offset: 0
    keen::ds::SoundContainerReference soundContainerLowFogPower; // Offset: 16
    keen::uint32 sfxLowHealthHandle; // Offset: 32
    keen::uint32 sfxLowFogPowerHandle; // Offset: 36
};

struct ecs.Pacify {
    keen::ds::ecs::RangeQueryId queryId; // Offset: 0
    keen::ds::FactionMask pacifyFactions; // Offset: 4
};

struct ecs.PacifiedState {
    keen::bool canBePacified; // Offset: 0
    keen::bool isPacified; // Offset: 1
    keen::bool wasPacifyAborted; // Offset: 2
    keen::ds::ecs::EntityId pacifiedBy; // Offset: 4
    keen::Time pacifyEndTime; // Offset: 8
};

struct ecs.CallFactionsForHelp {
    keen::float32 callForHelpRange; // Offset: 0
    keen::ds::FactionMask callForHelpFactions; // Offset: 4
    keen::ds::ecs::EntityId currentGuardingEntityId; // Offset: 8
};

struct ecs.DebugCameraDisplay {
    keen::float3x4 transform; // Offset: 0
};

struct ecs.CombatFlags {
    keen::bool immune; // Offset: 0
    keen::bool propagateHits; // Offset: 1
    keen::bool handleHits; // Offset: 2
    keen::bool canBlock; // Offset: 3
    keen::bool ignoreMagic; // Offset: 4
    keen::bool ignoreMelee; // Offset: 5
    keen::bool ignoreRanged; // Offset: 6
    keen::bool ignoreTool; // Offset: 7
    keen::bool ignoreOther; // Offset: 8
    keen::bool ignoreAoE; // Offset: 9
    keen::bool canBeBackstabbed; // Offset: 10
};

struct ecs.ToggleImmunity {
    keen::ds::ecs::ToggleModifier toggleModifier; // Offset: 0
};

struct ecs.RandomOrientation {
    keen::ds::actor::RandomOrientationOffset randomOrientationOffset; // Offset: 0
    keen::bool needsTargetEntity; // Offset: 24
    keen::bool adjustVelocity; // Offset: 25
};

struct ecs.RandomDurationScale {
    keen::float min; // Offset: 0
    keen::float max; // Offset: 4
};

struct ecs.Growth {
    keen::Time minDuration; // Offset: 0
    keen::ds::ecs::RandomDurationScale randomDurationScale; // Offset: 8
    keen::DsArray<keen::ds::VoxelRequirement> allowedSoil; // Offset: 16
};

struct ecs.GrowthHint {
};

struct ecs.DynamicGrowth {
    keen::Time nextLevelTime; // Offset: 0
};

struct ecs.EntityTagContainer {
    keen::DsArray<keen::ds::ecs::EntityTagReferenceEntry> tags; // Offset: 0
};

struct ecs.CombatStance {
    keen::Time combatStanceDuration; // Offset: 0
    keen::Time combatStanceEndTime; // Offset: 8
};

struct ecs.BenchmarkPoint {
};

struct ecs.CopyParentDamageSusceptibility {
    keen::bool keepSkillShotAttribute; // Offset: 0
};

typedef keen::ecs::DetachAction ecs.DetachAction;

typedef keen::ecs::AttachmentDirection ecs.AttachmentDirection;

struct ecs.AttachToSurface {
    keen::ds::ecs::DetachAction detachAction; // Offset: 0
    keen::ds::ecs::DetachAction detachActionInBase; // Offset: 1
    keen::ds::ecs::AttachmentDirection attachDirection; // Offset: 2
    keen::float searchLength; // Offset: 4
    keen::ds::ecs::ColliderMask colliderMask; // Offset: 8
    keen::float yOffset; // Offset: 12
    keen::bool spawnFalling; // Offset: 16
};

struct ecs.DynamicAttachToSurface {
    keen::Time searchStartTime; // Offset: 0
    keen::Time nextCheckTime; // Offset: 8
    keen::ds::ecs::EntityId attachmentContainerId; // Offset: 16
    keen::bool hasFoundContainer; // Offset: 20
    keen::bool shouldDestroy; // Offset: 21
    keen::bool hasAddedGravity; // Offset: 22
};

struct ecs.DangerousArea {
    keen::float32 range; // Offset: 0
};

struct ecs.DangerSensor {
    keen::float32 checkRadius; // Offset: 0
};

struct ecs.DynamicDangerSensor {
    keen::bool hasFoundDangerousEntity; // Offset: 0
    keen::ds::ecs::RangeQueryId queryId; // Offset: 4
};

struct ecs.CopyParentLevel {
};

struct ecs.ServerSubmerge {
    keen::float submergeDepth; // Offset: 0
    keen::float maxMaterialSubmergeDepth; // Offset: 4
    keen::float lerpStartValue; // Offset: 8
    keen::float lerpEndValue; // Offset: 12
    keen::Time lerpDuration; // Offset: 16
    keen::Time lerpTime; // Offset: 24
};

struct ecs.NetworkSubmerge {
    keen::float submergeDepth; // Offset: 0
};

struct ecs.ClientSubmerge {
    keen::float submergeDepth; // Offset: 0
    keen::float interpolationSource; // Offset: 4
    keen::float interpolationTarget; // Offset: 8
    keen::uint32 interpolationNewestTick; // Offset: 12
};

struct ecs.SongState {
    keen::Time joinTime; // Offset: 0
    keen::Time songStartTime; // Offset: 8
    keen::ds::SongId songId; // Offset: 16
    keen::uint16 songClusterId; // Offset: 20
};

struct ecs.CustomPlayerString {
    keen::ds::CustomStringId stringId; // Offset: 0
};

struct ecs.SongSelection {
    keen::ds::SongId selectedSongId; // Offset: 0
};

struct ecs.Extinguish {
    keen::ds::SoundContainerReference extinguishSfx; // Offset: 0
};

struct ecs.DynamicExtinguish {
    keen::Time extinguishDetectionTime; // Offset: 0
    keen::Time lastToggle; // Offset: 8
    keen::float32 extinguishValue; // Offset: 16
    keen::bool switchedToggleOff; // Offset: 20
};

struct ecs.ClientExtinguish {
    keen::Time lastNotifyTime; // Offset: 0
    keen::float32 visualizedExtinguishValue; // Offset: 8
};

struct ecs.PackedExtinguish {
    keen::Time lastToggleTime; // Offset: 0
    keen::float32 extinguishValue; // Offset: 8
    keen::bool switchedToggleOff; // Offset: 12
};

struct ecs.FoodBait {
};

struct ecs.RayCastSpawner {
    keen::ds::ecs::TemplateReference spawnTemplate; // Offset: 0
    keen::ds::ecs::Offset rayOffset; // Offset: 16
    keen::float requiredDistanceToSpawnEntity; // Offset: 56
    keen::Time minLifeTime; // Offset: 64
    keen::Time maxLifeTime; // Offset: 72
};

struct ecs.DynamicRayCastSpawner {
    keen::WorldPosition lastSpawnPosition; // Offset: 0
};

struct ecs.WaterSurfaceFX {
    keen::ds::VfxReference standingVfx; // Offset: 0
    keen::ds::VfxReference movingVfx; // Offset: 16
    keen::ds::SoundContainerReference waterSfx; // Offset: 32
    keen::uint32 vfxHandle; // Offset: 48
    keen::uint32 sfxHandle; // Offset: 52
    keen::float3 previousPlayerPosition; // Offset: 56
    keen::bool playerWasMoving; // Offset: 68
};

struct ecs.MoveColliderWithRay {
    keen::float targetLength; // Offset: 0
    keen::Time increaseLengthDuration; // Offset: 8
};

struct ecs.DynamicMoveColliderWithRay {
    keen::Time startTime; // Offset: 0
};

struct ecs.WaterDispenser {
    keen::bool visualOnly; // Offset: 0
};

struct ecs.WaterDrain {
};

typedef keen::GameMessageChannelId GameMessageChannelId;

typedef keen::GameMessageLoginType GameMessageLoginType;

typedef keen::GameMessageLoginErrors GameMessageLoginErrors;

typedef keen::GameMessageLoginResult GameMessageLoginResult;

struct DaytimeSync {
    keen::Time ecsTime; // Offset: 0
    keen::Time gameTime; // Offset: 8
    keen::float32 gameTimeScale; // Offset: 16
};

struct DebugMessage {
    keen::float3 cameraTarget; // Offset: 0
};

struct KnownUserData {
    keen::ds::CharacterId characterId; // Offset: 0
    keen::ds::BaseId baseId; // Offset: 16
};

struct KnownUsers {
    keen::uint32 version; // Offset: 0
    keen::DsArray<keen::ds::KnownUserData> users; // Offset: 8
};

typedef keen::BaseState BaseState;

struct EntitySaveData {
    keen::WorldTransform transform; // Offset: 0
    keen::bool forcedSave; // Offset: 56
    keen::DsArray<keen::uint8> entityData; // Offset: 64
};

struct BaseSaveData {
    keen::Guid baseId; // Offset: 0
    keen::AxisAlignedBox buildZone; // Offset: 16
    keen::DsArray<keen::uint8> voxel; // Offset: 48
    keen::DsArray<keen::uint8> water; // Offset: 88
};

struct ServerSaveGame {
    keen::uint32 version; // Offset: 0
    keen::DsArray<keen::ds::BaseSaveData> bases; // Offset: 8
    keen::DsArray<keen::ds::EntitySaveData> entities; // Offset: 48
    keen::DsArray<keen::uint8> progressEntity; // Offset: 88
    keen::DsArray<keen::uint8> entitySerializationContext; // Offset: 128
    keen::Time playTime; // Offset: 168
};

typedef keen::ServerSaveGameVersion ServerSaveGameVersion;

struct ExtendedServerSaveGame {
    keen::uint32 version; // Offset: 0
    keen::uint32 sceneOffsetChangeCounter; // Offset: 4
    keen::Time dayTime; // Offset: 8
};

typedef keen::ExtendedServerSaveGameVersion ExtendedServerSaveGameVersion;

typedef keen::ecs::GameSettingsPreset ecs.GameSettingsPreset;

struct ServerSaveGameMeta {
    keen::uint32 version; // Offset: 0
    keen::CalendarTimeStamp lastPlayTime; // Offset: 8
    keen::uint32 progressLevel; // Offset: 16
    keen::ds::string name; // Offset: 24
    keen::Time playTime; // Offset: 64
    keen::ds::ecs::GameSettingsPreset gameSettingsPreset; // Offset: 72
};

struct UnlockedItemKnowledgeSave {
    keen::uint32 version; // Offset: 0
    keen::ds::ItemId itemId; // Offset: 4
    keen::ds::ItemKnowledgeMask knowledge; // Offset: 8
};

struct CustomMapMarkerArray {
    keen::DsArray<keen::ds::CustomMapMarker> mapMarkers; // Offset: 0
};

struct CharacterSaveGameEntry {
    keen::ds::string name; // Offset: 0
    keen::ds::CharacterId id; // Offset: 40
    keen::ds::CharacterId cloudId; // Offset: 56
    keen::CalendarTimeStamp lastPlayTime; // Offset: 72
    keen::uint32 version; // Offset: 80
    keen::uint32 level; // Offset: 84
    keen::ds::CharacterStateMask stateMask; // Offset: 88
    keen::ds::CustomMapMarkerArray customMapMarker; // Offset: 96
    keen::DsArray<keen::uint8> data; // Offset: 136
};

struct ItemColorSetupInternal {
    keen::ds::ColorCombinationResource colorIds; // Offset: 0
    keen::bool isSet; // Offset: 12
};

struct OutfitItemData {
    keen::ds::ItemId itemId; // Offset: 0
    keen::ds::ItemColorSetupInternal colors; // Offset: 4
};

struct OutfitArray {
    keen::StaticArray<keen::ds::OutfitItemData,24> data; // Offset: 0
};

struct CharacterOutfit {
    keen::uint32 version; // Offset: 0
    keen::ds::OutfitArray items; // Offset: 4
    keen::ds::ecs::CharacterSetup setup; // Offset: 484
};

struct old_saves.v6.BaseSaveDataV6 {
    keen::Guid baseId; // Offset: 0
    keen::AxisAlignedBox buildZone; // Offset: 16
    keen::WorldTransform DEPRECATEDtransform; // Offset: 48
    keen::DsArray<keen::uint8> voxel; // Offset: 104
};

struct old_saves.v6.ServerSaveGameV6 {
    keen::uint32 version; // Offset: 0
    keen::DsArray<keen::ds::old_saves::v6::BaseSaveDataV6> bases; // Offset: 8
    keen::DsArray<keen::ds::EntitySaveData> entities; // Offset: 48
    keen::DsArray<keen::uint8> progressEntity; // Offset: 88
    keen::DsArray<keen::uint8> entitySerializationContext; // Offset: 128
    keen::Time playTime; // Offset: 168
};

struct ecs.CameraShake {
    keen::float32 trauma; // Offset: 8
    keen::float3 position; // Offset: 12
    keen::ds::ecs::EntityId triggerId; // Offset: 24
};

struct ecs.CameraShakeImpulse {
    keen::float3 impulse; // Offset: 8
    keen::float additionalTrauma; // Offset: 20
    keen::Time duration; // Offset: 24
    keen::ds::ecs::EntityId triggerId; // Offset: 32
};

struct ecs.UiCurrentLocationEvent {
    keen::ds::LocaTagId location; // Offset: 8
};

typedef keen::ResourceTypes ResourceTypes;

struct ecs.UiNegativeFeedbackEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::LocaTagReference messageLocaTag; // Offset: 12
};

struct ecs.UiInsufficientResourcesEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::InventorySlotId itemSlotId; // Offset: 12
    keen::ds::ResourceTypesMask flags; // Offset: 20
};

struct ecs.UiResourcesFullEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::ecs::EntityId buffEntityId; // Offset: 12
    keen::ds::InventorySlotId itemSlotId; // Offset: 16
    keen::ds::ResourceTypesMask flags; // Offset: 24
};

struct ecs.AppliedBuffEvent {
    keen::ds::ecs::EntityId targetEntityId; // Offset: 8
    keen::ds::BuffSlotType slotType; // Offset: 12
    keen::uint32 slotTypeCount; // Offset: 16
};

struct ecs.UiInventoryStockCycleEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::bool selectionResult; // Offset: 12
};

struct ecs.UiBuildingEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::bool isUndoAction; // Offset: 12
    keen::bool isSuccessful; // Offset: 13
};

struct ecs.UiItemTriggerFailedEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::InventorySlotId itemSlotId; // Offset: 12
    keen::ds::EquipmentSlotType equipmentSlotType; // Offset: 20
};

struct ecs.UnlockSkillEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::SkillNodeId skillId; // Offset: 12
};

struct ecs.UnlearnSkillEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::SkillNodeId skillId; // Offset: 12
};

struct ecs.UnlockPerkEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::InventorySlotId slotId; // Offset: 12
};

struct ecs.TrashItemEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::InventorySlotId slotId; // Offset: 12
};

struct ecs.SelectDialogOptionEvent {
    keen::ds::ecs::EntityId interactingEntityId; // Offset: 8
    keen::ds::LocaTagId selectedOptionId; // Offset: 12
    keen::ds::KnowledgeId knowledgeId; // Offset: 16
};

struct ecs.NpcInputEvent {
    keen::ds::NpcId npcId; // Offset: 8
    keen::float roamingRange; // Offset: 12
};

struct ecs.TriggerKnowledgeUiEvent {
    keen::ds::KnowledgeId knowledgeId; // Offset: 8
};

struct ecs.SetPersonalQuestProgressionEvent {
    keen::bool enable; // Offset: 8
};

struct ecs.ServerSelectDialogOptionEvent {
    keen::ds::ecs::EntityId npcEntity; // Offset: 8
    keen::ds::ecs::EntityId playerEntity; // Offset: 12
    keen::ds::LocaTagId selectedOptionId; // Offset: 16
};

struct ecs.BuildingPlaceEvent {
    keen::float3 position; // Offset: 8
    keen::float4 orientation; // Offset: 20
    keen::float3 volumeMin; // Offset: 36
    keen::float3 volumeMax; // Offset: 48
    keen::ds::CollisionFeedbackMaterialReference material; // Offset: 60
    keen::ds::ItemId trackingItemId; // Offset: 76
};

struct ecs.BuildingPickUpEvent {
    keen::float3 position; // Offset: 8
    keen::float4 orientation; // Offset: 20
    keen::float3 volumeMin; // Offset: 36
    keen::float3 volumeMax; // Offset: 48
    keen::ds::CollisionFeedbackMaterialReference material; // Offset: 60
};

struct ecs.BuildingTearDownEvent {
    keen::float3 position; // Offset: 8
    keen::float4 orientation; // Offset: 20
    keen::float3 volumeMin; // Offset: 36
    keen::float3 volumeMax; // Offset: 48
    keen::ds::CollisionFeedbackMaterialReference material; // Offset: 60
};

typedef keen::ecs::HitEventFlags ecs.HitEventFlags;

struct ecs.ProhibitedHit {
    keen::ds::CollisionFeedbackMaterialReference materialA; // Offset: 8
    keen::ds::CollisionFeedbackMaterialReference materialB; // Offset: 24
    keen::float3 position; // Offset: 40
    keen::float3 normal; // Offset: 52
    keen::ds::ecs::EntityId rootSourceId; // Offset: 64
    keen::ds::ecs::EntityId targetId; // Offset: 68
};

struct ecs.TerraformingHitEvent {
    keen::float32 range; // Offset: 184
};

typedef keen::ecs::HitCandidateType ecs.HitCandidateType;

struct ecs.HitCandidate {
    keen::float3 sourceVelocity; // Offset: 248
    keen::WorldTransform sourceTransform; // Offset: 264
    keen::sint32 sourceManaCost; // Offset: 320
    keen::ds::ecs::HitCandidateType candidateType; // Offset: 324
    keen::bool propagate; // Offset: 325
    keen::bool sendHitEvent; // Offset: 326
    keen::bool ignoreConsecutiveHits; // Offset: 327
};

struct ecs.ResourceCandidate {
    keen::ds::ecs::EntityId targetEntityId; // Offset: 8
    keen::HashKey32 attributeId; // Offset: 12
    keen::sint32 change; // Offset: 16
};

struct ecs.ResourceChange {
    keen::uint32 gain; // Offset: 0
    keen::uint32 loss; // Offset: 4
};

struct ecs.ResourceChangeEvent {
    keen::ds::ecs::EntityId targetEntityId; // Offset: 8
    keen::ds::ecs::ResourceChange healthChange; // Offset: 12
    keen::ds::ecs::ResourceChange manaChange; // Offset: 20
    keen::ds::ecs::ResourceChange staminaChange; // Offset: 28
};

struct ecs.EnemyAttackStartedEvent {
    keen::ds::ecs::EntityId attackerId; // Offset: 8
    keen::ds::ecs::EntityId targetId; // Offset: 12
};

struct ecs.CallForHelpEvent {
    keen::ds::ecs::EntityId noticingEntityId; // Offset: 8
    keen::float3 noticingEntityPosition; // Offset: 12
    keen::ds::ecs::EntityId noticedEntityId; // Offset: 24
    keen::float3 noticedEntityPosition; // Offset: 28
    keen::float32 radius; // Offset: 40
    keen::bool checkSight; // Offset: 44
    keen::ds::FactionMask factions; // Offset: 46
};

struct ecs.EnemyIsHelpingEvent {
    keen::ds::ecs::EntityId helpingEntityId; // Offset: 8
    keen::ds::ecs::EntityId targetEntityId; // Offset: 12
};

struct ecs.GenericEnemyEvent {
    keen::ds::ecs::EntityId enemyEntityId; // Offset: 8
    keen::ds::ecs::EnemyEventType eventType; // Offset: 12
};

struct ecs.NoiseEvent {
    keen::ds::ecs::EntityId senderId; // Offset: 8
    keen::float3 position; // Offset: 12
    keen::float32 range; // Offset: 24
};

struct ecs.ChildDestroyed {
    keen::ds::ecs::EntityId childId; // Offset: 8
    keen::ds::ecs::EntityId parentId; // Offset: 12
};

struct ecs.PickupEvent {
    keen::float3 position; // Offset: 8
    keen::ds::ItemId itemId; // Offset: 20
    keen::uint32 itemCount; // Offset: 24
    keen::ds::ecs::EntityId pickedUpByEntityId; // Offset: 28
    keen::ds::ecs::EntityId pickedUpFromEntityId; // Offset: 32
    keen::ds::InventorySlotId targetSlotId; // Offset: 36
};

typedef keen::InventoryCategoryMask InventoryCategoryMask;

struct ecs.InventoryFull {
    keen::ds::ecs::EntityId pickedUpById; // Offset: 8
    keen::ds::ecs::EntityId pickedUpFromId; // Offset: 12
    keen::ds::InventoryCategoryMask mask; // Offset: 16
};

struct ecs.XPGainedEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::uint32 amount; // Offset: 12
    keen::ds::ExperienceSourceType source; // Offset: 16
};

struct ecs.PuzzleCompletedEvent {
    keen::StaticArray<keen::ds::ecs::EntityId,16> clusterPlayerEntityIds; // Offset: 8
};

struct ecs.LevelUpEvent {
    keen::WorldPosition position; // Offset: 8
    keen::ds::ecs::EntityId playerEntityId; // Offset: 32
    keen::Time duration; // Offset: 40
    keen::sint32 level; // Offset: 48
};

struct ecs.AcceptOfferedInteractionEvent {
    keen::ds::ecs::EntityId guestEntityId; // Offset: 8
    keen::ds::ecs::EntityId hostEntityId; // Offset: 12
    keen::uint32 offerId; // Offset: 16
};

struct ecs.InteractionAcceptedEvent {
    keen::ds::ecs::EntityId guestEntityId; // Offset: 8
    keen::ds::ecs::EntityId hostEntityId; // Offset: 12
    keen::uint32 offerId; // Offset: 16
};

struct ecs.SetToggleStateEvent {
    keen::ds::ecs::EntityId senderId; // Offset: 8
    keen::ds::SignalId signalId; // Offset: 12
    keen::bool newState; // Offset: 16
};

struct ecs.ToggleInteractionEvent {
    keen::ds::ecs::EntityId guestId; // Offset: 8
    keen::ds::ecs::EntityId hostId; // Offset: 12
    keen::uint32 offerId; // Offset: 16
};

struct ecs.ActionbarSelectionEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::ActionbarSlotSelection selectedIndex; // Offset: 12
};

struct ecs.InventoryStockSelectionEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::uint8 inventoryStockType; // Offset: 12
    keen::ds::ItemId selectedItemId; // Offset: 16
};

struct ecs.ChangeEquipmentEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::InventorySlotId inventorySlotId; // Offset: 12
    keen::ds::EquipmentSlot equipmentSlot; // Offset: 20
    keen::ds::ecs::ChangeEquipment type; // Offset: 21
};

struct ecs.SwapEquipmentSetEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::ecs::EntityId targetInventoryId; // Offset: 12
    keen::ds::ecs::SwapEquipmentTarget type; // Offset: 16
};

struct ecs.HandleEquipmentSlotChangedEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::EquipmentSlot equipmentSlot; // Offset: 12
};

struct ecs.ConsumeItemEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::InventorySlotId inventorySlotId; // Offset: 12
};

struct ecs.InspectItemEvent {
    keen::ds::InventorySlotId inventorySlotId; // Offset: 8
    keen::ds::ecs::EntityId playerEntityId; // Offset: 16
};

struct ecs.UiCreateBuildingItemEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::ActionbarSlotSelection selectedIndex; // Offset: 12
    keen::ds::ItemId itemId; // Offset: 16
};

struct ecs.UiCreateNpcItemEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::ItemId itemId; // Offset: 12
};

struct ecs.TeleportPlayerEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::ecs::EntityId targetEntityId; // Offset: 12
    keen::float3 targetWorldPosition; // Offset: 16
};

typedef keen::ecs::TransferItemToInventoryFlag ecs.TransferItemToInventoryFlag;

struct ecs.TransferItemToInventoryEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::ecs::EntityId targetInventoryId; // Offset: 12
    keen::ds::InventorySlotId targetSlotId; // Offset: 16
    keen::ds::ecs::EntityId sourceInventoryId; // Offset: 24
    keen::ds::InventorySlotId sourceSlotId; // Offset: 28
    keen::ds::InventoryActionType type; // Offset: 36
    keen::ds::ecs::TransferItemToInventoryFlags flags; // Offset: 37
    keen::uint16 amount; // Offset: 38
};

struct ecs.SortInventoryEvent {
    keen::ds::ecs::EntityId targetInventoryId; // Offset: 8
};

struct ecs.LootInteractionEvent {
    keen::ds::ecs::EntityId guestId; // Offset: 8
    keen::ds::ecs::EntityId hostId; // Offset: 12
    keen::uint32 offerId; // Offset: 16
    keen::bool lootAll; // Offset: 20
    keen::bool forAllPlayers; // Offset: 21
    keen::StaticArray<keen::ds::KnowledgeId,8> knowledgeIds; // Offset: 24
};

struct ecs.UiCraftRecipeEvent {
    keen::ds::ecs::EntityId craftingOperatorId; // Offset: 8
    keen::ds::ecs::EntityId craftingStationId; // Offset: 12
    keen::ds::RecipeId recipeId; // Offset: 16
    keen::uint16 recipeAmount; // Offset: 20
};

struct ecs.UiAutomaticTransferEvent {
    keen::ds::ecs::EntityId craftingOperatorId; // Offset: 8
    keen::ds::ecs::EntityId craftingStationId; // Offset: 12
    keen::ds::RecipeId recipeId; // Offset: 16
    keen::ds::ItemId itemId; // Offset: 20
    keen::uint16 amount; // Offset: 24
};

struct ecs.UiSelectCraftingStationRecipeEvent {
    keen::ds::ecs::EntityId craftingOperatorId; // Offset: 8
    keen::ds::ecs::EntityId craftingStationId; // Offset: 12
    keen::ds::RecipeId recipeId; // Offset: 16
};

struct ecs.CraftRecipeEvent {
    keen::ds::ecs::EntityId craftingOperatorId; // Offset: 8
    keen::ds::ecs::EntityId craftingStationId; // Offset: 12
    keen::ds::RecipeId recipeId; // Offset: 16
    keen::uint16 recipeAmount; // Offset: 20
};

struct ecs.CraftRecipeSuccessEvent {
    keen::ds::WorkshopId workshopId; // Offset: 8
    keen::ds::RecipeId recipeId; // Offset: 12
};

struct ecs.UiPinRecipeEvent {
    keen::ds::RecipeId recipeId; // Offset: 8
    keen::bool pinRecipe; // Offset: 12
};

struct ecs.UiWaypointEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::WorldPosition position; // Offset: 16
    keen::bool enable; // Offset: 40
};

struct ecs.UiPingEvent {
    keen::ds::ecs::EntityId senderEntityId; // Offset: 8
    keen::WorldPosition position; // Offset: 16
};

struct ecs.UiPingInputEvent {
};

typedef keen::MapMarkerTypeId MapMarkerTypeId;

struct ecs.UiAddMapMarkerEvent {
    keen::WorldPosition position; // Offset: 8
    keen::uint8 colorScheme; // Offset: 32
    keen::ds::MapMarkerTypeId type; // Offset: 36
};

struct ecs.UiRemoveMapMarkerEvent {
    keen::uint32 handle; // Offset: 8
};

struct ecs.ChangeCustomizationEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::InventorySlotId targetSlotId; // Offset: 12
    keen::ds::ItemId itemId; // Offset: 20
};

struct ecs.OpenHudScreenEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::ecs::EntityId interactionHostId; // Offset: 12
    keen::ds::HudScreenType screen; // Offset: 16
};

struct ecs.KillFaction {
    keen::ds::FactionMask factionMask; // Offset: 8
    keen::uint32 playerMask; // Offset: 12
};

struct ecs.StartFlyingEvent {
    keen::ds::ecs::EntityId targetId; // Offset: 8
};

struct ecs.StopFlyingEvent {
    keen::ds::ecs::EntityId targetId; // Offset: 8
};

struct ecs.EnterFlyingStateEvent {
    keen::ds::ecs::EntityId targetId; // Offset: 8
};

struct ecs.SyncedAttackEvent {
    keen::ds::ecs::EntityId attackerEntityId; // Offset: 8
    keen::ds::ecs::EntityId targetEntityId; // Offset: 12
    keen::Time resolveTime; // Offset: 16
    keen::ds::ecs::SyncedAttackType type; // Offset: 24
};

struct ecs.SyncedSequenceEvent {
    keen::ds::ecs::EntityId entityId; // Offset: 8
    keen::ds::ecs::EntityId triggeringEntityId; // Offset: 12
    keen::ds::actor::ActorSequenceReference sequence; // Offset: 16
};

struct ecs.VisceralAttackExecutedEvent {
    keen::ds::ecs::EntityId attackerId; // Offset: 8
    keen::ds::ecs::EntityId targetId; // Offset: 12
};

struct ecs.OnDestroyNotifyEvent {
    keen::WorldTransform transform; // Offset: 8
    keen::Guid type; // Offset: 64
    keen::float3 hitDirection; // Offset: 80
};

typedef keen::ecs::NotifyEventType ecs.NotifyEventType;

struct ecs.NotifyEvent {
    keen::ds::ecs::Offset offset; // Offset: 8
    keen::WorldTransform transform; // Offset: 48
    keen::ds::VfxUserEffectParameterDataBlock vfxParameters; // Offset: 104
    keen::ds::ecs::EntityId sourceEntityId; // Offset: 168
    keen::ds::actor::SequenceRuntimeId sequenceId; // Offset: 176
    keen::uint32 slot; // Offset: 200
    keen::Guid typeGuid; // Offset: 204
    keen::ds::ecs::NotifyEventType type; // Offset: 220
    keen::bool attach; // Offset: 221
    keen::bool canBeCanceled; // Offset: 222
};

struct ecs.NotifyEnvFxEvent {
    keen::Guid eventGuid; // Offset: 8
    keen::ds::EnvironmentEffectType environmentEffectType; // Offset: 24
    keen::ds::ecs::EntityId sourceEntityId; // Offset: 28
    keen::ds::AttachmentSlot slot; // Offset: 32
    keen::ds::ecs::Offset offset; // Offset: 36
    keen::bool attach; // Offset: 76
    keen::float32 rayOffsetY; // Offset: 80
    keen::float32 rayLength; // Offset: 84
};

struct ecs.FootDown {
    keen::ds::EnvironmentEffectType environmentEffectType; // Offset: 8
    keen::ds::ecs::EntityId sourceEntityId; // Offset: 12
    keen::ds::AttachmentSlot slot; // Offset: 16
    keen::ds::ecs::Offset offset; // Offset: 20
};

struct ecs.FoleyEnvEvent {
    keen::Guid eventGuid; // Offset: 8
    keen::ds::FoleyType foleyFxType; // Offset: 24
    keen::ds::ecs::EntityId sourceEntityId; // Offset: 28
};

struct ecs.RegisterControlledCombatTargetEvent {
    keen::ds::ecs::EntityId attackerId; // Offset: 8
    keen::ds::ecs::EntityId targetId; // Offset: 12
};

struct ecs.UnregisterControlledCombatTargetEvent {
    keen::ds::ecs::EntityId attackerId; // Offset: 8
    keen::ds::ecs::EntityId targetId; // Offset: 12
};

struct ecs.LoreRead {
    keen::ds::LocaTagId locaTag; // Offset: 8
    keen::ds::ecs::EntityId playerEntityId; // Offset: 12
};

struct ecs.ItemUsed {
    keen::ds::ItemId itemId; // Offset: 8
    keen::ds::ecs::EntityId playerEntityId; // Offset: 12
};

struct ecs.StartPlaySongEvent {
    keen::ds::ecs::EntityId playerId; // Offset: 8
    keen::ds::SongId songId; // Offset: 12
};

typedef keen::ecs::SequenceTerminationReason ecs.SequenceTerminationReason;

struct ecs.ItemKnowledgeGained {
    keen::ds::ItemId itemId; // Offset: 8
    keen::ds::ecs::EntityId playerEntityId; // Offset: 12
    keen::ds::ItemKnowledgeMask gainedKnowledge; // Offset: 16
};

struct ecs.KnowledgeTriggerEvent {
    keen::ds::KnowledgeId knowledgeId; // Offset: 8
    keen::ds::ecs::EntityId playerEntityId; // Offset: 12
    keen::bool removeKnowledge; // Offset: 16
};

struct ecs.KnowledgeUnlockedEvent {
    keen::ds::KnowledgeId knowledgeId; // Offset: 8
    keen::ds::ecs::EntityId playerEntityId; // Offset: 12
};

typedef keen::ecs::KnowledgeType ecs.KnowledgeType;

struct ecs.KnowledgeGained {
    keen::ds::ecs::KnowledgeType targetType; // Offset: 8
    keen::ds::WorkshopId workshopId; // Offset: 12
    keen::ds::NpcId npcId; // Offset: 16
    keen::ds::RecipeId recipeId; // Offset: 20
    keen::ds::JournalEntryId journalId; // Offset: 24
    keen::ds::ecs::EntityId mapMarkerEntityId; // Offset: 28
};

struct ecs.ParryEvent {
    keen::ds::ecs::EntityId attackerEntityId; // Offset: 8
    keen::ds::ecs::EntityId blockerEntityId; // Offset: 12
    keen::sint32 staminaDrain; // Offset: 16
};

struct ecs.CookingEvent {
    keen::ds::ecs::Offset attachmentOffset; // Offset: 8
    keen::ds::ecs::EntityId cookedEntityId; // Offset: 48
    keen::ds::ItemId itemId; // Offset: 52
    keen::ds::AttachmentSlot attachmentSlot; // Offset: 56
    keen::bool burned; // Offset: 57
};

struct ecs.PlayerBaseChangeEvent {
    keen::ds::CharacterId playerCharacterId; // Offset: 8
    keen::ds::BaseId baseId; // Offset: 24
};

struct ecs.KickPlayerEvent {
    keen::ds::ecs::EntityId playerToKick; // Offset: 8
};

struct ecs.FlameAltarEvent {
    keen::ds::ecs::EntityId playerEntityId; // Offset: 8
    keen::ds::ecs::EntityId baseEntityId; // Offset: 12
    keen::ds::ecs::FlameAltarActionType type; // Offset: 16
};

struct ecs.EntityDiedEvent {
    keen::ds::ecs::EntityId deadEntityId; // Offset: 8
};

struct ecs.ActivateFactionPacifyEvent {
    keen::ds::ecs::EntityId entityId; // Offset: 8
    keen::ds::FactionType faction; // Offset: 12
};

struct ecs.ActivateFactionCallForHelpEvent {
    keen::ds::ecs::EntityId entityId; // Offset: 8
    keen::ds::FactionType faction; // Offset: 12
};

struct ecs.StartGuardingEvent {
    keen::ds::ecs::EntityId guardingEntityId; // Offset: 8
    keen::ds::ecs::EntityId guardedEntityId; // Offset: 12
};

struct ecs.StopGuardingEvent {
    keen::ds::ecs::EntityId guardingEntityId; // Offset: 8
    keen::ds::ecs::EntityId guardedEntityId; // Offset: 12
};

struct ecs.DestroyedWithoutSurfaceEvent {
    keen::WorldTransform transform; // Offset: 8
    keen::ds::ecs::EntityId entityId; // Offset: 64
    keen::ds::CollisionFeedbackMaterialReference material; // Offset: 68
};

struct ecs.TransformedToLootEvent {
    keen::ds::ecs::EntityId entityId; // Offset: 8
    keen::ds::VfxUserEffectParameterDataBlock overwriteVfxParameters; // Offset: 12
    keen::bool useVfxDefaultParameters; // Offset: 76
};

struct ecs.GameSettingsChangedEvent {
    keen::ds::ecs::GameSettings newSettings; // Offset: 8
};

struct ecs.SetEnemyVariableEvent {
    keen::ds::ecs::EntityId enemyId; // Offset: 8
    keen::ds::enemy01::EnemyVariableReference variable; // Offset: 12
    keen::bool state; // Offset: 28
};

struct ecs.UiWorldEvent {
    keen::HashKey32 worldEventId; // Offset: 8
};

struct ecs.DebugHitRequest {
    keen::ds::ecs::EntityId targetEntityId; // Offset: 0
    keen::WorldTransform sourceTransform; // Offset: 8
    keen::ds::impact::MajorDirection majorHitDirection; // Offset: 64
};

struct ecs.DebugHitResult {
    keen::float3 hitPosition; // Offset: 0
    keen::float3 hitNormal; // Offset: 12
    keen::float3 hitDirection; // Offset: 24
    keen::float32 hitAngle; // Offset: 36
    keen::bool hit; // Offset: 40
};

struct GuidRegistryResource {
    keen::DsArray<keen::Guid> guids; // Offset: 0
};

typedef keen::impact::ImpactFilter impact.ImpactFilter;

typedef keen::impact::AttackFlags impact.AttackFlags;

struct impact.DamageData {
};

struct impact.DamageConfig {
};

struct impact.SphereColliderConfig {
};

struct impact.ImpactQueryResult {
    keen::ds::ecs::EntityId entityId; // Offset: 0
    keen::float3 position; // Offset: 4
    keen::float3 normal; // Offset: 16
    keen::ds::ecs::QueryResultFlags flags; // Offset: 28
};

typedef keen::impact::Flags impact.Flags;

struct impact.DebugServerImpactMessage {
    keen::ds::impact::ImpactId id; // Offset: 0
};

struct impact.DebugImpactRequestMessage {
    keen::Guid impactGuid; // Offset: 0
};

struct impact.DebugImpcatState {
    keen::uint16 rPC; // Offset: 0
    keen::uint16 rSP; // Offset: 2
    keen::uint16 rFP; // Offset: 4
    keen::Bitmask8<keen::impact::Flags> flags; // Offset: 6
    keen::DsArray<keen::uint32> stack; // Offset: 8
    keen::DsArray<keen::uint8> data; // Offset: 48
};

struct impact.DebugImpactFunctionCall {
    keen::uint16 pc; // Offset: 0
    keen::ds::impact::DebugImpcatState beforeUpdate; // Offset: 8
    keen::ds::impact::DebugImpcatState afterUpdate; // Offset: 96
};

struct impact.DebugImpactData {
    keen::ds::ecs::EntityId rootId; // Offset: 0
    keen::ds::impact::DebugImpcatState beforeUpdate; // Offset: 8
    keen::ds::impact::DebugImpcatState afterUpdate; // Offset: 96
    keen::DsArray<keen::ds::impact::DebugImpactFunctionCall> calls; // Offset: 184
    keen::DsArray<keen::uint16> programCounter; // Offset: 224
    keen::DsArray<keen::Guid> appliedConfigurations; // Offset: 264
};

struct impact.DebugImpact {
    keen::Guid impactId; // Offset: 0
    keen::uint32 tick; // Offset: 16
    keen::ds::ecs::EntityId impactEntityId; // Offset: 20
    keen::ds::impact::DebugImpactData data; // Offset: 24
};

typedef keen::ImpactOps ImpactOps;

typedef keen::impact::ImpcatValueNumberFormat impact.ImpcatValueNumberFormat;

typedef keen::ObjectReference<keen::ds::impact::ConfigId> impact.ConfigIdReference;

struct impact.ImpactConfig {
    keen::ds::LocaTagReference locaTag; // Offset: 0
    keen::bool isSigned; // Offset: 16
    keen::ds::impact::ImpcatValueNumberFormat valueFormat; // Offset: 17
    keen::ds::impact::ConfigIdReference id; // Offset: 20
    keen::HashKey32 configId; // Offset: 36
    keen::HashKey32 type; // Offset: 40
    keen::Guid configGuid; // Offset: 44
    keen::Guid objectId; // Offset: 60
};

struct impact.BuffImpactConfig {
    keen::ds::BuffTypeReference value; // Offset: 76
};

struct impact.EnemyVariableImpactConfig {
    keen::ds::enemy01::EnemyVariableReference value; // Offset: 76
};

struct impact_nodes.ImpactNode {
    keen::Vector2 uiPosition; // Offset: 0
};

struct impact_nodes.ImpactValueNode {
    keen::ds::impact::ConfigIdReference id; // Offset: 8
    keen::ds::LocaTagReference locaTag; // Offset: 24
    keen::bool isSigned; // Offset: 40
    keen::ds::impact::ImpcatValueNumberFormat valueFormat; // Offset: 41
    keen::Guid objectId; // Offset: 44
};

struct impact_nodes.BuffValueNode {
    keen::ds::BuffTypeReference value; // Offset: 60
};

struct impact_nodes.ImpactExecutableNode {
};

struct impact_nodes.ApplyBuff {
    keen::ds::BuffTypeReference buffInput; // Offset: 8
    keen::ds::ecs::EntityId targetEntityId; // Offset: 24
    keen::ds::impact::DamageSetup damageSetup; // Offset: 28
    keen::Time durationInput; // Offset: 80
};

struct impact_nodes.ImpactBranchNode {
};

struct impact_nodes.ImpactNodeExecutionBranch {
};

struct impact_nodes.IfBranchNode {
    keen::bool negate; // Offset: 8
    keen::ds::impact_nodes::ImpactNodeExecutionBranch ifBranch; // Offset: 9
    keen::ds::impact_nodes::ImpactNodeExecutionBranch elseBranch; // Offset: 10
};

struct impact_nodes.HasBuffNode {
    keen::ds::BuffTypeReference buffInput; // Offset: 12
    keen::ds::ecs::EntityId targetEntityId; // Offset: 28
};

struct impact_nodes.RemoveBuff {
    keen::ds::BuffTypeReference buffInput; // Offset: 8
    keen::ds::ecs::EntityId targetEntityId; // Offset: 24
    keen::bool wasRemoved; // Offset: 28
};

struct ecs.ImpactHierarchy {
    keen::ds::ecs::EntityId parentImpactId; // Offset: 0
    keen::ds::ecs::EntityId rootImpactId; // Offset: 4
    keen::ds::ecs::EntityId weaponPideId; // Offset: 8
    keen::ds::ecs::EntityId permissionCheckId; // Offset: 12
};

struct ecs.ImpactItemConfig {
    keen::ds::ItemInstanceInfo usedItem; // Offset: 0
    keen::ds::ItemInstanceInfo ammunitionItem; // Offset: 20
    keen::ds::PerkId usedPerkId; // Offset: 40
};

struct ecs.SequenceEventCollider {
    keen::ds::actor::SequenceResourceId sequenceId; // Offset: 0
    keen::Guid eventGuid; // Offset: 4
};

struct ecs.SequenceEventImpactConfig {
    keen::ds::actor::SequenceResourceId sequenceId; // Offset: 0
    keen::Guid eventGuid; // Offset: 4
};

struct ecs.ImpactConfiguration {
    keen::ds::impact::Configurations configValues; // Offset: 0
    keen::ds::impact::DamageDistribution damageDistribution; // Offset: 40
    keen::bool damageDistributionIsSet; // Offset: 92
};

struct ecs.ImpactDirection {
    keen::ds::impact::MajorDirection direction; // Offset: 0
};

struct ecs.Impact {
    keen::ds::ImpactProgramReference program; // Offset: 0
    keen::ds::impact::ImpactId impactId; // Offset: 16
};

struct ecs.ImpactHalted {
};

typedef keen::ImpactCommand ImpactCommand;

typedef keen::TerraformingType TerraformingType;

typedef keen::WeaponCategoryType WeaponCategoryType;

typedef keen::WeaponCategoryTypeMask WeaponCategoryTypeMask;

typedef keen::VisceralAttackType VisceralAttackType;

typedef keen::impact::ProgramId impact.ProgramId;

typedef keen::impact::VariableTypeId impact.VariableTypeId;

struct impact.ConfigId {
};

typedef keen::impact::ConfigIdHash impact.ConfigIdHash;

struct impact.ConfigIdCollection {
};

struct impact.ConfigValueId {
    keen::uint32 value; // Offset: 0
};

struct impact.TypedValue32 {
};

struct impact.FloatImpactConfig {
    keen::float32 value; // Offset: 76
};

struct impact.Uint32ImpactConfig {
    keen::uint32 value; // Offset: 76
};

struct impact.Sint32ImpactConfig {
    keen::sint32 value; // Offset: 76
};

struct impact.BoolImpactConfig {
    keen::bool value; // Offset: 76
};

struct impact.Float2ImpactConfig {
    keen::float2 value; // Offset: 76
};

struct impact.Float3ImpactConfig {
    keen::float3 value; // Offset: 76
};

struct impact.Float4ImpactConfig {
    keen::float4 value; // Offset: 76
};

struct impact.TemplateImpactConfig {
    keen::ds::ecs::TemplateReference value; // Offset: 76
};

struct impact.EntityTagImpactConfig {
    keen::ds::ecs::EntityTagReference value; // Offset: 76
};

struct impact.MaterialImpactConfig {
    keen::ds::CollisionFeedbackMaterialReference value; // Offset: 76
};

struct impact.TimeImpactConfig {
    keen::Time value; // Offset: 80
};

struct impact.FactionImpactConfig {
    keen::ds::FactionType value; // Offset: 76
};

struct impact.AttributeReferenceConfig {
    keen::ds::AttributeReference value; // Offset: 76
};

struct impact.VisceralAttackTypeConfig {
    keen::ds::VisceralAttackType value; // Offset: 76
};

struct impact.DamageTerraformingSetup {
    keen::sint32 softDamage; // Offset: 0
    keen::sint32 slightlyHardDamage; // Offset: 4
    keen::sint32 moderatelyHardDamage; // Offset: 8
    keen::sint32 hardDamage; // Offset: 12
    keen::sint32 veryHardDamage; // Offset: 16
};

struct impact.DamageTerraformingRuntimeSetup {
    keen::float32 woodDamageMod; // Offset: 20
    keen::float32 stoneDamageMod; // Offset: 24
    keen::float32 metalDamageMod; // Offset: 28
};

struct impact.DamageTerraformingSetupConfig {
    keen::ds::impact::DamageTerraformingSetup value; // Offset: 76
};

struct impact.ArmorDistribution {
    keen::float32 physical; // Offset: 0
    keen::float32 blunt; // Offset: 4
    keen::float32 pierce; // Offset: 8
    keen::float32 cut; // Offset: 12
    keen::float32 magical; // Offset: 16
    keen::float32 fire; // Offset: 20
    keen::float32 ice; // Offset: 24
    keen::float32 fog; // Offset: 28
    keen::float32 lightning; // Offset: 32
};

struct impact.TerraformingTypeConfig {
    keen::ds::TerraformingType value; // Offset: 76
};

typedef keen::impact::DamageTypeNew impact.DamageTypeNew;

typedef keen::impact::AttackCategory impact.AttackCategory;

struct impact.AttackCategoryMaskConfig {
    keen::ds::impact::AttackCategoryMask value; // Offset: 76
};

typedef keen::ObjectReference<keen::ds::WeaponCategory> WeaponCategoryReference;

struct impact.WeaponCategoryConfig {
    keen::ds::WeaponCategoryReference value; // Offset: 76
};

struct impact.MajorDirectionConfig {
    keen::ds::impact::MajorDirection value; // Offset: 76
};

struct impact.HitReactionTypeConfig {
    keen::ds::impact::HitReactionType value; // Offset: 76
};

struct impact.PushBackForceConfig {
    keen::ds::impact::PushBackForce value; // Offset: 76
};

typedef keen::impact::EventStream impact.EventStream;

typedef keen::impact::EventStreamMask impact.EventStreamMask;

struct ImpactUiValue {
    keen::ds::LocaTagId locaId; // Offset: 0
    keen::bool isSigned; // Offset: 4
    keen::ds::impact::ImpcatValueNumberFormat valueFormat; // Offset: 5
    keen::sint32 value; // Offset: 8
};

typedef keen::ObjectReference<keen::ds::impact_nodes::ImpactNode> impact_nodes.NodeReference;

struct impact_nodes.ResetPoint {
};

struct impact_nodes.TerraformingTypeValueNode {
    keen::ds::TerraformingType value; // Offset: 60
};

struct impact_nodes.ExecutionLink {
    keen::ds::impact_nodes::NodeReference startNode; // Offset: 0
    keen::DsString startElementName; // Offset: 16
    keen::ds::impact_nodes::NodeReference endNode; // Offset: 56
};

struct impact_nodes.DataLink {
    keen::ds::impact_nodes::NodeReference ownerNodeId; // Offset: 0
    keen::DsString ownerMemberName; // Offset: 16
    keen::ds::impact_nodes::NodeReference accessorNodeId; // Offset: 56
    keen::DsString accessorMemberName; // Offset: 72
};

struct impact_nodes.FloatValueNode {
    keen::float32 value; // Offset: 60
};

struct impact_nodes.Uint32ValueNode {
    keen::uint32 value; // Offset: 60
};

struct impact_nodes.Sint32ValueNode {
    keen::sint32 value; // Offset: 60
};

struct impact_nodes.BoolValueNode {
    keen::bool value; // Offset: 60
};

struct impact_nodes.Float2ValueNode {
    keen::float2 value; // Offset: 60
};

struct impact_nodes.Float3ValueNode {
    keen::float3 value; // Offset: 60
};

struct impact_nodes.Float4ValueNode {
    keen::float4 value; // Offset: 60
};

struct impact_nodes.TemplateValueNode {
    keen::ds::ecs::TemplateReference value; // Offset: 60
};

struct impact_nodes.EntityTagValueNode {
    keen::ds::ecs::EntityTagReference value; // Offset: 60
};

struct impact_nodes.MaterialValueNode {
    keen::ds::CollisionFeedbackMaterialReference value; // Offset: 60
};

struct impact_nodes.TimeValueNode {
    keen::Time value; // Offset: 64
};

struct impact_nodes.FactionValueNode {
    keen::ds::FactionType value; // Offset: 60
};

struct impact_nodes.AttributeReferenceValueNode {
    keen::ds::AttributeReference value; // Offset: 60
};

struct impact_nodes.DamageSetupValueNode {
    keen::ds::impact::DamageSetup value; // Offset: 60
};

struct impact_nodes.DamageTerraformingSetupValueNode {
    keen::ds::impact::DamageTerraformingSetup value; // Offset: 60
};

struct impact_nodes.AttackCategoryMaskValueNode {
    keen::ds::impact::AttackCategoryMask value; // Offset: 60
};

struct impact_nodes.WeaponCategoryValueNode {
    keen::ds::WeaponCategoryReference value; // Offset: 60
};

struct impact_nodes.MajorDirectionValueNode {
    keen::ds::impact::MajorDirection value; // Offset: 60
};

struct impact_nodes.HitReactionTypeValueNode {
    keen::ds::impact::HitReactionType value; // Offset: 60
};

struct impact_nodes.PushBackForceValueNode {
    keen::ds::impact::PushBackForce value; // Offset: 60
};

struct impact_nodes.VisceralAttackTypeValueNode {
    keen::ds::VisceralAttackType value; // Offset: 60
};

struct impact_nodes.HaltNode {
};

struct impact_nodes.DestroySelfNode {
};

struct impact_nodes.ResetNode {
};

struct impact_nodes.RVM {
};

struct impact_nodes.GetParent {
    keen::ds::ecs::EntityId entityId; // Offset: 8
};

struct impact_nodes.GetRoot {
    keen::ds::ecs::EntityId entityId; // Offset: 8
};

struct impact_nodes.GetEntityParent {
    keen::ds::ecs::EntityId entityId; // Offset: 8
};

struct impact_nodes.GetHitTarget {
    keen::ds::ecs::EntityId entityId; // Offset: 8
    keen::ds::ecs::EntityId hitEntityId; // Offset: 12
};

struct impact_nodes.GetLockedTarget {
    keen::ds::ecs::TargetType type; // Offset: 8
    keen::ds::ecs::EntityId entityId; // Offset: 12
    keen::ds::ecs::EntityId targetId; // Offset: 16
};

struct impact_nodes.GetSelf {
    keen::ds::ecs::EntityId entityId; // Offset: 8
};

struct impact_nodes.GetTransform {
    keen::ds::ecs::EntityId entityId; // Offset: 8
    keen::WorldTransform transform; // Offset: 16
    keen::float3 position; // Offset: 72
};

struct impact_nodes.GetSlotTransform {
    keen::ds::AttachmentSlot slot; // Offset: 8
    keen::ds::ecs::EntityId entityId; // Offset: 12
    keen::WorldTransform transform; // Offset: 16
    keen::float3 position; // Offset: 72
};

struct impact_nodes.ConsumeItem {
    keen::ds::ecs::EntityId entityId; // Offset: 8
};

struct impact_nodes.ApplyOffset {
    keen::WorldTransform transform; // Offset: 8
    keen::float3 localOffset; // Offset: 64
    keen::float3 worldOffset; // Offset: 76
    keen::float4 orientationOffset; // Offset: 88
    keen::WorldTransform result; // Offset: 104
};

struct impact_nodes.StartQuery {
    keen::WorldTransform transform; // Offset: 8
    keen::float32 range; // Offset: 64
    keen::float3 offset; // Offset: 68
    keen::ds::ecs::QueryId queryId; // Offset: 80
    keen::ds::ecs::ColliderFlags colliderFlag; // Offset: 84
    keen::bool sortByDistance; // Offset: 86
};

struct impact_nodes.StopQuery {
    keen::ds::ecs::QueryId queryId; // Offset: 8
};

struct impact_nodes.FetchAttribute {
    keen::ds::AttributeReference attributeRef; // Offset: 8
    keen::ds::ecs::EntityId entityId; // Offset: 24
    keen::ds::impact::TypedValue32 value; // Offset: 28
};

struct impact_nodes.SetAttribute {
    keen::ds::AttributeReference attributeRef; // Offset: 8
    keen::ds::ecs::EntityId entityId; // Offset: 24
    keen::ds::impact::TypedValue32 value; // Offset: 28
};

typedef keen::impact_nodes::ValuesMathOperator impact_nodes.ValuesMathOperator;

struct impact_nodes.ApplyChange {
    keen::ds::AttributeReference attributeRef; // Offset: 8
    keen::ds::ecs::EntityId entityId; // Offset: 24
    keen::ds::AttributeReference attributeRefInput; // Offset: 28
    keen::ds::impact_nodes::ValuesMathOperator operation; // Offset: 44
    keen::ds::impact::TypedValue32 valueStorage; // Offset: 45
    keen::bool valueStorageSign; // Offset: 46
    keen::ds::impact::TypedValue32 value; // Offset: 47
};

struct impact_nodes.ChangeAttribute {
    keen::ds::AttributeReference attributeRef; // Offset: 8
    keen::ds::ecs::EntityId entityId; // Offset: 24
    keen::ds::AttributeReference attributeRefInput; // Offset: 28
    keen::ds::impact_nodes::ValuesMathOperator operation; // Offset: 44
    keen::ds::impact::TypedValue32 valueStorage; // Offset: 45
    keen::ds::impact::TypedValue32 value; // Offset: 46
};

struct impact_nodes.AddValues {
    keen::ds::impact_nodes::ValuesMathOperator op; // Offset: 8
    keen::ds::impact::TypedValue32 valueA; // Offset: 9
    keen::ds::impact::TypedValue32 valueB; // Offset: 10
    keen::ds::impact::TypedValue32 result; // Offset: 11
};

struct impact_nodes.SubValues {
    keen::ds::impact_nodes::ValuesMathOperator op; // Offset: 8
    keen::ds::impact::TypedValue32 valueA; // Offset: 9
    keen::ds::impact::TypedValue32 valueB; // Offset: 10
    keen::ds::impact::TypedValue32 result; // Offset: 11
};

struct impact_nodes.MulValues {
    keen::ds::impact_nodes::ValuesMathOperator op; // Offset: 8
    keen::ds::impact::TypedValue32 valueA; // Offset: 9
    keen::ds::impact::TypedValue32 valueB; // Offset: 10
    keen::ds::impact::TypedValue32 result; // Offset: 11
};

struct impact_nodes.DivValues {
    keen::ds::impact_nodes::ValuesMathOperator op; // Offset: 8
    keen::ds::impact::TypedValue32 valueA; // Offset: 9
    keen::ds::impact::TypedValue32 valueB; // Offset: 10
    keen::ds::impact::TypedValue32 result; // Offset: 11
};

struct impact_nodes.Normalize {
    keen::float3 input; // Offset: 8
    keen::float3 result; // Offset: 20
};

struct impact_nodes.SetLength {
    keen::float3 input; // Offset: 8
    keen::float32 length; // Offset: 20
    keen::float3 result; // Offset: 24
};

struct impact_nodes.GetLength {
    keen::float3 input; // Offset: 8
    keen::float32 result; // Offset: 20
};

struct impact_nodes.SpawnEntity {
    keen::bool breakImpactHierarchy; // Offset: 8
    keen::ds::ecs::TemplateReference templateInput; // Offset: 12
    keen::WorldTransform transform; // Offset: 32
    keen::float3 position; // Offset: 88
    keen::float3 velocity; // Offset: 100
    keen::ds::ecs::EntityId targetEntityId; // Offset: 112
    keen::ds::ecs::EntityId parentEntityId; // Offset: 116
    keen::uint32 levelOverride; // Offset: 120
    keen::ds::FactionType factionOverride; // Offset: 124
    keen::ds::ecs::EntityId entityId; // Offset: 128
};

struct impact_nodes.CreateDamageSetup {
    keen::sint32 physicalCutDamage; // Offset: 8
    keen::sint32 physicalPierceDamage; // Offset: 12
    keen::sint32 physicalBluntDamage; // Offset: 16
    keen::sint32 magicalFireDamage; // Offset: 20
    keen::sint32 magicalIceDamage; // Offset: 24
    keen::sint32 magicalFogDamage; // Offset: 28
    keen::sint32 magicalFogLightning; // Offset: 32
    keen::sint32 healing; // Offset: 36
    keen::sint32 poisonDamage; // Offset: 40
    keen::sint32 woodDamage; // Offset: 44
    keen::sint32 stoneDamage; // Offset: 48
    keen::sint32 metalDamage; // Offset: 52
    keen::sint32 explosionDamage; // Offset: 56
    keen::ds::impact::DamageSetup damageSetup; // Offset: 60
};

struct impact_nodes.ApplyDamage {
    keen::ds::ecs::EntityId sourceId; // Offset: 12
    keen::ds::ecs::EntityId targetId; // Offset: 16
    keen::float3 hitPosition; // Offset: 20
    keen::float3 hitNormal; // Offset: 32
    keen::ds::impact::MajorDirection hitDirection; // Offset: 44
    keen::float32 attackMod; // Offset: 48
    keen::float32 attackStaminaMod; // Offset: 52
    keen::float32 noiseRange; // Offset: 56
    keen::sint32 manaCost; // Offset: 60
    keen::ds::AttributeRootReference damageScaleAttribute; // Offset: 64
    keen::ds::impact::PushBackForce pushBack; // Offset: 80
    keen::ds::impact::HitReactionType hitReaction; // Offset: 82
    keen::ds::impact::DamageSetup damageSetup; // Offset: 84
    keen::ds::impact::AttackCategoryMask attackCategory; // Offset: 136
    keen::ds::WeaponCategoryReference weaponCategory; // Offset: 140
    keen::ds::CollisionFeedbackMaterialReference materialId; // Offset: 156
    keen::bool canBeBlocked; // Offset: 172
    keen::bool canCrit; // Offset: 173
    keen::ds::VisceralAttackType visceralAttackType; // Offset: 174
    keen::bool ignoreConsecutiveHits; // Offset: 175
    keen::bool pusbackDirectionOverride; // Offset: 176
    keen::bool wasBlocked; // Offset: 177
};

struct impact_nodes.GetConsecutiveHitCount {
    keen::uint32 count; // Offset: 8
};

struct impact_nodes.IsConsecutiveHit {
    keen::ds::ecs::EntityId entityId; // Offset: 12
};

struct impact_nodes.IsSkillUnlocked {
    keen::ds::ecs::EntityId entityId; // Offset: 12
    keen::ds::skilltree_nodes::NodeReference skill; // Offset: 16
};

struct impact_nodes.ClearConsecutiveHits {
    keen::Time clearInterval; // Offset: 8
};

struct impact_nodes.GetCursorTransform {
    keen::ds::ecs::EntityId playerId; // Offset: 8
    keen::WorldTransform transform; // Offset: 16
};

struct impact_nodes.Terraforming {
    keen::ds::ecs::EntityId playerId; // Offset: 8
    keen::WorldTransform transform; // Offset: 16
    keen::ds::TerraformingType terraformingType; // Offset: 72
    keen::ds::impact::DamageTerraformingSetup damageTerraformingSetup; // Offset: 76
    keen::ds::CollisionFeedbackMaterialReference materialId; // Offset: 96
    keen::float32 rangeDefault; // Offset: 112
    keen::float32 rangeAdd; // Offset: 116
    keen::float32 rangeFlatten; // Offset: 120
};

struct impact_nodes.GetQueryResultCount {
    keen::ds::ecs::QueryId queryId; // Offset: 8
    keen::uint32 count; // Offset: 12
};

struct impact_nodes.FetchQueryResult {
    keen::ds::ecs::QueryId queryId; // Offset: 8
    keen::uint32 index; // Offset: 12
    keen::ds::ecs::EntityId otherEntity; // Offset: 16
    keen::float3 hitPosition; // Offset: 20
    keen::float3 hitNormal; // Offset: 32
    keen::bool hit; // Offset: 44
    keen::bool queryNew; // Offset: 45
    keen::bool updateNew; // Offset: 46
};

struct impact_nodes.SetTransform {
    keen::WorldTransform transform; // Offset: 8
};

struct impact_nodes.GetOnCollisionEventCount {
    keen::uint32 count; // Offset: 8
};

struct impact_nodes.Wait {
    keen::Time durationInput; // Offset: 8
};

struct impact_nodes.FetchOnCollisionEvent {
    keen::uint32 index; // Offset: 12
    keen::bool ignoreSameRoot; // Offset: 16
    keen::bool ignoreWeakspots; // Offset: 17
    keen::ds::ecs::EntityId otherEntity; // Offset: 20
    keen::ds::ecs::EntityId otherEntityRoot; // Offset: 24
    keen::bool combatCollider; // Offset: 28
    keen::float3 position; // Offset: 32
    keen::float3 normal; // Offset: 44
    keen::bool isWeakSpot; // Offset: 56
};

struct impact_nodes.TriggerNoise {
    keen::float3 position; // Offset: 8
    keen::float32 range; // Offset: 20
};

struct impact_nodes.PacifyFaction {
    keen::ds::FactionType faction; // Offset: 8
};

struct impact_nodes.CallFactionForHelp {
    keen::ds::FactionType faction; // Offset: 8
};

struct impact_nodes.RandomBranchNode {
    keen::float32 chance; // Offset: 12
};

struct impact_nodes.RandomValueNode {
    keen::float32 value; // Offset: 8
};

struct impact_nodes.ForEach {
    keen::ds::impact_nodes::ImpactNodeExecutionBranch doBranch; // Offset: 8
    keen::uint32 index; // Offset: 12
    keen::uint32 count; // Offset: 16
};

struct impact_nodes.WhileLoopBranchNode {
    keen::ds::impact_nodes::ImpactNodeExecutionBranch doBranch; // Offset: 8
    keen::uint32 index; // Offset: 12
};

struct impact_nodes.OnEvent {
    keen::ds::impact::EventStream eventType; // Offset: 8
    keen::ds::impact::EventStream eventStream; // Offset: 9
};

struct impact_nodes.FilterRandom {
    keen::ds::impact::EventStream eventStream; // Offset: 8
    keen::uint32 count; // Offset: 12
};

struct impact_nodes.FilterFriends {
    keen::ds::impact::EventStream eventStream; // Offset: 8
    keen::bool invert; // Offset: 9
};

struct impact_nodes.FilterSameRoot {
    keen::ds::impact::EventStream eventStream; // Offset: 8
    keen::bool invert; // Offset: 9
};

struct impact_nodes.FilterRootEntity {
    keen::ds::impact::EventStream eventStream; // Offset: 8
    keen::bool invert; // Offset: 9
};

struct impact_nodes.FilterFaction {
    keen::ds::impact::EventStream eventStream; // Offset: 8
    keen::ds::FactionMask faction; // Offset: 10
};

struct impact_nodes.FilterConsecutiveHits {
    keen::ds::impact::EventStream eventStream; // Offset: 8
};

struct impact_nodes.FilterEntityTag {
    keen::ds::impact::EventStream eventStream; // Offset: 8
    keen::ds::ecs::EntityTagReference entityTag; // Offset: 12
    keen::bool invert; // Offset: 28
};

struct impact_nodes.ForEachCollisionInStream {
    keen::ds::impact::EventStream eventStream; // Offset: 16
    keen::ds::ecs::EntityId otherEntity; // Offset: 20
    keen::ds::ecs::EntityId otherRootEntity; // Offset: 24
    keen::float3 position; // Offset: 28
    keen::float3 normal; // Offset: 40
    keen::WorldTransform transform; // Offset: 56
    keen::uint32 voxelMaterial; // Offset: 112
    keen::bool isCombatTarget; // Offset: 116
    keen::bool isWeakSpot; // Offset: 117
};

struct impact_nodes.ForEachFootDownInStream {
    keen::ds::impact::EventStream eventStream; // Offset: 16
    keen::float3 position; // Offset: 20
    keen::float3 normal; // Offset: 32
};

struct impact_nodes.IsStreamEmpty {
    keen::ds::impact::EventStream eventStream; // Offset: 12
};

struct impact_nodes.GetStreamEventCount {
    keen::ds::impact::EventStream eventStream; // Offset: 8
    keen::uint32 count; // Offset: 12
};

struct impact_nodes.ForEachCollision {
    keen::ds::ecs::EntityId otherEntity; // Offset: 16
    keen::float3 position; // Offset: 20
    keen::float3 normal; // Offset: 32
};

struct impact_nodes.ForEachHitEvent {
    keen::bool wasParried; // Offset: 16
    keen::bool wasBlocked; // Offset: 17
    keen::bool wasBlockBroken; // Offset: 18
    keen::bool wasBackstab; // Offset: 19
    keen::bool wasCrit; // Offset: 20
    keen::bool wasImmune; // Offset: 21
    keen::bool wasKillingBlow; // Offset: 22
    keen::bool wasVisceral; // Offset: 23
    keen::bool wasWeakspot; // Offset: 24
    keen::bool wasSkillShot; // Offset: 25
    keen::ds::FactionType targetFaction; // Offset: 26
    keen::ds::impact::AttackCategoryMask attackCategory; // Offset: 27
    keen::ds::WeaponCategoryReference weaponCategory; // Offset: 28
    keen::ds::ecs::EntityId rootEntity; // Offset: 44
    keen::ds::ecs::EntityId sourceEntity; // Offset: 48
    keen::ds::ecs::EntityId targetRootEntity; // Offset: 52
    keen::ds::ecs::EntityId targetEntity; // Offset: 56
    keen::ds::ecs::EntityId weaponEntity; // Offset: 60
    keen::float3 position; // Offset: 64
    keen::float3 normal; // Offset: 76
    keen::sint32 healthChange; // Offset: 88
    keen::sint32 staminaChange; // Offset: 92
};

struct impact_nodes.SendBaseHitEvent {
    keen::float3 position; // Offset: 8
    keen::float3 normal; // Offset: 20
    keen::ds::CollisionFeedbackMaterialReference impactMaterial; // Offset: 32
    keen::uint32 voxelMaterial; // Offset: 48
    keen::ds::ecs::EntityId targetId; // Offset: 52
};

struct impact_nodes.ForEachParryEvent {
    keen::ds::ecs::EntityId blockerId; // Offset: 16
    keen::ds::ecs::EntityId attackerId; // Offset: 20
    keen::sint32 staminaDrain; // Offset: 24
};

struct impact_nodes.ForEachItemInBackpack {
    keen::ds::ecs::EntityId ownerId; // Offset: 16
    keen::ds::ecs::EntityId pideId; // Offset: 20
};

struct impact_nodes.BoolIfBranchNode {
    keen::bool value; // Offset: 12
};

typedef keen::impact_nodes::ValuesCompareOperator impact_nodes.ValuesCompareOperator;

struct impact_nodes.IsEqual {
    keen::ds::impact_nodes::ValuesCompareOperator op; // Offset: 12
    keen::ds::impact::TypedValue32 valueA; // Offset: 13
    keen::ds::impact::TypedValue32 valueB; // Offset: 14
};

struct impact_nodes.IsLess {
    keen::ds::impact_nodes::ValuesCompareOperator op; // Offset: 12
    keen::ds::impact::TypedValue32 valueA; // Offset: 13
    keen::ds::impact::TypedValue32 valueB; // Offset: 14
};

struct impact_nodes.IsInState {
    keen::ds::ecs::EntityId entityId; // Offset: 12
    keen::ds::actor::StateFlag state; // Offset: 16
};

struct impact_nodes.HasFaction {
    keen::ds::ecs::EntityId entityId; // Offset: 12
    keen::ds::FactionMask faction; // Offset: 16
};

struct impact_nodes.HasEntityTag {
    keen::ds::ecs::EntityId entityId; // Offset: 12
    keen::ds::ecs::EntityTagReference entityTag; // Offset: 16
};

struct impact_nodes.IsValidEntity {
    keen::ds::ecs::EntityId entityId; // Offset: 12
};

struct impact_nodes.IsInsideBox {
    keen::WorldTransform transform; // Offset: 16
    keen::float3 position; // Offset: 72
    keen::float3 box; // Offset: 84
    keen::float3 boxOffset; // Offset: 96
};

struct impact_nodes.HasAttackCategory {
    keen::ds::impact::AttackCategoryMask categoryMask; // Offset: 12
    keen::ds::impact::AttackCategoryMask contains; // Offset: 13
    keen::bool matchAll; // Offset: 14
};

struct impact_nodes.HasWeaponCategory {
    keen::ds::WeaponCategoryReference weaponCategory; // Offset: 12
    keen::ds::WeaponCategoryReference requiredCategory; // Offset: 28
};

struct impact_nodes.HasWeaponCategoryType {
    keen::ds::WeaponCategoryReference weaponCategory; // Offset: 12
    keen::ds::WeaponCategoryTypeMask allowedCategories; // Offset: 28
};

struct impact_nodes.GetWeaponVisualEntityId {
    keen::ds::ecs::EntityId entityId; // Offset: 8
};

struct impact_nodes.IsSameEntity {
    keen::ds::ecs::EntityId entityAId; // Offset: 12
    keen::ds::ecs::EntityId entityBId; // Offset: 16
};

struct impact_nodes.IsEnemy {
    keen::ds::ecs::EntityId entityAId; // Offset: 12
    keen::ds::ecs::EntityId entityBId; // Offset: 16
};

struct impact_nodes.IsFriend {
    keen::ds::ecs::EntityId entityAId; // Offset: 12
    keen::ds::ecs::EntityId entityBId; // Offset: 16
};

struct impact_nodes.GetEnemyCountInRange {
    keen::ds::ecs::EntityId entityId; // Offset: 8
    keen::uint32 count; // Offset: 12
};

struct impact_nodes.SetEnemyVariable {
    keen::ds::ecs::EntityId entityId; // Offset: 8
    keen::ds::enemy01::EnemyVariableReference variable; // Offset: 12
    keen::bool state; // Offset: 28
};

struct ImpactDefinition {
};

struct ImpactVariable {
    keen::HashKey32 name; // Offset: 0
    keen::HashKey32 configId; // Offset: 4
    keen::HashKey32 type; // Offset: 8
    keen::uint16 size; // Offset: 12
    keen::uint16 offsetInBytes; // Offset: 14
    keen::DsString dbgName; // Offset: 16
};

struct ImpactProgram {
    keen::ds::impact::ProgramId id; // Offset: 0
    keen::Guid programGuid; // Offset: 4
    keen::uint16 stackSize; // Offset: 20
    keen::ds::impact::EventStreamMask usedStreams; // Offset: 22
    keen::DsArray<keen::ds::ImpactCommand> code; // Offset: 24
    keen::DsArray<keen::ds::ImpactCommand> codeShutdown; // Offset: 64
    keen::DsArray<keen::ds::ImpactVariable> dataLayout; // Offset: 104
    keen::DsArray<keen::uint8> data; // Offset: 144
};

struct ImpactConfigInfoEntry {
    keen::ds::string nodeName; // Offset: 0
    keen::HashKey32 name; // Offset: 40
    keen::HashKey32 configId; // Offset: 44
    keen::HashKey32 type; // Offset: 48
};

struct ExecutionInfo {
    keen::Guid nodeId; // Offset: 0
    keen::DsArray<keen::ds::ExecutionInfo> branch; // Offset: 16
};

struct ImpactFunctionCallDebugInfo {
    keen::ds::string nodeName; // Offset: 0
    keen::Guid nodeId; // Offset: 40
    keen::uint16 pc; // Offset: 56
};

struct ImpactInfo {
    keen::Guid programGuid; // Offset: 0
    keen::uint32 cmdCount; // Offset: 16
    keen::DsArray<keen::ds::ImpactConfigInfoEntry> configs; // Offset: 24
    keen::DsArray<keen::ds::ExecutionInfo> programFlow; // Offset: 64
    keen::DsArray<keen::ds::ImpactVariable> dataLayout; // Offset: 104
    keen::DsArray<keen::ds::ImpactFunctionCallDebugInfo> debugInfo; // Offset: 144
    keen::DsArray<keen::ds::ImpactFunctionCallDebugInfo> shutdownlDebugInfo; // Offset: 184
};

struct ImpactConfigData {
    keen::ds::impact::Configurations configValues; // Offset: 0
};

struct ImpactSubDirectory {
};

struct ImpactDirectory {
};

struct ImpactRegistryResource {
    keen::DsArray<keen::ds::ImpactProgramReference> programs; // Offset: 0
};

typedef keen::CelestialBodyDirection CelestialBodyDirection;

struct CelestialBodySetup {
    keen::float32 riseAngle; // Offset: 0
    keen::float32 setAngle; // Offset: 4
    keen::float32 zenithAngle; // Offset: 8
    keen::ds::CelestialBodyDirection direction; // Offset: 12
};

struct IngameTimeConfig {
    keen::Time dayStart; // Offset: 0
    keen::Time dayEnd; // Offset: 8
    keen::ds::CelestialBodySetup sunSetup; // Offset: 16
    keen::ds::CelestialBodySetup moonSetup; // Offset: 32
};

struct IngameTimeSpan {
    keen::Time start; // Offset: 0
    keen::Time end; // Offset: 8
};

typedef keen::input_mapping::PresetId input_mapping.PresetId;

typedef keen::input_mapping::ControlOperationType input_mapping.ControlOperationType;

typedef keen::input_mapping::InputModality input_mapping.InputModality;

typedef keen::input_mapping::AxisDirection input_mapping.AxisDirection;

typedef keen::input_mapping::runtime::GameplayAction input_mapping.runtime.GameplayAction;

typedef keen::input_mapping::config::GameplayAction input_mapping.config.GameplayAction;

struct input_mapping.serialize.ControlOperation {
    keen::ds::input_mapping::ControlOperationType type; // Offset: 0
    keen::ds::string id; // Offset: 8
    keen::ds::input_mapping::AxisDirection axis; // Offset: 48
};

struct input_mapping.serialize.ControlOperationCombo {
    keen::ds::input_mapping::serialize::ControlOperation operation; // Offset: 0
    keen::DsArray<keen::ds::input_mapping::serialize::ControlOperation> modifiers; // Offset: 56
};

struct input_mapping.serialize.KeyboardMouseAction {
    keen::ds::input_mapping::serialize::ControlOperationCombo primary; // Offset: 0
    keen::ds::input_mapping::serialize::ControlOperationCombo secondary; // Offset: 96
    keen::ds::input_mapping::InputModality modality; // Offset: 192
    keen::bool toggle; // Offset: 193
};

struct input_mapping.serialize.GamepadAction {
    keen::ds::input_mapping::serialize::ControlOperationCombo primary; // Offset: 0
    keen::ds::input_mapping::serialize::ControlOperationCombo secondary; // Offset: 96
    keen::ds::input_mapping::InputModality modality; // Offset: 192
    keen::bool toggle; // Offset: 193
};

struct input_mapping.serialize.ActionInputBinding {
    keen::DsString gameplay; // Offset: 0
    keen::ds::input_mapping::serialize::KeyboardMouseAction keyboardMouse; // Offset: 40
    keen::ds::input_mapping::serialize::GamepadAction gamepad; // Offset: 240
};

struct input_mapping.serialize.InputBindings {
    keen::ds::input_mapping::PresetId customKeyboardMouseBasePresetId; // Offset: 0
    keen::ds::input_mapping::PresetId customGamepadBasePresetId; // Offset: 1
    keen::DsArray<keen::ds::input_mapping::serialize::ActionInputBinding> bindings; // Offset: 8
};

typedef keen::input_mapping::runtime::ContextualVector2Context input_mapping.runtime.ContextualVector2Context;

struct input_mapping.runtime.ContextualVector2 {
    keen::ds::input_mapping::runtime::ContextualVector2Context context; // Offset: 0
    keen::Vector2 value; // Offset: 4
};

struct ecs.InteractionQuery {
    keen::ds::ecs::RangeQueryId queryId; // Offset: 0
    keen::float32 queryRadius; // Offset: 4
    keen::float3 queryOffset; // Offset: 8
};

struct ecs.ClientInteractionQuery {
    keen::uint32 nearestOfferedInteractionOfferId; // Offset: 0
    keen::ds::ecs::SpecialInteraction specialInteraction; // Offset: 4
};

struct ecs.InteractionAcceptData {
    keen::ds::ecs::EntityId guestId; // Offset: 0
    keen::ds::InventorySlotId usedItem; // Offset: 4
    keen::uint32 offerId; // Offset: 12
};

struct ecs.InteractionOffer {
    keen::ds::actor::ActorSequenceReference defaultAction; // Offset: 0
    keen::ds::LocaTagReference verbLoca; // Offset: 16
    keen::ds::LocaTagReference lastVerbLoca; // Offset: 32
    keen::ds::LocaTagReference overrideVerbLoca; // Offset: 48
    keen::ds::actor::SequenceResourceId overrideSequence; // Offset: 64
    keen::ds::ecs::InteractionAcceptData lastAttemptData; // Offset: 68
    keen::ds::ecs::InteractionAcceptData lastAcceptData; // Offset: 84
    keen::Time lastAcceptTime; // Offset: 104
    keen::uint32 offerId; // Offset: 112
    keen::ds::LocaTagId verbId; // Offset: 116
    keen::bool isColliderDirty; // Offset: 120
    keen::bool isOffered; // Offset: 121
    keen::bool reduceInteractionWeight; // Offset: 122
};

struct ecs.ClientInteractionOffer {
    keen::ds::LocaTagId verbId; // Offset: 0
    keen::ds::ecs::EntityId lastAcceptionId; // Offset: 4
    keen::bool isOffered; // Offset: 8
};

typedef keen::ecs::InteractionLockFlag ecs.InteractionLockFlag;

typedef keen::ecs::InteractionLockMask ecs.InteractionLockMask;

struct ecs.InteractionLock {
    keen::ds::ItemReference requiredItemRef; // Offset: 0
    keen::ds::ItemId requiredItem; // Offset: 16
    keen::ds::PlayerPermissionsMask requiredPermission; // Offset: 20
    keen::ds::ecs::InteractionLockMask lockMask; // Offset: 21
    keen::ds::actor::ActorSequenceReference successfulAttempt; // Offset: 24
    keen::ds::actor::ActorSequenceReference failedAttempt; // Offset: 40
    keen::bool destroy; // Offset: 56
};

struct ecs.LootRefill {
    keen::ds::ItemReference lootableItemRef; // Offset: 0
    keen::uint32 refillCount; // Offset: 16
    keen::uint32 maxCount; // Offset: 20
};

struct ecs.InteractionLootRefill {
    keen::Time waitTime; // Offset: 0
    keen::ds::LocaTagReference verbLoca; // Offset: 8
    keen::ds::actor::ActorSequenceReference defaultSequence; // Offset: 24
    keen::DsArray<keen::ds::ecs::LootRefill> items; // Offset: 40
};

struct ecs.DynamicInteractionLootRefill {
    keen::Time nextRefill; // Offset: 0
};

struct ecs.ClientInteractionLock {
    keen::Guid failedAttempt; // Offset: 0
    keen::Guid successfulAttempt; // Offset: 16
    keen::ds::ItemId requiredItem; // Offset: 32
    keen::uint32 offerId; // Offset: 36
    keen::ds::PlayerPermissionsMask requiredPermission; // Offset: 40
};

struct ecs.InteractionKnowledgeLock {
    keen::ds::ecs::ToggleModifier modifier; // Offset: 0
    keen::bool useSpawnKnowledgeRequirement; // Offset: 1
    keen::ds::GameKnowledgeRequirement unlockRequiement; // Offset: 4
    keen::ds::KnowledgeId queryId; // Offset: 108
};

struct ecs.ClientInteractionToState {
};

struct ecs.InteractionPause {
    keen::Time timeout; // Offset: 0
};

struct ecs.RemoveInteractionOnEmptyInventory {
};

typedef keen::ecs::DirectionalState ecs.DirectionalState;

struct ecs.DirectionalInteractionSetup {
    keen::bool backToIdle; // Offset: 0
    keen::ds::LocaTagReference verb; // Offset: 4
    keen::ds::actor::ActorSequenceReference sequence; // Offset: 20
    keen::ds::animationgraph::StateIdReference animationState; // Offset: 36
};

struct ecs.DirectionalInteraction {
    keen::ds::ecs::DirectionalState state; // Offset: 0
    keen::ds::ecs::DirectionalInteractionSetup idleState; // Offset: 4
    keen::ds::ecs::DirectionalInteractionSetup frontInteraction; // Offset: 56
    keen::ds::ecs::DirectionalInteractionSetup backInteraction; // Offset: 108
};

struct ecs.InteractionToggle {
    keen::ds::LocaTagReference offToOnVerb; // Offset: 0
    keen::ds::actor::ActorSequenceReference offToOnSequence; // Offset: 16
    keen::ds::LocaTagReference onToOffVerb; // Offset: 32
    keen::ds::actor::ActorSequenceReference onToOffSequence; // Offset: 48
};

struct ecs.CraftingInteraction {
    keen::ds::CraftingPropMask craftingPropsInRange; // Offset: 0
    keen::uint32 nextRecipeComfortRequirement; // Offset: 8
    keen::ObjectReference<keen::ds::WorkshopDefinition> workshop; // Offset: 12
    keen::ds::WorkshopId workshopId; // Offset: 28
};

struct ecs.ClientCraftingInteraction {
    keen::ds::CraftingPropMask craftingPropsInRange; // Offset: 0
    keen::uint32 nextRecipeComfortRequirement; // Offset: 8
    keen::ds::WorkshopId workshopId; // Offset: 12
};

struct ecs.InteractionAttachment {
    keen::ds::ecs::Offset guestOffset; // Offset: 0
    keen::Time lastAttachTime; // Offset: 40
};

struct ecs.InteractionAttachmentGuest {
    keen::ds::ecs::EntityId lastHostEntityId; // Offset: 0
};

struct ItemData {
    keen::uint32 count; // Offset: 0
    keen::ds::ecs::EntityId pide; // Offset: 4
};

struct ItemStack {
    keen::ds::ItemId id; // Offset: 0
    keen::ds::ItemData data; // Offset: 4
};

struct ecs.DefaultInventoryDirectory {
};

struct ecs.DefaultInventoryEntry {
    keen::ds::ItemReference item; // Offset: 0
    keen::uint32 count; // Offset: 16
};

struct ecs.RandomDefaultInventoryEntry {
    keen::ds::ItemReference item; // Offset: 0
    keen::uint32 countMin; // Offset: 16
    keen::uint32 countMax; // Offset: 20
    keen::float spawnProbability; // Offset: 24
};

struct ecs.WeightedDefaultInventoryEntry {
    keen::float weight; // Offset: 28
};

struct ecs.RandomDefaultInventoryEntrySelector {
};

struct ecs.DefaultInventorySetup {
};

struct ecs.ItemStackInfoResource {
    keen::ds::ItemReference itemRef; // Offset: 0
    keen::ds::ItemId item; // Offset: 16
    keen::uint32 countMin; // Offset: 20
    keen::uint32 countMax; // Offset: 24
    keen::float spawnProbability; // Offset: 28
};

struct ecs.ItemStackInfoResourceWeighted {
    keen::float weight; // Offset: 32
};

struct ecs.DefaultInventoryEntrySelectorResource {
    keen::DsArray<keen::ds::ecs::ItemStackInfoResourceWeighted> selectionCandidates; // Offset: 0
};

struct ecs.DefaultInventoryResource {
    keen::DsArray<keen::ds::ecs::ItemStackInfoResource> stacks; // Offset: 0
    keen::DsArray<keen::ds::ecs::DefaultInventoryEntrySelectorResource> stackSelectors; // Offset: 40
};

struct ecs.DefaultInventory {
    keen::ds::ecs::DefaultInventoryReference defaultInventory; // Offset: 0
    keen::bool keepOnRandomLoot; // Offset: 16
    keen::bool applied; // Offset: 17
};

struct ecs.DefaultInventoryOverrides {
    keen::ds::ecs::DefaultInventoryReference slot1; // Offset: 0
    keen::ds::ecs::DefaultInventoryReference slot2; // Offset: 16
    keen::ds::ecs::DefaultInventoryReference slot3; // Offset: 32
};

struct ecs.AffectedByIncreasedPickupSkill {
};

struct ecs.AdditionalMaterialLoot {
    keen::ds::ItemId additionalItemId; // Offset: 0
};

typedef keen::InventoryCategory InventoryCategory;

struct ecs.InventoryLink {
    keen::ds::ecs::EntityId entityId; // Offset: 0
    keen::ds::InventoryCategory category; // Offset: 4
};

typedef keen::ecs::InventoryFlags ecs.InventoryFlags;

typedef keen::ecs::InventorySetupMask ecs.InventorySetupMask;

struct ecs.InventorySetup {
    keen::StaticArray<keen::ds::ecs::EntityId,16> linksEntities; // Offset: 0
    keen::StaticArray<keen::ds::InventoryCategory,16> linksCategories; // Offset: 64
    keen::ds::ecs::InventorySetupMask inventoryFlags; // Offset: 80
    keen::uint8 genericSlotCount; // Offset: 81
    keen::uint8 availableSlotCount; // Offset: 82
    keen::bool isInitialized; // Offset: 83
};

struct ecs.InventorySetupInit {
};

struct ecs.Inventory {
    keen::StaticArray<keen::ds::ItemStack,8> slots; // Offset: 0
};

struct ecs.InventoryCraftingStock {
};

struct ecs.ResourceNodeDropInfo {
    keen::ds::ecs::TemplateReference entity; // Offset: 0
    keen::ds::ItemReference item; // Offset: 16
    keen::uint8 stackAmount; // Offset: 32
    keen::float32 weight; // Offset: 36
};

struct ecs.ResourceNodePickupDrops {
    keen::ds::ecs::TemplateReference pickupItemReference; // Offset: 0
    keen::DsArray<keen::ds::ecs::ResourceNodeDropInfo> drops; // Offset: 16
    keen::uint8 numberOfDrops; // Offset: 56
    keen::float32 dropWhileAlivePercentage; // Offset: 60
    keen::bool dropInWorld; // Offset: 64
    keen::float32 yOffsetMin; // Offset: 68
    keen::float32 yOffsetMax; // Offset: 72
    keen::float32 dropRadiusMin; // Offset: 76
    keen::float32 dropRadiusMax; // Offset: 80
    keen::float32 velocityMin; // Offset: 84
    keen::float32 velocityMax; // Offset: 88
};

struct ecs.MiningNodeKnowledge {
    keen::bool useSpawnTriggerKnowledge; // Offset: 0
    keen::ObjectReference<keen::ds::PlayerKnowledgeObject> knowledgeNode; // Offset: 4
    keen::bool unlockForGroup; // Offset: 20
};

struct ecs.PickupItem {
    keen::ds::ItemId itemId; // Offset: 0
    keen::ds::ItemReference item; // Offset: 4
    keen::uint32 level; // Offset: 20
    keen::ds::ItemRarity rarity; // Offset: 24
    keen::uint16 pickupAmount; // Offset: 26
};

struct ecs.PickupItemModelSetup {
};

struct ecs.DestroyOnLoot {
    keen::Time despawnTime; // Offset: 0
    keen::ds::NotifierReference vfxOnDestroy; // Offset: 8
    keen::ds::ecs::Offset offset; // Offset: 24
    keen::bool isActive; // Offset: 64
    keen::bool shouldDestroy; // Offset: 65
    keen::ds::SoundContainerReference sfx; // Offset: 68
    keen::ds::VfxReference vfx; // Offset: 84
};

struct ecs.DestroyOnLootActivated {
};

struct ecs.AddDestructibleOnLoot {
    keen::uint32 health; // Offset: 0
};

typedef keen::ItemCategory ItemCategory;

typedef keen::ItemCategoryMask ItemCategoryMask;

typedef keen::CrosshairType CrosshairType;

typedef keen::ItemRarityMask ItemRarityMask;

typedef keen::ItemFlag ItemFlag;

typedef keen::ItemFlags ItemFlags;

struct ItemTag {
    keen::ds::LocaTagReference label; // Offset: 0
};

typedef keen::ObjectReference<keen::ds::ItemTag> ItemTagReference;

struct ItemTagWeight {
    keen::ds::ItemTagReference tag; // Offset: 0
    keen::uint32 nominator; // Offset: 16
    keen::uint32 denominator; // Offset: 20
};

struct ItemTagInfo {
    keen::Guid tagGuid; // Offset: 0
    keen::ds::LocaTagId labelId; // Offset: 16
};

struct ItemTagInfoList {
    keen::DsArray<keen::ds::ItemTagInfo> itemTags; // Offset: 0
};

typedef keen::SnappingToggleMode SnappingToggleMode;

struct ChangeVoxelData {
    keen::bool isBuildingVoxel; // Offset: 0
    keen::ObjectReference<keen::ds::SolidVoxelMaterial> placeVoxelMaterial; // Offset: 4
    keen::uint8 placeVoxelMaterialId; // Offset: 20
};

typedef keen::CameraDistance CameraDistance;

struct CameraDistanceOverride {
    keen::ds::CameraDistance distance; // Offset: 0
    keen::bool override; // Offset: 1
};

typedef keen::BuildingCameraMode BuildingCameraMode;

struct CursorFxConfig {
    keen::ds::SoundContainerReference loopedSfx; // Offset: 0
    keen::ds::SoundContainerReference oneShotSfx; // Offset: 16
    keen::ds::VfxReference oneShotVfx; // Offset: 32
    keen::ds::ecs::Offset oneShotVfxOffset; // Offset: 48
    keen::ds::VfxUserEffectParameterDataBlock vfxParameters; // Offset: 88
    keen::sint32 vfxParameterOffset_boundingBoxMin; // Offset: 152
    keen::sint32 vfxParameterOffset_boundingBoxMax; // Offset: 156
};

struct GliderConfig {
    keen::float32 accelerationForward; // Offset: 0
    keen::float32 airResistanceLongitudinal; // Offset: 4
    keen::float32 airResistanceLateral; // Offset: 8
    keen::float32 airResistanceVertical; // Offset: 12
    keen::float32 yawAngleSpeed; // Offset: 16
    keen::float32 pitchAngleSpeed; // Offset: 20
    keen::float32 rollAngleSpeed; // Offset: 24
};

typedef keen::InventoryStockType InventoryStockType;

typedef keen::AttachDirection AttachDirection;

typedef keen::AttachAngleRange AttachAngleRange;

struct AttachAngleConfig {
    keen::ds::AttachAngleRange ceilingAngle; // Offset: 0
    keen::ds::AttachAngleRange wallAngle; // Offset: 1
    keen::ds::AttachAngleRange floorAngle; // Offset: 2
    keen::ds::AttachDirection defaultAttachDirection; // Offset: 3
    keen::ds::AttachDirection secondaryAttachDirection; // Offset: 4
    keen::bool hasSecondaryAttachDirection; // Offset: 5
    keen::bool forceUprightNormal; // Offset: 6
};

struct VoxelRequirement {
    keen::ObjectReference<keen::ds::SolidVoxelMaterial> soil; // Offset: 0
    keen::ds::VoxelMaterialId soilMaterialId; // Offset: 16
    keen::float factor; // Offset: 20
};

struct VoxelRequirementInfo {
    keen::DsArray<keen::ds::VoxelRequirement> requirements; // Offset: 0
};

struct CursorActionConfig {
    keen::bool snapPositionToAddableVoxel; // Offset: 0
    keen::bool snapPositionToRemovableVoxel; // Offset: 1
};

struct CursorConfig {
    keen::ds::ecs::TemplateReference customCursorEntity; // Offset: 0
    keen::bool autoCenterPivot; // Offset: 16
    keen::float3 pivotOffset; // Offset: 20
    keen::bool allowSnapToSnappingBoxes; // Offset: 32
    keen::bool forceSnapPositionToVoxelGrid; // Offset: 33
    keen::bool snapOrientationToVoxelGrid; // Offset: 34
    keen::bool snapToCenterWhenSmallerThanVoxel; // Offset: 35
    keen::bool smoothOutTerrainNormal; // Offset: 36
    keen::bool alwaysFacePlayer; // Offset: 37
    keen::bool addRandomYawAngleOffset; // Offset: 38
    keen::ds::CursorActionConfig primaryActionConfig; // Offset: 39
    keen::ds::AttachAngleConfig attachAngleConfig; // Offset: 41
    keen::bool checkRequiredMaterialsOnPrimaryAction; // Offset: 48
    keen::ds::CursorActionConfig secondaryActionConfig; // Offset: 49
    keen::ds::AttachAngleConfig attachAngleConfigSecondary; // Offset: 51
    keen::bool checkRequiredMaterialsOnSecondaryAction; // Offset: 58
    keen::bool useSphereCast; // Offset: 59
    keen::bool keepSnappedToPlane; // Offset: 60
    keen::bool checkBuildZoneEnemies; // Offset: 61
    keen::bool checkSurfaceTopology; // Offset: 62
    keen::DsArray<keen::ds::VoxelRequirement> allowedVoxels; // Offset: 64
    keen::bool highlightHoveredEntity; // Offset: 104
    keen::bool showVoxelBlock; // Offset: 105
    keen::ds::CursorFxConfig addFxConfig; // Offset: 108
    keen::ds::CursorFxConfig subFxConfig; // Offset: 268
    keen::ObjectReference<keen::ds::Model> defaultCursorStaticModel; // Offset: 428
    keen::ObjectReference<keen::ds::Model> defaultCursorSkinnedModel; // Offset: 444
    keen::ObjectReference<keen::ds::VfxDefinition> defaultCursorVfx; // Offset: 460
};

struct VoxelSnappingConfigOld {
    keen::uint3 snapBoxOffsetMin; // Offset: 0
    keen::uint3 snapBoxOffsetMax; // Offset: 12
    keen::uint8 basementHeight; // Offset: 24
};

struct EquipmentModel {
    keen::ds::BlendShapeMask mask; // Offset: 0
    keen::ObjectReference<keen::ds::Model> model; // Offset: 4
};

typedef keen::SequenceRequirments SequenceRequirments;

typedef keen::SequenceRequirmentMask SequenceRequirmentMask;

typedef keen::KnowledgeTriggerType KnowledgeTriggerType;

struct GameKnowledgeTrigger {
    keen::ds::KnowledgeTriggerType triggerType; // Offset: 0
    keen::ObjectReference<keen::ds::WorldKnowledgeObject> unlockKnowledge; // Offset: 4
    keen::ObjectReference<keen::ds::PlayerKnowledgeObject> playerKnowledge; // Offset: 20
    keen::ds::ItemKnowledgeTrigger itemKnowledge; // Offset: 36
    keen::bool useWorldItemKnowledge; // Offset: 37
    keen::ObjectReference<keen::ds::ItemInfo> item; // Offset: 40
};

struct ItemSequence {
    keen::ds::actor::SequenceResourceId sequenceId; // Offset: 0
    keen::ds::actor::ActorSequenceReference sequence; // Offset: 4
    keen::ds::actor::ActionSequenceTrigger triggeredBy; // Offset: 20
    keen::ds::SequenceRequirmentMask requirements; // Offset: 22
    keen::ds::skilltree_nodes::NodeReference requiredSkill; // Offset: 24
    keen::ds::ecs::SpecialInteraction specialInteractionType; // Offset: 40
    keen::ds::ItemReference costOverride; // Offset: 44
    keen::bool triggerKnowledge; // Offset: 60
    keen::ds::GameKnowledgeTrigger knowledgeTrigger; // Offset: 64
    keen::HashKey32 triggerKnowledgeId; // Offset: 120
    keen::ds::ecs::EntityTagReference sequenceEntityTag; // Offset: 124
    keen::DsArray<keen::ds::ecs::EntityTagReferenceEntry> combinedEntityTags; // Offset: 144
};

struct UiActionHints {
    keen::ds::LocaTagReference primaryAction; // Offset: 0
    keen::ds::LocaTagReference secondaryAction; // Offset: 16
    keen::ds::LocaTagReference tertiaryAction; // Offset: 32
    keen::ds::input_mapping::runtime::GameplayAction tertiaryGameplayAction; // Offset: 48
    keen::bool alwaysShow; // Offset: 49
};

struct EquipmentSetup {
    keen::ds::EquipmentSlotType slot; // Offset: 0
    keen::bool repeatActionWhenPressed; // Offset: 1
    keen::ds::ecs::EntityTagReference itemSequencesEntityTag; // Offset: 4
    keen::ds::BlendShapeMask blendShapeMask; // Offset: 20
    keen::ds::VisualEquipmentMask hideMask; // Offset: 24
    keen::ds::ImpactEquipmentMask disableMask; // Offset: 28
    keen::ds::ecs::TemplateReference impactEntity; // Offset: 32
    keen::ds::ImpactProgramReference program; // Offset: 48
    keen::ds::ecs::TemplateReference visualEntity; // Offset: 64
    keen::ObjectReference<keen::ds::Model> visualModel; // Offset: 80
    keen::ds::PrimaryAnimationSet primaryAnimationSet; // Offset: 96
    keen::ds::SecondaryAnimationSet secondaryAnimationSet; // Offset: 97
    keen::ds::CrosshairType crosshairType; // Offset: 98
    keen::ds::CursorConfig cursorConfig; // Offset: 104
    keen::ObjectReference<keen::ds::Model> cursorModel; // Offset: 584
    keen::ObjectReference<keen::ds::Model> cursorSkinnedModel; // Offset: 600
    keen::ObjectReference<keen::ds::VfxDefinition> cursorVfx; // Offset: 616
    keen::ds::CameraDistanceOverride cameraDistanceOverride; // Offset: 632
    keen::ds::BuildingCameraMode buildingCameraMode; // Offset: 634
    keen::float32 defaultVerticalPlacementOffset; // Offset: 636
    keen::float32 maxTiltAngle; // Offset: 640
    keen::float32 maxDistance; // Offset: 644
    keen::ds::ecs::TemplateReference placedEntity; // Offset: 648
    keen::float3 placementAABBmin; // Offset: 664
    keen::float3 placementAABBmax; // Offset: 676
    keen::float3 snappingAABBmin; // Offset: 688
    keen::float3 snappingAABBmax; // Offset: 700
    keen::DsArray<keen::ds::ecs::ColliderResourceData> placementColliders; // Offset: 712
    keen::ds::ecs::TriggerShapes placementNoBuildZones; // Offset: 752
    keen::ds::BuffTypeReference appliedBuff; // Offset: 792
    keen::ds::BuffTypeReference appliedDebuff; // Offset: 808
    keen::bool allowPlacementBelowFog; // Offset: 824
    keen::ds::InhibitBuildingCheck checkInhibitBuild; // Offset: 825
    keen::bool buildZoneRequired; // Offset: 826
    keen::bool requiresAltarSlot; // Offset: 827
    keen::DsArray<keen::ds::RecipeItemStackResource> requiredCraftingIngredients; // Offset: 832
    keen::float3 placedEntityLocalSpawnVelocity; // Offset: 872
    keen::ds::ChangeVoxelData voxelData; // Offset: 884
    keen::ObjectReference<keen::ds::VoxelObjectDefinition> voxelObject; // Offset: 908
    keen::ObjectReference<keen::ds::TerrainVoxelObjectDefinition> terrainVoxelObject; // Offset: 924
    keen::ds::VoxelSnappingConfigOld voxelSnappingConfig; // Offset: 940
    keen::ObjectReference<keen::ds::VoxelBlueprintConfig> voxelBlueprintConfig; // Offset: 968
    keen::ObjectReference<keen::ds::VoxelBlueprintMaterialPool> voxelBlueprintMaterialPool; // Offset: 984
    keen::sint8 voxelObjectMaterialOverride; // Offset: 1000
    keen::DsArray<keen::ds::EquipmentModel> visualModels; // Offset: 1008
    keen::ds::GliderConfig gliderConfig; // Offset: 1048
    keen::ds::TerraformingType terraformingType; // Offset: 1076
};

typedef keen::ItemKnowledgeTriggerMask ItemKnowledgeTriggerMask;

struct ItemKnowledgeBase {
    keen::ds::ItemKnowledgeTriggerMask trigger; // Offset: 0
    keen::ds::LocaTagReference triggerTag; // Offset: 4
};

struct ItemKnowledgeName {
    keen::ds::NameLocaTag tag; // Offset: 20
};

struct ItemKnowledgeDescription {
    keen::ds::DescriptionLocaTag tag; // Offset: 20
};

struct ItemKnowledgeLore {
    keen::ds::LoreLocaTag tag; // Offset: 20
};

struct ItemKnowledgeRecipe {
    keen::bool unused; // Offset: 20
};

struct ItemLevelRange {
    keen::uint32 minLevel; // Offset: 0
    keen::uint32 maxLevel; // Offset: 4
};

struct StackSizeRange {
    keen::uint16 minStackSize; // Offset: 0
    keen::uint16 maxStackSize; // Offset: 2
};

struct ItemCommerceLink {
    keen::ds::CommerceProductReference product; // Offset: 0
    keen::ds::CommerceProductId id; // Offset: 16
    keen::bool isSet; // Offset: 20
};

struct ItemDamageSetup {
    keen::float32 speedMod; // Offset: 0
    keen::float32 dmgMod; // Offset: 4
    keen::ds::impact::DamageDistribution distribution; // Offset: 8
    keen::bool isSet; // Offset: 60
};

struct ItemPermissionSetup {
    keen::ds::PlayerPermissionsMask permissions; // Offset: 0
    keen::bool isSet; // Offset: 1
};

struct ItemArmorSetup {
    keen::ds::impact::ArmorDistribution distribution; // Offset: 0
    keen::bool isSet; // Offset: 36
};

struct ItemBlockSetup {
    keen::float quality; // Offset: 0
    keen::bool isSet; // Offset: 4
};

struct ItemScaledCostSetup {
    keen::float staminaMod; // Offset: 0
    keen::bool isSet; // Offset: 4
};

struct ItemFuelData {
    keen::Time burnTime; // Offset: 0
    keen::uint32 energyOutput; // Offset: 8
    keen::bool isSet; // Offset: 12
};

struct ItemColorCombination {
    keen::ds::ColorCombinationReference combination; // Offset: 0
};

struct ItemComfortSetup {
    keen::uint32 comfortAmount; // Offset: 0
};

struct ItemInfoExposure {
    keen::bool enable; // Offset: 0
    keen::float exposure; // Offset: 4
};

typedef keen::ItemClassAlignmentType ItemClassAlignmentType;

typedef keen::ObjectReference<keen::ds::Perk> PerkReference;

struct ItemCollectionInfo {
    keen::bool isOverrideModelSet; // Offset: 0
    keen::ObjectReference<keen::ds::Model> overrideModel; // Offset: 4
    keen::ds::ecs::Offset overrideModelOffset; // Offset: 20
    keen::DsArray<keen::ds::ItemCollectionId> categories; // Offset: 64
};

struct ItemInfo {
    keen::ds::ItemId itemId; // Offset: 0
    keen::Guid objectId; // Offset: 4
    keen::uint16 maxStackSize; // Offset: 20
    keen::bool generateRarity; // Offset: 22
    keen::ds::ItemRarity rarity; // Offset: 23
    keen::ds::ItemRarityMask disableRarityGeneration; // Offset: 24
    keen::ds::StackSizeRange randomLootStackRange; // Offset: 26
    keen::DsArray<keen::ds::PickupModelOverride> overridePickupModels; // Offset: 32
    keen::ds::ecs::TemplateReference overridePickupEntity; // Offset: 72
    keen::ds::NotifierReference pickupFx; // Offset: 88
    keen::ds::NameLocaTag name; // Offset: 104
    keen::ds::CaptionLocaTag caption; // Offset: 120
    keen::ds::DescriptionLocaTag description; // Offset: 136
    keen::ds::LoreLocaTag lore; // Offset: 152
    keen::ds::UiActionHints uiActionHints; // Offset: 168
    keen::ds::ItemCategory category; // Offset: 220
    keen::ds::AmmunitionType ammunitionType; // Offset: 221
    keen::ds::WeaponCategoryReference weaponCategoryReference; // Offset: 224
    keen::ds::ItemClassAlignmentType itemClassAlignment; // Offset: 240
    keen::ds::MidiInstrumentType midiInstrumentType; // Offset: 241
    keen::ds::EquipmentSetup equipment; // Offset: 248
    keen::DsArray<keen::ds::ItemSequence> sequences; // Offset: 1328
    keen::ds::ecs::TemplateReference pidEntity; // Offset: 1368
    keen::ObjectReference<keen::ds::ItemInfo> exchangeOnBroken; // Offset: 1384
    keen::ds::ImageReference iconImage; // Offset: 1400
    keen::ObjectReference<keen::ds::Model> iconModel; // Offset: 1416
    keen::ObjectReference<keen::ds::ItemIconScene> iconScene; // Offset: 1432
    keen::ds::ecs::Offset iconRenderOffset; // Offset: 1448
    keen::float32 iconRenderCookingScale; // Offset: 1488
    keen::float32 iconRenderGlobalScale; // Offset: 1492
    keen::ds::ItemInfoExposure overrideSceneExposure; // Offset: 1496
    keen::bool fitToItemModelBoundingBox; // Offset: 1504
    keen::ds::ItemFlags flags; // Offset: 1506
    keen::bool overrideKnowledgeGeneration; // Offset: 1508
    keen::Bitmask16<keen::ItemKnowledgeTrigger> generateKnowledge; // Offset: 1510
    keen::DsArray<keen::ds::ItemTagWeight> tags; // Offset: 1512
    keen::DsArray<keen::ds::ImpactUiValue> uiValues; // Offset: 1552
    keen::DsArray<keen::ds::ImpactUiValue> uiBuffValues; // Offset: 1592
    keen::ds::impact::Configurations impactValues; // Offset: 1632
    keen::StaticArray<keen::ds::PerkReference,5> perkReferences; // Offset: 1672
    keen::ds::ItemLevelRange itemLevelRange; // Offset: 1752
    keen::ds::ItemDamageSetup damageSetup; // Offset: 1760
    keen::ds::ItemArmorSetup armorSetup; // Offset: 1824
    keen::ds::ItemFuelData fuelSetup; // Offset: 1864
    keen::ds::ItemBlockSetup blockSetup; // Offset: 1880
    keen::ds::ItemScaledCostSetup scaledCostSetup; // Offset: 1888
    keen::ds::ItemCommerceLink commerceLink; // Offset: 1896
    keen::ds::ItemPermissionSetup permissionSetup; // Offset: 1920
    keen::ds::ItemColorSetupInternal itemPaletteColorSetup; // Offset: 1924
    keen::ds::ItemCollectionInfo collectionInfo; // Offset: 1944
    keen::ds::ItemComfortSetup comfortSetup; // Offset: 2048
    keen::DsString debugName; // Offset: 2056
};

struct ItemConvertInfo {
    keen::DsString name; // Offset: 0
    keen::Guid id; // Offset: 40
    keen::DsArray<keen::DsVariant<keen::ds::ItemKnowledgeBase>> knowledge; // Offset: 56
    keen::Guid visualModelGuid; // Offset: 96
    keen::DsArray<keen::ds::EquipmentModel> visualModels; // Offset: 112
    keen::ds::VisualEquipmentMask hideMask; // Offset: 152
    keen::ds::BlendShapeMask allowedBlendShapeMask; // Offset: 156
    keen::ds::BlendShapeMask setBlendShapeMask; // Offset: 160
    keen::ds::ColorCombination colorCombination; // Offset: 164
    keen::Guid voxelMaterialGuid; // Offset: 212
    keen::bool isDevItem; // Offset: 228
};

struct GameKnowledgeGenerationScope {
    keen::Bitmask16<keen::ItemKnowledgeTrigger> knowledgeTypes; // Offset: 0
};

struct ItemSubDirectory {
};

struct ItemRarityDropSettings {
    keen::float32 common; // Offset: 0
    keen::float32 uncommon; // Offset: 4
    keen::float32 rare; // Offset: 8
    keen::float32 legendary; // Offset: 12
};

struct WeaponCategory {
    keen::ds::LocaTagReference locaTag; // Offset: 0
    keen::ds::AttributeReference damageMod; // Offset: 16
    keen::ds::WeaponCategoryType categoryType; // Offset: 32
    keen::ds::ItemClassAlignmentType classType; // Offset: 33
    keen::float32 cameraTraumaVerySmall; // Offset: 36
    keen::float32 cameraTraumaSmall; // Offset: 40
    keen::float32 cameraTraumaNormal; // Offset: 44
    keen::float32 cameraTraumaBig; // Offset: 48
    keen::float32 cameraTraumaVeryBig; // Offset: 52
    keen::float32 cameraImpulseStrength; // Offset: 56
    keen::Time cameraImpulseDuration; // Offset: 64
};

struct WeaponCategoryResource {
    keen::Guid guid; // Offset: 0
    keen::ds::WeaponCategory weaponCategory; // Offset: 16
};

struct WeaponCategoryDirectory {
};

struct ItemDirectory {
    keen::ObjectReference<keen::ds::ItemIconScene> defaultIconScene; // Offset: 0
    keen::ds::ItemRarityDropSettings rarityDropWeights; // Offset: 16
    keen::float weaponArmorRatio; // Offset: 32
    keen::ObjectReference<keen::ds::WeaponCategoryDirectory> weaponCategoryDirectory; // Offset: 36
};

struct WeaponCategoryDirectoryResource {
    keen::DsArray<keen::ds::WeaponCategoryResource> weaponCategories; // Offset: 0
};

struct ItemRegistryResource {
    keen::DsArray<keen::ds::ItemReference> itemRefs; // Offset: 0
    keen::DsArray<keen::ds::ItemTagInfo> itemTags; // Offset: 40
    keen::DsArray<keen::ds::WeaponCategoryResource> weaponCategories; // Offset: 80
    keen::DsArray<keen::DsString> dbgNames; // Offset: 120
};

struct ItemIconRegistryEntryResource {
    keen::Guid guid; // Offset: 0
    keen::ds::UiTextureResource uiTexture; // Offset: 16
};

struct ItemIconRegistryResource {
    keen::DsArray<keen::ds::ItemIconRegistryEntryResource> icons; // Offset: 0
};

struct DevItemRegistryResource {
};

struct ItemKnowledgeLock {
    keen::ds::LocaTagId unlockedLocaId; // Offset: 0
    keen::ds::LocaTagId keyLocaId; // Offset: 4
    keen::ds::ItemKnowledgeTriggerMask unlockTrigger; // Offset: 8
};

struct ItemKnowledge {
    keen::ds::ItemId itemId; // Offset: 0
    keen::ds::ItemKnowledgeMask lockedKnowledgeMask; // Offset: 4
    keen::ds::ItemKnowledgeLock nameLock; // Offset: 8
    keen::ds::ItemKnowledgeLock descriptionLock; // Offset: 20
    keen::ds::ItemKnowledgeLock loreLock; // Offset: 32
    keen::ds::ItemKnowledgeLock recipeLock; // Offset: 44
};

struct ItemKnowledgeResource {
    keen::DsArray<keen::ds::ItemKnowledge> knowledgeArray; // Offset: 0
};

struct PickupFxConfig {
    keen::ds::SoundContainerReference sfx; // Offset: 0
    keen::ds::VfxReference vfx; // Offset: 16
};

struct PickupModelOverride {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
};

struct PickupEntityOverride {
    keen::ds::ecs::TemplateReference entity; // Offset: 0
};

struct ItemCollectionOptionBase {
};

struct ItemCollectionCategoryReference {
    keen::ObjectReference<keen::ds::ItemCollectionCategory> category; // Offset: 0
};

struct ItemCollectionModelOverride {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
    keen::ds::ecs::Offset modelOffset; // Offset: 16
};

struct VoxelBlueprintItem {
    keen::ds::ItemId itemId; // Offset: 0
    keen::uint3 size; // Offset: 4
    keen::DsArray<keen::uint8> data; // Offset: 16
    keen::bool isDataCompressed; // Offset: 56
};

struct VoxelBlueprintItemRegistryResource {
    keen::DsArray<keen::ds::VoxelBlueprintItem> blueprintItems; // Offset: 0
};

struct ItemPropsForPropTestResource {
    keen::DsArray<keen::Guid> propItems; // Offset: 0
};

struct ItemCollectionDirectory {
};

struct ItemCollectionSubDirectory {
};

struct ItemCollectionSetup {
    keen::ObjectReference<keen::ds::ModelHierarchy> hierarchy; // Offset: 0
    keen::ObjectReference<keen::ds::WorldKnowledgeObject> completionKnowledge; // Offset: 16
};

struct ItemCollectionSlot {
    keen::ds::string jointName; // Offset: 0
    keen::ds::ecs::Offset offset; // Offset: 40
};

struct ItemCollectionSlotId {
    keen::ObjectReference<keen::ds::ItemInfo> itemId; // Offset: 80
};

struct ItemCollectionSlotCategory {
    keen::ObjectReference<keen::ds::ItemCollectionCategory> category; // Offset: 80
};

struct ItemCollectionSlotEquipment {
    keen::ds::EquipmentSlot equipmentSlot; // Offset: 80
};

struct ItemCollectionResource {
    keen::DsArray<keen::ds::ItemCollectionSlotResource> slots; // Offset: 0
    keen::ds::KnowledgeId completionKnowledgeId; // Offset: 40
};

struct ItemCollectionSlotResource {
    keen::ds::ItemCollectionId collectionId; // Offset: 0
    keen::ds::ecs::Offset offset; // Offset: 4
    keen::ds::ItemId itemId; // Offset: 44
    keen::ds::ItemCollectionId collectionCategoryId; // Offset: 48
    keen::ds::EquipmentSlot equipmentSlot; // Offset: 52
};

struct ItemCollectionCategoryDirectory {
};

struct ItemCollectionCategory {
};

struct SceneScatterData {
    keen::ObjectReference<keen::ds::ScatterSet3> scatterSet; // Offset: 0
    keen::uint2 start; // Offset: 16
    keen::uint2 size; // Offset: 24
    keen::bool disable; // Offset: 32
    keen::bool writeDebug; // Offset: 33
};

typedef keen::WorldDistributionTypeFlags WorldDistributionTypeFlags;

struct SceneResetPlayersOutOfBounds {
    keen::float32 marginHorizontal; // Offset: 0
    keen::float32 marginVertical; // Offset: 4
    keen::DsArray<keen::ds::ScenePlayableAreaBox> playableAreas; // Offset: 8
};

struct Scene {
    keen::ObjectReference<keen::ds::VoxelWorldObject> voxelWorld; // Offset: 0
    keen::uint2 worldSize; // Offset: 16
    keen::int3 worldOrigin; // Offset: 24
    keen::ObjectReference<keen::ds::Ibl> ibl; // Offset: 36
    keen::float32 iblIntensity; // Offset: 52
    keen::ObjectReference<keen::ds::render::AtmosphereParameters> atmosphere; // Offset: 56
    keen::ds::Biome biome; // Offset: 72
    keen::ObjectReference<keen::ds::BiomeMap> biomeMap; // Offset: 76
    keen::ds::SceneScatterData scatterData; // Offset: 92
    keen::bool limitMacroScattering; // Offset: 128
    keen::uint2 macroScatterStart; // Offset: 132
    keen::uint2 macroScatterSize; // Offset: 140
    keen::bool disableVoxelBrushDisplacement; // Offset: 148
    keen::ds::WorldDistributionTypeFlags distributionTypeFlags; // Offset: 149
    keen::bool isTestScene; // Offset: 150
    keen::float32 distantObjectSize; // Offset: 152
    keen::uint32 moveVersion; // Offset: 156
    keen::ds::SceneResetPlayersOutOfBounds resetPlayersOutOfBounds; // Offset: 160
};

struct ItemIconScene {
    keen::float32 fixedExposure; // Offset: 208
};

typedef keen::WorldTransformFlags WorldTransformFlags;

typedef keen::ContentPass ContentPass;

struct SceneObject {
    keen::WorldTransform worldTransform; // Offset: 0
    keen::ds::WorldTransformFlags worldTransformFlags; // Offset: 56
    keen::ds::ContentPass contentPass; // Offset: 57
};

struct SceneCamera {
    keen::DsString name; // Offset: 64
    keen::Guid guid; // Offset: 104
    keen::float32 nearClip; // Offset: 120
    keen::float32 farClip; // Offset: 124
    keen::float32 fovY; // Offset: 128
};

struct ItemIconSceneCamera {
};

struct ItemIconSceneSun {
    keen::HdrColorRgb color; // Offset: 64
};

struct SceneBaseLight {
    keen::HdrColorRgb color; // Offset: 64
};

struct ScenePointLight {
    keen::float32 radius; // Offset: 80
    keen::bool castShadows; // Offset: 84
};

struct ItemIconScenePointLight {
};

struct CameraData {
    keen::float32 nearClip; // Offset: 0
    keen::float32 farClip; // Offset: 4
    keen::float32 fovY; // Offset: 8
};

struct render.AtmosphereParameters {
    keen::float32 planetRadius; // Offset: 0
    keen::ColorRgb rayleighScattering; // Offset: 4
    keen::float32 rayleighDensity; // Offset: 16
    keen::ColorRgb ozoneExtinction; // Offset: 20
    keen::float32 ozoneDensity; // Offset: 32
    keen::float32 rayleightDistribution; // Offset: 36
    keen::float32 mieScattering; // Offset: 40
    keen::float32 mieExtinction; // Offset: 44
    keen::float32 mieDensity; // Offset: 48
    keen::float32 mieDistribution; // Offset: 52
    keen::float32 mieG; // Offset: 56
    keen::FloatRange yRange; // Offset: 60
};

struct ItemIconSceneInfo {
    keen::ds::CameraData camera; // Offset: 0
    keen::WorldTransform cameraTransform; // Offset: 16
    keen::ObjectReference<keen::ds::IblResource> ibl; // Offset: 72
    keen::ds::render::AtmosphereParameters atmosphereParameters; // Offset: 88
    keen::float32 fixedExposure; // Offset: 156
    keen::float32 iblIntensity; // Offset: 160
    keen::float32 sunAzimuth; // Offset: 164
    keen::float32 sunElevation; // Offset: 168
    keen::float3 sunColor; // Offset: 172
    keen::DsArray<keen::ds::RenderLight> lights; // Offset: 184
    keen::DsArray<keen::WorldTransform> lightsTransform; // Offset: 224
};

struct JournalDirectory {
};

struct JournalSubDirectory {
};

struct JournalLoreCategory {
    keen::ds::LocaTagReference categoryName; // Offset: 0
};

struct JournalCollectionBase {
    keen::ds::LocaTagReference name; // Offset: 0
    keen::ds::LocaTagReference referencedDocumentName; // Offset: 16
    keen::uint32 priority; // Offset: 32
};

struct JournalCollection {
};

typedef keen::QuestSourceType QuestSourceType;

typedef keen::QuestType QuestType;

struct JournalQuestReward {
};

struct JournalItemReward {
    keen::ds::ItemReference item; // Offset: 0
};

struct JournalExperienceReward {
    keen::ObjectReference<keen::ds::ExperienceBalanceValue> experience; // Offset: 0
};

struct CompletableJournalCollection {
    keen::ds::QuestSourceType questSource; // Offset: 36
    keen::ds::QuestType type; // Offset: 37
};

struct TutorialJournalCollection {
};

struct JournalEntryBase {
    keen::ds::LocaTagReference name; // Offset: 0
    keen::ds::LocaTagReference text; // Offset: 16
    keen::ds::LocaTagReference mapMarkerReference; // Offset: 32
    keen::ObjectReference<keen::ds::ItemInfo> itemIcon; // Offset: 48
};

struct JournalEntry {
};

struct CompletableJournalEntry {
};

struct TutorialJournalEntry {
};

struct JournalCompletionRequirement {
};

struct JournalEntryResource {
    keen::ds::JournalEntryId entryId; // Offset: 0
    keen::ds::LocaTagId name; // Offset: 4
    keen::ds::LocaTagId text; // Offset: 8
    keen::ds::LocaTagId mapMarkerReference; // Offset: 12
    keen::ds::ItemId itemIconId; // Offset: 16
    keen::ds::KnowledgeId knowledgeRequirement; // Offset: 20
    keen::ds::KnowledgeId completionRequirement; // Offset: 24
};

struct JournalCollectionResource {
    keen::ds::JournalEntryId entryId; // Offset: 0
    keen::ds::LocaTagId loreCategory; // Offset: 4
    keen::ds::LocaTagId name; // Offset: 8
    keen::ds::LocaTagId referencedDocumentName; // Offset: 12
    keen::uint32 priority; // Offset: 16
    keen::bool isTutorial; // Offset: 20
    keen::DsArray<keen::ds::JournalEntryResource> entries; // Offset: 24
};

struct QuestRewardResource {
    keen::ds::ItemReference itemRef; // Offset: 0
    keen::ds::ItemId itemId; // Offset: 16
    keen::HashKey32 experienceValueId; // Offset: 20
};

struct JournalQuestResource {
    keen::ds::QuestSourceType source; // Offset: 64
    keen::ds::QuestType type; // Offset: 65
    keen::bool unlockForAllPlayers; // Offset: 66
    keen::DsArray<keen::ds::QuestRewardResource> rewards; // Offset: 72
};

struct JournalRegistryResource {
    keen::DsArray<keen::ds::JournalQuestResource> quests; // Offset: 0
    keen::DsArray<keen::ds::JournalCollectionResource> collections; // Offset: 40
};

struct ecs.KnowledgeTrigger {
    keen::StaticArray<keen::HashKey32,8> knowledgeIds; // Offset: 0
    keen::bool canActivate; // Offset: 32
    keen::bool canDeactivate; // Offset: 33
};

struct SubEntityKnowledgeQuery {
    keen::ds::KnowledgeId knowledgeQueryId; // Offset: 0
    keen::Guid subEntityTemplate; // Offset: 4
    keen::HashKey32 uiWorldEventId; // Offset: 20
};

struct ecs.KnowledgeQuery {
    keen::HashKey32 knowledgeId; // Offset: 0
    keen::HashKey32 uiWorldEventId; // Offset: 4
    keen::bool wasEventTriggered; // Offset: 8
    keen::StaticArray<keen::ds::SubEntityKnowledgeQuery,4> subEntityQueries; // Offset: 12
};

struct ecs.MapMarkerUnlockRequirements {
    keen::ds::GameKnowledgeRequirement hintState; // Offset: 0
    keen::ds::GameKnowledgeRequirement visibleState; // Offset: 104
    keen::bool hasCompletedState; // Offset: 208
    keen::ds::GameKnowledgeRequirement completedState; // Offset: 212
    keen::ds::KnowledgeId hintStateQueryId; // Offset: 316
    keen::ds::KnowledgeId visibleStateQueryId; // Offset: 320
    keen::ds::KnowledgeId completedStateQueryId; // Offset: 324
};

struct ecs.KnowledgeTriggerToggle {
};

struct ecs.KnowledgeTriggerRange {
};

struct ecs.KnowledgeTriggerOnKill {
    keen::bool useSceneKnowledgeTrigger; // Offset: 0
    keen::bool unlockForGroup; // Offset: 1
    keen::ds::GameKnowledgeTrigger triggerKnowledge; // Offset: 4
    keen::ds::KnowledgeId triggerKnowledgeId; // Offset: 60
};

struct ecs.KnowledgeUiWorldEvent {
    keen::ObjectReference<keen::ds::FbUiWorldEvent> triggerEvent; // Offset: 0
};

struct LootTreeNodeIntermediate {
    keen::Guid objectId; // Offset: 0
    keen::HashKey32 nodeId; // Offset: 16
    keen::HashKey32 parentId; // Offset: 20
    keen::uint32 potentialSlots; // Offset: 24
    keen::uint32 potentialChildSlots; // Offset: 28
};

struct LootTreeIntermediate {
    keen::DsArray<keen::ds::LootTreeNodeIntermediate> nodes; // Offset: 0
};

struct LootNodeResource {
    keen::HashKey32 nodeId; // Offset: 0
    keen::HashKey32 parentId; // Offset: 4
};

struct LootContainerResource {
    keen::uint32 lootSettingsIndex; // Offset: 8
};

typedef keen::LootModifierMode LootModifierMode;

struct LootModifierValue {
    keen::ds::LootModifierMode mode; // Offset: 0
    keen::float32 value; // Offset: 4
};

struct LootModifierInfo {
    keen::ds::LootModifierValue level; // Offset: 0
    keen::ds::LootModifierValue levelOffset; // Offset: 8
    keen::float32 levelOffsetRangeMin; // Offset: 16
    keen::float32 levelOffsetRangeMax; // Offset: 20
    keen::StaticArray<keen::ds::LootModifierValue,5> rarities; // Offset: 24
};

struct LootSettingsResource {
    keen::ds::LootModifierInfo modifier; // Offset: 0
    keen::DsArray<keen::ds::LootTagInfo> tags; // Offset: 64
};

struct SceneRandomLootResource {
    keen::DsArray<keen::ds::LootSettingsResource> lootSettings; // Offset: 0
    keen::DsArray<keen::ds::SpecialItemInfo> specialItems; // Offset: 40
    keen::DsArray<keen::ds::LootNodeResource> lootNodes; // Offset: 80
    keen::DsArray<keen::ds::LootContainerResource> lootContainer; // Offset: 120
};

struct LootDistributionBaseNode {
    keen::Guid objectId; // Offset: 0
    keen::DsArray<keen::ds::LootTagInfo> tags; // Offset: 16
    keen::ds::LootModifierInfo modifier; // Offset: 56
    keen::uint32 potentialSlots; // Offset: 120
    keen::uint32 potentialChildSlots; // Offset: 124
};

struct LootDistributionTreeNode {
    keen::HashKey32 nodeId; // Offset: 128
    keen::HashKey32 parentId; // Offset: 132
    keen::DsArray<keen::ds::LootDistributionTreeNode> childNodes; // Offset: 136
};

struct LootContainerInfo {
    keen::ds::LootContainerId id; // Offset: 128
    keen::ds::LootContainerId parentId; // Offset: 132
};

struct SpecialItemInfo {
    keen::HashKey32 nodeId; // Offset: 0
    keen::ds::ItemId itemId; // Offset: 4
    keen::bool checkItemLabels; // Offset: 8
    keen::uint8 amount; // Offset: 9
};

struct LootDistributionTreeResource {
    keen::DsArray<keen::ds::SpecialItemInfo> specialItems; // Offset: 176
};

struct EntityRandomLootInfo {
    keen::bool isLootEntity; // Offset: 0
    keen::uint32 potentialSlotCount; // Offset: 4
};

struct SceneWhiteboxLootInfo {
    keen::HashKey32 lootNodeId; // Offset: 0
    keen::ds::LootContainerInfo lootContainer; // Offset: 8
};

struct SceneWhiteboxLootInfos {
    keen::DsArray<keen::ds::SceneWhiteboxLootInfo> lootContainer; // Offset: 0
};

struct LootSlotInfo {
    keen::ds::ItemId itemId; // Offset: 0
    keen::uint16 stackSize; // Offset: 4
    keen::ds::ItemRarity rarity; // Offset: 6
    keen::uint32 level; // Offset: 8
};

struct LootContainerFillInfo {
    keen::uint8 version; // Offset: 0
    keen::uint8 filledSlots; // Offset: 1
    keen::StaticArray<keen::ds::LootSlotInfo,16> slots; // Offset: 4
};

struct ImportantLootSlotInfo {
    keen::uint32 importantItemIndex; // Offset: 0
    keen::ds::ItemId itemId; // Offset: 4
};

struct ImportantLootContainerFillInfo {
    keen::uint8 filledSlots; // Offset: 0
    keen::StaticArray<keen::ds::ImportantLootSlotInfo,16> slots; // Offset: 4
};

struct LootModifierBase {
    keen::ds::LootModifierMode mode; // Offset: 0
};

struct LootModifierAmount {
    keen::float32 amount; // Offset: 4
};

struct LootModifierRarity {
    keen::ds::ItemRarity rarity; // Offset: 1
    keen::float32 weight; // Offset: 4
};

struct LootModifierItemValue {
    keen::float32 min; // Offset: 4
    keen::float32 max; // Offset: 8
};

struct LootModifierLevelOffset {
    keen::float32 value; // Offset: 4
};

struct LootModifierLevelOffsetRange {
    keen::float32 min; // Offset: 4
    keen::float32 max; // Offset: 8
};

struct RandomLootItem {
    keen::ds::ItemReference item; // Offset: 0
    keen::uint8 amount; // Offset: 16
    keen::bool checkItemLabels; // Offset: 17
};

struct RandomLootItemInfo {
    keen::ds::ItemId itemId; // Offset: 0
    keen::ds::ItemReference itemRef; // Offset: 4
    keen::uint8 amount; // Offset: 20
    keen::bool checkItemLabels; // Offset: 21
};

struct LootTagInfo {
    keen::HashKey32 tagId; // Offset: 0
    keen::float32 weight; // Offset: 4
    keen::Guid guid; // Offset: 8
};

struct ObjectLootSettings {
    keen::ds::LootModifierInfo modifier; // Offset: 0
    keen::DsArray<keen::ds::LootTagInfo> tags; // Offset: 64
    keen::DsArray<keen::ds::RandomLootItemInfo> specialItems; // Offset: 104
};

typedef keen::ShufflebagItemType ShufflebagItemType;

struct ItemLabelGroupResource {
    keen::DsArray<keen::ds::LootTagInfo> labels; // Offset: 0
    keen::DsArray<keen::ds::ItemLabelGroupResource> childGroups; // Offset: 40
};

struct LootableItemInfo {
    keen::ds::ItemId itemId; // Offset: 0
    keen::ds::ItemRarityMask rarities; // Offset: 4
    keen::bool useUiRarity; // Offset: 5
    keen::ds::ItemRarity uiRarity; // Offset: 6
    keen::ds::ItemLabelGroupResource labelGroups; // Offset: 8
    keen::uint16 stackSizeMin; // Offset: 88
    keen::uint16 stackSizeMax; // Offset: 90
    keen::uint16 stackSizeMaxScaled; // Offset: 92
    keen::bool stackSizeScalable; // Offset: 94
    keen::ds::ShufflebagItemType shufflebagType; // Offset: 95
    keen::bool hasWeaponCategory; // Offset: 96
    keen::ds::WeaponCategoryType weaponCategoryType; // Offset: 97
    keen::ds::EquipmentSlotType armorCategoryType; // Offset: 98
    keen::ds::ItemClassAlignmentType classAlignmentType; // Offset: 99
};

struct LootableItemsResource {
    keen::StaticArray<keen::float32,5> globalRarityDropRates; // Offset: 0
    keen::float32 weaponArmorRatio; // Offset: 20
    keen::DsArray<keen::ds::LootableItemInfo> items; // Offset: 24
    keen::uint64 itemClassCategoryMask; // Offset: 64
    keen::uint64 weaponCategoryMask; // Offset: 72
    keen::uint64 armorCategoryMask; // Offset: 80
};

struct DefaultLootLabelCollectionResource {
    keen::DsArray<keen::ds::DefaultLootSettingsResource> lootSettings; // Offset: 0
};

struct DefaultLootSettingsResource {
    keen::ds::LootContainerId id; // Offset: 104
};

struct DistributionLootSceneInput {
    keen::Guid scatterSetId; // Offset: 0
    keen::ds::LootModifierInfo modifier; // Offset: 16
    keen::DsArray<keen::ds::LootTagInfo> tags; // Offset: 80
    keen::DsString lootIdsInput; // Offset: 120
    keen::DsString lootTreeInput; // Offset: 160
};

struct DistributionLootConverterParameters {
    keen::DsArray<keen::ds::DistributionLootSceneInput> lootSceneInputs; // Offset: 0
};

struct DebugItemDropInfo {
    keen::ds::ItemId itemId; // Offset: 0
    keen::float32 weight; // Offset: 4
};

struct DebugLootSceneInfoMessage {
    keen::Guid sceneId; // Offset: 0
};

struct DebugLootContainerInfoMessage {
    keen::HashKey32 nodeId; // Offset: 0
    keen::DsArray<keen::ds::ItemId> droppedItems; // Offset: 8
    keen::float32 weightSum; // Offset: 48
    keen::ds::LootModifierInfo modifierInfo; // Offset: 52
    keen::DsArray<keen::ds::LootTagInfo> tags; // Offset: 120
    keen::DsArray<keen::ds::DebugItemDropInfo> possibleItems; // Offset: 160
};

struct RegisteredLootContainerParams {
    keen::ds::LootContainerId containerId; // Offset: 0
    keen::ds::LootContainerId parentNodeId; // Offset: 4
    keen::HashKey32 labelDefinitionsId; // Offset: 8
    keen::float baseProbability; // Offset: 12
    keen::uint8 slotsMin; // Offset: 16
    keen::uint8 slotsMax; // Offset: 17
    keen::DsOptional<keen::uint32> level; // Offset: 24
};

struct DebugRegisteredLootContainerMessage {
    keen::DsArray<keen::ds::RegisteredLootContainerParams> registeredContainer; // Offset: 0
};

struct DebugTrackLootContainerMessage {
    keen::bool isLootContainer; // Offset: 0
    keen::HashKey32 nodeId; // Offset: 4
};

struct DebugRefreshLootMessage {
    keen::HashKey32 nodeId; // Offset: 0
};

struct GroupedItemLabels {
};

typedef keen::LabelMask LabelMask;

typedef keen::MarkerTypeSorting MarkerTypeSorting;

struct MapMarkerType {
    keen::ds::MapMarkerTypeId markerId; // Offset: 0
    keen::ds::UiTexture icon; // Offset: 4
    keen::float32 iconDisplaySize; // Offset: 52
    keen::bool isHighlightable; // Offset: 56
    keen::bool isFastTravelDestination; // Offset: 57
    keen::bool showAboveFogOfWar; // Offset: 58
    keen::bool showLabel; // Offset: 59
    keen::bool showRange; // Offset: 60
    keen::bool isCustomMarkerType; // Offset: 61
    keen::bool canBeFiltered; // Offset: 62
    keen::ds::MarkerTypeSorting sortingCategory; // Offset: 63
    keen::uint8 minimizeAboveZoomStep; // Offset: 64
    keen::uint8 hideAboveZoomStep; // Offset: 65
    keen::Color minimizedColor; // Offset: 68
    keen::bool scaleWithZoom; // Offset: 72
};

struct MapMarkerRegistryTool {
};

struct MapMarkerRegistryResource {
    keen::DsArray<keen::ds::MapMarkerType> mapMarkers; // Offset: 0
    keen::ds::UiTexturePreload texturePreload; // Offset: 40
};

struct CustomMapMarker {
    keen::WorldPosition position; // Offset: 0
    keen::uint8 colorScheme; // Offset: 24
    keen::ds::MapMarkerTypeId type; // Offset: 28
};

typedef keen::npc::HappinessRequirement npc.HappinessRequirement;

typedef keen::npc::HapinessMask npc.HapinessMask;

struct npc.IdleSequenceSetup {
    keen::Time minSequenceCooldown; // Offset: 0
    keen::Time maxSequenceCooldown; // Offset: 8
};

typedef keen::player_bases::BaseIndex player_bases.BaseIndex;

struct npc.PlacedNpcInfo {
    keen::ds::player_bases::BaseIndex baseIndex; // Offset: 0
    keen::ds::ecs::EntityId entityId; // Offset: 4
    keen::ds::npc::HapinessMask happiness; // Offset: 8
};

typedef keen::active_npc::State active_npc.State;

typedef keen::active_npc::StateCondition active_npc.StateCondition;

typedef keen::active_npc::Decision active_npc.Decision;

typedef keen::active_npc::NpcType active_npc.NpcType;

struct active_npc.DecisionSetup {
    keen::float idleWeight; // Offset: 0
    keen::float inspectWeight; // Offset: 4
    keen::float sitWeight; // Offset: 8
    keen::float roamWeight; // Offset: 12
    keen::float workWeight; // Offset: 16
};

struct active_npc.IdleSetup {
    keen::Time minDuration; // Offset: 0
    keen::Time maxDuration; // Offset: 8
};

struct active_npc.SearchTargetSetup {
    keen::float32 targetRadius; // Offset: 0
    keen::float32 bedRadius; // Offset: 4
};

struct active_npc.WorkSetup {
    keen::Time minDuration; // Offset: 0
    keen::Time maxDuration; // Offset: 8
};

struct active_npc.TargetSetup {
    keen::bool isFarmland; // Offset: 0
    keen::bool isBed; // Offset: 1
    keen::bool isCraftingStation; // Offset: 2
    keen::bool isSeating; // Offset: 3
    keen::bool isFood; // Offset: 4
    keen::bool isInteresting; // Offset: 5
};

struct ecs.NpcDialog {
    keen::bool isFlame; // Offset: 0
    keen::ObjectReference<keen::ds::NpcDialogDefinition> dialog; // Offset: 4
    keen::ds::NpcDialogResource dialogResource; // Offset: 24
    keen::ds::LocaTagReference interactionVerbLoca; // Offset: 240
};

struct ecs.DynamicNpcDialog {
    keen::uint16 syncedKnowledgeQueryCounter; // Offset: 0
};

struct ecs.NpcDialogPartner {
    keen::bool isInGreetingRange; // Offset: 0
    keen::Time lastGreetingTime; // Offset: 8
};

struct ecs.NpcState {
    keen::ds::actor::ActorSequenceReference defaultGreetingSequence; // Offset: 0
    keen::ds::actor::ActorSequenceReference attentionGreetingSequence; // Offset: 16
    keen::ds::actor::TurnSetup turnSetup; // Offset: 32
    keen::ds::npc::IdleSequenceSetup idleSetup; // Offset: 104
    keen::ds::npc::HapinessMask hapinessMask; // Offset: 120
    keen::float32 minDistanceToPlayer; // Offset: 124
};

typedef keen::ecs::PlayerMask ecs.PlayerMask;

typedef keen::ecs::NpcInteractionState ecs.NpcInteractionState;

typedef keen::ecs::NpcInteractionStates ecs.NpcInteractionStates;

struct ecs.DynamicNpcState {
    keen::ds::LocaTagId lastSelectedDialogId; // Offset: 0
    keen::ds::ecs::EntityId lastInteractingEntityId; // Offset: 4
    keen::bool dialogSequenceActive; // Offset: 8
    keen::Time nextGreetingTime; // Offset: 16
    keen::Time lastLookAtPlayerTime; // Offset: 24
    keen::Time nextLookAtPlayerTime; // Offset: 32
    keen::Time remainingNextSequenceTime; // Offset: 40
    keen::StaticArray<keen::ds::ecs::QueryId,16> queryIds; // Offset: 48
    keen::ds::ecs::PlayerMask playersInSight; // Offset: 112
    keen::ds::ecs::PlayerMask greetedPlayers; // Offset: 120
    keen::bool isInitialized; // Offset: 128
    keen::bool isSpawning; // Offset: 129
    keen::Quaternion revertToRotation; // Offset: 132
};

struct ecs.ActiveNpcState {
    keen::ds::NpcId npcId; // Offset: 0
    keen::ds::actor::ActorSequenceReference sitSequence; // Offset: 4
    keen::ds::actor::ActorSequenceReference sleepSequence; // Offset: 20
    keen::ds::actor::ActorSequenceReference inspectSequence; // Offset: 36
    keen::ds::active_npc::NpcType npcType; // Offset: 52
    keen::ds::active_npc::DecisionSetup decisionSetup; // Offset: 56
    keen::ds::active_npc::IdleSetup idleSetup; // Offset: 80
    keen::ds::active_npc::RoamingSetup roamingSetup; // Offset: 96
    keen::ds::active_npc::MovementSetup movementSetup; // Offset: 108
    keen::ds::active_npc::WorkSetup workSetup; // Offset: 120
    keen::ds::active_npc::SleepSetup sleepSetup; // Offset: 136
    keen::ds::active_npc::SearchTargetSetup searchTargetSetup; // Offset: 152
    keen::ds::active_npc::PathNodeSetup pathNodeSetup; // Offset: 160
};

struct ecs.DynamicActiveNpcState {
    keen::ds::active_npc::State state; // Offset: 0
    keen::ds::active_npc::State previousState; // Offset: 1
    keen::ds::active_npc::Decision decision; // Offset: 2
    keen::ds::npc::HapinessMask happiness; // Offset: 3
    keen::bool wasPaused; // Offset: 4
};

struct ecs.NPCMovement {
    keen::Time duration; // Offset: 0
    keen::float3 movement; // Offset: 8
};

struct ecs.NpcCommon {
    keen::ds::ecs::NpcInteractionStates interactionStates; // Offset: 0
    keen::Time stateTimer; // Offset: 8
    keen::Time currentStateDuration; // Offset: 16
    keen::Time stuckTime; // Offset: 24
    keen::Time stuckTimeOut; // Offset: 32
    keen::ds::ecs::RangeQueryId queryId; // Offset: 40
    keen::ds::ecs::EntityId closestPlayerId; // Offset: 44
    keen::ds::ecs::EntityId currentTargetId; // Offset: 48
    keen::ds::ecs::EntityId bedId; // Offset: 52
    keen::ds::ecs::EntityId previousTargetId; // Offset: 56
    keen::float sleepTime; // Offset: 60
    keen::float wakeUpTime; // Offset: 64
    keen::float closestPlayerDistance; // Offset: 68
    keen::float squaredDistanceToTarget; // Offset: 72
    keen::float3 currentTargetPosition; // Offset: 76
    keen::StaticArray<keen::ds::ecs::NPCMovement,60> history; // Offset: 88
    keen::uint8 historyIndex; // Offset: 1528
    keen::Guid currentSequenceId; // Offset: 1532
    keen::bool useReducedRoamingSpace; // Offset: 1548
    keen::bool shouldBeMoving; // Offset: 1549
    keen::uint8 unstuckTries; // Offset: 1550
    keen::uint8 stateFailures; // Offset: 1551
};

struct ecs.ActiveNpcStateSaved {
    keen::float3 spawnPosition; // Offset: 0
    keen::bool overrideRoamingRange; // Offset: 12
    keen::float roamingRange; // Offset: 16
    keen::WorldPosition teleportPositionAfterFinishing; // Offset: 24
};

struct ecs.ClientActiveNpcState {
    keen::ds::ecs::EntityId bedId; // Offset: 0
    keen::ds::npc::HapinessMask happiness; // Offset: 4
    keen::float roamingRange; // Offset: 8
};

struct ecs.StoreAssociatedNpcIds {
    keen::bool initialized; // Offset: 0
    keen::StaticArray<keen::ds::NpcId,2> npcIds; // Offset: 4
};

struct ecs.ActiveNpcTarget {
    keen::ds::active_npc::TargetSetup setup; // Offset: 0
    keen::ds::active_npc::NpcType npcType; // Offset: 6
    keen::ds::NpcId associatedNpc; // Offset: 8
    keen::ds::ecs::Offset targetOffset; // Offset: 12
};

struct ecs.ClientActiveNpcTarget {
    keen::ds::NpcId associatedNpc; // Offset: 0
    keen::bool isBed; // Offset: 4
};

struct ecs.NpcSequenceEntry {
    keen::ds::actor::ActorSequenceReference sequence; // Offset: 0
};

struct ecs.BaseNpcSequences {
    keen::DsArray<keen::ds::ecs::NpcSequenceEntry> sequences; // Offset: 0
};

struct ecs.NpcIdleSequences {
};

struct ecs.NpcWorkSequences {
};

struct ecs.NpcActionSequences {
    keen::ds::ecs::NpcIdleSequences idleSequences; // Offset: 0
    keen::ds::ecs::NpcWorkSequences workSequences; // Offset: 40
};

struct NpcResource {
    keen::ds::NpcId id; // Offset: 0
    keen::ds::LocaTagId name; // Offset: 4
    keen::bool isCraftingAssistant; // Offset: 8
    keen::ds::KnowledgeId unlockRequirement; // Offset: 12
    keen::ds::WorkshopId workshopId; // Offset: 16
    keen::ds::LocaTagId workshopLabel; // Offset: 20
    keen::ds::ItemId itemId; // Offset: 24
    keen::ds::ItemReference itemRef; // Offset: 28
    keen::ds::CharacterPresetReference characterPresetReference; // Offset: 44
    keen::ds::CharacterPresetId characterPresetId; // Offset: 60
    keen::ds::UiNpcRenderingOptions uiRendering; // Offset: 64
    keen::DsString debugName; // Offset: 120
};

struct NpcCollection {
    keen::DsArray<keen::ds::NpcResource> npcs; // Offset: 0
};

struct ecs.PathFinder {
    keen::ds::ecs::PathGridDistance horizontalStartSearchRadius; // Offset: 0
    keen::ds::ecs::PathGridDistance verticalStartSearchRadius; // Offset: 4
    keen::ds::ecs::PathfindingSettings settings; // Offset: 8
};

struct ecs.DynamicPathFinder {
    keen::Time lastQueryTime; // Offset: 0
    keen::float3 targetPosition; // Offset: 8
    keen::float3 lastStartPosition; // Offset: 20
    keen::float3 lastTargetPosition; // Offset: 32
    keen::uint32 lastKeepDistance; // Offset: 44
    keen::HashKey32 lastParametersHash; // Offset: 48
    keen::float32 lastMaxTargetNodeDistance; // Offset: 52
    keen::ds::ecs::PathQueryId queryId; // Offset: 56
    keen::uint32 keepDistance; // Offset: 60
    keen::ds::ecs::PathGridDistance horizontalSearchRadius; // Offset: 64
    keen::ds::ecs::PathGridDistance verticalSearchRadius; // Offset: 68
    keen::ds::ecs::PathGridType gridType; // Offset: 72
    keen::bool keepLastResults; // Offset: 73
    keen::ds::ecs::PathQueryCheck pathQueryCheck; // Offset: 74
    keen::ds::ecs::EntityId freePathCheckIgnoreEntityId; // Offset: 76
    keen::ds::ecs::PathGridDistance minHorizontalSpace; // Offset: 80
    keen::ds::ecs::PathGridDistance minVerticalSpace; // Offset: 84
    keen::float32 maxTargetNodeDistance; // Offset: 88
    keen::uint32 maxWalkDistance; // Offset: 92
    keen::ds::ecs::PathQueryTargetType targetType; // Offset: 96
    keen::uint32 maxIterations; // Offset: 100
    keen::float2 horizontalKeepDistanceDirection; // Offset: 104
    keen::float3 freePathCheckPosition; // Offset: 112
    keen::bool enableAdditionalSpaceSearch; // Offset: 124
    keen::bool enableJumpUp; // Offset: 125
    keen::bool enableJumpDown; // Offset: 126
    keen::bool canOpenDoors; // Offset: 127
    keen::uint8 maxJumpUpHeight; // Offset: 128
    keen::uint8 maxJumpDownHeight; // Offset: 129
    keen::bool enforceUpdate; // Offset: 130
    keen::bool ignoreWalkableColliders; // Offset: 131
    keen::bool ignoreMovingObjects; // Offset: 132
    keen::ds::ecs::PathGridDistance minTargetHorizontalSpace; // Offset: 136
    keen::ds::ecs::PathNodeRequirements pathNodeRequirements; // Offset: 140
    keen::ds::ecs::PathNodeCostFactors pathNodeCostFactors; // Offset: 144
    keen::float32 horizontalDistanceCostFactor; // Offset: 196
    keen::bool checkFreePathToTarget; // Offset: 200
    keen::bool ignoreNodesCloseToHole; // Offset: 201
};

typedef keen::ecs::PathWalkerState ecs.PathWalkerState;

struct ecs.PathWalkerTurnSettings {
    keen::float turnToNextWayPointMinDistanceWalk; // Offset: 0
    keen::float turnToNextWayPointMinDistanceRun; // Offset: 4
};

struct ecs.PathWalker {
    keen::ds::actor::ActorSequenceReference jumpSequence; // Offset: 0
    keen::ds::actor::ActorSequenceReference openDoorSequence; // Offset: 16
    keen::bool usePathFinding; // Offset: 32
    keen::ds::actor::ActorSequenceReference teleportSequence; // Offset: 36
    keen::float32 jumpMoveSpeed; // Offset: 52
    keen::float32 horizontalRadius; // Offset: 56
    keen::float32 verticalRadius; // Offset: 60
    keen::ds::ecs::PathNodeRequirements pathNodeRequirements; // Offset: 64
    keen::ds::ecs::PathWalkerTurnSettings turnSettings; // Offset: 68
};

struct ecs.DynamicPathWalker {
    keen::float3 targetPosition; // Offset: 0
    keen::uint32 upateCounter; // Offset: 12
    keen::uint32 pathIndex; // Offset: 16
    keen::ds::ecs::PathWalkerState state; // Offset: 20
    keen::float3 lookAtTarget; // Offset: 24
    keen::bool lookAtMovementTarget; // Offset: 36
    keen::bool setDesiredWorldLookDirection; // Offset: 37
    keen::uint32 keepDistance; // Offset: 40
    keen::ds::ecs::PathGridDistance horizontalSearchRadius; // Offset: 44
    keen::ds::ecs::PathGridDistance verticalSearchRadius; // Offset: 48
    keen::float32 maxArriveWaypointDistance; // Offset: 52
    keen::float32 maxArriveTargetDistance; // Offset: 56
    keen::bool shouldOverrideMinArriveDistance; // Offset: 60
    keen::float32 overrideMinArriveDistance; // Offset: 64
    keen::bool shouldOverrideMinTurnDistance; // Offset: 68
    keen::float32 overrideMinTurnDistance; // Offset: 72
    keen::Time stuckTime; // Offset: 80
    keen::bool keepLastResults; // Offset: 88
    keen::ds::ecs::PathQueryCheck pathQueryCheck; // Offset: 89
    keen::ds::ecs::EntityId freePathCheckIgnoreEntityId; // Offset: 92
    keen::ds::ecs::PathGridDistance minHorizontalSpace; // Offset: 96
    keen::ds::ecs::PathGridDistance minVerticalSpace; // Offset: 100
    keen::Time standingDuration; // Offset: 104
    keen::Time walkingDuration; // Offset: 112
    keen::float32 maxTargetNodeDistance; // Offset: 120
    keen::uint32 maxWalkDistance; // Offset: 124
    keen::ds::ecs::PathQueryTargetType targetType; // Offset: 128
    keen::float32 closestWaypointSquareDistance; // Offset: 132
    keen::uint32 maxIterations; // Offset: 136
    keen::float32 currentPathLengthToTarget; // Offset: 140
    keen::float2 horizontalKeepDistanceDirection; // Offset: 144
    keen::float3 freePathCheckPosition; // Offset: 152
    keen::float3 lastReachedTarget; // Offset: 164
    keen::bool isWalkingActive; // Offset: 176
    keen::bool enableAdditionalSpaceSearch; // Offset: 177
    keen::bool enableJumpUp; // Offset: 178
    keen::bool enableJumpDown; // Offset: 179
    keen::bool canOpenDoors; // Offset: 180
    keen::uint8 maxJumpUpHeight; // Offset: 181
    keen::uint8 maxJumpDownHeight; // Offset: 182
    keen::Time lastEnforceUpdateTime; // Offset: 184
    keen::bool useTurnSequences; // Offset: 192
    keen::ds::actor::SequenceRuntimeId turnSequenceId; // Offset: 200
    keen::ds::actor::SequenceRuntimeId teleportSequenceId; // Offset: 224
    keen::ds::actor::SequenceRuntimeId openDoorSequenceId; // Offset: 248
    keen::ds::ecs::PathGridDistance minTargetHorizontalSpace; // Offset: 272
    keen::bool enableTeleportMovement; // Offset: 276
    keen::bool ignoreWalkableColliders; // Offset: 277
    keen::ds::ecs::PathNodeCostFactors pathNodeCostFactors; // Offset: 280
    keen::float32 horizontalDistanceCostFactor; // Offset: 332
    keen::bool checkFreePathToTarget; // Offset: 336
    keen::ds::ecs::PathNodeRequirements pathNodeRequirementsOverride; // Offset: 338
    keen::bool useNodeRequirementsOverride; // Offset: 342
    keen::bool ignoreMovingObjects; // Offset: 343
    keen::bool tryToReachTargetAsCloseAsPossible; // Offset: 344
    keen::bool ignoreNodesCloseToHole; // Offset: 345
};

typedef keen::ecs::PathGridInteractionObjectType ecs.PathGridInteractionObjectType;

struct ecs.PathGridInteraction {
    keen::ds::ecs::PathGridInteractionObjectType interactionObjectType; // Offset: 0
};

struct ecs.DynamicPathGridInteraction {
    keen::bool isRegistered; // Offset: 0
};

struct ecs.PathFinderTester {
};

typedef keen::ecs::PathFindingMarkerType ecs.PathFindingMarkerType;

typedef keen::ecs::PathFindingMarkerTestMode ecs.PathFindingMarkerTestMode;

typedef keen::ecs::PathFindingMarkerTestState ecs.PathFindingMarkerTestState;

struct ecs.PathFindingTestMarker {
    keen::ds::ecs::PathFindingMarkerType type; // Offset: 0
    keen::ds::ecs::PathFindingMarkerTestMode testMode; // Offset: 1
    keen::ds::ecs::PathFindingMarkerTestState state; // Offset: 2
    keen::ds::ecs::PathQueryId queryId; // Offset: 4
};

struct PerkDamageModifier {
    keen::ds::impact::DamageDistribution distribution; // Offset: 0
    keen::bool isSet; // Offset: 52
};

typedef keen::PerkConfig PerkConfig;

struct Perk {
    keen::ds::NameLocaTag name; // Offset: 0
    keen::ds::DescriptionLocaTag description; // Offset: 16
    keen::ds::UiTexture icon; // Offset: 32
    keen::ds::ImpactProgramReference impact; // Offset: 80
    keen::bool simpleAttributeBuff; // Offset: 96
    keen::DsArray<keen::ds::ImpactUiValue> uiValues; // Offset: 104
    keen::ds::impact::Configurations impactValues; // Offset: 144
    keen::ds::PerkDamageModifier damageModifier; // Offset: 184
    keen::ds::ItemArmorSetup perkArmorSetup; // Offset: 240
    keen::ds::string debugName; // Offset: 280
};

struct PerkSubDirectory {
};

struct PerkDirectory {
};

struct PerkCollectionResource {
    keen::DsArray<keen::ds::PerkReference> perks; // Offset: 0
};

typedef keen::ecs::ClientOnlyPlayerInputType ecs.ClientOnlyPlayerInputType;

typedef keen::RecipeLevelRequirement RecipeLevelRequirement;

struct RecipeItemStack {
    keen::ds::ItemReference item; // Offset: 0
    keen::uint32 count; // Offset: 16
};

struct RecipeInputList {
};

struct RecipeOutputList {
};

struct RequiredProp {
    keen::ObjectReference<keen::ds::CraftingPropDefinition> craftingProp; // Offset: 0
};

struct Recipe {
    keen::ds::NameLocaTag name; // Offset: 0
    keen::ds::DescriptionLocaTag description; // Offset: 16
    keen::ds::LoreLocaTag lore; // Offset: 32
    keen::bool showIsNewLabel; // Offset: 48
    keen::bool useCustomCompletionRequirement; // Offset: 49
    keen::ds::GameKnowledgeRequirement completionRequirement; // Offset: 52
    keen::bool requiresSheltered; // Offset: 156
    keen::ObjectReference<keen::ds::WorkshopDefinition> workshopReference; // Offset: 160
    keen::ds::RecipeLevelRequirement levelRequirement; // Offset: 176
    keen::uint32 level; // Offset: 180
    keen::ds::RecipeLevelRequirement comfortLevelRequirement; // Offset: 184
    keen::uint32 comfortLevel; // Offset: 188
    keen::ds::RecipeLevelRequirement serverProgressLevelRequirement; // Offset: 192
    keen::uint32 serverProgressLevel; // Offset: 196
    keen::uint32 requiredHappyNpcCount; // Offset: 200
    keen::uint32 requiredEnergy; // Offset: 204
    keen::Time craftingDuration; // Offset: 208
    keen::bool isUpgrade; // Offset: 216
};

struct RecipeList {
    keen::ObjectReference<keen::ds::CraftingWorkshopDirectory> workshopDirectory; // Offset: 0
};

struct RecipeInfo {
    keen::ds::RecipeId recipeId; // Offset: 0
    keen::ds::WorkshopId workshopId; // Offset: 4
    keen::DsArray<keen::ds::RecipeItemStackResource> input; // Offset: 8
    keen::DsArray<keen::ds::RecipeItemStackResource> output; // Offset: 48
    keen::bool requiresSheltered; // Offset: 88
    keen::bool showIsImportantLabel; // Offset: 89
    keen::ds::RecipeLevelRequirement levelRequirement; // Offset: 90
    keen::uint32 level; // Offset: 92
    keen::ds::RecipeLevelRequirement comfortLevelRequirement; // Offset: 96
    keen::uint32 comfortLevel; // Offset: 100
    keen::ds::RecipeLevelRequirement serverProgressLevelRequirement; // Offset: 104
    keen::uint32 serverProgressLevel; // Offset: 108
    keen::uint32 requiredHappyNpcCount; // Offset: 112
    keen::uint32 requiredEnergy; // Offset: 116
    keen::Time craftingDuration; // Offset: 120
    keen::bool isCookingRecipe; // Offset: 128
    keen::bool isUpgrade; // Offset: 129
    keen::DsArray<keen::ds::CraftingPropId> requiredProps; // Offset: 136
    keen::ds::CraftingPropMask requiredPropsMask; // Offset: 176
    keen::ds::KnowledgeId knowledgeRequirement; // Offset: 184
    keen::ds::KnowledgeId recipeInspectedKnowledgeId; // Offset: 188
    keen::ds::KnowledgeId recipeCraftedKnowledgeId; // Offset: 192
    keen::ds::KnowledgeId completionRequirementId; // Offset: 196
    keen::ds::NameLocaTag recipeName; // Offset: 200
    keen::DsString debugName; // Offset: 216
};

struct RecipeRegistryResource {
    keen::DsArray<keen::ds::RecipeInfo> recipes; // Offset: 0
};

typedef keen::SkillNodeLinkId SkillNodeLinkId;

struct ecs.SkillIdComponent {
    keen::ds::SkillNodeId skillId; // Offset: 0
};

typedef keen::SkillNodeType SkillNodeType;

typedef keen::ClassType ClassType;

struct SkillTreeNodeLink {
    keen::ds::SkillNodeLinkId id; // Offset: 0
    keen::ds::SkillNodeId sourceNode; // Offset: 4
    keen::ds::SkillNodeId targetNode; // Offset: 8
    keen::bool isBidirectional; // Offset: 12
};

struct SkillTreeNode {
    keen::ds::SkillNodeId id; // Offset: 0
    keen::ds::SkillNodeType type; // Offset: 4
    keen::float2 uiPosition; // Offset: 8
    keen::uint16 costs; // Offset: 16
    keen::ds::LocaTagId name; // Offset: 20
    keen::ds::LocaTagId description; // Offset: 24
    keen::ds::ClassType classAlignment; // Offset: 28
    keen::ds::ItemReference activeSkillUnlockRef; // Offset: 32
    keen::ds::ItemId activeSkillUnlock; // Offset: 48
    keen::ds::UiTexture iconInactive; // Offset: 52
    keen::ds::UiTexture iconActive; // Offset: 100
    keen::ds::ImpactProgramReference impactReference; // Offset: 148
    keen::DsArray<keen::ds::ImpactUiValue> uiValues; // Offset: 168
    keen::ds::impact::Configurations configValues; // Offset: 208
    keen::bool isDeactivatedForEarlyAccess; // Offset: 248
    keen::DsArray<keen::ds::SkillNodeLinkId> incomingLinks; // Offset: 256
    keen::DsArray<keen::ds::SkillNodeLinkId> outgoingLinks; // Offset: 296
};

typedef keen::ObjectReference<keen::ds::SkillTreeNode> SkillTreeNodeReference;

struct SkillTreeResource {
    keen::DsArray<keen::ds::SkillTreeNode> nodes; // Offset: 0
    keen::DsArray<keen::ds::SkillTreeNodeLink> links; // Offset: 40
};

struct SkillTreeDefinition {
};

struct skilltree_nodes.Node {
    keen::Vector2 uiPosition; // Offset: 0
    keen::ds::NameLocaTag name; // Offset: 8
    keen::ds::DescriptionLocaTag description; // Offset: 24
    keen::ds::ImageReference iconInactive; // Offset: 40
    keen::ds::ImageReference iconActive; // Offset: 56
    keen::uint16 costs; // Offset: 72
    keen::ds::ClassType classAlignment; // Offset: 74
    keen::bool isDeactivatedForEarlyAccess; // Offset: 75
};

struct skilltree_nodes.StartingNode {
};

struct skilltree_nodes.AbilityNode {
    keen::ds::ItemReference abilityItem; // Offset: 76
    keen::ds::ImpactProgramReference impactReference; // Offset: 92
    keen::ds::impact::Configurations configValues; // Offset: 112
};

struct skilltree_nodes.AttributeNode {
    keen::ds::ImpactProgramReference impactReference; // Offset: 76
    keen::ds::impact::Configurations configValues; // Offset: 96
};

struct skilltree_nodes.PassiveNode {
    keen::ds::ImpactProgramReference impactReference; // Offset: 76
    keen::ds::impact::Configurations configValues; // Offset: 96
};

struct skilltree_nodes.MartyrNode {
    keen::ds::ImpactProgramReference impactReference; // Offset: 76
    keen::ds::impact::Configurations configValues; // Offset: 96
};

struct skilltree_nodes.SkillTreeLink {
    keen::ds::skilltree_nodes::NodeReference startNode; // Offset: 0
    keen::DsString startElementName; // Offset: 16
    keen::ds::skilltree_nodes::NodeReference endNode; // Offset: 56
};

struct ecs.SteeringLocomotion {
    keen::bool setRotationFlag; // Offset: 0
    keen::bool clearVelocity; // Offset: 1
    keen::bool slowDownIfMovementAngleIsTooBig; // Offset: 2
    keen::float32 maxRunAngle; // Offset: 4
    keen::float32 maxMovementAngle; // Offset: 8
    keen::bool isCloseToHole; // Offset: 12
    keen::Time lastHookedTime; // Offset: 16
};

struct ecs.SteeringAgent {
    keen::ds::ecs::RangeQueryId queryId; // Offset: 0
    keen::bool active; // Offset: 4
    keen::float3 desiredVelocity; // Offset: 8
    keen::float32 currentVelocityWeight; // Offset: 20
    keen::float32 desiredVelocityWeight; // Offset: 24
    keen::float3 velocity; // Offset: 28
    keen::float32 maxSpeed; // Offset: 40
    keen::float32 maxForce; // Offset: 44
    keen::float32 maxAcceleration; // Offset: 48
    keen::float32 mass; // Offset: 52
    keen::float32 separationRange; // Offset: 56
    keen::uint8 priority; // Offset: 60
    keen::ds::ecs::EntityId ignoredEntity; // Offset: 64
};

struct ecs.SteeringBehavior {
    keen::float3 steeringForce; // Offset: 0
};

struct ecs.SteeringBehavior_Seek {
};

struct ecs.SteeringBehavior_Flee {
    keen::float32 viewConeHalfAngle; // Offset: 12
    keen::float32 fleeRadius; // Offset: 16
    keen::bool checkViewCone; // Offset: 20
};

struct ecs.SteeringBehavior_Separation {
    keen::bool enabled; // Offset: 12
    keen::Time forceActiveDuration; // Offset: 16
};

struct ecs.SteeringBehavior_LookAhead {
    keen::Time lastQueryTime; // Offset: 16
    keen::Angle lookAheadAngle; // Offset: 24
    keen::float lookAheadDistance; // Offset: 28
};

struct ecs.SteeringBehavior_ObstacleAvoidance {
    keen::ds::ecs::QueryId queryId; // Offset: 12
    keen::Time lastCheckTime; // Offset: 16
    keen::float32 minHeightDiff; // Offset: 24
};

struct ecs.SteeringBehavior_Cohesion {
};

struct ecs.SteeringBehavior_Alignment {
};

struct ecs.SteeringAnimator {
    keen::ds::animationgraph::StateIdReference idleAnimation; // Offset: 0
    keen::ds::animationgraph::StateIdReference walkAnimation; // Offset: 16
};

struct ToolTerraformingEfficiency {
    keen::ds::ItemReference toolItem; // Offset: 0
    keen::float32 efficiency; // Offset: 16
};

struct ConditionalVoxelMaterialBuffType {
    keen::float minSubmergePercentage; // Offset: 0
    keen::ds::BuffTypeReference buffType; // Offset: 4
};

typedef keen::TerrainMaterialType TerrainMaterialType;

struct TerrainMaterialId {
    keen::ds::TerrainMaterialType value; // Offset: 0
};

struct TerrainTerraformingConfig {
    keen::ds::TerrainMaterialId terrainMaterial; // Offset: 0
    keen::ds::ItemReference terrainItem; // Offset: 4
    keen::ds::HardnessCategory hardness; // Offset: 20
    keen::uint32 terrainPerLootItemExchangeRate; // Offset: 24
    keen::sint32 healthPoints; // Offset: 28
    keen::bool canBeFlattened; // Offset: 32
    keen::bool isSlidingMaterial; // Offset: 33
    keen::Guid experienceGainGuid; // Offset: 36
    keen::ds::CollisionFeedbackMaterialReference collisionFeedbackMaterial; // Offset: 52
    keen::ds::PropDamageSusceptibility damageSusceptibility; // Offset: 68
    keen::ds::BuffTypeReference buffReference; // Offset: 72
    keen::DsArray<keen::ds::ConditionalVoxelMaterialBuffType> conditionalBuffTypes; // Offset: 88
    keen::bool isDangerous; // Offset: 128
    keen::float frictionFactor; // Offset: 132
    keen::float maxSubmergeDepth; // Offset: 136
    keen::float minSubmergePercentage; // Offset: 140
    keen::float maxSubmergePercentage; // Offset: 144
    keen::Guid entityTag; // Offset: 148
    keen::ds::ecs::PathNodeType pathNodeType; // Offset: 164
};

typedef keen::BuildingMaterialType BuildingMaterialType;

struct BuildingMaterialId {
    keen::ds::BuildingMaterialType value; // Offset: 0
};

struct BuildingTerraformingConfig {
    keen::ds::BuildingMaterialId buildingMaterial; // Offset: 0
    keen::ds::ItemReference materialItem; // Offset: 4
    keen::ds::HardnessCategory hardness; // Offset: 20
    keen::uint32 blocksPerLootItemExchangeRate; // Offset: 24
    keen::sint32 healthPoints; // Offset: 28
    keen::ds::KnowledgeId knowledgeId; // Offset: 32
    keen::Guid experienceGainGuid; // Offset: 36
    keen::ds::CollisionFeedbackMaterialReference collisionFeedbackMaterial; // Offset: 52
    keen::ds::PropDamageSusceptibility damageSusceptibility; // Offset: 68
    keen::ds::BuffTypeReference buffReference; // Offset: 72
    keen::DsArray<keen::ds::ConditionalVoxelMaterialBuffType> conditionalBuffTypes; // Offset: 88
    keen::bool isDangerous; // Offset: 128
    keen::float frictionFactor; // Offset: 132
    keen::float maxSubmergeDepth; // Offset: 136
    keen::float minSubmergePercentage; // Offset: 140
    keen::float maxSubmergePercentage; // Offset: 144
    keen::Guid entityTag; // Offset: 148
    keen::ds::ecs::PathNodeType pathNodeType; // Offset: 164
};

struct TerraformingEfficiencyRegistryResource {
    keen::DsArray<keen::ds::TerrainTerraformingConfig> terrainConfigs; // Offset: 0
    keen::DsArray<keen::ds::BuildingTerraformingConfig> buildingConfigs; // Offset: 40
};

typedef keen::TwitchDropId TwitchDropId;

struct TwitchDropItem {
    keen::ds::ItemReference item; // Offset: 0
};

struct TwitchDrop {
};

struct TwitchDropSubDirectory {
};

struct TwitchDropDirectory {
};

struct TwitchDropResource {
    keen::ds::TwitchDropId dropId; // Offset: 0
    keen::DsArray<keen::ds::ItemId> items; // Offset: 8
    keen::DsArray<keen::ds::ItemReference> itemRefs; // Offset: 48
    keen::ds::string debugName; // Offset: 88
    keen::Guid debugId; // Offset: 128
};

struct TwitchDropCollection {
    keen::DsArray<keen::ds::TwitchDropResource> drops; // Offset: 0
};

typedef keen::VoxelBlueprintId VoxelBlueprintId;

typedef keen::VoxelBlueprintMaterialPoolId VoxelBlueprintMaterialPoolId;

struct VoxelSnappingRule {
    keen::DsArray<keen::ObjectReference<keen::ds::VoxelBlueprintConfig>> snappingTargets; // Offset: 0
    keen::DsArray<keen::ObjectReference<keen::ds::VoxelBlueprintConfig>> excludeSnappingTargets; // Offset: 40
    keen::uint8 maxHorizontalDistance; // Offset: 80
    keen::uint8 maxVerticalDistance; // Offset: 81
    keen::bool snapHorizontally; // Offset: 82
    keen::bool snapVertically; // Offset: 83
    keen::bool aboveAdjacent; // Offset: 84
    keen::bool aboveEnclosing; // Offset: 85
    keen::bool belowAdjacent; // Offset: 86
    keen::bool belowEnclosing; // Offset: 87
    keen::bool directionalHorizontalSnapping; // Offset: 88
    keen::bool sideAdjacent; // Offset: 89
    keen::bool sideEnclosing; // Offset: 90
    keen::bool lenghtwiseAdjacent; // Offset: 91
    keen::bool lenghtwiseEnclosing; // Offset: 92
    keen::bool crosswiseAdjacent; // Offset: 93
    keen::bool crosswiseEnclosing; // Offset: 94
    keen::DsString debugName; // Offset: 96
};

struct VoxelBlueprintMaterial {
    keen::ObjectReference<keen::ds::ItemInfo> materialItem; // Offset: 0
};

struct VoxelBlueprintConfigSnapping {
    keen::DsArray<keen::ds::VoxelSnappingRule> rules; // Offset: 0
};

struct VoxelBlueprintMaterialPool {
    keen::ds::EquipmentSlot equipmentSlot; // Offset: 0
    keen::ds::VoxelBlueprintMaterialPoolId poolId; // Offset: 4
    keen::DsArray<keen::ds::ItemId> materials; // Offset: 8
    keen::DsString debugName; // Offset: 48
};

struct VoxelBlueprintConfig {
    keen::ds::VoxelBlueprintConfigSnapping snappingConfig; // Offset: 0
    keen::DsString debugName; // Offset: 40
};

struct VoxelBlueprintRegistryFolder {
};

struct VoxelBlueprintMaterialPoolRegistryFolder {
};

struct VoxelBlueprintMaterialPoolRegistryResource {
    keen::DsArray<keen::ds::VoxelBlueprintMaterialPool> materialPools; // Offset: 0
};

typedef keen::VoxelScatterImageMode VoxelScatterImageMode;

typedef keen::VoxelScatterImageContentPass VoxelScatterImageContentPass;

struct AbstractScatterImage {
};

struct VoxelScatterImage {
    keen::ObjectReference<keen::ds::Scene> scene; // Offset: 0
    keen::ds::VoxelScatterImageContentPass contentPass; // Offset: 16
    keen::uint32 upscaleFactor; // Offset: 20
    keen::ds::VoxelScatterImageMode mode; // Offset: 24
    keen::float32 referenceHeight; // Offset: 28
    keen::ObjectReference<keen::ds::SolidVoxelMaterial> referenceMaterial; // Offset: 32
};

typedef keen::ecs::GameSettingsVersion ecs.GameSettingsVersion;

struct ecs.GameSettingsPresetConfig {
    keen::ds::ecs::GameSettingsPreset presetId; // Offset: 0
    keen::ds::ecs::GameSettings settings; // Offset: 8
};

struct GameSettingsPresetsResource {
    keen::ds::ecs::GameSettings minValues; // Offset: 0
    keen::ds::ecs::GameSettings maxValues; // Offset: 128
    keen::DsArray<keen::ds::ecs::GameSettingsPresetConfig> presets; // Offset: 256
};

typedef keen::G38TestState G38TestState;

struct G38TestResult {
    keen::ds::string name; // Offset: 0
    keen::ds::string program; // Offset: 40
    keen::Time duration; // Offset: 80
    keen::ErrorId error; // Offset: 88
};

struct G38TestSummary {
    keen::uint32 count; // Offset: 0
    keen::uint32 failed; // Offset: 4
};

struct G38TestReport {
    keen::CalendarTimeStamp date; // Offset: 0
    keen::ds::G38TestSummary summary; // Offset: 8
    keen::DsArray<keen::ds::G38TestResult> testResults; // Offset: 16
};

typedef keen::ds::LocaTagReference UiLocaTagReference;

struct FbUiLocaCraftingWorkshops {
    keen::ds::UiLocaTagReference player; // Offset: 0
    keen::ds::UiLocaTagReference alchemist; // Offset: 16
    keen::ds::UiLocaTagReference blacksmith; // Offset: 32
    keen::ds::UiLocaTagReference carpenter; // Offset: 48
    keen::ds::UiLocaTagReference workbench; // Offset: 64
    keen::ds::UiLocaTagReference grindingWheel; // Offset: 80
    keen::ds::UiLocaTagReference oven; // Offset: 96
    keen::ds::UiLocaTagReference campfireBarbecue; // Offset: 112
    keen::ds::UiLocaTagReference anvil; // Offset: 128
    keen::ds::UiLocaTagReference distillery; // Offset: 144
    keen::ds::UiLocaTagReference furnace; // Offset: 160
    keen::ds::UiLocaTagReference mortar; // Offset: 176
    keen::ds::UiLocaTagReference sketches; // Offset: 192
    keen::ds::UiLocaTagReference flameAltar; // Offset: 208
};

struct FbUiLocaCraftingCategories {
    keen::ds::UiLocaTagReference untaggedRecipeSet; // Offset: 0
    keen::ds::UiLocaTagReference customization; // Offset: 16
    keen::ds::UiLocaTagReference equipment; // Offset: 32
    keen::ds::UiLocaTagReference weapons; // Offset: 48
    keen::ds::UiLocaTagReference tools; // Offset: 64
    keen::ds::UiLocaTagReference buildTools; // Offset: 80
    keen::ds::UiLocaTagReference consumables; // Offset: 96
    keen::ds::UiLocaTagReference ammunition; // Offset: 112
    keen::ds::UiLocaTagReference materials; // Offset: 128
    keen::ds::UiLocaTagReference blueprints; // Offset: 144
    keen::ds::UiLocaTagReference currency; // Offset: 160
    keen::ds::UiLocaTagReference collectible; // Offset: 176
    keen::ds::UiLocaTagReference genericItem; // Offset: 192
};

struct FbUiLocaCrafting {
    keen::ds::FbUiLocaCraftingWorkshops workshops; // Offset: 0
    keen::ds::FbUiLocaCraftingCategories categories; // Offset: 224
    keen::ds::UiLocaTagReference browserPinned; // Offset: 432
    keen::ds::UiLocaTagReference toggleDirectoryFilter; // Offset: 448
    keen::ds::UiLocaTagReference itemViewerNoRecipeHint; // Offset: 464
    keen::ds::UiLocaTagReference requirementHeader; // Offset: 480
    keen::ds::UiLocaTagReference ingredientsHeader; // Offset: 496
    keen::ds::UiLocaTagReference emptyMenuHintShort; // Offset: 512
    keen::ds::UiLocaTagReference emptyMenuHintLong; // Offset: 528
    keen::ds::UiLocaTagReference automatedCraftingStatusWaiting; // Offset: 544
    keen::ds::UiLocaTagReference automatedCraftingStatusRunning; // Offset: 560
    keen::ds::UiLocaTagReference automatedCraftingStatusPaused; // Offset: 576
    keen::ds::UiLocaTagReference automatedCraftingInsufficientMaterials; // Offset: 592
    keen::ds::UiLocaTagReference automatedCraftingAmountCraftableStacks; // Offset: 608
    keen::ds::UiLocaTagReference automatedCraftingStart; // Offset: 624
    keen::ds::UiLocaTagReference automatedCraftingResume; // Offset: 640
    keen::ds::UiLocaTagReference automatedCraftingStop; // Offset: 656
    keen::ds::UiLocaTagReference automatedCraftingStopUnavailable; // Offset: 672
    keen::ds::UiLocaTagReference automatedCraftingPaused; // Offset: 688
    keen::ds::UiLocaTagReference automatedCraftingIdle; // Offset: 704
    keen::ds::UiLocaTagReference automatedCraftingWorking; // Offset: 720
    keen::ds::UiLocaTagReference automatedCraftingStorageFull; // Offset: 736
    keen::ds::UiLocaTagReference automatedCraftingQueued; // Offset: 752
    keen::ds::UiLocaTagReference automatedCraftingInsufficientMaterialsHint; // Offset: 768
    keen::ds::UiLocaTagReference automatedCraftingStorageFullHint; // Offset: 784
    keen::ds::UiLocaTagReference automatedCraftingSourceMaterials; // Offset: 800
    keen::ds::UiLocaTagReference changeRecipeHint; // Offset: 816
    keen::ds::UiLocaTagReference factoryNoRecipesAvailable; // Offset: 832
    keen::ds::UiLocaTagReference factoryMagicChestNoRecipesAvailable; // Offset: 848
    keen::ds::UiLocaTagReference factoryShowCurrentProduction; // Offset: 864
    keen::ds::UiLocaTagReference craftingItemInInventory; // Offset: 880
    keen::ds::UiLocaTagReference noUpgradableItems; // Offset: 896
    keen::ds::UiLocaTagReference noIngredientMissing; // Offset: 912
    keen::ds::UiLocaTagReference ingredientsMissing; // Offset: 928
    keen::ds::UiLocaTagReference ingredientsNeeds; // Offset: 944
    keen::ds::UiLocaTagReference availableOutputs; // Offset: 960
    keen::ds::UiLocaTagReference selected; // Offset: 976
    keen::ds::UiLocaTagReference recipeViewerTabIngredients; // Offset: 992
    keen::ds::UiLocaTagReference recipeViewerTabRecipe; // Offset: 1008
    keen::ds::UiLocaTagReference recipeViewerTabItem; // Offset: 1024
};

struct FbUiLocaItemEquipmentSlots {
    keen::ds::UiLocaTagReference armourHead; // Offset: 0
    keen::ds::UiLocaTagReference armourUpperBody; // Offset: 16
    keen::ds::UiLocaTagReference armourArms; // Offset: 32
    keen::ds::UiLocaTagReference armourLowerBody; // Offset: 48
    keen::ds::UiLocaTagReference armourFeet; // Offset: 64
    keen::ds::UiLocaTagReference armourAccessory; // Offset: 80
    keen::ds::UiLocaTagReference armourRing; // Offset: 96
    keen::ds::UiLocaTagReference armourShield; // Offset: 112
    keen::ds::UiLocaTagReference vanityHead; // Offset: 128
    keen::ds::UiLocaTagReference vanityUpperBody; // Offset: 144
    keen::ds::UiLocaTagReference vanityArms; // Offset: 160
    keen::ds::UiLocaTagReference vanityLowerBody; // Offset: 176
    keen::ds::UiLocaTagReference vanityFeet; // Offset: 192
    keen::ds::UiLocaTagReference hookshot; // Offset: 208
    keen::ds::UiLocaTagReference glider; // Offset: 224
    keen::ds::UiLocaTagReference meleeWeapon; // Offset: 240
    keen::ds::UiLocaTagReference midRangeWeapon; // Offset: 256
    keen::ds::UiLocaTagReference rangedWeapon; // Offset: 272
    keen::ds::UiLocaTagReference arrow; // Offset: 288
    keen::ds::UiLocaTagReference spell; // Offset: 304
    keen::ds::UiLocaTagReference backpackExtender; // Offset: 320
};

struct FbUiLocaPunctuations {
    keen::ds::LocaTag plusSign; // Offset: 0
    keen::ds::LocaTag minusSign; // Offset: 80
    keen::ds::LocaTag multiplySign; // Offset: 160
    keen::ds::UiLocaTagReference decimalSeparator; // Offset: 240
    keen::ds::UiLocaTagReference thousandsSeparator; // Offset: 256
    keen::ds::LocaTag exclamationMark; // Offset: 272
    keen::ds::LocaTag questionMark; // Offset: 352
    keen::ds::LocaTag questionMarkTriple; // Offset: 432
    keen::ds::LocaTag bulletDot; // Offset: 512
    keen::ds::LocaTag emDash; // Offset: 592
    keen::ds::UiLocaTagReference action1AndAction2; // Offset: 672
};

struct FbUiLocaGeneric {
    keen::ds::UiLocaTagReference timeUnitsAbbreviations; // Offset: 0
    keen::ds::UiLocaTagReference milliseconds; // Offset: 16
    keen::ds::UiLocaTagReference inactiveState; // Offset: 32
};

struct FbUiLocaInput {
    keen::ds::UiLocaTagReference unassigned; // Offset: 0
    keen::ds::UiLocaTagReference invalidStick; // Offset: 16
    keen::ds::UiLocaTagReference leftMouseButton; // Offset: 32
    keen::ds::UiLocaTagReference rightMouseButton; // Offset: 48
    keen::ds::UiLocaTagReference middleMouseButton; // Offset: 64
    keen::ds::UiLocaTagReference mouse4; // Offset: 80
    keen::ds::UiLocaTagReference mouse5; // Offset: 96
    keen::ds::UiLocaTagReference mouseWheelLeft; // Offset: 112
    keen::ds::UiLocaTagReference mouseWheelRight; // Offset: 128
    keen::ds::UiLocaTagReference mouseWheelUp; // Offset: 144
    keen::ds::UiLocaTagReference mouseWheelDown; // Offset: 160
    keen::ds::UiLocaTagReference mouseMoveLeft; // Offset: 176
    keen::ds::UiLocaTagReference mouseMoveRight; // Offset: 192
    keen::ds::UiLocaTagReference mouseMoveUp; // Offset: 208
    keen::ds::UiLocaTagReference mouseMoveDown; // Offset: 224
};

struct FbUiLocaAttributeInfo {
    keen::ds::UiLocaTagReference label; // Offset: 0
    keen::ds::UiLocaTagReference alternativeLabel; // Offset: 16
    keen::ds::UiLocaTagReference tooltip; // Offset: 32
    keen::float32 impliedBaseMultiplier; // Offset: 48
    keen::float32 relativeToValue; // Offset: 52
};

struct FbUiLocaAttributes {
    keen::ds::UiLocaTagReference attributeMenuHeader; // Offset: 0
    keen::ds::UiLocaTagReference subTabBasics; // Offset: 16
    keen::ds::UiLocaTagReference groupFoundation; // Offset: 32
    keen::ds::UiLocaTagReference groupPrimary; // Offset: 48
    keen::ds::UiLocaTagReference groupSecondary; // Offset: 64
    keen::ds::UiLocaTagReference groupVital; // Offset: 80
    keen::ds::UiLocaTagReference groupCombat; // Offset: 96
    keen::ds::UiLocaTagReference groupFogSurvival; // Offset: 112
    keen::ds::UiLocaTagReference groupMain; // Offset: 128
    keen::ds::UiLocaTagReference groupRegeneration; // Offset: 144
    keen::ds::UiLocaTagReference groupProtection; // Offset: 160
    keen::ds::UiLocaTagReference groupMovement; // Offset: 176
    keen::ds::UiLocaTagReference groupDamage; // Offset: 192
    keen::ds::UiLocaTagReference groupWeaponDamage; // Offset: 208
    keen::ds::UiLocaTagReference groupEnemyDamage; // Offset: 224
    keen::ds::UiLocaTagReference groupMisc; // Offset: 240
    keen::ds::UiLocaTagReference valueExplainer; // Offset: 256
    keen::ds::UiLocaTagReference valueExplainerWithBuff; // Offset: 272
    keen::ds::FbUiLocaAttributeInfo health; // Offset: 288
    keen::ds::FbUiLocaAttributeInfo mana; // Offset: 344
    keen::ds::FbUiLocaAttributeInfo stamina; // Offset: 400
    keen::ds::FbUiLocaAttributeInfo fogResistance; // Offset: 456
    keen::ds::FbUiLocaAttributeInfo fogResistanceDuration; // Offset: 512
    keen::ds::FbUiLocaAttributeInfo fogResistanceDurationMax; // Offset: 568
    keen::ds::FbUiLocaAttributeInfo freezeResistance; // Offset: 624
    keen::ds::FbUiLocaAttributeInfo bodyHeat; // Offset: 680
    keen::ds::FbUiLocaAttributeInfo strength; // Offset: 736
    keen::ds::FbUiLocaAttributeInfo dexterity; // Offset: 792
    keen::ds::FbUiLocaAttributeInfo intelligence; // Offset: 848
    keen::ds::FbUiLocaAttributeInfo constitution; // Offset: 904
    keen::ds::FbUiLocaAttributeInfo endurance; // Offset: 960
    keen::ds::FbUiLocaAttributeInfo spirit; // Offset: 1016
    keen::ds::FbUiLocaAttributeInfo healthRegeneration; // Offset: 1072
    keen::ds::FbUiLocaAttributeInfo healthRegenerationDelay; // Offset: 1128
    keen::ds::FbUiLocaAttributeInfo manaRegeneration; // Offset: 1184
    keen::ds::FbUiLocaAttributeInfo manaRegenerationDelay; // Offset: 1240
    keen::ds::FbUiLocaAttributeInfo staminaRegeneration; // Offset: 1296
    keen::ds::FbUiLocaAttributeInfo staminaRegenerationDelay; // Offset: 1352
    keen::ds::FbUiLocaAttributeInfo bodyHeatRegeneration; // Offset: 1408
    keen::ds::FbUiLocaAttributeInfo bodyHeatRegenerationDelay; // Offset: 1464
    keen::ds::FbUiLocaAttributeInfo baseMovementSpeed; // Offset: 1520
    keen::ds::FbUiLocaAttributeInfo sprintMovementSpeed; // Offset: 1576
    keen::ds::FbUiLocaAttributeInfo sneakMovementSpeed; // Offset: 1632
    keen::ds::FbUiLocaAttributeInfo critChanceMelee; // Offset: 1688
    keen::ds::FbUiLocaAttributeInfo critChanceMagical; // Offset: 1744
    keen::ds::FbUiLocaAttributeInfo critChanceRanged; // Offset: 1800
    keen::ds::FbUiLocaAttributeInfo skillShotDamage; // Offset: 1856
    keen::ds::FbUiLocaAttributeInfo staffDamage; // Offset: 1912
    keen::ds::FbUiLocaAttributeInfo wandDamage; // Offset: 1968
    keen::ds::FbUiLocaAttributeInfo oneHandDamage; // Offset: 2024
    keen::ds::FbUiLocaAttributeInfo daggerDamage; // Offset: 2080
    keen::ds::FbUiLocaAttributeInfo twoHandDamage; // Offset: 2136
    keen::ds::FbUiLocaAttributeInfo bowDamage; // Offset: 2192
    keen::ds::FbUiLocaAttributeInfo throwableDamage; // Offset: 2248
    keen::ds::FbUiLocaAttributeInfo unarmedDamage; // Offset: 2304
    keen::ds::FbUiLocaAttributeInfo foeMagicalDamage; // Offset: 2360
    keen::ds::FbUiLocaAttributeInfo foeMeleeDamage; // Offset: 2416
    keen::ds::FbUiLocaAttributeInfo foeRangedDamage; // Offset: 2472
    keen::ds::FbUiLocaAttributeInfo foeFlyingDamage; // Offset: 2528
    keen::ds::FbUiLocaAttributeInfo foeSkeletonDamage; // Offset: 2584
    keen::ds::FbUiLocaAttributeInfo healing; // Offset: 2640
    keen::ds::FbUiLocaAttributeInfo reviveDuration; // Offset: 2696
    keen::ds::FbUiLocaAttributeInfo reviveHealth; // Offset: 2752
    keen::ds::FbUiLocaAttributeInfo lifeSteal; // Offset: 2808
    keen::ds::FbUiLocaAttributeInfo restedDurationBonus; // Offset: 2864
    keen::ds::FbUiLocaAttributeInfo offenseBackstab; // Offset: 2920
    keen::ds::FbUiLocaAttributeInfo offenseCritical; // Offset: 2976
    keen::ds::FbUiLocaAttributeInfo offenseCritChance; // Offset: 3032
    keen::ds::FbUiLocaAttributeInfo damageMelee; // Offset: 3088
    keen::ds::FbUiLocaAttributeInfo damageSpell; // Offset: 3144
    keen::ds::FbUiLocaAttributeInfo damageRanged; // Offset: 3200
    keen::ds::FbUiLocaAttributeInfo blockAttribute; // Offset: 3256
    keen::ds::FbUiLocaAttributeInfo parryAttribute; // Offset: 3312
    keen::ds::FbUiLocaAttributeInfo resistancePhysical; // Offset: 3368
    keen::ds::FbUiLocaAttributeInfo resistancePhysicalCut; // Offset: 3424
    keen::ds::FbUiLocaAttributeInfo resistancePhysicalPierce; // Offset: 3480
    keen::ds::FbUiLocaAttributeInfo resistancePhysicalBlunt; // Offset: 3536
    keen::ds::FbUiLocaAttributeInfo resistanceMagical; // Offset: 3592
    keen::ds::FbUiLocaAttributeInfo resistanceMagicalFire; // Offset: 3648
    keen::ds::FbUiLocaAttributeInfo resistanceMagicalIce; // Offset: 3704
    keen::ds::FbUiLocaAttributeInfo resistanceMagicalFog; // Offset: 3760
    keen::ds::FbUiLocaAttributeInfo resistanceMagicalLightning; // Offset: 3816
    keen::ds::FbUiLocaAttributeInfo poisonSusceptibility; // Offset: 3872
    keen::ds::FbUiLocaAttributeInfo sneakAttack; // Offset: 3928
    keen::ds::FbUiLocaAttributeInfo mercilessAttack; // Offset: 3984
    keen::ds::FbUiLocaAttributeInfo ambushAttack; // Offset: 4040
    keen::ds::UiLocaTagReference numberExplanation; // Offset: 4096
};

struct FbUiLocaPerkAttributes {
    keen::ds::UiLocaTagReference damagePhysicalCut; // Offset: 0
    keen::ds::UiLocaTagReference damagePhysicalPierce; // Offset: 16
    keen::ds::UiLocaTagReference damagePhysicalBlunt; // Offset: 32
    keen::ds::UiLocaTagReference damagePoison; // Offset: 48
    keen::ds::UiLocaTagReference damageMagicalFire; // Offset: 64
    keen::ds::UiLocaTagReference damageMagicalIce; // Offset: 80
    keen::ds::UiLocaTagReference damageMagicalFog; // Offset: 96
    keen::ds::UiLocaTagReference damageMagicalLightning; // Offset: 112
    keen::ds::UiLocaTagReference resistancePhysicalCut; // Offset: 128
    keen::ds::UiLocaTagReference resistancePhysicalPierce; // Offset: 144
    keen::ds::UiLocaTagReference resistancePhysicalBlunt; // Offset: 160
    keen::ds::UiLocaTagReference resistanceMagicalFire; // Offset: 176
    keen::ds::UiLocaTagReference resistanceMagicalIce; // Offset: 192
    keen::ds::UiLocaTagReference resistanceMagicalFog; // Offset: 208
    keen::ds::UiLocaTagReference resistanceMagicalLightning; // Offset: 224
};

struct FbUiNpcNames {
    keen::ds::UiLocaTagReference flame; // Offset: 0
    keen::ds::UiLocaTagReference alchemist; // Offset: 16
    keen::ds::UiLocaTagReference blacksmith; // Offset: 32
    keen::ds::UiLocaTagReference hunter; // Offset: 48
    keen::ds::UiLocaTagReference farmer; // Offset: 64
    keen::ds::UiLocaTagReference carpenter; // Offset: 80
    keen::ds::UiLocaTagReference cryptKeeper; // Offset: 96
    keen::ds::UiLocaTagReference bard; // Offset: 112
};

struct FbUiLocaRpgTerms {
    keen::ds::FbUiNpcNames npcNames; // Offset: 0
    keen::ds::UiLocaTagReference entityLevel; // Offset: 128
    keen::ds::UiLocaTagReference genericLevelWithArgument; // Offset: 144
    keen::ds::UiLocaTagReference characterLevel; // Offset: 160
    keen::ds::UiLocaTagReference experiencePoints; // Offset: 176
    keen::ds::UiLocaTagReference experiencePointsShort; // Offset: 192
    keen::ds::UiLocaTagReference experiencePointsRequired; // Offset: 208
    keen::ds::FbUiLocaAttributes attributes; // Offset: 224
    keen::ds::FbUiLocaPerkAttributes perkAttributes; // Offset: 4336
    keen::ds::UiLocaTagReference durabilityGeneric; // Offset: 4576
    keen::ds::UiLocaTagReference damagePhysicalCut; // Offset: 4592
    keen::ds::UiLocaTagReference damagePhysicalPierce; // Offset: 4608
    keen::ds::UiLocaTagReference damagePhysicalBlunt; // Offset: 4624
    keen::ds::UiLocaTagReference damageMagicalFire; // Offset: 4640
    keen::ds::UiLocaTagReference damageMagicalIce; // Offset: 4656
    keen::ds::UiLocaTagReference damageMagicalFog; // Offset: 4672
    keen::ds::UiLocaTagReference damageMagicalLightning; // Offset: 4688
    keen::ds::UiLocaTagReference damageHealing; // Offset: 4704
    keen::ds::UiLocaTagReference damagePoison; // Offset: 4720
    keen::ds::UiLocaTagReference bowDamageBase; // Offset: 4736
    keen::ds::UiLocaTagReference bowDamageNoBonus; // Offset: 4752
    keen::ds::UiLocaTagReference bowDamagePhysicalCut; // Offset: 4768
    keen::ds::UiLocaTagReference bowDamagePhysicalPierce; // Offset: 4784
    keen::ds::UiLocaTagReference bowDamagePhysicalBlunt; // Offset: 4800
    keen::ds::UiLocaTagReference bowDamageMagicalFire; // Offset: 4816
    keen::ds::UiLocaTagReference bowDamageMagicalIce; // Offset: 4832
    keen::ds::UiLocaTagReference bowDamageMagicalFog; // Offset: 4848
    keen::ds::UiLocaTagReference bowDamageMagicalLightning; // Offset: 4864
    keen::ds::UiLocaTagReference bowDamageHealing; // Offset: 4880
    keen::ds::UiLocaTagReference bowDamagePoison; // Offset: 4896
    keen::ds::UiLocaTagReference armorResistanceCutShort; // Offset: 4912
    keen::ds::UiLocaTagReference armorResistancePierceShort; // Offset: 4928
    keen::ds::UiLocaTagReference armorResistanceBluntShort; // Offset: 4944
    keen::ds::UiLocaTagReference armorResistanceFireShort; // Offset: 4960
    keen::ds::UiLocaTagReference armorResistanceIceShort; // Offset: 4976
    keen::ds::UiLocaTagReference armorResistanceFogShort; // Offset: 4992
    keen::ds::UiLocaTagReference armorResistanceLightningShort; // Offset: 5008
    keen::ds::UiLocaTagReference rarityUndefined; // Offset: 5024
    keen::ds::UiLocaTagReference rarityCommon; // Offset: 5040
    keen::ds::UiLocaTagReference rarityUncommon; // Offset: 5056
    keen::ds::UiLocaTagReference rarityRare; // Offset: 5072
    keen::ds::UiLocaTagReference rarityEpic; // Offset: 5088
    keen::ds::UiLocaTagReference rarityLegendary; // Offset: 5104
    keen::ds::UiLocaTagReference rarityVanity; // Offset: 5120
    keen::ds::UiLocaTagReference restedBuffNone; // Offset: 5136
    keen::ds::UiLocaTagReference restedBuffCharging; // Offset: 5152
    keen::ds::UiLocaTagReference restedBuffActive; // Offset: 5168
    keen::ds::UiLocaTagReference restedBuffGenericDescription; // Offset: 5184
    keen::ds::UiLocaTagReference comfortLevel; // Offset: 5200
    keen::ds::UiLocaTagReference comfort; // Offset: 5216
    keen::ds::UiLocaTagReference statusSitting; // Offset: 5232
    keen::ds::UiLocaTagReference statusSheltered; // Offset: 5248
    keen::ds::UiLocaTagReference statusSleeping; // Offset: 5264
    keen::ds::UiLocaTagReference statusInCombat; // Offset: 5280
    keen::ds::UiLocaTagReference statusWarmth; // Offset: 5296
    keen::ds::UiLocaTagReference statusShelteredBed; // Offset: 5312
    keen::ds::UiLocaTagReference statusSittingDesc; // Offset: 5328
    keen::ds::UiLocaTagReference statusShelteredDesc; // Offset: 5344
    keen::ds::UiLocaTagReference statusSleepingDesc; // Offset: 5360
    keen::ds::UiLocaTagReference statusWarmthDesc; // Offset: 5376
    keen::ds::UiLocaTagReference statusSittingNot; // Offset: 5392
    keen::ds::UiLocaTagReference statusShelteredNot; // Offset: 5408
    keen::ds::UiLocaTagReference statusInCombatNot; // Offset: 5424
    keen::ds::UiLocaTagReference statusWarmthNot; // Offset: 5440
    keen::ds::UiLocaTagReference foodTypeAlreadyActive; // Offset: 5456
    keen::ds::UiLocaTagReference foodSlotsAllOccupied; // Offset: 5472
    keen::ds::UiLocaTagReference npcProps; // Offset: 5488
    keen::ds::UiLocaTagReference npcUndiscoveredName; // Offset: 5504
    keen::ds::UiLocaTagReference npcUndiscoveredDescription; // Offset: 5520
};

struct FbUiLocaHudBuildFeedback {
    keen::ds::UiLocaTagReference cursorOutsideBuildZone; // Offset: 0
    keen::ds::UiLocaTagReference cursorInsideFogZone; // Offset: 16
    keen::ds::UiLocaTagReference cursorTooFarAway; // Offset: 32
    keen::ds::UiLocaTagReference cursorInsideLenientBuildInhibitor; // Offset: 48
    keen::ds::UiLocaTagReference cursorInsideStrictBuildInhibitor; // Offset: 64
    keen::ds::UiLocaTagReference maxAltarCountReached; // Offset: 80
    keen::ds::UiLocaTagReference maxAltarCountUpgradeHint; // Offset: 96
    keen::ds::UiLocaTagReference maxAltarCountLimitHint; // Offset: 112
    keen::ds::UiLocaTagReference maxTameAnimalCountReached; // Offset: 128
    keen::ds::UiLocaTagReference enemiesNearby; // Offset: 144
    keen::ds::UiLocaTagReference areaOccupied; // Offset: 160
    keen::ds::UiLocaTagReference invalidSurfaceNormal; // Offset: 176
    keen::ds::UiLocaTagReference invalidCursorVoxelMaterial; // Offset: 192
    keen::ds::UiLocaTagReference missingMaterials; // Offset: 208
    keen::ds::UiLocaTagReference noPermission; // Offset: 224
    keen::ds::UiLocaTagReference assignNpcToBed; // Offset: 240
    keen::ds::UiLocaTagReference hintNpcNotPlaced; // Offset: 256
    keen::ds::UiLocaTagReference bedUnoccupied; // Offset: 272
    keen::ds::UiLocaTagReference bedOccupiedBy; // Offset: 288
    keen::ds::UiLocaTagReference bedTooFarAway; // Offset: 304
    keen::ds::UiLocaTagReference useStaffToAssignBed; // Offset: 320
};

struct FbUiLocaHudItemUseMessages {
    keen::ds::UiLocaTagReference hookshotUseFail; // Offset: 0
    keen::ds::UiLocaTagReference doorOpenFail; // Offset: 16
    keen::ds::UiLocaTagReference gliderUseFail; // Offset: 32
    keen::ds::UiLocaTagReference gliderUseHint; // Offset: 48
    keen::ds::UiLocaTagReference itemMovedToEquipmentSlotByUsing; // Offset: 64
    keen::ds::UiLocaTagReference itemFailedInsufficientStamina; // Offset: 80
};

struct FbUiLocaHitEventLabels {
    keen::ds::UiLocaTagReference crit; // Offset: 0
    keen::ds::UiLocaTagReference backstab; // Offset: 16
    keen::ds::UiLocaTagReference weakspot; // Offset: 32
    keen::ds::UiLocaTagReference immune; // Offset: 48
    keen::ds::UiLocaTagReference ineffective; // Offset: 64
    keen::ds::UiLocaTagReference resist; // Offset: 80
};

struct FbUiLocaTutorialHints {
    keen::ds::UiLocaTagReference quickbuilderMaterialHint; // Offset: 0
    keen::ds::UiLocaTagReference quickbuilderShapeHint; // Offset: 16
    keen::ds::UiLocaTagReference quickbuilderTabsHint; // Offset: 32
    keen::ds::UiLocaTagReference quickbuilderShapeSelectionHint; // Offset: 48
    keen::ds::UiLocaTagReference cookingTutorialHint; // Offset: 64
    keen::ds::UiLocaTagReference craftingRecipeList; // Offset: 80
    keen::ds::UiLocaTagReference craftingRecipeCategories; // Offset: 96
    keen::ds::UiLocaTagReference craftingRecipeSeries; // Offset: 112
    keen::ds::UiLocaTagReference craftingIngredients; // Offset: 128
    keen::ds::UiLocaTagReference craftingPinRecipe; // Offset: 144
    keen::ds::UiLocaTagReference craftingTabs; // Offset: 160
    keen::ds::UiLocaTagReference npcCraftingTabs; // Offset: 176
    keen::ds::UiLocaTagReference enhancingItemList; // Offset: 192
    keen::ds::UiLocaTagReference enhancingPerks; // Offset: 208
    keen::ds::UiLocaTagReference enhancingCurrency; // Offset: 224
    keen::ds::UiLocaTagReference factoryInventory; // Offset: 240
    keen::ds::UiLocaTagReference factoryRecipes; // Offset: 256
    keen::ds::UiLocaTagReference factoryFillIngredients; // Offset: 272
    keen::ds::UiLocaTagReference factoryInputHints; // Offset: 288
    keen::ds::UiLocaTagReference factoryStart; // Offset: 304
    keen::ds::UiLocaTagReference actionbarTutorial1; // Offset: 320
    keen::ds::UiLocaTagReference actionbarTutorial2; // Offset: 336
    keen::ds::UiLocaTagReference summoningStaffTutorialNpcTypes; // Offset: 352
    keen::ds::UiLocaTagReference summoningStaffTutorialPlacing; // Offset: 368
    keen::ds::UiLocaTagReference summoningStaffRoamingRange; // Offset: 384
    keen::ds::UiLocaTagReference flameUpgradeHappyNpc; // Offset: 400
    keen::ds::UiLocaTagReference nextHint; // Offset: 416
};

struct FbUiLocaHudXpSources {
    keen::ds::UiLocaTagReference xpSourceQuest; // Offset: 0
    keen::ds::UiLocaTagReference xpSourceCombat; // Offset: 16
    keen::ds::UiLocaTagReference xpSourceLore; // Offset: 32
    keen::ds::UiLocaTagReference xpSourceExploration; // Offset: 48
    keen::ds::UiLocaTagReference xpSourceMining; // Offset: 64
};

struct FbUiLocaHudHappinessDialog {
    keen::ds::UiLocaTagReference missingBedDialogText; // Offset: 0
    keen::ds::UiLocaTagReference missingBedDialogLabel; // Offset: 16
    keen::ds::UiLocaTagReference missingShelterDialogText; // Offset: 32
    keen::ds::UiLocaTagReference missingShelterDialogLabel; // Offset: 48
    keen::ds::UiLocaTagReference missingFoodDialogText; // Offset: 64
    keen::ds::UiLocaTagReference missingFoodDialogLabel; // Offset: 80
};

struct FbUiLocaHudTemperature {
    keen::ds::UiLocaTagReference resistanceBuffLabel; // Offset: 0
    keen::ds::UiLocaTagReference resistanceLowWarning; // Offset: 16
    keen::ds::UiLocaTagReference deadlyDebuffLabel; // Offset: 32
    keen::ds::UiLocaTagReference deadlyDebuffWarning; // Offset: 48
};

struct FbUiLocaHud {
    keen::ds::FbUiLocaHudBuildFeedback buildFeedback; // Offset: 0
    keen::ds::FbUiLocaHudItemUseMessages itemUseMessages; // Offset: 336
    keen::ds::FbUiLocaHitEventLabels hitEventLabels; // Offset: 432
    keen::ds::FbUiLocaTutorialHints tutorialHints; // Offset: 528
    keen::ds::FbUiLocaHudXpSources xpSources; // Offset: 960
    keen::ds::FbUiLocaHudHappinessDialog missingHappinessDialogOptions; // Offset: 1040
    keen::ds::UiLocaTagReference nightSpeed; // Offset: 1136
    keen::ds::FbUiLocaHudTemperature freezing; // Offset: 1152
    keen::ds::FbUiLocaHudTemperature extremeHeat; // Offset: 1216
    keen::ds::UiLocaTagReference gameProgressSummaryTitle; // Offset: 1280
    keen::ds::UiLocaTagReference ammoLabelNoneEquipped; // Offset: 1296
    keen::ds::UiLocaTagReference quickBuilderPreUseHint; // Offset: 1312
    keen::ds::UiLocaTagReference buildTooltipQuickBuilderInit; // Offset: 1328
    keen::ds::UiLocaTagReference buildTooltipChangeBlueprint; // Offset: 1344
    keen::ds::UiLocaTagReference buildTooltipChangeShovelAction; // Offset: 1360
    keen::ds::UiLocaTagReference buildTooltipChangeNpc; // Offset: 1376
    keen::ds::UiLocaTagReference buildTooltipChangeMaterial; // Offset: 1392
    keen::ds::UiLocaTagReference buildTooltipRotate90; // Offset: 1408
    keen::ds::UiLocaTagReference buildTooltipRotate; // Offset: 1424
    keen::ds::UiLocaTagReference buildTooltipAreaActions; // Offset: 1440
    keen::ds::UiLocaTagReference buildTooltipUseSnapping; // Offset: 1456
    keen::ds::UiLocaTagReference cursorHintSnappingActive; // Offset: 1472
    keen::ds::UiLocaTagReference cursorHintSnappingReady; // Offset: 1488
    keen::ds::UiLocaTagReference cursorHintSnappingOff; // Offset: 1504
    keen::ds::UiLocaTagReference buildTooltipMultiToolMaterialHeader; // Offset: 1520
    keen::ds::UiLocaTagReference buildTooltipMultiToolMaterialActionLabel; // Offset: 1536
    keen::ds::UiLocaTagReference leaveNpcConversation; // Offset: 1552
    keen::ds::UiLocaTagReference messageFastTravelUnlock; // Offset: 1568
    keen::ds::UiLocaTagReference messageNpcFound; // Offset: 1584
    keen::ds::UiLocaTagReference messageSpecialLootAcquired; // Offset: 1600
    keen::ds::UiLocaTagReference messageLevelUp; // Offset: 1616
    keen::ds::UiLocaTagReference messageFlameLevelUp; // Offset: 1632
    keen::ds::UiLocaTagReference messageAllItemsRepaired; // Offset: 1648
    keen::ds::UiLocaTagReference messagePinnedRecipeReady; // Offset: 1664
    keen::ds::UiLocaTagReference messageMagicBarrierUnlocked; // Offset: 1680
    keen::ds::UiLocaTagReference messageDoorUnlocked; // Offset: 1696
    keen::ds::UiLocaTagReference messageSecretDoorUnlocked; // Offset: 1712
    keen::ds::UiLocaTagReference messageNewTwitchDropUnlocked; // Offset: 1728
    keen::ds::UiLocaTagReference knowledgeNotificationGeneral; // Offset: 1744
    keen::ds::UiLocaTagReference knowledgeNotificationMap; // Offset: 1760
    keen::ds::UiLocaTagReference knowledgeNotificationJournal; // Offset: 1776
    keen::ds::UiLocaTagReference knowledgeNotificationNewTutorial; // Offset: 1792
    keen::ds::UiLocaTagReference knowledgeNotificationNewLoreDocument; // Offset: 1808
    keen::ds::UiLocaTagReference knowledgeNotificationNewLorePage; // Offset: 1824
    keen::ds::UiLocaTagReference knowledgeNotificationNewQuest; // Offset: 1840
    keen::ds::UiLocaTagReference knowledgeNotificationUpdatedQuest; // Offset: 1856
    keen::ds::UiLocaTagReference knowledgeNotificationJournalCompleted; // Offset: 1872
    keen::ds::UiLocaTagReference knowledgeNotificationCrafting; // Offset: 1888
    keen::ds::UiLocaTagReference knowledgeNotificationIngredientKnowledge; // Offset: 1904
    keen::ds::UiLocaTagReference knowledgeNotificationNpcDialog; // Offset: 1920
    keen::ds::UiLocaTagReference priorityJournalEntryPrompt; // Offset: 1936
    keen::ds::UiLocaTagReference priorityJournalEntryPromptNoBinding; // Offset: 1952
    keen::ds::UiLocaTagReference priorityJournalLocationReached; // Offset: 1968
    keen::ds::UiLocaTagReference interactionItemRequirementHeader; // Offset: 1984
    keen::ds::UiLocaTagReference backpackFullMessage; // Offset: 2000
    keen::ds::UiLocaTagReference storageFullMessage; // Offset: 2016
    keen::ds::UiLocaTagReference compassWaypointReached; // Offset: 2032
    keen::ds::UiLocaTagReference compassWaypointReachedAbove; // Offset: 2048
    keen::ds::UiLocaTagReference compassWaypointReachedBelow; // Offset: 2064
    keen::ds::UiLocaTagReference compassInFog; // Offset: 2080
    keen::ds::UiLocaTagReference compassInDeadlyFog; // Offset: 2096
    keen::ds::UiLocaTagReference compassEarlyFogWarning; // Offset: 2112
    keen::ds::UiLocaTagReference compassFogWarning; // Offset: 2128
    keen::ds::UiLocaTagReference staminaMax; // Offset: 2144
    keen::ds::UiLocaTagReference restedBuffConditionHeader; // Offset: 2160
    keen::ds::UiLocaTagReference markersAdded; // Offset: 2176
    keen::ds::UiLocaTagReference entriesLogged; // Offset: 2192
    keen::ds::UiLocaTagReference entriesCompleted; // Offset: 2208
    keen::ds::UiLocaTagReference oneRecipeLearned; // Offset: 2224
    keen::ds::UiLocaTagReference recipesLearned; // Offset: 2240
    keen::ds::UiLocaTagReference recipesLearnedPersonal; // Offset: 2256
    keen::ds::UiLocaTagReference readyToCraft; // Offset: 2272
    keen::ds::UiLocaTagReference readyToCraftPinned; // Offset: 2288
    keen::ds::UiLocaTagReference loading; // Offset: 2304
    keen::ds::UiLocaTagReference reviving; // Offset: 2320
    keen::ds::UiLocaTagReference beingRevived; // Offset: 2336
    keen::ds::UiLocaTagReference canBeRevived; // Offset: 2352
    keen::ds::UiLocaTagReference craftableAmount; // Offset: 2368
    keen::ds::UiLocaTagReference emptyHint; // Offset: 2384
    keen::ds::UiLocaTagReference inventoryCount; // Offset: 2400
    keen::ds::UiLocaTagReference serverPerformanceBad; // Offset: 2416
    keen::ds::UiLocaTagReference serverPerformanceBadHost; // Offset: 2432
    keen::ds::UiLocaTagReference serverPerformanceBadDesc; // Offset: 2448
    keen::ds::UiLocaTagReference serverPerformanceBadDescHost; // Offset: 2464
    keen::ds::UiLocaTagReference serverPerformanceCritical; // Offset: 2480
    keen::ds::UiLocaTagReference serverPerformanceCriticalHost; // Offset: 2496
    keen::ds::UiLocaTagReference serverPerformanceCriticalDesc; // Offset: 2512
    keen::ds::UiLocaTagReference serverPerformanceCriticalDescHost; // Offset: 2528
    keen::ds::UiLocaTagReference currentServerPerformance; // Offset: 2544
    keen::ds::UiLocaTagReference currentServerPerformanceHost; // Offset: 2560
    keen::ds::UiLocaTagReference flameUpgradeBaseLabel; // Offset: 2576
    keen::ds::UiLocaTagReference personalProgressionModeHint; // Offset: 2592
    keen::ds::UiLocaTagReference allMissedWorldQuestsCompletedMessage; // Offset: 2608
    keen::ds::UiLocaTagReference interactionNoPermission; // Offset: 2624
    keen::ds::UiLocaTagReference itemUseNoPermission; // Offset: 2640
    keen::ds::UiLocaTagReference currentSongPlayingHint; // Offset: 2656
    keen::ds::UiLocaTagReference tamingTutorialTitle; // Offset: 2672
    keen::ds::UiLocaTagReference tamingTutorialStep1; // Offset: 2688
    keen::ds::UiLocaTagReference tamingTutorialStep2; // Offset: 2704
    keen::ds::UiLocaTagReference tamingTutorialStep3; // Offset: 2720
    keen::ds::UiLocaTagReference tamingTutorialStep4; // Offset: 2736
};

struct FbUiLocaMenuFlameAltar {
    keen::ds::UiLocaTagReference menuHeader; // Offset: 0
    keen::ds::UiLocaTagReference altarLevelLabel; // Offset: 16
    keen::ds::UiLocaTagReference altarRangeLabel; // Offset: 32
    keen::ds::UiLocaTagReference motherflameLevelLabel; // Offset: 48
    keen::ds::UiLocaTagReference lastPlayed; // Offset: 64
    keen::ds::UiLocaTagReference altarRange; // Offset: 80
    keen::ds::UiLocaTagReference flameUpgradeMaxAltarCountLabel; // Offset: 96
    keen::ds::UiLocaTagReference flameUpgradeAttributeBonusLabel; // Offset: 112
    keen::ds::UiLocaTagReference flameUpgradeFogResistanceLabel; // Offset: 128
    keen::ds::UiLocaTagReference flameUpgradeFogResistanceLevel; // Offset: 144
    keen::ds::UiLocaTagReference flameUpgradeFogResistanceDuration; // Offset: 160
    keen::ds::UiLocaTagReference flameCodexDesc; // Offset: 176
    keen::ds::UiLocaTagReference flameCodexUpgradeHeader; // Offset: 192
    keen::ds::UiLocaTagReference tileAltarUpgradeMainText; // Offset: 208
    keen::ds::UiLocaTagReference tileAltarUpgradeSecondaryText; // Offset: 224
    keen::ds::UiLocaTagReference tileMotherflameUpgradeMainText; // Offset: 240
    keen::ds::UiLocaTagReference tileMotherflameUpgradeSecondaryText; // Offset: 256
    keen::ds::UiLocaTagReference tileReviveNpcMainText; // Offset: 272
    keen::ds::UiLocaTagReference tileReviveNpcSecondaryText; // Offset: 288
    keen::ds::UiLocaTagReference tileRespecMainText; // Offset: 304
    keen::ds::UiLocaTagReference tileRespecSecondaryText; // Offset: 320
    keen::ds::UiLocaTagReference respecDescription; // Offset: 336
    keen::ds::UiLocaTagReference actionRespecSkills; // Offset: 352
    keen::ds::UiLocaTagReference actionDeactivate; // Offset: 368
    keen::ds::UiLocaTagReference actionDeactivateSecondaryText; // Offset: 384
    keen::ds::UiLocaTagReference actionReactivate; // Offset: 400
    keen::ds::UiLocaTagReference deactivateAltarDesc; // Offset: 416
    keen::ds::UiLocaTagReference inactiveStateDesc; // Offset: 432
    keen::ds::UiLocaTagReference reactivationProhibited; // Offset: 448
    keen::ds::UiLocaTagReference altarUpgradeRecipeHeader; // Offset: 464
    keen::ds::UiLocaTagReference motherflameUpgradeRecipeHeader; // Offset: 480
    keen::ds::UiLocaTagReference actionAltarUpgrade; // Offset: 496
    keen::ds::UiLocaTagReference actionMotherflameUpgrade; // Offset: 512
    keen::ds::UiLocaTagReference npcReviveSubheader; // Offset: 528
    keen::ds::UiLocaTagReference deactivationExplanation; // Offset: 544
    keen::ds::UiLocaTagReference noPermissionHintGeneral; // Offset: 560
    keen::ds::UiLocaTagReference noAltarUpgradePermission; // Offset: 576
    keen::ds::UiLocaTagReference noFlameUpgradePermission; // Offset: 592
    keen::ds::UiLocaTagReference noExtinguishAltarPermission; // Offset: 608
    keen::ds::UiLocaTagReference shelteredBedsRequirement; // Offset: 624
};

struct FbUiLocaMenuPregame {
    keen::ds::UiLocaTagReference mainMenuPlay; // Offset: 0
    keen::ds::UiLocaTagReference mainMenuJoinSessionHeader; // Offset: 16
    keen::ds::UiLocaTagReference mainMenuInviteHeader; // Offset: 32
    keen::ds::UiLocaTagReference mainMenuInviteAccept; // Offset: 48
    keen::ds::UiLocaTagReference mainMenuInviteDecline; // Offset: 64
    keen::ds::UiLocaTagReference mainMenuJoinSessionFallbackName; // Offset: 80
    keen::ds::UiLocaTagReference mainMenuCredits; // Offset: 96
    keen::ds::UiLocaTagReference mainMenuQuit; // Offset: 112
    keen::ds::UiLocaTagReference mainMenuGPUDriverWarning; // Offset: 128
    keen::ds::UiLocaTagReference thankYouClosedBeta; // Offset: 144
    keen::ds::UiLocaTagReference steamCallToAction; // Offset: 160
    keen::ds::UiLocaTagReference discordCallToAction; // Offset: 176
    keen::ds::UiLocaTagReference characterSelectionEnterVerb; // Offset: 192
    keen::ds::UiLocaTagReference characterSelectionHeaderCreate; // Offset: 208
    keen::ds::UiLocaTagReference characterSelectionHeaderSelect; // Offset: 224
    keen::ds::UiLocaTagReference characterSelectionEmptySlotHint; // Offset: 240
    keen::ds::UiLocaTagReference characterDeletionConfirmHeader; // Offset: 256
    keen::ds::UiLocaTagReference characterBackupRestoreDialogHeader; // Offset: 272
    keen::ds::UiLocaTagReference characterBackupRestoreDataLabel; // Offset: 288
    keen::ds::UiLocaTagReference characterBackupRestoreButtonLabel; // Offset: 304
    keen::ds::UiLocaTagReference playSelectionHeader; // Offset: 320
    keen::ds::UiLocaTagReference playSelectionRecent; // Offset: 336
    keen::ds::UiLocaTagReference playSelectionJoin; // Offset: 352
    keen::ds::UiLocaTagReference playSelectionJoinDescription; // Offset: 368
    keen::ds::UiLocaTagReference playSelectionJoinHeader; // Offset: 384
    keen::ds::UiLocaTagReference playSelectionHostPublic; // Offset: 400
    keen::ds::UiLocaTagReference playSelectionHostPublicDescription; // Offset: 416
    keen::ds::UiLocaTagReference playSelectionHostPublicHeader; // Offset: 432
    keen::ds::UiLocaTagReference playSelectionPrivate; // Offset: 448
    keen::ds::UiLocaTagReference playSelectionPrivateDescription; // Offset: 464
    keen::ds::UiLocaTagReference playSelectionPrivateHeader; // Offset: 480
    keen::ds::UiLocaTagReference party; // Offset: 496
    keen::ds::UiLocaTagReference filterFriends; // Offset: 512
    keen::ds::UiLocaTagReference filterDedicatedServer; // Offset: 528
    keen::ds::UiLocaTagReference filterEmpty; // Offset: 544
    keen::ds::UiLocaTagReference filterName; // Offset: 560
    keen::ds::UiLocaTagReference filterPassword; // Offset: 576
    keen::ds::UiLocaTagReference filterFreeSlots; // Offset: 592
    keen::ds::UiLocaTagReference filterNameHeader; // Offset: 608
    keen::ds::UiLocaTagReference sessionSearchEmptyResult; // Offset: 624
    keen::ds::UiLocaTagReference sessionSearchOngoing; // Offset: 640
    keen::ds::UiLocaTagReference errorServerNotFound; // Offset: 656
    keen::ds::UiLocaTagReference errorServerNotFoundDesc; // Offset: 672
    keen::ds::UiLocaTagReference serverFound; // Offset: 688
    keen::ds::UiLocaTagReference noSessionsMatchingFilter; // Offset: 704
    keen::ds::UiLocaTagReference enterGridSelection; // Offset: 720
    keen::ds::UiLocaTagReference playVoiceSample; // Offset: 736
    keen::ds::UiLocaTagReference customizationOptionNone; // Offset: 752
    keen::ds::UiLocaTagReference customizationBodyType; // Offset: 768
    keen::ds::UiLocaTagReference customizationPreset; // Offset: 784
    keen::ds::UiLocaTagReference customizationSkinColor; // Offset: 800
    keen::ds::UiLocaTagReference customizationEyeColor; // Offset: 816
    keen::ds::UiLocaTagReference customizationEyeBrowColor; // Offset: 832
    keen::ds::UiLocaTagReference customizationHair; // Offset: 848
    keen::ds::UiLocaTagReference customizationHairColor; // Offset: 864
    keen::ds::UiLocaTagReference customizationBeard; // Offset: 880
    keen::ds::UiLocaTagReference customizationBeardColor; // Offset: 896
    keen::ds::UiLocaTagReference customizationVoice; // Offset: 912
    keen::ds::UiLocaTagReference customizationName; // Offset: 928
    keen::ds::UiLocaTagReference customizationCharacter; // Offset: 944
    keen::ds::UiLocaTagReference customizationNameAndFinish; // Offset: 960
    keen::ds::UiLocaTagReference customizationResetPreset; // Offset: 976
    keen::ds::UiLocaTagReference customizationFinish; // Offset: 992
    keen::ds::UiLocaTagReference refresh; // Offset: 1008
    keen::ds::UiLocaTagReference newGame; // Offset: 1024
    keen::ds::UiLocaTagReference unnamed; // Offset: 1040
    keen::ds::UiLocaTagReference create; // Offset: 1056
    keen::ds::UiLocaTagReference edit; // Offset: 1072
    keen::ds::UiLocaTagReference configure; // Offset: 1088
    keen::ds::UiLocaTagReference myWorld; // Offset: 1104
    keen::ds::UiLocaTagReference editWorldSave; // Offset: 1120
    keen::ds::UiLocaTagReference configureWorldSave; // Offset: 1136
    keen::ds::UiLocaTagReference deleteWorld; // Offset: 1152
    keen::ds::UiLocaTagReference deleteWorldDesc; // Offset: 1168
    keen::ds::UiLocaTagReference maxWorldCountReached; // Offset: 1184
    keen::ds::UiLocaTagReference worldSaveNameTitle; // Offset: 1200
    keen::ds::UiLocaTagReference gameSettings; // Offset: 1216
    keen::ds::UiLocaTagReference sessionVisibility; // Offset: 1232
    keen::ds::UiLocaTagReference joinGame; // Offset: 1248
    keen::ds::UiLocaTagReference publicGame; // Offset: 1264
    keen::ds::UiLocaTagReference privateGame; // Offset: 1280
    keen::ds::UiLocaTagReference sessionVisibiltyFriends; // Offset: 1296
    keen::ds::UiLocaTagReference sessionVisibiltyPublic; // Offset: 1312
    keen::ds::UiLocaTagReference hidePasswordInput; // Offset: 1328
    keen::ds::UiLocaTagReference setPasswordProtection; // Offset: 1344
    keen::ds::UiLocaTagReference hostHintHasNoPassword; // Offset: 1360
    keen::ds::UiLocaTagReference hostSettings; // Offset: 1376
    keen::ds::UiLocaTagReference hostStartDialogHeader; // Offset: 1392
    keen::ds::UiLocaTagReference hostStartButton; // Offset: 1408
    keen::ds::UiLocaTagReference worldNameEmptyProhibited; // Offset: 1424
    keen::ds::UiLocaTagReference noPassword; // Offset: 1440
    keen::ds::UiLocaTagReference sessionPassword; // Offset: 1456
    keen::ds::UiLocaTagReference rolePassword; // Offset: 1472
    keen::ds::UiLocaTagReference setPassword; // Offset: 1488
    keen::ds::UiLocaTagReference removePassword; // Offset: 1504
    keen::ds::UiLocaTagReference enterPasswordHeader; // Offset: 1520
    keen::ds::UiLocaTagReference sessionSize; // Offset: 1536
    keen::ds::UiLocaTagReference maxPlayerCount; // Offset: 1552
    keen::ds::UiLocaTagReference serverFilter; // Offset: 1568
    keen::ds::UiLocaTagReference availableServer; // Offset: 1584
    keen::ds::UiLocaTagReference serverName; // Offset: 1600
    keen::ds::UiLocaTagReference hostedBy; // Offset: 1616
    keen::ds::UiLocaTagReference currentSessionSize; // Offset: 1632
    keen::ds::UiLocaTagReference sessionSizeWarning; // Offset: 1648
    keen::ds::UiLocaTagReference enterPassword; // Offset: 1664
    keen::ds::UiLocaTagReference searchIPv4; // Offset: 1680
    keen::ds::UiLocaTagReference addToFavourite; // Offset: 1696
    keen::ds::UiLocaTagReference renameCharacter; // Offset: 1712
    keen::ds::UiLocaTagReference legalLine; // Offset: 1728
    keen::ds::UiLocaTagReference gportalLogoDesc; // Offset: 1744
    keen::ds::UiLocaTagReference gportalLink; // Offset: 1760
    keen::ds::UiLocaTagReference versionText; // Offset: 1776
    keen::ds::UiLocaTagReference preload; // Offset: 1792
    keen::ds::UiLocaTagReference compilingShaders; // Offset: 1808
    keen::ds::UiLocaTagReference addServerCaption; // Offset: 1824
    keen::ds::UiLocaTagReference serverDidNotResponde; // Offset: 1840
    keen::ds::UiLocaTagReference serverDidResponde; // Offset: 1856
    keen::ds::UiLocaTagReference inviteBuildVersionWarningLocalOld; // Offset: 1872
    keen::ds::UiLocaTagReference inviteBuildVersionWarningInviteOld; // Offset: 1888
    keen::ds::UiLocaTagReference serverSettingsRolesHeader; // Offset: 1904
    keen::ds::UiLocaTagReference serverSettingsRolesExplanation; // Offset: 1920
    keen::ds::UiLocaTagReference serverSettingsSelectedSavegameHeader; // Offset: 1936
    keen::ds::UiLocaTagReference serverSettingsRoleDisabled; // Offset: 1952
    keen::ds::UiLocaTagReference serverSettingsRolePublic; // Offset: 1968
    keen::ds::UiLocaTagReference serverSettingsAllRolesDisabledWarning; // Offset: 1984
    keen::ds::UiLocaTagReference serverRolePermissionsHeader; // Offset: 2000
    keen::ds::UiLocaTagReference serverRoleSupressed; // Offset: 2016
    keen::ds::UiLocaTagReference serverRolesInvalidHint; // Offset: 2032
    keen::ds::UiLocaTagReference warningHostSettingsNotConfigured; // Offset: 2048
    keen::ds::UiLocaTagReference warningServerRoleSupressed; // Offset: 2064
    keen::ds::UiLocaTagReference warningServerRoleSamePassword; // Offset: 2080
    keen::ds::UiLocaTagReference warningPublicServerRole; // Offset: 2096
    keen::ds::UiLocaTagReference warningAdminPasswordRequired; // Offset: 2112
    keen::ds::UiLocaTagReference warningFriendPasswordRequired; // Offset: 2128
    keen::ds::UiLocaTagReference warningNoPasswordPublic; // Offset: 2144
    keen::ds::UiLocaTagReference forceAllowPublicFriendRole; // Offset: 2160
    keen::ds::UiLocaTagReference rolePasswordHeader; // Offset: 2176
    keen::ds::UiLocaTagReference changePassword; // Offset: 2192
    keen::ds::UiLocaTagReference publicRole; // Offset: 2208
    keen::ds::UiLocaTagReference protectedRole; // Offset: 2224
    keen::ds::UiLocaTagReference disabled; // Offset: 2240
    keen::ds::UiLocaTagReference joinWithoutPw; // Offset: 2256
    keen::ds::UiLocaTagReference optionalPwHint; // Offset: 2272
};

struct FbUiLocaMenuSystem {
    keen::ds::UiLocaTagReference returnToGame; // Offset: 0
    keen::ds::UiLocaTagReference returnToPregame; // Offset: 16
    keen::ds::UiLocaTagReference showServerRole; // Offset: 32
    keen::ds::UiLocaTagReference quitToDesktop; // Offset: 48
    keen::ds::UiLocaTagReference networkQuality; // Offset: 64
    keen::ds::UiLocaTagReference latencyValue; // Offset: 80
    keen::ds::UiLocaTagReference shaderCompileProgress; // Offset: 96
    keen::ds::UiLocaTagReference feedbackPopupHint; // Offset: 112
    keen::ds::UiLocaTagReference feedbackIssue; // Offset: 128
    keen::ds::UiLocaTagReference feedbackIssueLink; // Offset: 144
    keen::ds::UiLocaTagReference bugReport; // Offset: 160
    keen::ds::UiLocaTagReference bugReportLink; // Offset: 176
    keen::ds::UiLocaTagReference discordServer; // Offset: 192
    keen::ds::UiLocaTagReference discordServerLink; // Offset: 208
    keen::ds::UiLocaTagReference connectTwitch; // Offset: 224
    keen::ds::UiLocaTagReference connectTwitchLink; // Offset: 240
    keen::ds::UiLocaTagReference steamWishlist; // Offset: 256
    keen::ds::UiLocaTagReference steamWishlistLink; // Offset: 272
    keen::ds::UiLocaTagReference watermarkLabel; // Offset: 288
    keen::ds::UiLocaTagReference watermarkBetaLabel; // Offset: 304
    keen::ds::UiLocaTagReference watermarkSecondLine; // Offset: 320
    keen::ds::UiLocaTagReference watermarkF1Hint; // Offset: 336
    keen::ds::UiLocaTagReference hours; // Offset: 352
    keen::ds::UiLocaTagReference minutes; // Offset: 368
    keen::ds::UiLocaTagReference gamePaused; // Offset: 384
};

struct FbUiLocaMenuBindingsReset {
    keen::ds::UiLocaTagReference resetHeader; // Offset: 0
    keen::ds::UiLocaTagReference resetDescription; // Offset: 16
    keen::ds::UiLocaTagReference presetChangeHeader; // Offset: 32
    keen::ds::UiLocaTagReference presetChangeDescription; // Offset: 48
    keen::ds::UiLocaTagReference presetChangeConfirmButton; // Offset: 64
};

struct FbUiLongDocParagraph {
    keen::ds::UiLocaTagReference locaTag; // Offset: 0
    keen::ds::UiLocaTagReference hyperLink; // Offset: 16
};

struct FbUiLocaTagDifficultySettings {
    keen::ds::UiLocaTagReference presetDefault; // Offset: 0
    keen::ds::UiLocaTagReference presetDefaultDesc; // Offset: 16
    keen::ds::UiLocaTagReference presetSurvivalist; // Offset: 32
    keen::ds::UiLocaTagReference presetSurvivalistDesc; // Offset: 48
    keen::ds::UiLocaTagReference presetBuilders; // Offset: 64
    keen::ds::UiLocaTagReference presetBuildersDesc; // Offset: 80
    keen::ds::UiLocaTagReference presetCombatChallenge; // Offset: 96
    keen::ds::UiLocaTagReference presetCombatChallengeDesc; // Offset: 112
    keen::ds::UiLocaTagReference presetCustom; // Offset: 128
    keen::ds::UiLocaTagReference presetCustomDesc; // Offset: 144
    keen::ds::UiLocaTagReference enemySettingsHeader; // Offset: 160
    keen::ds::UiLocaTagReference enemyDamage; // Offset: 176
    keen::ds::UiLocaTagReference enemyDamageDesc; // Offset: 192
    keen::ds::UiLocaTagReference enemyHealth; // Offset: 208
    keen::ds::UiLocaTagReference enemyHealthDesc; // Offset: 224
    keen::ds::UiLocaTagReference enemyStamina; // Offset: 240
    keen::ds::UiLocaTagReference enemyStaminaDesc; // Offset: 256
    keen::ds::UiLocaTagReference enemyPerceptionRange; // Offset: 272
    keen::ds::UiLocaTagReference enemyPerceptionRangeDesc; // Offset: 288
    keen::ds::UiLocaTagReference enemyAttackSimultaneous; // Offset: 304
    keen::ds::UiLocaTagReference enemyAttackSimultaneousDesc; // Offset: 320
    keen::ds::UiLocaTagReference enemyAttackFrequency; // Offset: 336
    keen::ds::UiLocaTagReference enemyAttackFrequencyDesc; // Offset: 352
    keen::ds::UiLocaTagReference pacifyEnemies; // Offset: 368
    keen::ds::UiLocaTagReference pacifyEnemiesDesc; // Offset: 384
    keen::ds::UiLocaTagReference enemySpawnerAmount; // Offset: 400
    keen::ds::UiLocaTagReference enemySpawnerAmountDesc; // Offset: 416
    keen::ds::UiLocaTagReference enemySpawnerAmountFew; // Offset: 432
    keen::ds::UiLocaTagReference enemySpawnerAmountNormal; // Offset: 448
    keen::ds::UiLocaTagReference enemySpawnerAmountMore; // Offset: 464
    keen::ds::UiLocaTagReference enemySpawnerAmountMany; // Offset: 480
    keen::ds::UiLocaTagReference bossHealth; // Offset: 496
    keen::ds::UiLocaTagReference bossHealthDesc; // Offset: 512
    keen::ds::UiLocaTagReference bossDamage; // Offset: 528
    keen::ds::UiLocaTagReference bossDamageDesc; // Offset: 544
    keen::ds::UiLocaTagReference playerHealth; // Offset: 560
    keen::ds::UiLocaTagReference playerHealthDesc; // Offset: 576
    keen::ds::UiLocaTagReference playerMana; // Offset: 592
    keen::ds::UiLocaTagReference playerManaDesc; // Offset: 608
    keen::ds::UiLocaTagReference playerStamina; // Offset: 624
    keen::ds::UiLocaTagReference playerStaminaDesc; // Offset: 640
    keen::ds::UiLocaTagReference otherSettingsHeader; // Offset: 656
    keen::ds::UiLocaTagReference xpGainMining; // Offset: 672
    keen::ds::UiLocaTagReference xpGainMiningDesc; // Offset: 688
    keen::ds::UiLocaTagReference xpGainQuests; // Offset: 704
    keen::ds::UiLocaTagReference xpGainQuestsDesc; // Offset: 720
    keen::ds::UiLocaTagReference xpGainCombat; // Offset: 736
    keen::ds::UiLocaTagReference xpGainCombatDesc; // Offset: 752
    keen::ds::UiLocaTagReference shroudTime; // Offset: 768
    keen::ds::UiLocaTagReference shroudTimeDesc; // Offset: 784
    keen::ds::UiLocaTagReference productionSpeed; // Offset: 800
    keen::ds::UiLocaTagReference productionSpeedDesc; // Offset: 816
    keen::ds::UiLocaTagReference plantGrowSpeed; // Offset: 832
    keen::ds::UiLocaTagReference plantGrowSpeedDesc; // Offset: 848
    keen::ds::UiLocaTagReference weaponUpgradeCosts; // Offset: 864
    keen::ds::UiLocaTagReference weaponUpgradeCostsDesc; // Offset: 880
    keen::ds::UiLocaTagReference perkUpgradeRecyclingFactor; // Offset: 896
    keen::ds::UiLocaTagReference perkUpgradeRecyclingFactorDesc; // Offset: 912
    keen::ds::UiLocaTagReference backpackDeathBehaviour; // Offset: 928
    keen::ds::UiLocaTagReference backpackDeathBehaviourDesc; // Offset: 944
    keen::ds::UiLocaTagReference backpackDeathBehaviourKeepAll; // Offset: 960
    keen::ds::UiLocaTagReference backpackDeathBehaviourDefault; // Offset: 976
    keen::ds::UiLocaTagReference backpackDeathBehaviourLoseAll; // Offset: 992
    keen::ds::UiLocaTagReference durabilityEnabled; // Offset: 1008
    keen::ds::UiLocaTagReference durabilityEnabledDesc; // Offset: 1024
    keen::ds::UiLocaTagReference durabilityScaling; // Offset: 1040
    keen::ds::UiLocaTagReference durabilityScalingDesc; // Offset: 1056
    keen::ds::UiLocaTagReference worldRefreshTime; // Offset: 1072
    keen::ds::UiLocaTagReference worldRefreshTimeDesc; // Offset: 1088
    keen::ds::UiLocaTagReference dayDuration; // Offset: 1104
    keen::ds::UiLocaTagReference dayDurationDesc; // Offset: 1120
    keen::ds::UiLocaTagReference nightDuration; // Offset: 1136
    keen::ds::UiLocaTagReference nightDurationDesc; // Offset: 1152
    keen::ds::UiLocaTagReference foodDuration; // Offset: 1168
    keen::ds::UiLocaTagReference foodDurationDesc; // Offset: 1184
    keen::ds::UiLocaTagReference foodSurvival; // Offset: 1200
    keen::ds::UiLocaTagReference foodSurvivalDesc; // Offset: 1216
    keen::ds::UiLocaTagReference starvingTime; // Offset: 1232
    keen::ds::UiLocaTagReference starvingTimeDesc; // Offset: 1248
    keen::ds::UiLocaTagReference weatherFrequency; // Offset: 1264
    keen::ds::UiLocaTagReference weatherFrequencyDesc; // Offset: 1280
    keen::ds::UiLocaTagReference enableGliderTurbulences; // Offset: 1296
    keen::ds::UiLocaTagReference enableGliderTurbulencesDesc; // Offset: 1312
    keen::ds::UiLocaTagReference tamingStartleRepercussion; // Offset: 1328
    keen::ds::UiLocaTagReference tamingStartleRepercussionDesc; // Offset: 1344
    keen::ds::UiLocaTagReference bodyHeat; // Offset: 1360
    keen::ds::UiLocaTagReference bodyHeatDesc; // Offset: 1376
    keen::ds::UiLocaTagReference miningDamage; // Offset: 1392
    keen::ds::UiLocaTagReference miningDamageDesc; // Offset: 1408
    keen::ds::UiLocaTagReference lootAmount; // Offset: 1424
    keen::ds::UiLocaTagReference lootAmountDesc; // Offset: 1440
    keen::ds::UiLocaTagReference resourcesHeader; // Offset: 1456
    keen::ds::UiLocaTagReference xpModsHeader; // Offset: 1472
    keen::ds::UiLocaTagReference survivalHeader; // Offset: 1488
    keen::ds::UiLocaTagReference playerHeader; // Offset: 1504
    keen::ds::UiLocaTagReference selectedLabel; // Offset: 1520
};

struct FbUiLocaMenuSettings {
    keen::ds::UiLocaTagReference tabGame; // Offset: 0
    keen::ds::UiLocaTagReference tabDisplay; // Offset: 16
    keen::ds::UiLocaTagReference tabSound; // Offset: 32
    keen::ds::UiLocaTagReference tabAccessibility; // Offset: 48
    keen::ds::UiLocaTagReference tabControls; // Offset: 64
    keen::ds::UiLocaTagReference tabLegal; // Offset: 80
    keen::DsArray<keen::ds::FbUiLongDocParagraph> privacyPolicyParagraphs; // Offset: 96
    keen::ds::UiLocaTagReference settingAuto; // Offset: 136
    keen::ds::UiLocaTagReference settingOff; // Offset: 152
    keen::ds::UiLocaTagReference settingOn; // Offset: 168
    keen::ds::UiLocaTagReference settingBoost; // Offset: 184
    keen::ds::UiLocaTagReference settingLowest; // Offset: 200
    keen::ds::UiLocaTagReference settingLow; // Offset: 216
    keen::ds::UiLocaTagReference settingMedium; // Offset: 232
    keen::ds::UiLocaTagReference settingHigh; // Offset: 248
    keen::ds::UiLocaTagReference settingUltra; // Offset: 264
    keen::ds::UiLocaTagReference settingPerformance; // Offset: 280
    keen::ds::UiLocaTagReference settingBalance; // Offset: 296
    keen::ds::UiLocaTagReference settingQuality; // Offset: 312
    keen::ds::UiLocaTagReference settingUltraQuality; // Offset: 328
    keen::ds::UiLocaTagReference settingUltraPerformance; // Offset: 344
    keen::ds::UiLocaTagReference settingNative; // Offset: 360
    keen::ds::UiLocaTagReference settingRare; // Offset: 376
    keen::ds::UiLocaTagReference settingNormal; // Offset: 392
    keen::ds::UiLocaTagReference settingOften; // Offset: 408
    keen::ds::UiLocaTagReference settingKeepProgress; // Offset: 424
    keen::ds::UiLocaTagReference settingLoseSomeProgress; // Offset: 440
    keen::ds::UiLocaTagReference settingLoseAllProgress; // Offset: 456
    keen::ds::UiLocaTagReference difficultyLabel; // Offset: 472
    keen::ds::UiLocaTagReference difficultyEasy; // Offset: 488
    keen::ds::UiLocaTagReference difficultyDefault; // Offset: 504
    keen::ds::UiLocaTagReference difficultyHard; // Offset: 520
    keen::ds::UiLocaTagReference difficultyVeryHard; // Offset: 536
    keen::ds::UiLocaTagReference difficultyCustom; // Offset: 552
    keen::ds::UiLocaTagReference controlsSectionKeyboardMouse; // Offset: 568
    keen::ds::UiLocaTagReference controlsSectionGamepad; // Offset: 584
    keen::ds::UiLocaTagReference mouseCameraSmoothing; // Offset: 600
    keen::ds::UiLocaTagReference cameraSensitivity; // Offset: 616
    keen::ds::UiLocaTagReference aimingSensitivity; // Offset: 632
    keen::ds::UiLocaTagReference cameraInversion; // Offset: 648
    keen::ds::UiLocaTagReference cameraInversionValueNone; // Offset: 664
    keen::ds::UiLocaTagReference cameraInversionValueX; // Offset: 680
    keen::ds::UiLocaTagReference cameraInversionValueY; // Offset: 696
    keen::ds::UiLocaTagReference cameraInversionValueXY; // Offset: 712
    keen::ds::UiLocaTagReference actionDirection; // Offset: 728
    keen::ds::UiLocaTagReference actionDirectionDesc; // Offset: 744
    keen::ds::UiLocaTagReference cameraDirection; // Offset: 760
    keen::ds::UiLocaTagReference characterDirection; // Offset: 776
    keen::ds::UiLocaTagReference controlsKeyboardMouseBindingsButton; // Offset: 792
    keen::ds::UiLocaTagReference controlsGamepadBindingsButton; // Offset: 808
    keen::ds::UiLocaTagReference controlScheme; // Offset: 824
    keen::ds::UiLocaTagReference controlSchemePresetA; // Offset: 840
    keen::ds::UiLocaTagReference controlSchemePresetB; // Offset: 856
    keen::ds::UiLocaTagReference controlSchemeCustom; // Offset: 872
    keen::ds::UiLocaTagReference controlSchemeEdit; // Offset: 888
    keen::ds::UiLocaTagReference controlSchemeCreate; // Offset: 904
    keen::ds::UiLocaTagReference controlSchemeCreateDescription; // Offset: 920
    keen::ds::UiLocaTagReference controlSchemeResetButton; // Offset: 936
    keen::ds::FbUiLocaMenuBindingsReset controlSchemeResetDialog; // Offset: 952
    keen::ds::UiLocaTagReference bindingEntryChange; // Offset: 1032
    keen::ds::UiLocaTagReference bindingEntryUndo; // Offset: 1048
    keen::ds::UiLocaTagReference bindingEntryReset; // Offset: 1064
    keen::ds::UiLocaTagReference bindingEntryDelete; // Offset: 1080
    keen::ds::UiLocaTagReference bindingEntryCustomize; // Offset: 1096
    keen::ds::UiLocaTagReference bindingEntryRemapPrompt; // Offset: 1112
    keen::ds::UiLocaTagReference warningHeader; // Offset: 1128
    keen::ds::UiLocaTagReference warningCriticalDescription; // Offset: 1144
    keen::ds::UiLocaTagReference warningRecommendedDescription; // Offset: 1160
    keen::ds::UiLocaTagReference warningContinueEdit; // Offset: 1176
    keen::ds::UiLocaTagReference warningUsePreset; // Offset: 1192
    keen::ds::UiLocaTagReference warningUseIncompleteBindings; // Offset: 1208
    keen::ds::UiLocaTagReference bindingCategoryMovements; // Offset: 1224
    keen::ds::UiLocaTagReference bindingCategoryBasicActions; // Offset: 1240
    keen::ds::UiLocaTagReference bindingCategoryCamera; // Offset: 1256
    keen::ds::UiLocaTagReference bindingCategoryActionBar; // Offset: 1272
    keen::ds::UiLocaTagReference bindingCategoryCombat; // Offset: 1288
    keen::ds::UiLocaTagReference bindingCategoryShortcuts; // Offset: 1304
    keen::ds::UiLocaTagReference bindingCategoryBuildings; // Offset: 1320
    keen::ds::UiLocaTagReference bindingCategoryUserInterface; // Offset: 1336
    keen::ds::UiLocaTagReference invalidBindingInput; // Offset: 1352
    keen::ds::UiLocaTagReference useAnalogStickHint; // Offset: 1368
    keen::ds::UiLocaTagReference searchKey; // Offset: 1384
    keen::ds::UiLocaTagReference pressKey; // Offset: 1400
    keen::ds::UiLocaTagReference inputKeyToSearch; // Offset: 1416
    keen::ds::UiLocaTagReference clearSearch; // Offset: 1432
    keen::ds::UiLocaTagReference volumeMaster; // Offset: 1448
    keen::ds::UiLocaTagReference volumeMusic; // Offset: 1464
    keen::ds::UiLocaTagReference volumeUi; // Offset: 1480
    keen::ds::UiLocaTagReference volumeGame; // Offset: 1496
    keen::ds::UiLocaTagReference volumeVoices; // Offset: 1512
    keen::ds::UiLocaTagReference audioReverb; // Offset: 1528
    keen::ds::UiLocaTagReference muteInBackground; // Offset: 1544
    keen::ds::UiLocaTagReference monitor; // Offset: 1560
    keen::ds::UiLocaTagReference displayMode; // Offset: 1576
    keen::ds::UiLocaTagReference windowed; // Offset: 1592
    keen::ds::UiLocaTagReference fullscreen; // Offset: 1608
    keen::ds::UiLocaTagReference resolution; // Offset: 1624
    keen::ds::UiLocaTagReference renderScale; // Offset: 1640
    keen::ds::UiLocaTagReference vsync; // Offset: 1656
    keen::ds::UiLocaTagReference sleepInBackground; // Offset: 1672
    keen::ds::UiLocaTagReference pointLightShadows; // Offset: 1688
    keen::ds::UiLocaTagReference fov; // Offset: 1704
    keen::ds::UiLocaTagReference brightness; // Offset: 1720
    keen::ds::UiLocaTagReference gamma; // Offset: 1736
    keen::ds::UiLocaTagReference contrast; // Offset: 1752
    keen::ds::UiLocaTagReference sharpness; // Offset: 1768
    keen::ds::UiLocaTagReference quality; // Offset: 1784
    keen::ds::UiLocaTagReference qualityPreset; // Offset: 1800
    keen::ds::UiLocaTagReference custom; // Offset: 1816
    keen::ds::UiLocaTagReference antialiasing; // Offset: 1832
    keen::ds::UiLocaTagReference shadowQuality; // Offset: 1848
    keen::ds::UiLocaTagReference contactShadows; // Offset: 1864
    keen::ds::UiLocaTagReference fsr2Quality; // Offset: 1880
    keen::ds::UiLocaTagReference fsr3Quality; // Offset: 1896
    keen::ds::UiLocaTagReference dlssQuality; // Offset: 1912
    keen::ds::UiLocaTagReference nvReflexQuality; // Offset: 1928
    keen::ds::UiLocaTagReference reflections; // Offset: 1944
    keen::ds::UiLocaTagReference fogQuality; // Offset: 1960
    keen::ds::UiLocaTagReference volumetricShadowQuality; // Offset: 1976
    keen::ds::UiLocaTagReference textureResolution; // Offset: 1992
    keen::ds::UiLocaTagReference textureFiltering; // Offset: 2008
    keen::ds::UiLocaTagReference ssao; // Offset: 2024
    keen::ds::UiLocaTagReference distantObjects; // Offset: 2040
    keen::ds::UiLocaTagReference decoObjects; // Offset: 2056
    keen::ds::UiLocaTagReference detailScattering; // Offset: 2072
    keen::ds::UiLocaTagReference voxelMeshing; // Offset: 2088
    keen::ds::UiLocaTagReference tessellation; // Offset: 2104
    keen::ds::UiLocaTagReference indirectLighting; // Offset: 2120
    keen::ds::UiLocaTagReference antialiasingFxaa; // Offset: 2136
    keen::ds::UiLocaTagReference antialiasingFsr2; // Offset: 2152
    keen::ds::UiLocaTagReference antialiasingFsr3; // Offset: 2168
    keen::ds::UiLocaTagReference antialiasingDlss; // Offset: 2184
    keen::ds::UiLocaTagReference antialiasingDlaa; // Offset: 2200
    keen::ds::UiLocaTagReference language; // Offset: 2216
    keen::ds::UiLocaTagReference resolutionValue; // Offset: 2232
    keen::ds::UiLocaTagReference nativeResolutionValue; // Offset: 2248
    keen::ds::UiLocaTagReference vsyncIntervalValue; // Offset: 2264
    keen::ds::UiLocaTagReference renderScaleDescription; // Offset: 2280
    keen::ds::UiLocaTagReference antialiasingDescription; // Offset: 2296
    keen::ds::UiLocaTagReference fsr2Description; // Offset: 2312
    keen::ds::UiLocaTagReference fsr3Description; // Offset: 2328
    keen::ds::UiLocaTagReference dlssDescription; // Offset: 2344
    keen::ds::UiLocaTagReference nvReflexDescription; // Offset: 2360
    keen::ds::UiLocaTagReference shadowsDescription; // Offset: 2376
    keen::ds::UiLocaTagReference contactShadowsDescription; // Offset: 2392
    keen::ds::UiLocaTagReference reflectionsDescription; // Offset: 2408
    keen::ds::UiLocaTagReference fogQualityDescription; // Offset: 2424
    keen::ds::UiLocaTagReference volShadowDescription; // Offset: 2440
    keen::ds::UiLocaTagReference ssaoDescription; // Offset: 2456
    keen::ds::UiLocaTagReference indirectLightingDescription; // Offset: 2472
    keen::ds::UiLocaTagReference useCharacterNameDescription; // Offset: 2488
    keen::ds::UiLocaTagReference gameplaySectionCamera; // Offset: 2504
    keen::ds::UiLocaTagReference gameplaySectionCombat; // Offset: 2520
    keen::ds::UiLocaTagReference gameplaySectionUI; // Offset: 2536
    keen::ds::UiLocaTagReference cameraDistance; // Offset: 2552
    keen::ds::UiLocaTagReference idleCameraMovement; // Offset: 2568
    keen::ds::UiLocaTagReference idleCameraMovementDescription; // Offset: 2584
    keen::ds::UiLocaTagReference reduceDynamicCameraMovement; // Offset: 2600
    keen::ds::UiLocaTagReference reduceDynamicCameraMovementDescription; // Offset: 2616
    keen::ds::UiLocaTagReference dynamicCameraGlider; // Offset: 2632
    keen::ds::UiLocaTagReference dynamicCameraCombat; // Offset: 2648
    keen::ds::UiLocaTagReference dynamicCameraGrapplingHook; // Offset: 2664
    keen::ds::UiLocaTagReference dynamicCameraCampfire; // Offset: 2680
    keen::ds::UiLocaTagReference screenShake; // Offset: 2696
    keen::ds::UiLocaTagReference screenShakeStrength; // Offset: 2712
    keen::ds::UiLocaTagReference displayDamageNumbers; // Offset: 2728
    keen::ds::UiLocaTagReference displayDamagePropertyTexts; // Offset: 2744
    keen::ds::UiLocaTagReference keepTargetLockWhenSprinting; // Offset: 2760
    keen::ds::UiLocaTagReference autoChangeTargetLockOnKill; // Offset: 2776
    keen::ds::UiLocaTagReference textScale; // Offset: 2792
    keen::ds::UiLocaTagReference hudAspectRatioLimit; // Offset: 2808
    keen::ds::UiLocaTagReference hudAspectRatioLimitNone; // Offset: 2824
    keen::ds::UiLocaTagReference hideHUD; // Offset: 2840
    keen::ds::UiLocaTagReference showHUD; // Offset: 2856
    keen::ds::UiLocaTagReference hideHelmet; // Offset: 2872
    keen::ds::UiLocaTagReference hideGloves; // Offset: 2888
    keen::ds::UiLocaTagReference showRarityIcons; // Offset: 2904
    keen::ds::UiLocaTagReference useCharacterName; // Offset: 2920
    keen::ds::UiLocaTagReference confirmDeletionByRarity; // Offset: 2936
    keen::ds::UiLocaTagReference confirmDeletionByRarityDescription; // Offset: 2952
    keen::ds::UiLocaTagReference rarityAndAbove; // Offset: 2968
    keen::ds::UiLocaTagReference hideSmallSpiders; // Offset: 2984
    keen::ds::UiLocaTagReference controllerButtonStyle; // Offset: 3000
    keen::ds::UiLocaTagReference controllerDiagramPageGeneral; // Offset: 3016
    keen::ds::UiLocaTagReference controllerDiagramPageBuilding; // Offset: 3032
    keen::ds::FbUiLocaTagDifficultySettings difficulty; // Offset: 3048
};

struct FbUiUserPermissions {
    keen::ds::UiLocaTagReference kickBanPermissionDesc; // Offset: 0
    keen::ds::UiLocaTagReference accessInventoriesPermissionDesc; // Offset: 16
    keen::ds::UiLocaTagReference editBasePermissionDesc; // Offset: 32
    keen::ds::UiLocaTagReference extendBasePermissionDesc; // Offset: 48
};

struct FbUiLocaMenuJournal {
    keen::ds::UiLocaTagReference emptyMenuHintShort; // Offset: 0
    keen::ds::UiLocaTagReference emptyMenuHintLong; // Offset: 16
};

struct FbUiLocaMenus {
    keen::ds::FbUiLocaMenuPregame pregame; // Offset: 0
    keen::ds::FbUiLocaMenuSystem system; // Offset: 2288
    keen::ds::FbUiLocaMenuSettings settings; // Offset: 2688
    keen::ds::FbUiUserPermissions userPermissions; // Offset: 7272
    keen::ds::FbUiLocaMenuFlameAltar flameAltar; // Offset: 7336
    keen::ds::FbUiLocaMenuJournal journal; // Offset: 7976
    keen::ds::UiLocaTagReference menuHeaderFallbackCollection; // Offset: 8008
    keen::ds::UiLocaTagReference menuHeaderFallbackFoodStorage; // Offset: 8024
    keen::ds::UiLocaTagReference menuHeaderSkillTree; // Offset: 8040
    keen::ds::UiLocaTagReference menuHeaderCharacterCustomization; // Offset: 8056
    keen::ds::UiLocaTagReference menuHeaderCharacterCreation; // Offset: 8072
    keen::ds::UiLocaTagReference menuHeaderStorageChest; // Offset: 8088
    keen::ds::UiLocaTagReference menuHeaderLootEntity; // Offset: 8104
    keen::ds::UiLocaTagReference menuHeaderSystem; // Offset: 8120
    keen::ds::UiLocaTagReference bpMenuGettingReady; // Offset: 8136
    keen::ds::UiLocaTagReference bpMenuSectionActiveBlueprint; // Offset: 8152
    keen::ds::UiLocaTagReference bpMenuSectionAvailableBlueprints; // Offset: 8168
    keen::ds::UiLocaTagReference bpMenuSectionMaterials; // Offset: 8184
    keen::ds::UiLocaTagReference bpMenuShapeBarExpansionHint; // Offset: 8200
    keen::ds::UiLocaTagReference bpMenuSubCategorySingleBlock; // Offset: 8216
    keen::ds::UiLocaTagReference bpMenuSubCategoryNonRoof; // Offset: 8232
    keen::ds::UiLocaTagReference bpMenuSubCategoryNonRoof_4m; // Offset: 8248
    keen::ds::UiLocaTagReference bpMenuSubCategoryRoof; // Offset: 8264
    keen::ds::UiLocaTagReference bpMenuSubCategoryRoof_4m; // Offset: 8280
    keen::ds::UiLocaTagReference bpMenuSubCategoryTerrain; // Offset: 8296
    keen::ds::UiLocaTagReference terraformerMenuSectionActiveTool; // Offset: 8312
    keen::ds::UiLocaTagReference terraformerMenuSectionAvailableTool; // Offset: 8328
    keen::ds::UiLocaTagReference npcSideMenuSectionActiveTool; // Offset: 8344
    keen::ds::UiLocaTagReference npcSideMenuSectionAvailableTool; // Offset: 8360
    keen::ds::UiLocaTagReference npcSideMenuNoAvailableNpcs; // Offset: 8376
    keen::ds::UiLocaTagReference npcSideMenuRoamingRange; // Offset: 8392
    keen::ds::UiLocaTagReference npcSideMenuRoamingRangeLabel; // Offset: 8408
    keen::ds::UiLocaTagReference dialogNoChatterHint; // Offset: 8424
    keen::ds::UiLocaTagReference repairNotAvailableHint; // Offset: 8440
    keen::ds::UiLocaTagReference craftingTabManual; // Offset: 8456
    keen::ds::UiLocaTagReference craftingTabRepair; // Offset: 8472
    keen::ds::UiLocaTagReference craftingTabRecycling; // Offset: 8488
    keen::ds::UiLocaTagReference craftingTabUpgrade; // Offset: 8504
    keen::ds::UiLocaTagReference playerEntryFallback; // Offset: 8520
    keen::ds::UiLocaTagReference itemPerksHeader; // Offset: 8536
    keen::ds::UiLocaTagReference itemPerksAttributeGeneric; // Offset: 8552
    keen::ds::UiLocaTagReference flame; // Offset: 8568
    keen::ds::UiLocaTagReference theFlame; // Offset: 8584
    keen::ds::UiLocaTagReference activeAltars; // Offset: 8600
    keen::ds::UiLocaTagReference mapNpcUnplacedHint; // Offset: 8616
    keen::ds::UiLocaTagReference attributeValueExplainShort; // Offset: 8632
    keen::ds::UiLocaTagReference attributeValueExplainLong; // Offset: 8648
    keen::ds::UiLocaTagReference resistanceAttributeBonusTooltip; // Offset: 8664
    keen::ds::UiLocaTagReference susceptibilityAttributeTooltip; // Offset: 8680
    keen::ds::UiLocaTagReference page; // Offset: 8696
    keen::ds::UiLocaTagReference pageNavigation; // Offset: 8712
    keen::ds::UiLocaTagReference pagesUnlocked; // Offset: 8728
    keen::ds::UiLocaTagReference rewards; // Offset: 8744
    keen::ds::UiLocaTagReference activeQuest; // Offset: 8760
    keen::ds::UiLocaTagReference fastTravelDisabled; // Offset: 8776
    keen::ds::UiLocaTagReference fastTravelDisabledFalling; // Offset: 8792
    keen::ds::UiLocaTagReference objective; // Offset: 8808
    keen::ds::UiLocaTagReference location; // Offset: 8824
    keen::ds::UiLocaTagReference completed; // Offset: 8840
    keen::ds::UiLocaTagReference documentItem; // Offset: 8856
    keen::ds::UiLocaTagReference loreCategoryUnsorted; // Offset: 8872
    keen::ds::UiLocaTagReference loreCategoryUndiscovered; // Offset: 8888
    keen::ds::UiLocaTagReference noUncompletedQuestsHint; // Offset: 8904
    keen::ds::UiLocaTagReference noCompletedQuestsHint; // Offset: 8920
    keen::ds::UiLocaTagReference customMapMarkerLabel; // Offset: 8936
    keen::ds::UiLocaTagReference tombstoneLabel; // Offset: 8952
    keen::ds::UiLocaTagReference missedWorldQuestsMapHint; // Offset: 8968
    keen::ds::UiLocaTagReference questCategoryActive; // Offset: 8984
    keen::ds::UiLocaTagReference questCategoryInactive; // Offset: 9000
    keen::ds::UiLocaTagReference nextQuestHintDocName; // Offset: 9016
    keen::ds::UiLocaTagReference nextQuestHintPageName; // Offset: 9032
    keen::ds::UiLocaTagReference nextQuestHintText; // Offset: 9048
    keen::ds::UiLocaTagReference kickPlayerPopupHeader; // Offset: 9064
    keen::ds::UiLocaTagReference kickPlayerPopupContent; // Offset: 9080
    keen::ds::UiLocaTagReference currentPlayerPermissionHeader; // Offset: 9096
    keen::ds::UiLocaTagReference nextQuestHintTheFlame; // Offset: 9112
    keen::ds::UiLocaTagReference songSelectionHeader; // Offset: 9128
    keen::ds::UiLocaTagReference showDetailedDiffucultySettings; // Offset: 9144
    keen::ds::UiLocaTagReference difficultySettingsReadOnlyExplanation; // Offset: 9160
    keen::ds::UiLocaTagReference difficultySettingsReadOnlyExplanationDedicatedServer; // Offset: 9176
    keen::ds::UiLocaTagReference twitchDropsHeader; // Offset: 9192
    keen::ds::UiLocaTagReference twitchDropsNoUnlocks; // Offset: 9208
    keen::ds::UiLocaTagReference npcStatusBed; // Offset: 9224
    keen::ds::UiLocaTagReference npcStatusFood; // Offset: 9240
    keen::ds::UiLocaTagReference collectionDisplayedHeader; // Offset: 9256
    keen::ds::UiLocaTagReference collectionAvailableItemsHeader; // Offset: 9272
    keen::ds::UiLocaTagReference collectionAvailableItemsSubHeader; // Offset: 9288
    keen::ds::UiLocaTagReference collectionNoAvailableItemsHint; // Offset: 9304
    keen::ds::UiLocaTagReference npcCraftingLabel; // Offset: 9320
    keen::ds::UiLocaTagReference npcAssistantLabel; // Offset: 9336
    keen::ds::UiLocaTagReference npcTownsfolkLabel; // Offset: 9352
    keen::ds::UiLocaTagReference basesInfoAnimalsHungry; // Offset: 9368
    keen::ds::UiLocaTagReference basesInfoAnimalsBeds; // Offset: 9384
    keen::ds::UiLocaTagReference basesInfoAnimalsBedsObstructed; // Offset: 9400
    keen::ds::UiLocaTagReference basesGenericLabel; // Offset: 9416
    keen::ds::UiLocaTagReference altarGenericLabel; // Offset: 9432
};

struct FbUiLocaEquipmentMenu {
    keen::ds::UiLocaTagReference mainHand; // Offset: 0
    keen::ds::UiLocaTagReference shield; // Offset: 16
    keen::ds::UiLocaTagReference rangedWeapon; // Offset: 32
    keen::ds::UiLocaTagReference arrow; // Offset: 48
    keen::ds::UiLocaTagReference spell; // Offset: 64
    keen::ds::UiLocaTagReference backpackExtender; // Offset: 80
    keen::ds::UiLocaTagReference climbTool; // Offset: 96
    keen::ds::UiLocaTagReference hookshot; // Offset: 112
    keen::ds::UiLocaTagReference glider; // Offset: 128
    keen::ds::UiLocaTagReference accessory0; // Offset: 144
    keen::ds::UiLocaTagReference accessory1; // Offset: 160
    keen::ds::UiLocaTagReference ring0; // Offset: 176
    keen::ds::UiLocaTagReference ring1; // Offset: 192
    keen::ds::UiLocaTagReference head; // Offset: 208
    keen::ds::UiLocaTagReference upperBody; // Offset: 224
    keen::ds::UiLocaTagReference arms; // Offset: 240
    keen::ds::UiLocaTagReference lowerBody; // Offset: 256
    keen::ds::UiLocaTagReference boots; // Offset: 272
    keen::ds::UiLocaTagReference attributes; // Offset: 288
    keen::ds::UiLocaTagReference status; // Offset: 304
    keen::ds::UiLocaTagReference attributeTileMainhandDamage; // Offset: 320
    keen::ds::UiLocaTagReference attributeTileRangedEquipmentDamage; // Offset: 336
    keen::ds::UiLocaTagReference attributeTileShieldDefense; // Offset: 352
    keen::ds::UiLocaTagReference attributeTileBackpackExtender; // Offset: 368
    keen::ds::UiLocaTagReference attributeTilePrompt; // Offset: 384
    keen::ds::UiLocaTagReference statusTilePrompt; // Offset: 400
    keen::ds::UiLocaTagReference attributeSectionMain; // Offset: 416
    keen::ds::UiLocaTagReference attributeSectionOffense; // Offset: 432
    keen::ds::UiLocaTagReference attributeSectionDefense; // Offset: 448
    keen::ds::UiLocaTagReference attributeBonusHint; // Offset: 464
    keen::ds::UiLocaTagReference attributeTooltipHint; // Offset: 480
    keen::ds::UiLocaTagReference statusNothingHintCondensed; // Offset: 496
    keen::ds::UiLocaTagReference statusNothingHint; // Offset: 512
    keen::ds::UiLocaTagReference statusSectionFood; // Offset: 528
    keen::ds::UiLocaTagReference statusSectionRest; // Offset: 544
    keen::ds::UiLocaTagReference statusFoodEmptyHint; // Offset: 560
    keen::ds::UiLocaTagReference statusRestConditionHeader; // Offset: 576
    keen::ds::UiLocaTagReference statusRestConditionSitOrShelter; // Offset: 592
    keen::ds::UiLocaTagReference statusRestComfortHeader; // Offset: 608
    keen::ds::UiLocaTagReference statusRestComfortLevel; // Offset: 624
    keen::ds::UiLocaTagReference statusRestComfortLevelNumbered; // Offset: 640
    keen::ds::UiLocaTagReference statusRestComfortCondition; // Offset: 656
    keen::ds::UiLocaTagReference statusBuffs; // Offset: 672
    keen::ds::UiLocaTagReference statusDebuffs; // Offset: 688
    keen::ds::UiLocaTagReference statusPlayerState; // Offset: 704
    keen::ds::UiLocaTagReference noDebuffActive; // Offset: 720
    keen::ds::UiLocaTagReference noBuffActive; // Offset: 736
    keen::ds::UiLocaTagReference noPlayerStateActive; // Offset: 752
    keen::ds::UiLocaTagReference equipped; // Offset: 768
    keen::ds::UiLocaTagReference available; // Offset: 784
    keen::ds::UiLocaTagReference slotContentNone; // Offset: 800
    keen::ds::UiLocaTagReference vanityModePrompt; // Offset: 816
    keen::ds::UiLocaTagReference vanityModeGearSection; // Offset: 832
    keen::ds::UiLocaTagReference vanityModeVisualSection; // Offset: 848
    keen::ds::UiLocaTagReference vanityModeHideSlotAction; // Offset: 864
    keen::ds::UiLocaTagReference equipmentUsedAsVanityHint; // Offset: 880
};

struct FbUiLocaInventory {
    keen::ds::UiLocaTagReference actionBar; // Offset: 0
    keen::ds::UiLocaTagReference actionBarCurrent; // Offset: 16
    keen::ds::UiLocaTagReference mainTabBackpack; // Offset: 32
    keen::ds::UiLocaTagReference mainTabEquipment; // Offset: 48
    keen::ds::UiLocaTagReference mainTabCrafting; // Offset: 64
    keen::ds::UiLocaTagReference mainTabJournal; // Offset: 80
    keen::ds::UiLocaTagReference mainTabMap; // Offset: 96
    keen::ds::UiLocaTagReference mainTabSkillTree; // Offset: 112
    keen::ds::UiLocaTagReference mainTabSettings; // Offset: 128
    keen::ds::UiLocaTagReference mainTabStore; // Offset: 144
    keen::ds::UiLocaTagReference giftingMenuTitle; // Offset: 160
    keen::ds::UiLocaTagReference giftingLimitationHint; // Offset: 176
    keen::ds::UiLocaTagReference giftingActionHeader; // Offset: 192
    keen::ds::UiLocaTagReference giftingAmountOne; // Offset: 208
    keen::ds::UiLocaTagReference giftingAmountHalf; // Offset: 224
    keen::ds::UiLocaTagReference giftingAmountAll; // Offset: 240
    keen::ds::UiLocaTagReference giftingAmountAdjust; // Offset: 256
    keen::ds::UiLocaTagReference giftingTargetStatusCanReceive; // Offset: 272
    keen::ds::UiLocaTagReference giftingTargetStatusDead; // Offset: 288
    keen::ds::UiLocaTagReference giftingTargetStatusOutOfRange; // Offset: 304
    keen::ds::UiLocaTagReference giftingTargetStatusBackpackFull; // Offset: 320
    keen::ds::UiLocaTagReference giftingTarget; // Offset: 336
    keen::ds::UiLocaTagReference giftingTargetMissingHint; // Offset: 352
    keen::ds::UiLocaTagReference giftingActionConfirm; // Offset: 368
    keen::ds::UiLocaTagReference giftingStackNew; // Offset: 384
    keen::ds::UiLocaTagReference giftingStackOriginal; // Offset: 400
    keen::ds::UiLocaTagReference giftedLootLogEntryHint; // Offset: 416
    keen::ds::UiLocaTagReference splitStackNew; // Offset: 432
    keen::ds::UiLocaTagReference splitStackOriginal; // Offset: 448
    keen::ds::UiLocaTagReference deletionConfirmMessage; // Offset: 464
    keen::ds::UiLocaTagReference deletionConfirmSuppression; // Offset: 480
    keen::ds::UiLocaTagReference deletionConfirmSettingHint; // Offset: 496
    keen::ds::UiLocaTagReference salvagingConfirmMessage; // Offset: 512
    keen::ds::UiLocaTagReference highlightIsCurrentItemHint; // Offset: 528
    keen::ds::UiLocaTagReference codexTileClues; // Offset: 544
    keen::ds::UiLocaTagReference codexTileLore; // Offset: 560
    keen::ds::UiLocaTagReference codexTilePinnedRecipe; // Offset: 576
    keen::ds::UiLocaTagReference codexTileRecipeBook; // Offset: 592
    keen::ds::UiLocaTagReference codexTileTutorials; // Offset: 608
    keen::ds::UiLocaTagReference codexPageNotDiscovered; // Offset: 624
    keen::ds::UiLocaTagReference journalCompletedSectionLabel; // Offset: 640
    keen::ds::UiLocaTagReference journalWorldQuestSectionLabel; // Offset: 656
    keen::ds::UiLocaTagReference journalMissedWorldQuestSectionLabel; // Offset: 672
    keen::ds::UiLocaTagReference journalPersonalQuestSectionLabel; // Offset: 688
    keen::ds::UiLocaTagReference journalCompletedSectionDesc; // Offset: 704
    keen::ds::UiLocaTagReference journalWorldQuestSectionDesc; // Offset: 720
    keen::ds::UiLocaTagReference journalMissedWorldQuestSectionDesc; // Offset: 736
    keen::ds::UiLocaTagReference journalPersonalQuestSectionDesc; // Offset: 752
    keen::ds::UiLocaTagReference codexTileMotherflame; // Offset: 768
    keen::ds::UiLocaTagReference codexTileNpcs; // Offset: 784
    keen::ds::UiLocaTagReference codexTileSurvivors; // Offset: 800
    keen::ds::UiLocaTagReference codexTileTownfolk; // Offset: 816
    keen::ds::UiLocaTagReference codexTileBases; // Offset: 832
    keen::ds::UiLocaTagReference codexTileGroupPersonal; // Offset: 848
    keen::ds::UiLocaTagReference codexTileGroupWorld; // Offset: 864
    keen::ds::UiLocaTagReference freeWaypointLabel; // Offset: 880
    keen::ds::UiLocaTagReference mapNodeIsWaypointHint; // Offset: 896
    keen::ds::UiLocaTagReference noItemSelectedHint; // Offset: 912
    keen::ds::UiLocaTagReference noSlotInBackpackHint; // Offset: 928
    keen::ds::UiLocaTagReference skillpointLabelAvailable; // Offset: 944
    keen::ds::UiLocaTagReference skillpointLabelInUse; // Offset: 960
    keen::ds::UiLocaTagReference skillpointLabelRefund; // Offset: 976
    keen::ds::UiLocaTagReference skilltreeNodeUnlocked; // Offset: 992
    keen::ds::UiLocaTagReference skilltreeNodeOutOfRange; // Offset: 1008
    keen::ds::UiLocaTagReference skilltreeNodeFutureContent; // Offset: 1024
    keen::ds::UiLocaTagReference skilltreeNodeActivated; // Offset: 1040
    keen::ds::UiLocaTagReference cookingHintRelease; // Offset: 1056
    keen::ds::UiLocaTagReference cookingHintHold; // Offset: 1072
    keen::ds::UiLocaTagReference sortStacksFromInventory; // Offset: 1088
    keen::ds::UiLocaTagReference sortStacksToInventory; // Offset: 1104
    keen::ds::UiLocaTagReference takeStacks; // Offset: 1120
    keen::ds::UiLocaTagReference depositStacks; // Offset: 1136
    keen::ds::UiLocaTagReference takeAll; // Offset: 1152
    keen::ds::UiLocaTagReference depositAll; // Offset: 1168
    keen::ds::UiLocaTagReference sortInventory; // Offset: 1184
    keen::ds::UiLocaTagReference sortStorage; // Offset: 1200
    keen::ds::UiLocaTagReference magicChestTab; // Offset: 1216
    keen::ds::UiLocaTagReference magicChestAddOne; // Offset: 1232
    keen::ds::UiLocaTagReference magicChestAddStack; // Offset: 1248
    keen::ds::UiLocaTagReference magicChestAddAll; // Offset: 1264
    keen::ds::UiLocaTagReference feedingStationStackAdditionMaxPossible; // Offset: 1280
    keen::ds::UiLocaTagReference factoryAddIngredientsOne; // Offset: 1296
    keen::ds::UiLocaTagReference factoryAddIngredientsMultiple; // Offset: 1312
    keen::ds::UiLocaTagReference itemNoTwitchPermission; // Offset: 1328
    keen::ds::UiLocaTagReference twitchItemLabel; // Offset: 1344
    keen::ds::FbUiLocaEquipmentMenu equipmentMenu; // Offset: 1360
};

struct FbUiLocaBuildVerbs {
    keen::ds::UiLocaTagReference genericAction; // Offset: 0
    keen::ds::UiLocaTagReference blockAction; // Offset: 16
    keen::ds::UiLocaTagReference blueprintAction; // Offset: 32
    keen::ds::UiLocaTagReference propAction; // Offset: 48
    keen::ds::UiLocaTagReference terraformAddAction; // Offset: 64
    keen::ds::UiLocaTagReference terraformFlattenAction; // Offset: 80
    keen::ds::UiLocaTagReference terraformRemoveAction; // Offset: 96
};

struct FbUiLocaGameplayActionLabels {
    keen::ds::UiLocaTagReference locomotionMoveLeft; // Offset: 0
    keen::ds::UiLocaTagReference locomotionMoveRight; // Offset: 16
    keen::ds::UiLocaTagReference locomotionMoveForward; // Offset: 32
    keen::ds::UiLocaTagReference locomotionMoveBackward; // Offset: 48
    keen::ds::UiLocaTagReference locomotionMove; // Offset: 64
    keen::ds::UiLocaTagReference cameraRotateLeft; // Offset: 80
    keen::ds::UiLocaTagReference cameraRotateRight; // Offset: 96
    keen::ds::UiLocaTagReference cameraRotateUp; // Offset: 112
    keen::ds::UiLocaTagReference cameraRotateDown; // Offset: 128
    keen::ds::UiLocaTagReference cameraRotate; // Offset: 144
    keen::ds::UiLocaTagReference cameraZoomIn; // Offset: 160
    keen::ds::UiLocaTagReference cameraZoomOut; // Offset: 176
    keen::ds::UiLocaTagReference mainHandAction; // Offset: 192
    keen::ds::UiLocaTagReference contextualAction; // Offset: 208
    keen::ds::UiLocaTagReference cancelAction; // Offset: 224
    keen::ds::UiLocaTagReference ammunitionSelectPrevious; // Offset: 240
    keen::ds::UiLocaTagReference ammunitionSelectNext; // Offset: 256
    keen::ds::UiLocaTagReference blueprintDistanceIncrease; // Offset: 272
    keen::ds::UiLocaTagReference blueprintDistanceDecrease; // Offset: 288
    keen::ds::UiLocaTagReference blueprintMaterialSelectPrevious; // Offset: 304
    keen::ds::UiLocaTagReference blueprintMaterialSelectNext; // Offset: 320
    keen::ds::UiLocaTagReference blueprintPageSelectPrevious; // Offset: 336
    keen::ds::UiLocaTagReference blueprintPageSelectNext; // Offset: 352
    keen::ds::UiLocaTagReference blueprintShapeSelectPrevious; // Offset: 368
    keen::ds::UiLocaTagReference blueprintShapeSelectNext; // Offset: 384
    keen::ds::UiLocaTagReference actionBarSlot1; // Offset: 400
    keen::ds::UiLocaTagReference actionBarSlot2; // Offset: 416
    keen::ds::UiLocaTagReference actionBarSlot3; // Offset: 432
    keen::ds::UiLocaTagReference actionBarSlot4; // Offset: 448
    keen::ds::UiLocaTagReference actionBarSlot5; // Offset: 464
    keen::ds::UiLocaTagReference actionBarSlot6; // Offset: 480
    keen::ds::UiLocaTagReference actionBarSlot7; // Offset: 496
    keen::ds::UiLocaTagReference actionBarSlot8; // Offset: 512
    keen::ds::UiLocaTagReference actionBarSlot9; // Offset: 528
    keen::ds::UiLocaTagReference actionBarSlot10; // Offset: 544
    keen::ds::UiLocaTagReference actionBarWheel; // Offset: 560
    keen::ds::UiLocaTagReference actionBarSwapPage; // Offset: 576
    keen::ds::UiLocaTagReference actionBarSwapPageVerbOnly; // Offset: 592
    keen::ds::UiLocaTagReference actionBarSlotPrevious; // Offset: 608
    keen::ds::UiLocaTagReference actionBarSlotNext; // Offset: 624
    keen::ds::UiLocaTagReference guardAndParry; // Offset: 640
    keen::ds::UiLocaTagReference guard; // Offset: 656
    keen::ds::UiLocaTagReference parry; // Offset: 672
    keen::ds::UiLocaTagReference locomotionSprint; // Offset: 688
    keen::ds::UiLocaTagReference locomotionEvade; // Offset: 704
    keen::ds::UiLocaTagReference locomotionJump; // Offset: 720
    keen::ds::UiLocaTagReference locomotionSneak; // Offset: 736
    keen::ds::UiLocaTagReference locomotionSit; // Offset: 752
    keen::ds::UiLocaTagReference locomotionGlide; // Offset: 768
    keen::ds::UiLocaTagReference locomotionHookshot; // Offset: 784
    keen::ds::UiLocaTagReference respawn; // Offset: 800
    keen::ds::UiLocaTagReference buildingUndo; // Offset: 816
    keen::ds::UiLocaTagReference buildingDismantle; // Offset: 832
    keen::ds::UiLocaTagReference buildingDismantlePickup; // Offset: 848
    keen::ds::UiLocaTagReference buildingDismantleNotPossible; // Offset: 864
    keen::ds::UiLocaTagReference animalPickupNotPossible; // Offset: 880
    keen::ds::UiLocaTagReference buildingSnapping; // Offset: 896
    keen::ds::UiLocaTagReference transformRotateClockwiseSmall; // Offset: 912
    keen::ds::UiLocaTagReference transformRotateClockwiseBig; // Offset: 928
    keen::ds::UiLocaTagReference transformRotateCounterClockwiseSmall; // Offset: 944
    keen::ds::UiLocaTagReference transformRotateCounterClockwiseBig; // Offset: 960
    keen::ds::UiLocaTagReference transformChangeAngleClockwise; // Offset: 976
    keen::ds::UiLocaTagReference transformChangeAngleCounterClockwise; // Offset: 992
    keen::ds::UiLocaTagReference combatTargetLock; // Offset: 1008
    keen::ds::UiLocaTagReference combatTargetLeft; // Offset: 1024
    keen::ds::UiLocaTagReference combatTargetRight; // Offset: 1040
    keen::ds::UiLocaTagReference rangedCombatReady; // Offset: 1056
    keen::ds::UiLocaTagReference rangedCombatShoot; // Offset: 1072
    keen::ds::UiLocaTagReference songSelectOpen; // Offset: 1088
    keen::ds::UiLocaTagReference songSelectPrevious; // Offset: 1104
    keen::ds::UiLocaTagReference songSelectNext; // Offset: 1120
    keen::ds::UiLocaTagReference systemMenuOpen; // Offset: 1136
    keen::ds::UiLocaTagReference playerMenuOpen; // Offset: 1152
    keen::ds::UiLocaTagReference playerMenuBackpack; // Offset: 1168
    keen::ds::UiLocaTagReference playerMenuEquipmentAndStats; // Offset: 1184
    keen::ds::UiLocaTagReference playerMenuWorld; // Offset: 1200
    keen::ds::UiLocaTagReference playerMenuJournal; // Offset: 1216
    keen::ds::UiLocaTagReference playerMenuCrafting; // Offset: 1232
    keen::ds::UiLocaTagReference playerMenuSkills; // Offset: 1248
    keen::ds::UiLocaTagReference goToCurrentNotificationTab; // Offset: 1264
    keen::ds::UiLocaTagReference hudMenuBlueprints; // Offset: 1280
    keen::ds::UiLocaTagReference inputModalityTap; // Offset: 1296
    keen::ds::UiLocaTagReference inputModalityHold; // Offset: 1312
    keen::ds::UiLocaTagReference inputModalityRelease; // Offset: 1328
    keen::ds::UiLocaTagReference inputModalityToggle; // Offset: 1344
    keen::ds::UiLocaTagReference assignBedHint; // Offset: 1360
    keen::ds::FbUiLocaBuildVerbs buildVerbs; // Offset: 1376
};

struct FbUiLocaUiActionLabels {
    keen::ds::UiLocaTagReference recipeUpgrade; // Offset: 0
    keen::ds::UiLocaTagReference repairItem; // Offset: 16
    keen::ds::UiLocaTagReference confirm; // Offset: 32
    keen::ds::UiLocaTagReference finish; // Offset: 48
    keen::ds::UiLocaTagReference cancel; // Offset: 64
    keen::ds::UiLocaTagReference back; // Offset: 80
    keen::ds::UiLocaTagReference openHint; // Offset: 96
    keen::ds::UiLocaTagReference close; // Offset: 112
    keen::ds::UiLocaTagReference leave; // Offset: 128
    keen::ds::UiLocaTagReference join; // Offset: 144
    keen::ds::UiLocaTagReference changeGeneric; // Offset: 160
    keen::ds::UiLocaTagReference secondaryAction; // Offset: 176
    keen::ds::UiLocaTagReference tertiaryAction; // Offset: 192
    keen::ds::UiLocaTagReference moveObject; // Offset: 208
    keen::ds::UiLocaTagReference changeTab; // Offset: 224
    keen::ds::UiLocaTagReference navigationMove; // Offset: 240
    keen::ds::UiLocaTagReference navigationScroll; // Offset: 256
    keen::ds::UiLocaTagReference previousPage; // Offset: 272
    keen::ds::UiLocaTagReference nextPage; // Offset: 288
    keen::ds::UiLocaTagReference mapZoom; // Offset: 304
    keen::ds::UiLocaTagReference mapFastTravel; // Offset: 320
    keen::ds::UiLocaTagReference mapSnapToWaypoint; // Offset: 336
    keen::ds::UiLocaTagReference mapSnapToPlayerPos; // Offset: 352
    keen::ds::UiLocaTagReference mapSnapToHomeBase; // Offset: 368
    keen::ds::UiLocaTagReference mapLocateGeneric; // Offset: 384
    keen::ds::UiLocaTagReference mapWorldSidebar; // Offset: 400
    keen::ds::UiLocaTagReference mapPlayersSidebar; // Offset: 416
    keen::ds::UiLocaTagReference mapFilterSidebar; // Offset: 432
    keen::ds::UiLocaTagReference mapFilterFocusType; // Offset: 448
    keen::ds::UiLocaTagReference clearMapFilter; // Offset: 464
    keen::ds::UiLocaTagReference mapGotoJournal; // Offset: 480
    keen::ds::UiLocaTagReference gotoReferencedJournalPage; // Offset: 496
    keen::ds::UiLocaTagReference gotoReferencedLorePage; // Offset: 512
    keen::ds::UiLocaTagReference gotoReferencedQuestPage; // Offset: 528
    keen::ds::UiLocaTagReference mapActions; // Offset: 544
    keen::ds::UiLocaTagReference mapSetWaypoint; // Offset: 560
    keen::ds::UiLocaTagReference mapSetAsWaypoint; // Offset: 576
    keen::ds::UiLocaTagReference mapRemoveWaypoint; // Offset: 592
    keen::ds::UiLocaTagReference mapSendPing; // Offset: 608
    keen::ds::UiLocaTagReference codexShowOnMap; // Offset: 624
    keen::ds::UiLocaTagReference placeNpcInWorld; // Offset: 640
    keen::ds::UiLocaTagReference itemViewerVisibilityToggle; // Offset: 656
    keen::ds::UiLocaTagReference backpackUseItem; // Offset: 672
    keen::ds::UiLocaTagReference backpackActions; // Offset: 688
    keen::ds::UiLocaTagReference backpackSplitStack; // Offset: 704
    keen::ds::UiLocaTagReference backpackDeleteItem; // Offset: 720
    keen::ds::UiLocaTagReference backpackSalvageItem; // Offset: 736
    keen::ds::UiLocaTagReference splitStackAdjustMin; // Offset: 752
    keen::ds::UiLocaTagReference splitStackAdjustDecrement; // Offset: 768
    keen::ds::UiLocaTagReference splitStackAdjustHalf; // Offset: 784
    keen::ds::UiLocaTagReference splitStackAdjustIncrement; // Offset: 800
    keen::ds::UiLocaTagReference splitStackAdjustMax; // Offset: 816
    keen::ds::UiLocaTagReference backpackGrabItemForMoving; // Offset: 832
    keen::ds::UiLocaTagReference backpackGrabItemForMovingPartial; // Offset: 848
    keen::ds::UiLocaTagReference backpackGrabItemForMovingHoldable; // Offset: 864
    keen::ds::UiLocaTagReference backpackDropItemIntoSlot; // Offset: 880
    keen::ds::UiLocaTagReference quickMoveItem; // Offset: 896
    keen::ds::UiLocaTagReference quickMoveItemActionbar; // Offset: 912
    keen::ds::UiLocaTagReference quickMoveItemStorage; // Offset: 928
    keen::ds::UiLocaTagReference quickMoveTargetFull; // Offset: 944
    keen::ds::UiLocaTagReference refillStacks; // Offset: 960
    keen::ds::UiLocaTagReference backpackEquip; // Offset: 976
    keen::ds::UiLocaTagReference backpackUnequip; // Offset: 992
    keen::ds::UiLocaTagReference backpackReplaceItem; // Offset: 1008
    keen::ds::UiLocaTagReference backpackGiftItem; // Offset: 1024
    keen::ds::UiLocaTagReference showTutorial; // Offset: 1040
    keen::ds::UiLocaTagReference changeBlueprint; // Offset: 1056
    keen::ds::UiLocaTagReference lootTakeSingle; // Offset: 1072
    keen::ds::UiLocaTagReference lootTakeAll; // Offset: 1088
    keen::ds::UiLocaTagReference craftActionSingle; // Offset: 1104
    keen::ds::UiLocaTagReference craftActionMultiple; // Offset: 1120
    keen::ds::UiLocaTagReference stopAutomatedCraftingNext; // Offset: 1136
    keen::ds::UiLocaTagReference changeAutomatedCraftingOuput; // Offset: 1152
    keen::ds::UiLocaTagReference recipePin; // Offset: 1168
    keen::ds::UiLocaTagReference recipeUnpin; // Offset: 1184
    keen::ds::UiLocaTagReference showItemViewerTextArea; // Offset: 1200
    keen::ds::UiLocaTagReference showItemViewerRecipeArea; // Offset: 1216
    keen::ds::UiLocaTagReference toggleItemViewerRecipeView; // Offset: 1232
    keen::ds::UiLocaTagReference activate; // Offset: 1248
    keen::ds::UiLocaTagReference unlock; // Offset: 1264
    keen::ds::UiLocaTagReference unlockNextPerk; // Offset: 1280
    keen::ds::UiLocaTagReference rename; // Offset: 1296
    keen::ds::UiLocaTagReference done; // Offset: 1312
    keen::ds::UiLocaTagReference refillToInventory; // Offset: 1328
    keen::ds::UiLocaTagReference refillFromInventory; // Offset: 1344
    keen::ds::UiLocaTagReference increase; // Offset: 1360
    keen::ds::UiLocaTagReference decrease; // Offset: 1376
    keen::ds::UiLocaTagReference clear; // Offset: 1392
    keen::ds::UiLocaTagReference selectSessionSettings; // Offset: 1408
    keen::ds::UiLocaTagReference selectSavegame; // Offset: 1424
    keen::ds::UiLocaTagReference selectServerFilter; // Offset: 1440
    keen::ds::UiLocaTagReference selectServer; // Offset: 1456
    keen::ds::UiLocaTagReference skip; // Offset: 1472
    keen::ds::UiLocaTagReference select; // Offset: 1488
    keen::ds::UiLocaTagReference next; // Offset: 1504
    keen::ds::UiLocaTagReference create; // Offset: 1520
    keen::ds::UiLocaTagReference continueAction; // Offset: 1536
    keen::ds::UiLocaTagReference setActiveQuest; // Offset: 1552
    keen::ds::UiLocaTagReference hidePassword; // Offset: 1568
    keen::ds::UiLocaTagReference toggleFavourite; // Offset: 1584
    keen::ds::UiLocaTagReference hideIPAddressInput; // Offset: 1600
    keen::ds::UiLocaTagReference createMarker; // Offset: 1616
    keen::ds::UiLocaTagReference removeMarker; // Offset: 1632
    keen::ds::UiLocaTagReference togglePersonalProgression; // Offset: 1648
    keen::ds::UiLocaTagReference activatePersonalProgression; // Offset: 1664
    keen::ds::UiLocaTagReference deactivatePersonalProgression; // Offset: 1680
    keen::ds::UiLocaTagReference search; // Offset: 1696
    keen::ds::UiLocaTagReference expandToggle; // Offset: 1712
    keen::ds::UiLocaTagReference toggleTooltip; // Offset: 1728
    keen::ds::UiLocaTagReference toggleVisibility; // Offset: 1744
    keen::ds::UiLocaTagReference change; // Offset: 1760
    keen::ds::UiLocaTagReference kickPlayer; // Offset: 1776
    keen::ds::UiLocaTagReference toggle; // Offset: 1792
    keen::ds::UiLocaTagReference renameAltar; // Offset: 1808
    keen::ds::UiLocaTagReference enable; // Offset: 1824
    keen::ds::UiLocaTagReference disable; // Offset: 1840
    keen::ds::UiLocaTagReference instrumentActionTuneIn; // Offset: 1856
    keen::ds::UiLocaTagReference confirmPassword; // Offset: 1872
    keen::ds::UiLocaTagReference resetToDefault; // Offset: 1888
    keen::ds::UiLocaTagReference claimTwitchItem; // Offset: 1904
    keen::ds::UiLocaTagReference swapArmor; // Offset: 1920
    keen::ds::UiLocaTagReference swapVanity; // Offset: 1936
    keen::ds::UiLocaTagReference equipCollection; // Offset: 1952
    keen::ds::UiLocaTagReference unequipCollection; // Offset: 1968
    keen::ds::UiLocaTagReference equipAsArmor; // Offset: 1984
    keen::ds::UiLocaTagReference equipAsVanity; // Offset: 2000
};

struct FbUiLocaLinks {
    keen::ds::UiLocaTagReference styleTest; // Offset: 0
    keen::ds::UiLocaTagReference invalidUiString; // Offset: 16
    keen::ds::UiLocaTagReference closedBetaHint; // Offset: 32
    keen::ds::UiLocaTagReference demoSettingsHint; // Offset: 48
    keen::ds::FbUiLocaRpgTerms rpgTerms; // Offset: 64
    keen::ds::FbUiLocaGeneric genericStrings; // Offset: 5600
    keen::ds::FbUiLocaPunctuations punctuations; // Offset: 5648
    keen::ds::FbUiLocaUiActionLabels uiActions; // Offset: 6336
    keen::ds::FbUiLocaGameplayActionLabels gameplayActions; // Offset: 8352
    keen::ds::FbUiLocaInput inputStrings; // Offset: 9840
    keen::ds::FbUiLocaHud hudStrings; // Offset: 10080
    keen::ds::FbUiLocaInventory inventory; // Offset: 12832
    keen::ds::FbUiLocaMenus menuStrings; // Offset: 15088
    keen::ds::FbUiLocaCrafting crafting; // Offset: 24536
    keen::ds::FbUiLocaItemEquipmentSlots itemEquipmentSlots; // Offset: 25576
};

struct FbUiCharacterView {
    keen::float3 lookAt; // Offset: 0
    keen::float32 distance; // Offset: 12
    keen::float32 pitch; // Offset: 16
    keen::float32 yaw; // Offset: 20
    keen::float32 fov; // Offset: 24
};

typedef keen::FbUiGamepadButtonImageTagId FbUiGamepadButtonImageTagId;

struct FbUiGamepadButtonSet {
    keen::ds::UiTexture dpad; // Offset: 0
    keen::ds::UiTexture dpadLeft; // Offset: 48
    keen::ds::UiTexture dpadRight; // Offset: 96
    keen::ds::UiTexture dpadUp; // Offset: 144
    keen::ds::UiTexture dpadDown; // Offset: 192
    keen::ds::UiTexture dpadVertical; // Offset: 240
    keen::ds::UiTexture dpadHorizontal; // Offset: 288
    keen::ds::UiTexture leftStick; // Offset: 336
    keen::ds::UiTexture rightStick; // Offset: 384
    keen::ds::UiTexture leftStickPress; // Offset: 432
    keen::ds::UiTexture rightStickPress; // Offset: 480
    keen::ds::UiTexture leftStickUp; // Offset: 528
    keen::ds::UiTexture leftStickDown; // Offset: 576
    keen::ds::UiTexture leftStickLeft; // Offset: 624
    keen::ds::UiTexture leftStickRight; // Offset: 672
    keen::ds::UiTexture leftStickDirectionalHorizontal; // Offset: 720
    keen::ds::UiTexture leftStickDirectionalVertical; // Offset: 768
    keen::ds::UiTexture rightStickUp; // Offset: 816
    keen::ds::UiTexture rightStickDown; // Offset: 864
    keen::ds::UiTexture rightStickLeft; // Offset: 912
    keen::ds::UiTexture rightStickRight; // Offset: 960
    keen::ds::UiTexture rightStickDirectionalHorizontal; // Offset: 1008
    keen::ds::UiTexture rightStickDirectionalVertical; // Offset: 1056
    keen::ds::UiTexture faceTop; // Offset: 1104
    keen::ds::UiTexture faceBottom; // Offset: 1152
    keen::ds::UiTexture faceLeft; // Offset: 1200
    keen::ds::UiTexture faceRight; // Offset: 1248
    keen::ds::UiTexture shoulderLeftUpper; // Offset: 1296
    keen::ds::UiTexture shoulderLeftLower; // Offset: 1344
    keen::ds::UiTexture shoulderRightUpper; // Offset: 1392
    keen::ds::UiTexture shoulderRightLower; // Offset: 1440
    keen::ds::UiTexture systemLeft; // Offset: 1488
    keen::ds::UiTexture systemRight; // Offset: 1536
};

struct FbUiGamepadButtonSets {
    keen::ds::UiTexture controllerShape; // Offset: 0
    keen::ds::UiTexture genericController; // Offset: 48
    keen::ds::UiTexture controllerPlaystation; // Offset: 96
    keen::ds::UiTexture controllerNintendoSwitch; // Offset: 144
    keen::ds::UiTexture genericButtonsForms; // Offset: 192
    keen::ds::UiTexture genericButtonsXABY; // Offset: 240
    keen::ds::UiTexture genericButtonsYBAX; // Offset: 288
    keen::UiColor diagramKeyColor; // Offset: 336
    keen::ds::FbUiGamepadButtonSet xbox; // Offset: 344
    keen::ds::FbUiGamepadButtonSet playstation; // Offset: 1928
    keen::ds::FbUiGamepadButtonSet nintendoSwitch; // Offset: 3512
    keen::ds::UiTexture twoHeadedArrowHorizontal; // Offset: 5096
    keen::ds::UiTexture twoHeadedArrowVertical; // Offset: 5144
};

struct UiNineSliceTexture {
    keen::UiBorder border; // Offset: 48
};

struct FbUiKeyboardKeys {
    keen::ds::UiTexture standardKey; // Offset: 0
    keen::ds::UiNineSliceTexture nineSlicedKey; // Offset: 48
};

struct FbUiKeyboardKeyLegends {
    keen::ds::UiTexture up; // Offset: 0
    keen::ds::UiTexture down; // Offset: 48
    keen::ds::UiTexture left; // Offset: 96
    keen::ds::UiTexture right; // Offset: 144
};

struct FbUiMouseHints {
    keen::ds::UiTexture left; // Offset: 0
    keen::ds::UiTexture right; // Offset: 48
    keen::ds::UiTexture middle; // Offset: 96
    keen::ds::UiTexture button4; // Offset: 144
    keen::ds::UiTexture button5; // Offset: 192
    keen::ds::UiTexture wheel; // Offset: 240
    keen::ds::UiTexture wheelUp; // Offset: 288
    keen::ds::UiTexture wheelDown; // Offset: 336
    keen::ds::UiTexture directionalContext; // Offset: 384
    keen::ds::UiTexture move; // Offset: 432
    keen::ds::UiTexture moveUp; // Offset: 480
    keen::ds::UiTexture moveDown; // Offset: 528
    keen::ds::UiTexture moveLeft; // Offset: 576
    keen::ds::UiTexture moveRight; // Offset: 624
};

struct FbUiGradients {
    keen::ds::UiTexture whiteToBlackTest; // Offset: 0
    keen::ds::UiTexture alphaToRight; // Offset: 48
    keen::ds::UiTexture alphaToBottom; // Offset: 96
    keen::ds::UiTexture alphaToBottomRight; // Offset: 144
    keen::ds::UiTexture alphaToTopBottom; // Offset: 192
    keen::ds::UiTexture alphaToLeftRight; // Offset: 240
    keen::ds::UiNineSliceTexture alphaToLeftRightSliced; // Offset: 288
};

struct FbUiPrimitives {
    keen::ds::UiTexture circle; // Offset: 0
    keen::ds::UiTexture circleOutline; // Offset: 48
    keen::ds::UiTexture circleSoftGlow; // Offset: 96
    keen::ds::UiTexture ringSoftGlow; // Offset: 144
    keen::ds::UiTexture diamond; // Offset: 192
    keen::ds::UiTexture triangle; // Offset: 240
    keen::ds::UiTexture separatorLineHorizontal; // Offset: 288
    keen::ds::UiTexture separatorLineHorizontalLeftHeavy; // Offset: 336
    keen::ds::UiTexture separatorLineVertical; // Offset: 384
    keen::ds::FbUiGradients gradients; // Offset: 432
    keen::ds::UiNineSliceTexture boxInnerGlow; // Offset: 784
    keen::ds::UiNineSliceTexture glowBoxSmall; // Offset: 848
    keen::ds::UiNineSliceTexture glowBoxLarge; // Offset: 912
    keen::ds::UiNineSliceTexture roundedBoxSmall; // Offset: 976
    keen::ds::UiNineSliceTexture roundedBoxSmallOutline; // Offset: 1040
    keen::ds::UiNineSliceTexture roundedBoxSmallOutlineThin; // Offset: 1104
    keen::ds::UiNineSliceTexture roundedBoxOutlineBuildingZone; // Offset: 1168
};

struct FbUiSocialLogos {
    keen::ds::UiTexture steam; // Offset: 0
    keen::ds::UiTexture discord; // Offset: 48
    keen::ds::UiTexture qq; // Offset: 96
    keen::ds::UiTexture yooreka; // Offset: 144
    keen::ds::UiTexture twitchText; // Offset: 192
    keen::ds::UiTexture twitchIcon; // Offset: 240
};

struct FbUiLoadingSymbol {
    keen::float32 logoHeight; // Offset: 0
    keen::UiColor dotFadeColor; // Offset: 4
};

struct FbUiStatusIcons {
    keen::ds::UiTexture happy; // Offset: 0
    keen::ds::UiTexture sheltered; // Offset: 48
    keen::ds::UiTexture bed; // Offset: 96
    keen::ds::UiTexture food; // Offset: 144
    keen::ds::UiTexture warmth; // Offset: 192
    keen::ds::UiTexture location; // Offset: 240
    keen::ds::UiTexture bedStandlone; // Offset: 288
    keen::ds::UiTexture shelteredStandlone; // Offset: 336
    keen::ds::UiTexture fullfilledNpcNeeds; // Offset: 384
};

struct FbUiGenericIcons {
    keen::ds::UiTexture attention; // Offset: 0
    keen::ds::UiTexture checkmark; // Offset: 48
    keen::ds::UiTexture fulfilled; // Offset: 96
    keen::ds::UiTexture unfulfilled; // Offset: 144
    keen::ds::UiTexture missing; // Offset: 192
    keen::ds::UiTexture weight; // Offset: 240
    keen::ds::UiTexture pin; // Offset: 288
    keen::ds::UiTexture menuAttentionMarker; // Offset: 336
    keen::ds::UiTexture speechBubble; // Offset: 384
    keen::ds::UiTexture speechBubbleImportant; // Offset: 432
    keen::ds::UiTexture speechBubbleDotDotDot; // Offset: 480
    keen::ds::UiTexture hudMarkerFill; // Offset: 528
    keen::ds::UiTexture hudMarkerOutline; // Offset: 576
    keen::ds::UiTexture hudMarkerQuestionMark; // Offset: 624
    keen::ds::UiTexture warningTriangle; // Offset: 672
    keen::ds::UiTexture forbidden; // Offset: 720
    keen::ds::UiTexture store; // Offset: 768
    keen::ds::UiTexture settings; // Offset: 816
    keen::ds::UiTexture arrowRight; // Offset: 864
    keen::ds::UiTexture arrowLeftRight; // Offset: 912
    keen::ds::UiTexture locked; // Offset: 960
    keen::ds::UiTexture star4; // Offset: 1008
    keen::ds::UiTexture star5; // Offset: 1056
    keen::ds::UiTexture itemRarity; // Offset: 1104
    keen::ds::UiTexture privateGame; // Offset: 1152
    keen::ds::UiTexture publicGame; // Offset: 1200
    keen::ds::UiTexture joinGame; // Offset: 1248
    keen::ds::UiTexture networkGood; // Offset: 1296
    keen::ds::UiTexture networkAcceptable; // Offset: 1344
    keen::ds::UiTexture networkBad; // Offset: 1392
    keen::ds::UiTexture infinitySymbol; // Offset: 1440
    keen::ds::UiTexture craftingCogwheel; // Offset: 1488
    keen::ds::UiTexture craftingInactiveLayer; // Offset: 1536
    keen::ds::UiTexture loadingIcon; // Offset: 1584
    keen::ds::UiTexture friendServer; // Offset: 1632
    keen::ds::UiTexture dedicatedServer; // Offset: 1680
    keen::ds::UiTexture nonDedicatedServer; // Offset: 1728
    keen::ds::UiTexture favouriteServerSet; // Offset: 1776
    keen::ds::UiTexture favouriteServerUnset; // Offset: 1824
    keen::ds::UiTexture hide; // Offset: 1872
    keen::ds::UiTexture visible; // Offset: 1920
    keen::ds::UiTexture hide_selected; // Offset: 1968
    keen::ds::UiTexture visible_selected; // Offset: 2016
    keen::ds::UiTexture externalLink; // Offset: 2064
    keen::ds::UiTexture sort; // Offset: 2112
    keen::ds::UiTexture moveStacks; // Offset: 2160
    keen::ds::UiTexture moveAll; // Offset: 2208
    keen::ds::UiTexture serverSettingProhibited; // Offset: 2256
    keen::ds::UiTexture permissionKick; // Offset: 2304
    keen::ds::UiTexture permissionEditBase; // Offset: 2352
    keen::ds::UiTexture permissionUpgradeBase; // Offset: 2400
    keen::ds::UiTexture permissionAccessStorage; // Offset: 2448
    keen::ds::UiTexture pwOptional; // Offset: 2496
    keen::ds::FbUiStatusIcons statusIcons; // Offset: 2544
};

typedef keen::FbUiCoverStyle FbUiCoverStyle;

struct FbUiCoverTransition {
    keen::ds::FbUiCoverStyle coverStyle; // Offset: 0
    keen::uint32 changeCount; // Offset: 4
};

struct FbUiCursors {
    keen::UiColor lockonColor; // Offset: 0
    keen::ds::UiTexture lockon; // Offset: 8
    keen::ds::UiTexture bow; // Offset: 56
    keen::ds::UiTexture bowFalloff; // Offset: 104
    keen::ds::UiTexture spell; // Offset: 152
    keen::ds::UiTexture spellArea; // Offset: 200
    keen::UiColor crosshairWarningColor; // Offset: 248
    keen::UiColor snappingReadyColor; // Offset: 256
    keen::UiColor snappingActiveColor; // Offset: 264
};

struct UiSkillTreeNode {
    keen::float2 pos; // Offset: 0
    keen::ds::string name; // Offset: 8
    keen::uint32 i; // Offset: 48
    keen::bool isA; // Offset: 52
    keen::bool isL; // Offset: 53
};

struct UiSkillTreeConnection {
    keen::uint32 a; // Offset: 0
    keen::uint32 b; // Offset: 4
};

struct UiSkillTree {
    keen::DsArray<keen::ds::UiSkillTreeNode> sList; // Offset: 0
    keen::DsArray<keen::ds::UiSkillTreeConnection> sConList; // Offset: 40
};

struct FbUiInline3SkillDescriptions {
    keen::ds::string jumpAttack; // Offset: 0
    keen::ds::string evadeAttack; // Offset: 40
    keen::ds::string doubleJump; // Offset: 80
    keen::ds::string attributeStrength; // Offset: 120
    keen::ds::string attributeDexterity; // Offset: 160
    keen::ds::string attributeIntelligence; // Offset: 200
};

struct FbUiSkillTreeFallbackTexts {
    keen::ds::string activeSkillName; // Offset: 0
    keen::ds::string activeSkillDesc; // Offset: 40
    keen::ds::string attributeName; // Offset: 80
    keen::ds::string attributeDesc; // Offset: 120
    keen::ds::string passiveSkillName; // Offset: 160
    keen::ds::string passiveSkillDesc; // Offset: 200
};

struct FbUiSkillNode {
    keen::float32 textureRadius; // Offset: 0
    keen::float32 glowScale; // Offset: 4
    keen::float32 contentRadius; // Offset: 8
    keen::float32 focusRadiusGrowth; // Offset: 12
    keen::ds::UiTexture mutedForEA; // Offset: 16
    keen::ds::UiTexture outOfReach; // Offset: 64
    keen::ds::UiTexture inReach; // Offset: 112
    keen::ds::UiTexture activated; // Offset: 160
    keen::ds::UiTexture glow; // Offset: 208
};

struct FbUiSkillNodes {
    keen::ds::UiTexture starter; // Offset: 0
    keen::float32 starterRadius; // Offset: 48
    keen::float32 skillIconScale; // Offset: 52
    keen::float32 skillIconSubjectTextureReferenceHeight; // Offset: 56
    keen::ds::FbUiSkillNode attributes; // Offset: 60
    keen::ds::FbUiSkillNode passiveSkill; // Offset: 316
    keen::ds::FbUiSkillNode activeSkill; // Offset: 572
};

struct FbUiSkillTreeLinkColors {
    keen::UiColor activatedCore; // Offset: 0
    keen::UiColor activatedGlow; // Offset: 8
    keen::UiColor adjacent; // Offset: 16
    keen::UiColor adjacentHover; // Offset: 24
    keen::UiColor inactive; // Offset: 32
    keen::UiColor muted; // Offset: 40
};

struct FbUiCanvasParallaxLayer {
    keen::ds::UiTexture texture; // Offset: 0
    keen::float2 sizeOnCanvas; // Offset: 48
    keen::float32 parallaxDistance; // Offset: 56
    keen::UiColor renderTint; // Offset: 60
};

struct FbUiSkillGlowColor {
    keen::UiColor idle; // Offset: 0
    keen::UiColor activated; // Offset: 8
};

struct FbUiSkillGlowColors {
    keen::ds::FbUiSkillGlowColor mage; // Offset: 0
    keen::ds::FbUiSkillGlowColor warrior; // Offset: 16
    keen::ds::FbUiSkillGlowColor ranger; // Offset: 32
    keen::ds::FbUiSkillGlowColor neutral; // Offset: 48
};

struct UiSkillTreeClassHint {
    keen::ds::UiLocaTagReference label; // Offset: 0
    keen::bool isPrimary; // Offset: 16
    keen::UiColor color; // Offset: 20
    keen::sint32 directionDegrees; // Offset: 28
    keen::float32 distanceFromRing; // Offset: 32
};

struct FbUiSkillTree {
    keen::DsArray<keen::float32> zoomSteps; // Offset: 0
    keen::DsArray<keen::ds::FbUiCanvasParallaxLayer> bgLayers; // Offset: 40
    keen::ds::FbUiCanvasParallaxLayer skillLayoutHelper; // Offset: 80
    keen::UiColor backgroundColor; // Offset: 148
    keen::ds::FbUiSkillTreeLinkColors linkColors; // Offset: 156
    keen::ds::UiTexture connectionDirectionalPulse; // Offset: 204
    keen::ds::UiTexture connectionCore; // Offset: 252
    keen::ds::UiTexture connectionCoreInactive; // Offset: 300
    keen::ds::UiTexture connectionCoreOneWayStretch; // Offset: 348
    keen::ds::UiTexture connectionCoreOneWayEnd; // Offset: 396
    keen::ds::UiTexture connectionGlow; // Offset: 444
    keen::UiColor connectionPulseColorGeneric; // Offset: 492
    keen::ds::UiTexture nodeHighlight; // Offset: 500
    keen::ds::UiTexture cursorHighlight; // Offset: 548
    keen::ds::FbUiSkillGlowColors glowColors; // Offset: 596
    keen::DsArray<keen::ds::UiSkillTreeClassHint> classHints; // Offset: 664
    keen::UiColor mageKeyColor; // Offset: 704
    keen::UiColor warriorKeyColor; // Offset: 712
    keen::UiColor rangerKeyColor; // Offset: 720
    keen::UiColor neutralClassKeyColor; // Offset: 728
    keen::UiColor mutedOverlayColor; // Offset: 736
    keen::ds::FbUiSkillNodes nodes; // Offset: 744
    keen::ds::UiTexture centerRing; // Offset: 1572
    keen::float32 centerRingRadius; // Offset: 1620
    keen::ds::FbUiSkillTreeFallbackTexts fallbackTexts; // Offset: 1624
};

struct FbUiMapMarkerIcons {
    keen::ds::UiTexture waypoint; // Offset: 0
    keen::ds::UiTexture playerCorpse; // Offset: 48
    keen::ds::UiTexture playerCorpseInDungeon; // Offset: 96
    keen::ds::UiTexture markerFrame; // Offset: 144
    keen::ds::UiTexture markerSelector; // Offset: 192
    keen::ds::UiTexture investigation; // Offset: 240
    keen::ds::UiTexture investigationOpaque; // Offset: 288
    keen::ds::UiTexture completed; // Offset: 336
    keen::ds::UiTexture playerPing; // Offset: 384
    keen::ds::UiTexture playerMarkerPing; // Offset: 432
    keen::UiColor playerPingColor; // Offset: 480
};

typedef keen::CustomMapMarkerColorScheme CustomMapMarkerColorScheme;

struct FbUiCustomMarkerColorScheme {
    keen::ds::CustomMapMarkerColorScheme colorSchemeType; // Offset: 0
    keen::UiColor baseColor; // Offset: 4
    keen::UiColor iconColor; // Offset: 12
};

struct FbUiCustomMapMarker {
    keen::StaticArray<keen::ds::FbUiCustomMarkerColorScheme,8> colors; // Offset: 0
    keen::ds::UiTexture markerBase; // Offset: 160
    keen::ds::UiTexture customMarkerSelector; // Offset: 208
    keen::ds::UiTexture customMarkerWaypoint; // Offset: 256
    keen::ds::UiTexture customMarkerHighlight; // Offset: 304
};

struct FbUiMapIsolineConfig {
    keen::float32 thickness; // Offset: 0
    keen::float32 alpha; // Offset: 4
};

struct FbUiMapZoomConfig {
    keen::float32 zoomScale; // Offset: 0
    keen::StaticArray<keen::ds::FbUiMapIsolineConfig,3> isolineConfigs; // Offset: 4
};

struct FbUiMapInvestigationArea {
    keen::ds::UiTexture pattern; // Offset: 0
    keen::float32 tileSize; // Offset: 48
    keen::ds::UiTexture mask; // Offset: 52
    keen::UiColor patternColor; // Offset: 100
    keen::UiColor bgColor; // Offset: 108
    keen::float2 alphaRange; // Offset: 116
    keen::float32 pulseCycleInSeconds; // Offset: 124
};

struct FbUiAdventureMap {
    keen::ds::UiTexture playerPosition; // Offset: 0
    keen::UiColor currentPlayerColor; // Offset: 48
    keen::UiColor otherPlayerColor; // Offset: 56
    keen::float2 fogZoneAlphaRange; // Offset: 64
    keen::Time fogZonePulseLength; // Offset: 72
    keen::float32 outerCornerNominalSize; // Offset: 80
    keen::ds::UiNineSliceTexture outerFrame; // Offset: 84
    keen::float32 frameInnerGradientNominalSize; // Offset: 148
    keen::ds::UiNineSliceTexture frameInnerGradient; // Offset: 152
    keen::ds::UiTexture cursorPiece; // Offset: 216
    keen::ds::UiTexture offscreenIconBubble; // Offset: 264
    keen::ds::UiTexture circularArea; // Offset: 312
    keen::ds::UiTexture markerRipple; // Offset: 360
    keen::ds::FbUiMapInvestigationArea investigation; // Offset: 408
    keen::ds::FbUiMapMarkerIcons markerIcons; // Offset: 536
    keen::DsArray<keen::ds::FbUiMapZoomConfig> zoomConfigs; // Offset: 1024
    keen::ds::FbUiCustomMapMarker customMarkers; // Offset: 1064
};

struct FbUiRecipeCategoryIcons {
    keen::ds::UiTexture swords; // Offset: 0
    keen::ds::UiTexture ammo; // Offset: 48
    keen::ds::UiTexture potion; // Offset: 96
    keen::ds::UiTexture misc; // Offset: 144
    keen::ds::UiTexture armor; // Offset: 192
    keen::ds::UiTexture magical; // Offset: 240
};

struct FbUiRecipeGroupDefinition {
    keen::ds::UiTexture icon; // Offset: 0
    keen::ds::ItemTagReference tagRef; // Offset: 48
    keen::ds::ItemCategory itemCategoryFallback; // Offset: 64
};

struct FbUiCrafting {
    keen::ds::FbUiRecipeCategoryIcons categoryIcons; // Offset: 0
    keen::UiColor ingredientBgColorDefault; // Offset: 288
    keen::UiColor sufficientIngredientColor; // Offset: 296
    keen::UiColor insufficientIngredientColor; // Offset: 304
    keen::UiColor successFlashColor; // Offset: 312
    keen::ds::UiTexture pinnedRecipeIcon; // Offset: 320
    keen::DsArray<keen::ds::FbUiRecipeGroupDefinition> groupDefinitions; // Offset: 368
    keen::DsArray<keen::ds::ItemTagReference> recipeSets; // Offset: 408
};

struct FbUiRecipeSetFolder {
};

struct FbUiRecipeSet {
};

struct FbUiWorldEvents {
};

struct FbUiWorldEvent {
    keen::HashKey32 eventId; // Offset: 0
    keen::ds::UiTexture mainTexture; // Offset: 4
    keen::ds::UiTexture ornament; // Offset: 52
    keen::UiColor initialColor; // Offset: 100
    keen::UiColor secondaryColor; // Offset: 108
    keen::UiColor rippleColor; // Offset: 116
    keen::float imageSize; // Offset: 124
    keen::ds::SoundContainerReference sfx; // Offset: 128
    keen::ds::UiLocaTagReference text; // Offset: 144
};

typedef keen::UiParagraphAlignment UiParagraphAlignment;

struct UiParagraphStyle {
    keen::ds::string identifier; // Offset: 0
    keen::float32 leading; // Offset: 40
    keen::bool enableAlignment; // Offset: 44
    keen::ds::UiParagraphAlignment alignment; // Offset: 45
    keen::float32 indentLeft; // Offset: 48
    keen::float32 indentRight; // Offset: 52
    keen::float32 lineSpacing; // Offset: 56
};

struct FbUiMenuParagraphStyles {
    keen::ds::UiParagraphStyle loreReaderBody; // Offset: 0
};

struct FbUiEquipmentBodyPartViews {
    keen::ds::FbUiCharacterView full; // Offset: 0
    keen::ds::FbUiCharacterView head; // Offset: 28
    keen::ds::FbUiCharacterView chest; // Offset: 56
    keen::ds::FbUiCharacterView arm; // Offset: 84
    keen::ds::FbUiCharacterView legs; // Offset: 112
    keen::ds::FbUiCharacterView feet; // Offset: 140
    keen::ds::FbUiCharacterView ring; // Offset: 168
};

struct FbUiHudMenuMetrics {
    keen::float32 lootingMenuWidth; // Offset: 0
    keen::float32 centerMessageBottomY; // Offset: 4
    keen::Time epicLootLeaveCenterDelay; // Offset: 8
    keen::ds::FbUiEquipmentBodyPartViews equipmentBodyPartViews; // Offset: 16
};

struct FbUiCustomizationViews {
    keen::ds::FbUiCharacterView fullBody; // Offset: 0
    keen::ds::FbUiCharacterView head; // Offset: 28
    keen::ds::FbUiCharacterView presetView; // Offset: 56
    keen::ds::FbUiCharacterView hairView; // Offset: 84
    keen::ds::FbUiCharacterView beardView; // Offset: 112
    keen::ds::FbUiCharacterView hairColorView; // Offset: 140
};

struct CharacterPresetObject {
    keen::ds::CharacterPresetObjectReference presetObject; // Offset: 0
    keen::ds::UiTexture previewImage; // Offset: 16
};

struct CharacterItemReferences {
    keen::ds::ItemReference itemReference; // Offset: 0
    keen::ds::UiTexture previewImage; // Offset: 16
};

struct FbUiCustomization {
    keen::ds::FbUiCustomizationViews characterViews; // Offset: 0
    keen::DsArray<keen::ds::CharacterPresetObject> presetObjects; // Offset: 168
    keen::DsArray<keen::ds::ColorPresetReference> hairColors; // Offset: 208
    keen::DsArray<keen::ds::ColorPresetReference> beardColors; // Offset: 248
    keen::DsArray<keen::ds::CharacterItemReferences> hairItems; // Offset: 288
    keen::DsArray<keen::ds::CharacterItemReferences> beardItems; // Offset: 328
    keen::DsArray<keen::ObjectReference<keen::ds::PaletteColor>> eyeColors; // Offset: 368
    keen::DsArray<keen::ObjectReference<keen::ds::PaletteColor>> eyeBrowColors; // Offset: 408
    keen::DsArray<keen::ObjectReference<keen::ds::PaletteColor>> skinColors; // Offset: 448
    keen::DsArray<keen::ObjectReference<keen::ds::VoicePack>> voiceItems; // Offset: 488
};

struct FbUiTileArtConfig {
    keen::float2 pivot; // Offset: 0
    keen::float32 scaleTweak; // Offset: 8
    keen::ds::UiTexture texture; // Offset: 12
};

struct FbUiMenuTiles {
    keen::float32 idleAlphaScale; // Offset: 0
    keen::float32 emptyContentAlphaScale; // Offset: 4
    keen::ds::FbUiTileArtConfig lockedContent; // Offset: 8
    keen::ds::FbUiTileArtConfig quests; // Offset: 68
    keen::ds::FbUiTileArtConfig flame; // Offset: 128
    keen::ds::FbUiTileArtConfig craftspeople; // Offset: 188
    keen::ds::FbUiTileArtConfig townsfolk; // Offset: 248
    keen::ds::FbUiTileArtConfig bases; // Offset: 308
    keen::ds::FbUiTileArtConfig workshops; // Offset: 368
    keen::ds::FbUiTileArtConfig lore; // Offset: 428
    keen::ds::FbUiTileArtConfig tutorials; // Offset: 488
    keen::ds::FbUiTileArtConfig altarUpgradeGeneric; // Offset: 548
    keen::DsArray<keen::ds::FbUiTileArtConfig> altarLevels; // Offset: 608
    keen::ds::FbUiTileArtConfig flameUpgrade; // Offset: 648
    keen::ds::FbUiTileArtConfig skilltree; // Offset: 708
};

struct FbUiMenuButtonTextures {
    keen::ds::UiNineSliceTexture background; // Offset: 0
    keen::ds::UiNineSliceTexture backgroundDestructive; // Offset: 64
    keen::ds::UiNineSliceTexture backGlow; // Offset: 128
    keen::ds::UiNineSliceTexture ornament; // Offset: 192
};

struct UiCharacterStyleActivePropertyFlags {
    keen::bool font; // Offset: 0
    keen::bool size; // Offset: 1
    keen::bool tracking; // Offset: 2
    keen::bool variant; // Offset: 3
    keen::bool uppercase; // Offset: 4
    keen::bool color; // Offset: 5
    keen::bool outline; // Offset: 6
    keen::bool dropShadow; // Offset: 7
};

struct UiCharacterStyle {
    keen::ds::string identifier; // Offset: 0
    keen::ds::UiCharacterStyleActivePropertyFlags activeProperties; // Offset: 40
    keen::ObjectReference<keen::ds::UiFont> font; // Offset: 48
    keen::float32 fontSize; // Offset: 64
    keen::float32 spacing; // Offset: 68
    keen::bool bold; // Offset: 72
    keen::bool italic; // Offset: 73
    keen::bool uppercase; // Offset: 74
    keen::UiColor color; // Offset: 76
    keen::bool outline; // Offset: 84
    keen::UiColor outlineColor; // Offset: 88
    keen::float32 outlineSize; // Offset: 96
    keen::bool dropShadow; // Offset: 100
    keen::UiColor dropShadowColor; // Offset: 104
    keen::float2 dropShadowOffset; // Offset: 112
};

struct FbUiMenuButton {
    keen::ds::FbUiMenuButtonTextures standalone; // Offset: 0
    keen::ds::FbUiMenuButtonTextures inGroupLeft; // Offset: 256
    keen::ds::FbUiMenuButtonTextures inGroupMiddle; // Offset: 512
    keen::ds::FbUiMenuButtonTextures inGroupRight; // Offset: 768
    keen::ds::FbUiMenuButtonTextures standaloneSmall; // Offset: 1024
    keen::ds::UiTexture sliderKnob; // Offset: 1280
    keen::ds::UiCharacterStyle labelStyle; // Offset: 1328
    keen::UiColor ornamentTint; // Offset: 1448
    keen::UiColor destructiveTint; // Offset: 1456
    keen::UiColor textColorDestructive; // Offset: 1464
};

struct FbUiMenuToggle {
    keen::ds::UiTexture toggleOn; // Offset: 0
    keen::ds::UiTexture toggleOff; // Offset: 48
    keen::ds::UiTexture backGlow; // Offset: 96
};

struct FbUiMenuScrollbar {
    keen::ds::UiNineSliceTexture slider; // Offset: 0
    keen::ds::UiNineSliceTexture range; // Offset: 64
    keen::UiColor rangeTint; // Offset: 128
};

struct FbUiCharacterInventory {
    keen::ds::UiTexture levelBadgeBackground; // Offset: 0
    keen::float2 xpBarLevelBadgeSize; // Offset: 48
};

struct FbUiMultiToolMenu {
    keen::ds::UiLocaTagReference materialHeader; // Offset: 0
    keen::ds::UiLocaTagReference tooltipMaterialHint; // Offset: 16
    keen::ds::UiLocaTagReference tooltipMaterialHintWithBlockUnit; // Offset: 32
    keen::ds::UiLocaTagReference tooltipEmptyMaterialListHint; // Offset: 48
    keen::ds::UiLocaTagReference itemSubInfo; // Offset: 64
    keen::ds::UiLocaTagReference preUseHint_QuickBuilder; // Offset: 80
    keen::ds::UiLocaTagReference preUseHint_Terraformer; // Offset: 96
    keen::ds::UiLocaTagReference preUseHint_NpcSummoner; // Offset: 112
    keen::ds::UiLocaTagReference preUseHintHud_QuickBuilder; // Offset: 128
    keen::ds::UiLocaTagReference preUseHintHud_Terraformer; // Offset: 144
    keen::ds::UiLocaTagReference preUseHintHud_NpcSummoner; // Offset: 160
    keen::ds::UiLocaTagReference noAltarBuild; // Offset: 176
    keen::ds::UiLocaTagReference craftBlocksHint; // Offset: 192
    keen::ds::UiLocaTagReference craftRoofBlocksHint; // Offset: 208
    keen::ds::UiLocaTagReference collectMaterialsHint; // Offset: 224
    keen::ds::UiLocaTagReference noMaterialsAvailable; // Offset: 240
    keen::ds::UiLocaTagReference needsFlameAltarHint; // Offset: 256
    keen::UiColor antiTofuTint_Temp; // Offset: 272
};

struct FbUiEquipmentSlotIcons {
    keen::ds::UiTexture mainHand; // Offset: 0
    keen::ds::UiTexture shield; // Offset: 48
    keen::ds::UiTexture backpackExtender; // Offset: 96
    keen::ds::UiTexture rangedWeapon; // Offset: 144
    keen::ds::UiTexture arrow; // Offset: 192
    keen::ds::UiTexture spell; // Offset: 240
    keen::ds::UiTexture wallClimber; // Offset: 288
    keen::ds::UiTexture hookshot; // Offset: 336
    keen::ds::UiTexture glider; // Offset: 384
    keen::ds::UiTexture accessory; // Offset: 432
    keen::ds::UiTexture ring; // Offset: 480
    keen::ds::UiTexture head; // Offset: 528
    keen::ds::UiTexture upperBody; // Offset: 576
    keen::ds::UiTexture arms; // Offset: 624
    keen::ds::UiTexture lowerBody; // Offset: 672
    keen::ds::UiTexture boots; // Offset: 720
    keen::ds::UiTexture vanity; // Offset: 768
};

struct FbUiPerkIcons {
    keen::ds::UiTexture nodeOutline; // Offset: 0
    keen::ds::UiTexture genericAttributeNode; // Offset: 48
};

struct FbUiFancyBox {
    keen::float32 cornerSize; // Offset: 0
    keen::ds::UiNineSliceTexture frame; // Offset: 4
    keen::ds::UiNineSliceTexture frameSimple; // Offset: 68
    keen::UiColor frameColor; // Offset: 132
    keen::ds::UiNineSliceTexture backgroundShape; // Offset: 140
    keen::ds::UiNineSliceTexture backgroundShapeHalved; // Offset: 204
    keen::ds::UiNineSliceTexture backgroundShapeGlassMask; // Offset: 268
    keen::ds::UiNineSliceTexture backgroundShapeHalvedGlassMask; // Offset: 332
    keen::UiColor backgroundColor; // Offset: 396
    keen::UiColor backgroundColorDark; // Offset: 404
    keen::ds::UiTexture backgroundPattern; // Offset: 412
    keen::UiColor backgroundPatternColor; // Offset: 460
    keen::float32 patternSize; // Offset: 468
    keen::ds::UiNineSliceTexture frameFull; // Offset: 472
    keen::ds::UiNineSliceTexture backgroundShapeFrameFull; // Offset: 536
    keen::ds::UiNineSliceTexture backgroundShapeGradientToLeft; // Offset: 600
    keen::ds::UiNineSliceTexture backgroundShapeGradientToTop; // Offset: 664
    keen::ds::UiNineSliceTexture frameFullSimple; // Offset: 728
    keen::ds::UiNineSliceTexture backgroundShapeFrameFullSimple; // Offset: 792
    keen::ds::UiNineSliceTexture frameTopMinimal; // Offset: 856
    keen::ds::UiNineSliceTexture backgroundShapeTopMinimal; // Offset: 920
    keen::ds::UiNineSliceTexture frameFullDetailed; // Offset: 984
    keen::ds::UiNineSliceTexture backgroundShapeFrameFullDetailed; // Offset: 1048
};

struct FbUiFancyLoadingBar {
    keen::ds::UiNineSliceTexture background; // Offset: 0
    keen::ds::UiNineSliceTexture bar; // Offset: 64
    keen::ds::UiNineSliceTexture glow; // Offset: 128
    keen::UiColor sectionCompletedColor; // Offset: 192
};

typedef keen::UiSize UiSize;

struct FbUiMenuExplainer {
    keen::UiColor darkenerColor; // Offset: 0
    keen::float32 areaFeatherSize; // Offset: 8
    keen::ds::UiSize areaContentPadding; // Offset: 12
    keen::float32 textMaxWidth; // Offset: 20
    keen::UiColor textColor; // Offset: 24
};

struct FbUiJournalBaseInfo {
    keen::ds::UiTexture iconFlameAltar; // Offset: 0
    keen::ds::UiTexture iconNpc; // Offset: 48
    keen::ds::UiTexture iconNpcBed; // Offset: 96
    keen::ds::UiTexture iconAnimal; // Offset: 144
};

struct FbUiCodexAssets {
    keen::ds::UiTexture questSourceIconBG; // Offset: 0
    keen::ds::UiTexture repeatedQuestSourceIconBG; // Offset: 48
    keen::ds::UiTexture questIconFlame; // Offset: 96
    keen::ds::UiTexture questIconBlacksmith; // Offset: 144
    keen::ds::UiTexture questIconAlchemist; // Offset: 192
    keen::ds::UiTexture questIconHunter; // Offset: 240
    keen::ds::UiTexture questIconCarpenter; // Offset: 288
    keen::ds::UiTexture questIconFarmer; // Offset: 336
    keen::ds::UiTexture questIconCryptKeeper; // Offset: 384
    keen::ds::UiTexture questIconBard; // Offset: 432
    keen::ds::UiTexture questIconMisc; // Offset: 480
    keen::ds::UiTexture questIconTexture; // Offset: 528
    keen::ds::UiTexture questProgressEmpty; // Offset: 576
    keen::ds::UiTexture questProgressFilled; // Offset: 624
    keen::ds::UiTexture questCheckmark; // Offset: 672
    keen::ds::UiTexture lorePageFound; // Offset: 720
    keen::ds::UiTexture lorePageLocked; // Offset: 768
    keen::ds::UiTexture activeQuestIndicator; // Offset: 816
    keen::ds::UiTexture lockedLoreTileImage; // Offset: 864
    keen::UiColor completedQuestsColor; // Offset: 912
    keen::UiColor flameQuestEntryColor; // Offset: 920
    keen::UiColor npcQuestEntryColor; // Offset: 928
    keen::UiColor miscQuestEntryColor; // Offset: 936
    keen::UiColor repeatedQuestEntryColor; // Offset: 944
    keen::ds::FbUiJournalBaseInfo baseInfo; // Offset: 952
};

struct FbUiLoreCategory {
    keen::ds::UiLocaTagReference categoryName; // Offset: 0
    keen::ds::FbUiTileArtConfig artConfig; // Offset: 16
};

struct FbUiMenuAttributeTabs {
    keen::ds::UiTexture basicsTab; // Offset: 0
    keen::ds::UiTexture damageTab; // Offset: 48
    keen::ds::UiTexture resistanceTab; // Offset: 96
};

struct FbUiCollectionCategoryInfo {
    keen::ObjectReference<keen::ds::ItemCollectionCategory> category; // Offset: 0
    keen::ds::UiLocaTagReference label; // Offset: 16
    keen::ds::UiTexture icon; // Offset: 32
};

struct FbUiDifficultyOptionValue {
    keen::bool isAvailable; // Offset: 0
    keen::DsArray<keen::float> steps; // Offset: 8
};

struct FbUiDifficultyOptionValues {
    keen::ds::FbUiDifficultyOptionValue enemyDamage; // Offset: 0
    keen::ds::FbUiDifficultyOptionValue enemyHealth; // Offset: 48
    keen::ds::FbUiDifficultyOptionValue enemyStamina; // Offset: 96
    keen::ds::FbUiDifficultyOptionValue enemyPerceptionRange; // Offset: 144
    keen::ds::FbUiDifficultyOptionValue enemyAttackFrequency; // Offset: 192
    keen::ds::FbUiDifficultyOptionValue bossHealth; // Offset: 240
    keen::ds::FbUiDifficultyOptionValue bossDamage; // Offset: 288
    keen::ds::FbUiDifficultyOptionValue miningXp; // Offset: 336
    keen::ds::FbUiDifficultyOptionValue questXp; // Offset: 384
    keen::ds::FbUiDifficultyOptionValue combatXp; // Offset: 432
    keen::ds::FbUiDifficultyOptionValue playerHealth; // Offset: 480
    keen::ds::FbUiDifficultyOptionValue playerStamina; // Offset: 528
    keen::ds::FbUiDifficultyOptionValue playerMana; // Offset: 576
    keen::ds::FbUiDifficultyOptionValue shroudTime; // Offset: 624
    keen::ds::FbUiDifficultyOptionValue durability; // Offset: 672
    keen::ds::FbUiDifficultyOptionValue dayTime; // Offset: 720
    keen::ds::FbUiDifficultyOptionValue nightTime; // Offset: 768
    keen::ds::FbUiDifficultyOptionValue foodDuration; // Offset: 816
    keen::ds::FbUiDifficultyOptionValue productionTime; // Offset: 864
    keen::ds::FbUiDifficultyOptionValue plantGrowTime; // Offset: 912
    keen::ds::FbUiDifficultyOptionValue weaponUpgradeCost; // Offset: 960
    keen::ds::FbUiDifficultyOptionValue perkUpgradeRecyclingFactor; // Offset: 1008
    keen::ds::FbUiDifficultyOptionValue worldRefreshTime; // Offset: 1056
    keen::ds::FbUiDifficultyOptionValue miningDamage; // Offset: 1104
    keen::ds::FbUiDifficultyOptionValue dropAmount; // Offset: 1152
    keen::ds::FbUiDifficultyOptionValue starvingTime; // Offset: 1200
    keen::ds::FbUiDifficultyOptionValue bodyHeat; // Offset: 1248
    keen::bool tombstoneMode; // Offset: 1296
    keen::bool randomSpawnerAmount; // Offset: 1297
    keen::bool aggroPoolAmount; // Offset: 1298
    keen::bool enableDurability; // Offset: 1299
    keen::bool enableStarvingDebuff; // Offset: 1300
    keen::bool pacifyAllEnemies; // Offset: 1301
    keen::bool weatherFrequency; // Offset: 1302
    keen::bool enableGliderTurbulences; // Offset: 1303
    keen::bool tamingStartleRepercussion; // Offset: 1304
};

struct FbUiDifficultyPreset {
    keen::ds::ecs::GameSettingsPreset presetId; // Offset: 0
    keen::ds::UiLocaTagReference label; // Offset: 4
    keen::ds::UiLocaTagReference desc; // Offset: 20
    keen::ds::UiTexture iconSelected; // Offset: 36
    keen::ds::UiTexture iconUnelected; // Offset: 84
    keen::ds::UiTexture iconSmall; // Offset: 132
    keen::ds::ecs::GameSettings settings; // Offset: 184
};

struct FbUiDifficultySettings {
    keen::ds::FbUiDifficultyOptionValues settingValues; // Offset: 0
    keen::ds::FbUiDifficultyPreset presetDefault; // Offset: 1312
    keen::ds::FbUiDifficultyPreset presetBuilder; // Offset: 1624
    keen::ds::FbUiDifficultyPreset presetSurvivalist; // Offset: 1936
    keen::ds::FbUiDifficultyPreset presetCombatChallenge; // Offset: 2248
    keen::ds::FbUiDifficultyPreset custom; // Offset: 2560
    keen::ds::UiTexture presetIconHighlight; // Offset: 2872
};

struct FbUiMenu {
    keen::ds::FbUiHudMenuMetrics metrics; // Offset: 0
    keen::ds::FbUiMenuParagraphStyles paragraphStyles; // Offset: 216
    keen::ds::FbUiCharacterInventory characterInventory; // Offset: 280
    keen::ds::FbUiSkillTree skilltree; // Offset: 336
    keen::ds::FbUiAdventureMap map; // Offset: 2200
    keen::ds::FbUiCrafting crafting; // Offset: 3616
    keen::DsArray<keen::ds::FbUiCollectionCategoryInfo> collectionCategories; // Offset: 4064
    keen::ds::FbUiMultiToolMenu multiTool; // Offset: 4104
    keen::ds::FbUiEquipmentSlotIcons equipmentSlots; // Offset: 4384
    keen::ds::FbUiPerkIcons itemPerkIcons; // Offset: 5200
    keen::ds::FbUiMenuAttributeTabs attributeTabs; // Offset: 5296
    keen::ds::FbUiMenuTiles menuTiles; // Offset: 5440
    keen::ds::UiTexture codexMotherflameIllustration; // Offset: 6208
    keen::ds::FbUiCodexAssets codexAssets; // Offset: 6256
    keen::DsArray<keen::ds::FbUiLoreCategory> loreCategories; // Offset: 7400
    keen::ds::FbUiMenuButton button; // Offset: 7440
    keen::ds::FbUiMenuToggle toggle; // Offset: 8912
    keen::ds::FbUiMenuScrollbar scrollbar; // Offset: 9056
    keen::ds::FbUiFancyLoadingBar loadingBar; // Offset: 9192
    keen::UiColor frostedGlassDefaultTint; // Offset: 9392
    keen::UiColor backgroundDarkenerColor; // Offset: 9400
    keen::ds::UiNineSliceTexture topTabBackground; // Offset: 9408
    keen::UiColor tabLabelIdleColor; // Offset: 9472
    keen::UiColor tabLabelHighlightColor; // Offset: 9480
    keen::UiColor tabHighlightColor; // Offset: 9488
    keen::ds::UiNineSliceTexture tabHighlight; // Offset: 9496
    keen::UiColor basicWidgetColor; // Offset: 9560
    keen::UiColor basicWidgetColorHighlighted; // Offset: 9568
    keen::UiColor tileBackgroundColor; // Offset: 9576
    keen::UiColor tileHighlightOutlineColor; // Offset: 9584
    keen::ds::UiNineSliceTexture basicWidgetMinimizedShape; // Offset: 9592
    keen::ds::UiNineSliceTexture basicWidgetBackground; // Offset: 9656
    keen::ds::UiNineSliceTexture basicWidgetBackgroundWide; // Offset: 9720
    keen::ds::UiNineSliceTexture basicWidgetBackgroundLarge; // Offset: 9784
    keen::ds::UiNineSliceTexture basicWidgetBackgroundFaded; // Offset: 9848
    keen::ds::UiNineSliceTexture basicWidgetHeader; // Offset: 9912
    keen::ds::UiNineSliceTexture basicWidgetRarityStripe; // Offset: 9976
    keen::ds::UiNineSliceTexture basicWidgetHighlightOutline; // Offset: 10040
    keen::ds::FbUiFancyBox fancyBox; // Offset: 10104
    keen::ds::UiNineSliceTexture pillWidgetBackground; // Offset: 11216
    keen::ds::UiTexture flameIcon; // Offset: 11280
    keen::ds::UiTexture moveStacksLeftIcon; // Offset: 11328
    keen::ds::UiTexture moveStacksRightIcon; // Offset: 11376
    keen::ds::UiTexture iconPlayerInventory; // Offset: 11424
    keen::ds::UiTexture iconStorageInventory; // Offset: 11472
    keen::ds::UiTexture iconOpenInventoryTransactions; // Offset: 11520
    keen::ds::UiTexture spatialFactoryInfoBg; // Offset: 11568
    keen::ds::UiTexture actionbarTutorialKeyImage; // Offset: 11616
    keen::ds::UiTexture fancyToggleSmallOff; // Offset: 11664
    keen::ds::UiTexture fancyToggleSmallOn; // Offset: 11712
    keen::ds::FbUiMenuExplainer explainer; // Offset: 11760
};

struct FbUiItemSlotFrame {
    keen::ds::UiTexture shapeBase; // Offset: 0
    keen::ds::UiTexture shapeSubtle; // Offset: 48
    keen::ds::UiTexture outline; // Offset: 96
};

struct FbUiItemSlotMinimal {
    keen::ds::UiTexture cookable; // Offset: 0
    keen::ds::UiTexture uncookable; // Offset: 48
    keen::ds::UiTexture empty; // Offset: 96
};

struct FbUiItemEquipIndicator {
    keen::ds::UiLocaTagReference label; // Offset: 0
    keen::ds::UiTexture texture; // Offset: 16
    keen::UiColor color; // Offset: 64
    keen::bool useFrame; // Offset: 72
};

struct FbUiItemStackProperties {
    keen::ds::UiTexture isNew; // Offset: 0
    keen::ds::UiTexture equippableFrame; // Offset: 48
    keen::ds::UiTexture equipMissingHint; // Offset: 96
    keen::ds::UiLocaTagReference initialEquipActionMessage; // Offset: 144
    keen::ds::UiLocaTagReference labelEquipped; // Offset: 160
    keen::ds::UiLocaTagReference labelUnequipped; // Offset: 176
    keen::ds::FbUiItemEquipIndicator actionBarHighlight; // Offset: 192
    keen::ds::FbUiItemEquipIndicator instaUse; // Offset: 268
    keen::ds::FbUiItemEquipIndicator armor; // Offset: 344
    keen::ds::FbUiItemEquipIndicator vanityArmor; // Offset: 420
    keen::ds::FbUiItemEquipIndicator rangedWeapon; // Offset: 496
    keen::ds::FbUiItemEquipIndicator arrow; // Offset: 572
    keen::ds::FbUiItemEquipIndicator spell; // Offset: 648
    keen::ds::FbUiItemEquipIndicator blueprintDefaultShape; // Offset: 724
    keen::ds::FbUiItemEquipIndicator blueprintDefaultMaterial; // Offset: 800
    keen::ds::FbUiItemEquipIndicator blueprintRoofShape; // Offset: 876
    keen::ds::FbUiItemEquipIndicator blueprintRoofMaterial; // Offset: 952
    keen::ds::FbUiItemEquipIndicator blueprintTerrainShape; // Offset: 1028
    keen::ds::FbUiItemEquipIndicator blueprintTerrainMaterial; // Offset: 1104
    keen::ds::FbUiItemEquipIndicator missingTwitchPermission; // Offset: 1180
    keen::UiColor durabilityColorDefault; // Offset: 1256
    keen::UiColor durabilityColorLow; // Offset: 1264
    keen::UiColor durabilityColorDraining; // Offset: 1272
    keen::UiColor durabilityColorDrainingLow; // Offset: 1280
};

struct FbUiItemSlot {
    keen::ds::FbUiItemStackProperties properties; // Offset: 0
    keen::ds::FbUiItemSlotFrame backpack; // Offset: 1288
    keen::ds::FbUiItemSlotMinimal minimal; // Offset: 1432
    keen::ds::UiCharacterStyle countNumberStyle; // Offset: 1576
    keen::UiColor grabAmountColor; // Offset: 1696
    keen::UiColor backgroundColor; // Offset: 1704
    keen::UiColor backgroundColorBright; // Offset: 1712
    keen::ds::UiTexture actionbarPageInactive; // Offset: 1720
    keen::ds::UiTexture actionbarPageActive; // Offset: 1768
    keen::ds::UiTexture pageHint; // Offset: 1816
    keen::ds::UiTexture blueprintBackground; // Offset: 1864
    keen::ds::UiTexture blueprintTypeIconMini; // Offset: 1912
    keen::ds::UiTexture blueprintIntroItemIcon; // Offset: 1960
};

struct FbUiBlueprint {
    keen::ds::UiLocaTagReference introRecipeName; // Offset: 0
    keen::ds::UiLocaTagReference introRecipeDescription1; // Offset: 16
    keen::ds::UiLocaTagReference introRecipeDescription2; // Offset: 32
    keen::ds::UiLocaTagReference introItemSubinfo; // Offset: 48
    keen::ds::UiLocaTagReference introItemEmptyHint; // Offset: 64
    keen::ds::UiLocaTagReference introItemUsageHint; // Offset: 80
    keen::ds::UiLocaTagReference materialHeader; // Offset: 96
    keen::ds::UiLocaTagReference tooltipMaterialHint; // Offset: 112
    keen::ds::UiLocaTagReference tooltipMaterialHintWithBlockUnit; // Offset: 128
    keen::ds::UiLocaTagReference tooltipEmptyMaterialListHint; // Offset: 144
    keen::UiColor antiTofuTint_Temp; // Offset: 160
};

struct FbUiBuffIcons {
    keen::ds::UiTexture circularBarMask; // Offset: 0
    keen::UiColor frameColor; // Offset: 48
    keen::UiColor pieFillColor; // Offset: 56
    keen::UiColor pieFillColorHungry; // Offset: 64
    keen::UiColor pieFillColorStarving; // Offset: 72
    keen::UiColor pieLineColor; // Offset: 80
    keen::ds::UiTexture extremeCold; // Offset: 88
    keen::ds::UiTexture extremeHeat; // Offset: 136
    keen::ds::UiTexture restedConditionsBracket; // Offset: 184
};

struct FbUiAnimatedHealthBarColors {
    keen::UiColor frameColor; // Offset: 0
    keen::UiColor rangeColor; // Offset: 8
    keen::UiColor fillColor; // Offset: 16
    keen::UiColor fillEndColor; // Offset: 24
    keen::UiColor damageColor; // Offset: 32
    keen::UiColor healColor; // Offset: 40
};

struct FbUiHudBuffDisplay {
    keen::float2 textEntriesOffset; // Offset: 0
    keen::float32 offsetY; // Offset: 8
    keen::float32 iconColumnsDistance; // Offset: 12
    keen::float32 restedAnchorSize; // Offset: 16
    keen::float2 restedBarPieceSize; // Offset: 20
};

struct FbUiHudPlayerStatus {
    keen::float2 widgetBaseOffset; // Offset: 0
    keen::float4 flameWarningThresholds; // Offset: 8
    keen::ds::FbUiHudBuffDisplay buffDisplay; // Offset: 24
    keen::ds::UiNineSliceTexture barBackground; // Offset: 52
    keen::float4 barBorderThickness; // Offset: 116
    keen::float2 barGroupOffset; // Offset: 132
    keen::float2 xpBarSize; // Offset: 140
    keen::float2 xpBarOffset; // Offset: 148
    keen::float32 xpBarDisplayTime; // Offset: 156
    keen::float2 healthBarSize; // Offset: 160
    keen::float2 manaBarSize; // Offset: 168
    keen::ds::UiTexture staminaCircleMain; // Offset: 176
    keen::ds::UiTexture staminaCircleBuff; // Offset: 224
    keen::ds::UiTexture staminaCircleInner; // Offset: 272
    keen::DsArray<keen::float32> staminaCirlceSizesInner; // Offset: 320
    keen::DsArray<keen::float32> staminaCirlceSizesOuter; // Offset: 360
    keen::ds::FbUiAnimatedHealthBarColors xpColors; // Offset: 400
    keen::ds::FbUiAnimatedHealthBarColors healthColors; // Offset: 448
    keen::ds::FbUiAnimatedHealthBarColors staminaColors; // Offset: 496
    keen::ds::FbUiAnimatedHealthBarColors manaColors; // Offset: 544
};

struct FbUiAltarAttentionMarkerAnim {
    keen::Time altarAttentionMarkerFadeIn; // Offset: 0
    keen::Time altarAttentionMarkerFadeOut; // Offset: 8
    keen::Time altarAttentionMarkerSecondPingDelay; // Offset: 16
    keen::Time altarAttentionMarkerAnimDelay; // Offset: 24
    keen::float32 altarAttentionMarkerGrow; // Offset: 32
    keen::float32 altarAttentionMarkerPingSize; // Offset: 36
    keen::float32 altarAttentionMarkerMinAlpha; // Offset: 40
    keen::float32 altarAttentionMarkerPingStartAlpha; // Offset: 44
    keen::float32 altarAttentionMarkerPingEndAlpha; // Offset: 48
};

struct FbUiHUDSpatial {
    keen::ds::UiTexture lockonBackground; // Offset: 0
    keen::ds::UiTexture lockonArrow; // Offset: 48
    keen::float32 lockonArrowSize; // Offset: 96
    keen::ds::UiNineSliceTexture healthBar; // Offset: 100
    keen::ds::UiTexture critIndicator; // Offset: 164
    keen::float2 critIndcatorOffset; // Offset: 212
    keen::float32 bonusIndicatorUnitHeight; // Offset: 220
    keen::ds::UiTexture bonusIndicator; // Offset: 224
    keen::ds::UiTexture malusIndicator; // Offset: 272
    keen::float2 bonusGroupOffset; // Offset: 320
    keen::float2 malusGroupOffset; // Offset: 328
    keen::float2 symbolOffset; // Offset: 336
    keen::float2 enemyHealthBarSize; // Offset: 344
    keen::float2 enemyStaminaBarSize; // Offset: 352
    keen::float2 enemyBarGroupBorder; // Offset: 360
    keen::UiColor damageTextBonusFill; // Offset: 368
    keen::UiColor damageTextBonusOutlineFrom; // Offset: 376
    keen::UiColor damageTextBonusOutlineTo; // Offset: 384
    keen::UiColor damageTextMalusFill; // Offset: 392
    keen::UiColor damageTextMalusOutlineFrom; // Offset: 400
    keen::UiColor damageTextMalusOutlineTo; // Offset: 408
    keen::UiColor attentionMarkerQuestionFill; // Offset: 416
    keen::UiColor attentionMarkerFlameInfoFill; // Offset: 424
    keen::ds::FbUiAnimatedHealthBarColors coPlayerHealthColors; // Offset: 432
    keen::UiColor coPlayerLevelBadgeFill; // Offset: 480
    keen::UiColor coPlayerLevelBadgeOutline; // Offset: 488
    keen::UiColor enemyLevelBadgeFill; // Offset: 496
    keen::UiColor enemyLevelBadgeOutline; // Offset: 504
    keen::ds::FbUiAnimatedHealthBarColors enemyHealthColors; // Offset: 512
    keen::ds::FbUiAnimatedHealthBarColors enemyStaminaColors; // Offset: 560
    keen::UiColor enemyHigherLevelBadgeFill; // Offset: 608
    keen::UiColor enemyHigherLevelBadgeOutline; // Offset: 616
    keen::ds::FbUiAnimatedHealthBarColors enemyHigherLevelHealthColors; // Offset: 624
    keen::ds::FbUiAnimatedHealthBarColors neutralHealthColors; // Offset: 672
    keen::UiColor neutralLevelBadgeFill; // Offset: 720
    keen::UiColor neutralLevelBadgeOutline; // Offset: 728
    keen::ds::FbUiAltarAttentionMarkerAnim altarAttentionMarkerAnim; // Offset: 736
    keen::ds::UiTexture hookshotPullTargetIcon; // Offset: 792
    keen::ds::UiTexture hookshotPullTargetIconLockIn; // Offset: 840
};

struct FbUiHudBuildModeHint {
    keen::ds::UiTexture slotArc; // Offset: 0
    keen::ds::UiTexture flashGradient; // Offset: 48
    keen::ds::UiTexture flashMask; // Offset: 96
    keen::UiColor flashColor; // Offset: 144
};

struct FbUiHudTopNotification {
    keen::UiColor bgTintColor; // Offset: 0
    keen::UiColor accentColor; // Offset: 8
    keen::float32 barMinWidth; // Offset: 16
    keen::float32 featherWidth; // Offset: 20
    keen::float32 fadeWaveWidth; // Offset: 24
    keen::float32 fadeInFromX; // Offset: 28
    keen::float32 offsetY; // Offset: 32
    keen::float32 offsetYinPlayerMenu; // Offset: 36
};

struct FbUiHudLowHealth {
    keen::ds::UiTexture vignette; // Offset: 0
    keen::UiColor vignetteColor; // Offset: 48
    keen::UiColor enterLowHealthFlashColor; // Offset: 56
};

struct FbUiHudFreezing {
    keen::ds::UiTexture frostBorderCorner; // Offset: 0
    keen::float32 frostBorderCornerHeightTop; // Offset: 48
    keen::float32 frostBorderCornerHeightBottom; // Offset: 52
    keen::ds::UiTexture frostBorderTop; // Offset: 56
    keen::ds::UiTexture creepInGradientTop; // Offset: 104
    keen::float32 frostBorderHeightTop; // Offset: 152
    keen::ds::UiTexture frostBorderLeft; // Offset: 156
    keen::ds::UiTexture creepInGradientLeft; // Offset: 204
    keen::float32 frostBorderHeightBottom; // Offset: 252
    keen::float32 frostBorderWidthLeftRight; // Offset: 256
    keen::UiColor frostBorderTint; // Offset: 260
    keen::float32 bgBlurCenterYratio; // Offset: 268
    keen::ds::UiTexture bgBlurVignetteTopLeft; // Offset: 272
    keen::ds::UiTexture bgBlurVignetteTop; // Offset: 320
    keen::ds::UiTexture bgBlurVignetteLeft; // Offset: 368
    keen::float32 bgBlurCornerWidth; // Offset: 416
    keen::float32 bgBlurCornerHeightTop; // Offset: 420
    keen::float32 bgBlurCornerHeightBottom; // Offset: 424
    keen::UiColor bgBlurTint; // Offset: 428
    keen::float32 idleAlpha; // Offset: 436
    keen::float2 criticalAlpha; // Offset: 440
};

struct FbUiControlScheme {
    keen::ds::UiTexture game; // Offset: 0
    keen::ds::UiTexture build; // Offset: 48
};

struct FbUiHudBarrierUnlock {
    keen::float32 backgroundSize; // Offset: 0
    keen::ds::UiTexture backgroundOrnamentMask; // Offset: 4
    keen::ds::UiTexture backgroundOrnament; // Offset: 52
    keen::ds::UiTexture ornamentHighlight; // Offset: 100
    keen::UiColor backgroundColor; // Offset: 148
    keen::UiColor highlightColor; // Offset: 156
    keen::UiColor glowRippleColor; // Offset: 164
    keen::Time lootDelay; // Offset: 176
};

struct FbUiHudMessage {
    keen::float32 backgroundSize; // Offset: 0
    keen::ds::UiTexture backgroundOrnamentMask; // Offset: 4
    keen::ds::UiTexture backgroundOrnament; // Offset: 52
    keen::UiColor backgroundColor; // Offset: 100
    keen::float32 badgeSize; // Offset: 108
    keen::UiColor badgeColor; // Offset: 112
    keen::UiColor glowRippleColor; // Offset: 120
    keen::Time messageDelay; // Offset: 128
    keen::Time lootDelay; // Offset: 136
};

struct FbUiHudPartyHealth {
    keen::float32 widgetGroupOffsetY; // Offset: 0
    keen::UiColor barFillColor; // Offset: 4
    keen::UiColor barBgColor; // Offset: 12
    keen::float2 barSize; // Offset: 20
    keen::float32 barSpacing; // Offset: 28
};

struct FbUiHudServerPerformance {
    keen::Time badPerformanceHintDuration; // Offset: 0
    keen::Time badPerformanceHintInterval; // Offset: 8
    keen::Time criticalPerformanceHintDuration; // Offset: 16
    keen::Time criticalPerformanceHintInterval; // Offset: 24
    keen::UiColor badPerformanceBgColor; // Offset: 32
    keen::UiColor badPerformanceTextColor; // Offset: 40
    keen::UiColor criticalPerformanceBgColor; // Offset: 48
    keen::UiColor criticalPerformanceTextColor; // Offset: 56
};

struct FbUiHudOutOfBound {
    keen::UiColor coverColor; // Offset: 0
    keen::ds::UiLocaTagReference messageString; // Offset: 8
    keen::ds::UiCharacterStyle messageStyle; // Offset: 24
    keen::ds::UiCharacterStyle countdownStyle; // Offset: 144
};

struct FbUiHudNightSpeed {
    keen::UiColor bgColor; // Offset: 0
    keen::UiColor iconColor; // Offset: 8
    keen::ds::UiTexture sleeper; // Offset: 16
    keen::ds::UiTexture partyMember; // Offset: 64
    keen::ds::UiTexture nightSpeed; // Offset: 112
};

struct FbUiHudGameProgressSummary {
    keen::Time visibleDuration; // Offset: 0
    keen::UiColor bgColor; // Offset: 8
    keen::UiColor accentColor; // Offset: 16
    keen::float32 featherWidth; // Offset: 24
    keen::float32 widgetWidth; // Offset: 28
    keen::UiColor contentTintFlame; // Offset: 32
    keen::UiColor contentTintCrafting; // Offset: 40
    keen::ds::UiTexture illustrationFlame; // Offset: 48
    keen::ds::UiTexture illustrationCrafting; // Offset: 96
};

struct FbUiHudMusicBuff {
    keen::ds::UiTexture musicIcon; // Offset: 0
    keen::UiColor barBgColor; // Offset: 48
    keen::UiColor barFillColor; // Offset: 56
    keen::UiColor barFillEndColor; // Offset: 64
};

struct FbUiHudAnimalTaming {
    keen::ds::UiTexture tamingIconEmpty; // Offset: 0
    keen::ds::UiTexture tamingIconPending; // Offset: 48
    keen::ds::UiTexture tamingIconFull; // Offset: 96
    keen::ds::UiTexture tamingAttention; // Offset: 144
    keen::ds::UiTexture tamingAlert; // Offset: 192
    keen::ds::UiTexture tamingAlertOutline; // Offset: 240
    keen::UiColor tamingIconColor; // Offset: 288
};

struct FbUiItemWheel {
    keen::UiColor slotColor_idle; // Offset: 0
    keen::UiColor slotColor_selected; // Offset: 8
    keen::UiColor previewCenterColor; // Offset: 16
    keen::ds::UiTexture background; // Offset: 24
    keen::ds::UiTexture direction; // Offset: 72
    keen::ds::UiTexture dot_selected; // Offset: 120
    keen::ds::UiTexture dot_unselected; // Offset: 168
    keen::ds::UiTexture wheelRing_complete; // Offset: 216
    keen::ds::UiTexture wheelRing_highlight; // Offset: 264
    keen::ds::UiTexture blurredBackgroundMask; // Offset: 312
    keen::UiColor highlightColor; // Offset: 360
    keen::UiColor stickOutOfRangeColor; // Offset: 368
};

struct FbUiCompass {
    keen::ds::UiSize baseSize; // Offset: 0
    keen::ds::UiTexture background; // Offset: 8
    keen::ds::UiTexture northBackground; // Offset: 56
    keen::ds::UiTexture north; // Offset: 104
    keen::ds::UiTexture east; // Offset: 152
    keen::ds::UiTexture south; // Offset: 200
    keen::ds::UiTexture west; // Offset: 248
    keen::ds::UiTexture mark; // Offset: 296
    keen::ds::UiTexture player; // Offset: 344
    keen::ds::UiTexture priorityMarker; // Offset: 392
    keen::ds::UiNineSliceTexture fogTimerShape; // Offset: 440
    keen::UiColor fogMeterFill; // Offset: 504
    keen::UiColor fogMeterRange; // Offset: 512
    keen::UiColor fogMeterDrain; // Offset: 520
};

struct FbUiDialog {
    keen::UiColor dialogMarkerColor; // Offset: 0
    keen::UiColor floatingBubbleTint; // Offset: 8
    keen::UiColor frostedGlassTint; // Offset: 16
    keen::UiColor textColor; // Offset: 24
};

struct FbUiHUD {
    keen::UiBorder screenPosClampingBorderDefault; // Offset: 0
    keen::UiColor widgetBackgroundColor; // Offset: 16
    keen::ds::FbUiCursors cursors; // Offset: 24
    keen::ds::FbUiHudPlayerStatus playerStatus; // Offset: 296
    keen::ds::FbUiItemWheel itemWheel; // Offset: 888
    keen::ds::FbUiHudMessage levelUp; // Offset: 1264
    keen::ds::FbUiHudBarrierUnlock barrierUnlocked; // Offset: 1408
    keen::ds::FbUiHudMessage doorUnlocked; // Offset: 1592
    keen::ds::FbUiHudMessage secretUnlocked; // Offset: 1736
    keen::ds::UiTexture quickItemBackground; // Offset: 1880
    keen::ds::UiTexture equippedItemBackground; // Offset: 1928
    keen::ds::FbUiHudBuildModeHint buildModeHint; // Offset: 1976
    keen::UiColor buildingZoneTooltipOutline; // Offset: 2128
    keen::ds::FbUiHudNightSpeed nightSpeedHint; // Offset: 2136
    keen::ds::FbUiCompass compass; // Offset: 2296
    keen::ds::FbUiAnimatedHealthBarColors bossHealthColors; // Offset: 2824
    keen::ds::FbUiAnimatedHealthBarColors bossStaminaColors; // Offset: 2872
    keen::UiBorder bossBarBorderThickness; // Offset: 2920
    keen::ds::FbUiDialog dialog; // Offset: 2936
    keen::ds::FbUiHUDSpatial spatial; // Offset: 2968
    keen::ds::FbUiHudTopNotification notification; // Offset: 3856
    keen::ds::FbUiHudGameProgressSummary gameProgressSummary; // Offset: 3896
    keen::ds::FbUiHudLowHealth lowHealthVignette; // Offset: 4040
    keen::ds::UiTexture blurVignette; // Offset: 4104
    keen::ds::FbUiHudFreezing freezingVignette; // Offset: 4152
    keen::DsArray<keen::Time> freezingWarningTimes; // Offset: 4600
    keen::ds::FbUiHudPartyHealth partyHealth; // Offset: 4640
    keen::ds::FbUiHudOutOfBound outOfBound; // Offset: 4672
    keen::ds::FbUiHudServerPerformance serverPerforamceHint; // Offset: 4936
    keen::ds::FbUiHudMusicBuff musicBuff; // Offset: 5000
    keen::ds::FbUiHudAnimalTaming animalTaming; // Offset: 5072
};

struct FbUiHeadline {
    keen::ds::UiNineSliceTexture background; // Offset: 0
    keen::UiColor criticalWarningTextColor; // Offset: 64
};

struct FbUiItemWheelDummy {
    keen::ds::UiTexture texture; // Offset: 0
    keen::ds::UiTexture glow; // Offset: 48
};

struct FbUiScreenDeath {
    keen::UiColor backgroundColor; // Offset: 0
    keen::ds::UiLocaTagReference normalDeathHeadline; // Offset: 8
    keen::ds::UiLocaTagReference fogDeathHeadline; // Offset: 24
    keen::ds::UiLocaTagReference fogDeathHint; // Offset: 40
    keen::ds::UiLocaTagReference inventoryLossHint; // Offset: 56
    keen::ds::UiLocaTagReference inventoryLostAllHint; // Offset: 72
};

struct FbUiScreen {
    keen::ds::UiTexture titleScreenKeyArt; // Offset: 0
    keen::ds::FbUiScreenDeath death; // Offset: 48
    keen::ds::FbUiControlScheme controlScheme; // Offset: 136
};

struct FbUiSoundsMenuGeneric {
    keen::ds::SoundContainerReference flameAltarOpen; // Offset: 0
    keen::ds::SoundContainerReference skillTreeOpen; // Offset: 16
    keen::ds::SoundContainerReference loreOpen; // Offset: 32
    keen::ds::SoundContainerReference loreClose; // Offset: 48
    keen::ds::SoundContainerReference signpostOpen; // Offset: 64
    keen::ds::SoundContainerReference signpostClose; // Offset: 80
    keen::ds::SoundContainerReference systemMenuOpen; // Offset: 96
    keen::ds::SoundContainerReference open; // Offset: 112
    keen::ds::SoundContainerReference close; // Offset: 128
    keen::ds::SoundContainerReference back; // Offset: 144
    keen::ds::SoundContainerReference clickNeutral; // Offset: 160
    keen::ds::SoundContainerReference tabChange; // Offset: 176
    keen::ds::SoundContainerReference highlightChange; // Offset: 192
    keen::ds::SoundContainerReference entryTrigger; // Offset: 208
    keen::ds::SoundContainerReference entryCancel; // Offset: 224
    keen::ds::SoundContainerReference entryTriggerFailed; // Offset: 240
    keen::ds::SoundContainerReference sideMenuFadeIn; // Offset: 256
    keen::ds::SoundContainerReference sideMenuFadeOut; // Offset: 272
    keen::ds::SoundContainerReference equip; // Offset: 288
    keen::ds::SoundContainerReference unequip; // Offset: 304
    keen::ds::SoundContainerReference columnChange; // Offset: 320
    keen::ds::SoundContainerReference leftOpen; // Offset: 336
    keen::ds::SoundContainerReference leftClose; // Offset: 352
    keen::ds::SoundContainerReference rightOpen; // Offset: 368
    keen::ds::SoundContainerReference rightClose; // Offset: 384
    keen::ds::SoundContainerReference settingWidgetToggle; // Offset: 400
    keen::ds::SoundContainerReference settingMenuEnter; // Offset: 416
    keen::ds::SoundContainerReference settingMenuExit; // Offset: 432
    keen::ds::SoundContainerReference repairItems; // Offset: 448
    keen::ds::SoundContainerReference textEnter; // Offset: 464
    keen::ds::SoundContainerReference textDelete; // Offset: 480
    keen::ds::SoundContainerReference mouseClickGeneric; // Offset: 496
    keen::ds::SoundContainerReference mouseHover; // Offset: 512
    keen::ds::SoundContainerReference activatePersonalProgression; // Offset: 528
    keen::ds::SoundContainerReference deactivatePersonalProgression; // Offset: 544
    keen::ds::SoundContainerReference sliderValueChange; // Offset: 560
    keen::ds::SoundContainerReference selectDifficulty; // Offset: 576
    keen::Time mouseHoverTimeout; // Offset: 592
};

struct FbUiSoundsMenuCrafting {
    keen::ds::SoundContainerReference recipeMoveWithinEntry; // Offset: 0
    keen::ds::SoundContainerReference highlightChange; // Offset: 16
    keen::ds::SoundContainerReference entryTrigger; // Offset: 32
    keen::ds::SoundContainerReference craftingSuccessful; // Offset: 48
    keen::ds::SoundContainerReference craftingFailed; // Offset: 64
    keen::ds::SoundContainerReference pin; // Offset: 80
    keen::ds::SoundContainerReference unpin; // Offset: 96
    keen::ds::SoundContainerReference pinnedRecipeCraftable; // Offset: 112
    keen::ds::SoundContainerReference pinnedRecipeIngredientCompleted; // Offset: 128
    keen::ds::SoundContainerReference perkUnlocked; // Offset: 144
};

struct FbUiSoundsMenuJournal {
    keen::ds::SoundContainerReference openTile; // Offset: 0
};

struct FbUiSoundsMenuAltar {
    keen::ds::SoundContainerReference highlightChange; // Offset: 0
    keen::ds::SoundContainerReference entryTrigger; // Offset: 16
    keen::ds::SoundContainerReference leave; // Offset: 32
};

struct FbUiSoundsLootAquisition {
    keen::ds::SoundContainerReference common; // Offset: 0
    keen::ds::SoundContainerReference uncommon; // Offset: 16
    keen::ds::SoundContainerReference rare; // Offset: 32
    keen::ds::SoundContainerReference epic; // Offset: 48
    keen::ds::SoundContainerReference legendary; // Offset: 64
    keen::ds::SoundContainerReference keyItem; // Offset: 80
    keen::ds::SoundContainerReference specialLoot; // Offset: 96
    keen::ds::SoundContainerReference npc; // Offset: 112
    keen::ds::SoundContainerReference pinnedRecipeHint; // Offset: 128
    keen::ds::SoundContainerReference twitchReward; // Offset: 144
};

struct FbUiSoundsSkillTree {
    keen::ds::SoundContainerReference attributeIncrease; // Offset: 0
    keen::ds::SoundContainerReference skillUnlock; // Offset: 16
    keen::ds::SoundContainerReference skillModUnlock; // Offset: 32
    keen::ds::SoundContainerReference passivePerkUnlock; // Offset: 48
    keen::ds::SoundContainerReference reactivePerkUnlock; // Offset: 64
    keen::ds::SoundContainerReference nodeFocus; // Offset: 80
    keen::ds::SoundContainerReference zoomIn; // Offset: 96
    keen::ds::SoundContainerReference zoomOut; // Offset: 112
};

struct FbUiSoundsEventMessages {
    keen::ds::SoundContainerReference menuUpdateNotification; // Offset: 0
    keen::ds::SoundContainerReference locationDiscovery; // Offset: 16
    keen::ds::SoundContainerReference npcRevived; // Offset: 32
    keen::ds::SoundContainerReference amuletUpgraded; // Offset: 48
    keen::ds::SoundContainerReference giftingSend; // Offset: 64
    keen::ds::SoundContainerReference giftingReceive; // Offset: 80
    keen::ds::SoundContainerReference clueCompleted; // Offset: 96
    keen::ds::SoundContainerReference playerLevelup; // Offset: 112
    keen::ds::SoundContainerReference flameLevelUp; // Offset: 128
    keen::ds::SoundContainerReference magicBarrierUnlocked; // Offset: 144
    keen::ds::SoundContainerReference doorUnlocked; // Offset: 160
    keen::ds::SoundContainerReference secretDoorUnlocked; // Offset: 176
    keen::ds::SoundContainerReference allMissedQuestsCompleted; // Offset: 192
    keen::ds::SoundContainerReference newTwitchDropUnlocked; // Offset: 208
};

struct FbUiSoundsAdventureMap {
    keen::ds::SoundContainerReference waypointSet; // Offset: 0
    keen::ds::SoundContainerReference waypointClear; // Offset: 16
    keen::ds::SoundContainerReference waypointLocate; // Offset: 32
    keen::ds::SoundContainerReference zoomIn; // Offset: 48
    keen::ds::SoundContainerReference zoomOut; // Offset: 64
    keen::ds::SoundContainerReference fastTravelTriggered; // Offset: 80
    keen::ds::SoundContainerReference showOnMap; // Offset: 96
    keen::ds::SoundContainerReference goToHomeBase; // Offset: 112
    keen::ds::SoundContainerReference recenter; // Offset: 128
    keen::ds::SoundContainerReference playerPing; // Offset: 144
};

struct FbUiSoundsDialog {
    keen::ds::SoundContainerReference startDialog; // Offset: 0
    keen::ds::SoundContainerReference changeEntry; // Offset: 16
    keen::ds::SoundContainerReference confirmEntry; // Offset: 32
    keen::ds::SoundContainerReference cancelEntry; // Offset: 48
    keen::ds::SoundContainerReference revealDialogLine; // Offset: 64
};

struct FbUiSoundsActionbar {
    keen::ds::SoundContainerReference cantUse; // Offset: 0
    keen::ds::SoundContainerReference moveHighlight; // Offset: 16
    keen::ds::SoundContainerReference cycleActionbar; // Offset: 32
};

struct FbUiSoundsBackpack {
    keen::ds::SoundContainerReference inventoryFull; // Offset: 0
    keen::ds::SoundContainerReference deleteItem; // Offset: 16
    keen::ds::SoundContainerReference dropItemIntoSlot; // Offset: 32
    keen::ds::SoundContainerReference dropItemIntoActionBar; // Offset: 48
    keen::ds::SoundContainerReference grabItem; // Offset: 64
    keen::ds::SoundContainerReference swapItems; // Offset: 80
    keen::ds::SoundContainerReference splitStack; // Offset: 96
    keen::ds::SoundContainerReference salvageItem; // Offset: 112
    keen::ds::SoundContainerReference sortInventory; // Offset: 128
};

struct FbUiSoundsItemWheel {
    keen::ds::SoundContainerReference open; // Offset: 0
    keen::ds::SoundContainerReference close; // Offset: 16
    keen::ds::SoundContainerReference changeHighlight; // Offset: 32
};

struct FbUiSoundsHud {
    keen::ds::SoundContainerReference lowHealthLoop; // Offset: 0
    keen::ds::SoundContainerReference enterFog; // Offset: 16
    keen::Time enterFogTimeout; // Offset: 32
    keen::ds::SoundContainerReference enterDangerousFog; // Offset: 40
    keen::ds::SoundContainerReference enterFreeze; // Offset: 56
    keen::ds::SoundContainerReference freezeWarning; // Offset: 72
    keen::ds::SoundContainerReference freezeResistanceDepleted; // Offset: 88
    keen::ds::SoundContainerReference flameReminder; // Offset: 104
    keen::ds::SoundContainerReference flameLow; // Offset: 120
    keen::ds::SoundContainerReference flameVeryLow; // Offset: 136
    keen::ds::SoundContainerReference flameDepleted; // Offset: 152
    keen::ds::SoundContainerReference flameLowLoop; // Offset: 168
    keen::ds::SoundContainerReference manaInsufficient; // Offset: 184
    keen::Time manaInsufficientTimeout; // Offset: 200
    keen::ds::SoundContainerReference staminaInsufficient; // Offset: 208
    keen::Time staminaInsufficientTimeout; // Offset: 224
    keen::ds::SoundContainerReference ammoChanged; // Offset: 232
    keen::ds::SoundContainerReference buildActionFailed; // Offset: 248
    keen::Time buildActionFailedTimeout; // Offset: 264
    keen::ds::SoundContainerReference buildUndoSuccessful; // Offset: 272
    keen::ds::SoundContainerReference buildInvMaximize; // Offset: 288
    keen::ds::SoundContainerReference buildInvMinimize; // Offset: 304
    keen::ds::SoundContainerReference buildModeEnter; // Offset: 320
    keen::ds::SoundContainerReference buildModeExit; // Offset: 336
    keen::ds::SoundContainerReference musicBuffProgressed; // Offset: 352
};

struct FbUiSoundsTitleScreen {
    keen::ds::SoundContainerReference backgroundMusic; // Offset: 0
    keen::ds::SoundContainerReference startTrigger; // Offset: 16
};

struct FbUiSounds {
    keen::ds::SoundContainerReference test; // Offset: 0
    keen::ds::FbUiSoundsTitleScreen titleScreen; // Offset: 16
    keen::ds::FbUiSoundsEventMessages events; // Offset: 48
    keen::ds::FbUiSoundsMenuGeneric menu; // Offset: 272
    keen::ds::FbUiSoundsMenuCrafting crafting; // Offset: 872
    keen::ds::FbUiSoundsMenuJournal journal; // Offset: 1032
    keen::ds::FbUiSoundsMenuAltar altar; // Offset: 1048
    keen::ds::FbUiSoundsSkillTree skilltree; // Offset: 1096
    keen::ds::FbUiSoundsLootAquisition lootGet; // Offset: 1224
    keen::ds::FbUiSoundsAdventureMap map; // Offset: 1384
    keen::ds::FbUiSoundsDialog dialog; // Offset: 1544
    keen::ds::FbUiSoundsItemWheel itemWheel; // Offset: 1624
    keen::ds::FbUiSoundsHud hud; // Offset: 1672
    keen::ds::FbUiSoundsActionbar actionbar; // Offset: 2040
    keen::ds::FbUiSoundsBackpack backpack; // Offset: 2088
};

struct FbUiHudCharacterStyles {
    keen::ds::UiCharacterStyle celebrationMain; // Offset: 0
    keen::ds::UiCharacterStyle celebrationLevelNumber; // Offset: 120
    keen::ds::UiCharacterStyle specialLootMain; // Offset: 240
    keen::ds::UiCharacterStyle specialLootSecondary; // Offset: 360
    keen::ds::UiCharacterStyle enemyDamagePoint; // Offset: 480
    keen::ds::UiCharacterStyle enemyDamageBonusText; // Offset: 600
    keen::ds::UiCharacterStyle healingDamagePoint; // Offset: 720
    keen::ds::UiCharacterStyle playerDamagePoint; // Offset: 840
    keen::ds::UiCharacterStyle immuneDamagePoint; // Offset: 960
    keen::ds::UiCharacterStyle restoreManaPoint; // Offset: 1080
    keen::ds::UiCharacterStyle playerName; // Offset: 1200
    keen::ds::UiCharacterStyle enemyName; // Offset: 1320
    keen::ds::UiCharacterStyle bossName; // Offset: 1440
    keen::ds::UiCharacterStyle ammoListEntry; // Offset: 1560
    keen::ds::UiCharacterStyle staminaInfo; // Offset: 1680
    keen::ds::UiCharacterStyle compassMarkerDistance; // Offset: 1800
    keen::ds::UiCharacterStyle compassWayointMessage; // Offset: 1920
    keen::ds::UiCharacterStyle compassFogTimer; // Offset: 2040
    keen::ds::UiCharacterStyle compassFogTypeLabel; // Offset: 2160
    keen::ds::UiCharacterStyle compassLeaveFogWarning; // Offset: 2280
    keen::ds::UiCharacterStyle nightSpeedHint; // Offset: 2400
};

struct FbUiMenuCharacterStyles {
    keen::ds::UiCharacterStyle topTab; // Offset: 0
    keen::ds::UiCharacterStyle header1; // Offset: 120
    keen::ds::UiCharacterStyle header2; // Offset: 240
    keen::ds::UiCharacterStyle header3; // Offset: 360
    keen::ds::UiCharacterStyle buttonHint; // Offset: 480
    keen::ds::UiCharacterStyle textfieldEmptyHint; // Offset: 600
};

struct FbUiMapCharacterStyles {
    keen::ds::UiCharacterStyle playerName; // Offset: 0
    keen::ds::UiCharacterStyle locationName; // Offset: 120
    keen::ds::UiCharacterStyle clusterSizeNumber; // Offset: 240
    keen::ds::UiCharacterStyle markerLabel; // Offset: 360
    keen::ds::UiCharacterStyle tooltip; // Offset: 480
};

struct FbUiFontSizes {
    keen::DsArray<keen::float> textScaleSteps; // Offset: 0
    keen::float32 xsmall; // Offset: 40
    keen::float32 small; // Offset: 44
    keen::float32 medium; // Offset: 48
    keen::float32 large; // Offset: 52
    keen::float32 xlarge; // Offset: 56
    keen::float32 caps_small; // Offset: 60
    keen::float32 caps_medium; // Offset: 64
    keen::float32 caps_large; // Offset: 68
    keen::float32 caps_xlarge; // Offset: 72
};

struct FbUiCharacterStyles {
    keen::ds::UiCharacterStyle defaultStyle; // Offset: 0
    keen::ds::UiCharacterStyle defaultStyleOutline; // Offset: 120
    keen::ds::UiCharacterStyle secondaryText; // Offset: 240
    keen::ds::UiCharacterStyle mutedItalic; // Offset: 360
    keen::ds::UiCharacterStyle redText; // Offset: 480
    keen::ds::UiCharacterStyle greenText; // Offset: 600
    keen::ds::UiCharacterStyle h1; // Offset: 720
    keen::ds::UiCharacterStyle h2; // Offset: 840
    keen::ds::UiCharacterStyle h3; // Offset: 960
    keen::ds::UiCharacterStyle legalText; // Offset: 1080
    keen::ds::UiCharacterStyle warning; // Offset: 1200
    keen::ds::UiCharacterStyle hyperlink; // Offset: 1320
    keen::ds::UiCharacterStyle location; // Offset: 1440
    keen::ds::UiCharacterStyle npc; // Offset: 1560
    keen::ds::UiCharacterStyle craftingstation; // Offset: 1680
    keen::ds::UiCharacterStyle keyitem; // Offset: 1800
    keen::ds::UiCharacterStyle lorename; // Offset: 1920
    keen::ds::UiCharacterStyle impactAttribute; // Offset: 2040
    keen::ds::UiCharacterStyle textChatSpeakerNameSelf; // Offset: 2160
    keen::ds::UiCharacterStyle textChatSpeakerNameOther; // Offset: 2280
    keen::ds::UiCharacterStyle textChatMessage; // Offset: 2400
    keen::ds::FbUiHudCharacterStyles hud; // Offset: 2520
    keen::ds::FbUiMenuCharacterStyles menu; // Offset: 5040
    keen::ds::FbUiMapCharacterStyles map; // Offset: 5760
    keen::ds::UiCharacterStyle keyboardLegend; // Offset: 6360
    keen::ds::UiCharacterStyle versionWatermark; // Offset: 6480
    keen::ds::UiCharacterStyle versionWatermarkSecondLine; // Offset: 6600
};

struct FbUiParagraphStyles {
    keen::ds::UiParagraphStyle hudDefault; // Offset: 0
    keen::ds::UiParagraphStyle test; // Offset: 64
};

struct FbUiScrollingLayouts {
};

struct Curve {
    keen::uint32 sampleCount; // Offset: 0
};

typedef keen::UiPosition UiPosition;

struct UiTestTypes {
    keen::ds::string type_string; // Offset: 0
    keen::float2 type_float2; // Offset: 40
    keen::float3 type_float3; // Offset: 48
    keen::uint32 type_uint32; // Offset: 60
    keen::bool type_bool; // Offset: 64
    keen::Color type_Color; // Offset: 68
    keen::ds::SoundContainerReference type_SoundContainerReference; // Offset: 72
    keen::ds::Curve type_Curve; // Offset: 88
    keen::ds::UiTexture type_UiTexture; // Offset: 92
    keen::ds::UiPosition type_UiPosition; // Offset: 140
    keen::ds::UiSize type_UiSize; // Offset: 148
    keen::UiColor type_UiColor; // Offset: 156
};

typedef keen::GameUiTextLayoutStyle GameUiTextLayoutStyle;

struct GameUiTextParameterData {
    keen::ds::string characterStyle; // Offset: 0
    keen::ds::string paragraphStyle; // Offset: 40
    keen::float2 offset; // Offset: 80
    keen::float2 stretch; // Offset: 88
    keen::UiAlignment alignment; // Offset: 96
    keen::UiBorder margin; // Offset: 100
    keen::UiBorder padding; // Offset: 116
    keen::Time revealTime; // Offset: 136
    keen::ds::GameUiTextLayoutStyle textLayoutStyle; // Offset: 144
    keen::bool allowLineBreak; // Offset: 145
};

typedef keen::GameUiImageSizing GameUiImageSizing;

struct GameUiImageParameterData {
    keen::ds::GameUiImageSizing sizing; // Offset: 0
    keen::float32 alpha; // Offset: 4
    keen::UiColor color; // Offset: 8
    keen::float2 offset; // Offset: 16
    keen::float2 stretch; // Offset: 24
    keen::UiBorder margin; // Offset: 32
    keen::UiBorder padding; // Offset: 48
};

struct FbUiTestParameters {
    keen::ds::UiTestTypes _types; // Offset: 0
    keen::ds::FbUiScrollingLayouts scrollingLayouts; // Offset: 168
    keen::ds::GameUiTextParameterData testTextParameter; // Offset: 176
    keen::ds::GameUiImageParameterData testImageParameter; // Offset: 328
    keen::ds::UiNineSliceTexture testNineSliceTexture; // Offset: 392
    keen::UiBorder testNineSliceScreenBorder; // Offset: 456
    keen::Time durationTextTestTime; // Offset: 472
    keen::bool durationTextShowOnlyBiggestTimeUnit; // Offset: 480
    keen::bool durationTextUseLocalizedUnits; // Offset: 481
    keen::bool durationTextUseThirdNumber; // Offset: 482
    keen::uint8 durationTextSubSecondDigits; // Offset: 483
};

struct FbUiRarityColors {
    keen::UiColor undefined; // Offset: 0
    keen::UiColor common; // Offset: 8
    keen::UiColor uncommon; // Offset: 16
    keen::UiColor rare; // Offset: 24
    keen::UiColor epic; // Offset: 32
    keen::UiColor legendary; // Offset: 40
    keen::UiColor vanity; // Offset: 48
    keen::UiColor collectible; // Offset: 56
    keen::float32 vanityTextColorIntensity; // Offset: 64
};

struct FbUiNetworkQualityColors {
    keen::UiColor good; // Offset: 0
    keen::UiColor acceptable; // Offset: 8
    keen::UiColor bad; // Offset: 16
};

struct FbUiGlobalColors {
    keen::ds::FbUiRarityColors rarity; // Offset: 0
    keen::UiColor priorityColor; // Offset: 68
    keen::UiColor priorityBgColor; // Offset: 76
    keen::UiColor attentionColor; // Offset: 84
    keen::UiColor checkmarkGreen; // Offset: 92
    keen::UiColor warningColor; // Offset: 100
    keen::UiColor warningColorBackground; // Offset: 108
    keen::UiColor warningColorFrostedGlassTint; // Offset: 116
    keen::UiColor attributeBetterColor; // Offset: 124
    keen::UiColor attributeWorseColor; // Offset: 132
    keen::ds::FbUiNetworkQualityColors networkQuality; // Offset: 140
};

struct FbUiFrostedGlassParameters {
    keen::uint32 downsampleSteps; // Offset: 0
    keen::float32 sigma; // Offset: 4
    keen::ObjectReference<keen::ds::RenderColorGradingMap> colorGradingMap; // Offset: 8
    keen::bool colorGradeBeforeBlur; // Offset: 24
};

struct FbUiStartUpLogo {
    keen::ds::UiTexture image; // Offset: 0
    keen::float32 height; // Offset: 48
    keen::ds::SoundContainerReference sound; // Offset: 52
    keen::UiColor backgroundColor; // Offset: 68
};

struct FbUiStartUpLogoSequence {
    keen::Time logoFadeDuration; // Offset: 0
    keen::Time logoIdleDuration; // Offset: 8
    keen::ds::FbUiStartUpLogo keenLogo; // Offset: 16
    keen::ds::FbUiStartUpLogo bmwiLogo; // Offset: 92
    keen::Time postLogoDelay; // Offset: 168
    keen::Time mainMenuFadeInDuration; // Offset: 176
};

struct FbUiPreGameCharacterViews {
    keen::ds::FbUiCharacterView mainMenu; // Offset: 0
    keen::ds::FbUiCharacterView postMainMenu; // Offset: 28
    keen::ds::FbUiCharacterView savePortrait; // Offset: 56
};

struct FbUiCustomizationHairColors {
    keen::UiColor brightBlonde; // Offset: 0
    keen::UiColor blonde; // Offset: 8
    keen::UiColor red; // Offset: 16
    keen::UiColor brightBrown; // Offset: 24
    keen::UiColor brown; // Offset: 32
    keen::UiColor black; // Offset: 40
    keen::UiColor grey; // Offset: 48
    keen::UiColor white; // Offset: 56
};

struct FbUiCustomizationSkinColors {
    keen::UiColor african_1; // Offset: 0
    keen::UiColor african_2; // Offset: 8
    keen::UiColor asian_1; // Offset: 16
    keen::UiColor caucasian_1; // Offset: 24
    keen::UiColor caucasian_2; // Offset: 32
    keen::UiColor caucasian_3; // Offset: 40
    keen::UiColor mixed_1; // Offset: 48
    keen::UiColor mixed_2; // Offset: 56
};

struct FbUiCustomizationEyeColors {
    keen::UiColor blue; // Offset: 0
    keen::UiColor brightBrown; // Offset: 8
    keen::UiColor brown; // Offset: 16
    keen::UiColor green; // Offset: 24
    keen::UiColor grey; // Offset: 32
};

struct FbUiCustomizationEyeBrowColors {
    keen::UiColor brightBlonde; // Offset: 0
    keen::UiColor blonde; // Offset: 8
    keen::UiColor red; // Offset: 16
    keen::UiColor brightBrown; // Offset: 24
    keen::UiColor brown; // Offset: 32
    keen::UiColor black; // Offset: 40
    keen::UiColor grey; // Offset: 48
    keen::UiColor white; // Offset: 56
};

struct FbUiCustomizationTabIcons {
    keen::ds::UiTexture iconBodytype; // Offset: 0
    keen::ds::UiTexture iconHair; // Offset: 48
    keen::ds::UiTexture iconBeard; // Offset: 96
    keen::ds::UiTexture iconVoice; // Offset: 144
    keen::ds::UiTexture iconName; // Offset: 192
    keen::ds::UiTexture iconPlay; // Offset: 240
    keen::ds::UiTexture iconHairColor; // Offset: 288
    keen::ds::UiTexture iconBeardColor; // Offset: 336
    keen::ds::UiTexture iconEyeColor; // Offset: 384
    keen::ds::UiTexture iconEyeBrowColor; // Offset: 432
    keen::ds::UiTexture iconSkinColor; // Offset: 480
};

struct FbUiCharacterCustomization {
    keen::ds::FbUiCustomizationHairColors hairColors; // Offset: 0
    keen::ds::FbUiCustomizationSkinColors skinColors; // Offset: 64
    keen::ds::FbUiCustomizationEyeColors eyeColors; // Offset: 128
    keen::ds::FbUiCustomizationEyeBrowColors eyeBrowColors; // Offset: 168
    keen::ds::FbUiCustomizationTabIcons tabIcons; // Offset: 232
    keen::ds::UiTexture widgetSelector; // Offset: 760
    keen::ds::UiTexture voicePreview1; // Offset: 808
    keen::ds::UiTexture voicePreview2; // Offset: 856
};

struct FbUiPreGame {
    keen::ds::FbUiStartUpLogoSequence startUpSequence; // Offset: 0
    keen::Time startGameFadeOutDuration; // Offset: 184
    keen::ds::UiTexture titleScreenKeyArt; // Offset: 192
    keen::ds::UiTexture mainMenuLogo; // Offset: 240
    keen::UiBorder mainMenuPadding; // Offset: 288
    keen::float32 logoHeight; // Offset: 304
    keen::float32 backgroundScale; // Offset: 308
    keen::float32 backgroundNormalizedOffsetX; // Offset: 312
    keen::float32 backgroundNormalizedOffsetY; // Offset: 316
    keen::ds::UiTexture mainMenuEntryHighlightBackground; // Offset: 320
    keen::ds::UiTexture joinTileBg; // Offset: 368
    keen::ds::UiTexture hostPublicTileBg; // Offset: 416
    keen::ds::UiTexture privateTileBg; // Offset: 464
    keen::ds::FbUiPreGameCharacterViews characterViews; // Offset: 512
    keen::ds::FbUiCharacterCustomization characterCustomization; // Offset: 596
    keen::ds::UiTexture menuEntryHighlightBackground; // Offset: 1500
    keen::ds::UiTexture logoGPortal; // Offset: 1548
    keen::UiColor dedicatedServerColor; // Offset: 1596
    keen::UiColor friendServerColor; // Offset: 1604
};

typedef keen::FbUiCreditsItemType FbUiCreditsItemType;

struct FbUiCreditItemImage {
    keen::DsString identifier; // Offset: 0
    keen::ds::UiTexture texture; // Offset: 40
    keen::UiColor color; // Offset: 88
    keen::ds::UiSize imageSize; // Offset: 96
};

struct FbUiCreditImageRepository {
};

struct FbUiCreditsItem {
    keen::ds::FbUiCreditsItemType itemType; // Offset: 0
    keen::ds::string text; // Offset: 8
    keen::ds::FbUiCreditItemImage image; // Offset: 48
};

struct FbUiCreditStyle {
    keen::ds::UiCharacterStyle style; // Offset: 0
    keen::float32 fontSize; // Offset: 120
    keen::float32 topSpacer; // Offset: 124
};

struct FbUiCreditStyles {
    keen::ds::FbUiCreditStyle h1; // Offset: 0
    keen::ds::FbUiCreditStyle h2; // Offset: 128
    keen::ds::FbUiCreditStyle h3; // Offset: 256
    keen::ds::FbUiCreditStyle text; // Offset: 384
};

struct FbUiCredits {
    keen::DsArray<keen::ds::FbUiCreditsItem> items; // Offset: 0
    keen::ds::UiLocaTagReference text; // Offset: 40
    keen::ds::UiLocaTagReference creditEndText; // Offset: 56
    keen::ds::FbUiCreditStyles creditStyles; // Offset: 72
    keen::float32 scrollSpeed; // Offset: 584
    keen::float32 gamepadScrollSpeed; // Offset: 588
};

struct FbUiKnowledgeRequirement {
    keen::ds::GameKnowledgeTrigger trigger; // Offset: 0
    keen::ds::KnowledgeId triggerId; // Offset: 56
};

struct FbUiTutorialKnowledge {
    keen::ds::FbUiKnowledgeRequirement quickbuilder; // Offset: 0
    keen::ds::FbUiKnowledgeRequirement summoningStaff; // Offset: 60
    keen::ds::FbUiKnowledgeRequirement crafting; // Offset: 120
    keen::ds::FbUiKnowledgeRequirement factory; // Offset: 180
    keen::ds::FbUiKnowledgeRequirement enhancing; // Offset: 240
    keen::ds::FbUiKnowledgeRequirement cooking; // Offset: 300
    keen::ds::FbUiKnowledgeRequirement actionbar; // Offset: 360
    keen::ds::FbUiKnowledgeRequirement storage; // Offset: 420
    keen::ds::FbUiKnowledgeRequirement taming; // Offset: 480
    keen::ds::FbUiKnowledgeRequirement happyNpcRequirement; // Offset: 540
};

struct FbUiKnowledge {
    keen::ds::FbUiTutorialKnowledge tutorial; // Offset: 0
};

struct SystemErrorMessages {
    keen::ds::UiLocaTagReference waitingForProcess; // Offset: 0
    keen::ds::UiLocaTagReference noInputDevice; // Offset: 16
    keen::ds::UiLocaTagReference connectFailed; // Offset: 32
    keen::ds::UiLocaTagReference connectionLost; // Offset: 48
    keen::ds::UiLocaTagReference newVersionRequired; // Offset: 64
    keen::ds::UiLocaTagReference playerNotSignedIn; // Offset: 80
    keen::ds::UiLocaTagReference playerNoPrivileges; // Offset: 96
    keen::ds::UiLocaTagReference playerNoMultiplayerEntitlement; // Offset: 112
    keen::ds::UiLocaTagReference createGameFailed; // Offset: 128
    keen::ds::UiLocaTagReference joinGameFailed; // Offset: 144
    keen::ds::UiLocaTagReference joinGameFailed_NotFound; // Offset: 160
    keen::ds::UiLocaTagReference joinGameFailed_Full; // Offset: 176
    keen::ds::UiLocaTagReference joinGameFailed_Reserved; // Offset: 192
    keen::ds::UiLocaTagReference joinGameFailed_WrongPassword; // Offset: 208
    keen::ds::UiLocaTagReference joinGameFailed_WrongPasswordCooldown; // Offset: 224
    keen::ds::UiLocaTagReference sessionFailed; // Offset: 240
    keen::ds::UiLocaTagReference joinPlayerFailed; // Offset: 256
    keen::ds::UiLocaTagReference kicked; // Offset: 272
    keen::ds::UiLocaTagReference saveGameCorrupt; // Offset: 288
    keen::ds::UiLocaTagReference settingsCorrupt; // Offset: 304
    keen::ds::UiLocaTagReference eraseFailed; // Offset: 320
    keen::ds::UiLocaTagReference notEnoughSpace; // Offset: 336
    keen::ds::UiLocaTagReference createFailed; // Offset: 352
    keen::ds::UiLocaTagReference readError; // Offset: 368
    keen::ds::UiLocaTagReference writeError; // Offset: 384
};

struct SystemErrorResponses {
    keen::ds::UiLocaTagReference retry; // Offset: 0
    keen::ds::UiLocaTagReference disable; // Offset: 16
    keen::ds::UiLocaTagReference erase; // Offset: 32
    keen::ds::UiLocaTagReference reset; // Offset: 48
    keen::ds::UiLocaTagReference deviceSelection; // Offset: 64
    keen::ds::UiLocaTagReference overwrite; // Offset: 80
    keen::ds::UiLocaTagReference cancel; // Offset: 96
    keen::ds::UiLocaTagReference ok; // Offset: 112
};

struct SystemErrorLoca {
    keen::ds::SystemErrorMessages errors; // Offset: 0
    keen::ds::SystemErrorResponses responses; // Offset: 400
    keen::ds::UiLocaTagReference errorTitleWarning; // Offset: 528
};

typedef keen::DefaultServerRoleType DefaultServerRoleType;

struct FbUiServerRoleSettings {
    keen::DsArray<keen::ds::FbUiServerRole> defaultServerRoles; // Offset: 0
    keen::DsArray<keen::ds::UiTexture> serverRoleIcons; // Offset: 40
};

struct FbUiServerRole {
    keen::ds::DefaultServerRoleType type; // Offset: 0
    keen::ds::UiLocaTagReference roleName; // Offset: 4
    keen::ds::PlayerPermissionsMask permissions; // Offset: 20
};

struct FbUiLoreSlide {
    keen::ds::UiTexture slideImage; // Offset: 0
    keen::ds::UiLocaTagReference slideText; // Offset: 48
    keen::bool useTextBackground; // Offset: 64
    keen::UiVector startOffset; // Offset: 68
    keen::UiVector endOffset; // Offset: 76
    keen::float32 startScale; // Offset: 84
    keen::float32 endScale; // Offset: 88
    keen::float32 slideDuration; // Offset: 92
    keen::float32 textStartDelay; // Offset: 96
    keen::float32 textAnimDuration; // Offset: 100
    keen::float32 fadeInDuration; // Offset: 104
    keen::float32 fadeOutDuration; // Offset: 108
    keen::UiColor fadeInColor; // Offset: 112
    keen::UiColor fadeOutColor; // Offset: 120
};

struct FbUiLogos {
    keen::DsArray<keen::ds::UiTexture> creditsLogos; // Offset: 0
    keen::ds::UiTexture enshrouded_TraditionalChinese; // Offset: 40
    keen::ds::UiTexture enshrouded_SimplifiedChinese; // Offset: 88
    keen::ds::UiTexture enshrouded_Japanese; // Offset: 136
    keen::ds::UiTexture enshrouded_Korean; // Offset: 184
};

struct FbUiLoreIntro {
    keen::DsArray<keen::ds::FbUiLoreSlide> allSlides; // Offset: 0
    keen::ds::UiCharacterStyle textStyle; // Offset: 40
    keen::ds::UiNineSliceTexture slideBorder; // Offset: 160
};

struct UiBundle {
    keen::ds::UiTexturePreload texturePreload; // Offset: 0
    keen::DsArray<keen::ds::UiCharacterStyle> characterStyles; // Offset: 40
    keen::DsArray<keen::ds::UiParagraphStyle> paragraphStyles; // Offset: 80
};

struct FbUiBundle {
    keen::ds::FbUiLocaLinks locatags; // Offset: 120
    keen::ds::FbUiSocialLogos socialLogos; // Offset: 26032
    keen::ds::FbUiLogos logos; // Offset: 26320
    keen::ds::FbUiGenericIcons genericIcons; // Offset: 26552
    keen::ds::FbUiGamepadButtonSets gamepadButtons; // Offset: 29528
    keen::ds::FbUiKeyboardKeys keyboardKeys; // Offset: 34720
    keen::ds::FbUiKeyboardKeyLegends keyboardKeyLegends; // Offset: 34832
    keen::ds::FbUiMouseHints mouseHints; // Offset: 35024
    keen::ds::FbUiPrimitives primitives; // Offset: 35696
    keen::ds::FbUiLoadingSymbol loading; // Offset: 36928
    keen::ds::FbUiGlobalColors globalColors; // Offset: 36940
    keen::ds::FbUiPreGame preGame; // Offset: 37104
    keen::ds::FbUiHUD hud; // Offset: 38720
    keen::ds::FbUiMenu menu; // Offset: 44088
    keen::ds::FbUiCustomization customization; // Offset: 55880
    keen::ds::FbUiKnowledge knowledge; // Offset: 56408
    keen::ds::FbUiItemSlot itemSlot; // Offset: 57008
    keen::ds::FbUiBuffIcons buffIcons; // Offset: 59016
    keen::ds::FbUiScreen screen; // Offset: 59248
    keen::ds::FbUiHeadline headline; // Offset: 59480
    keen::ds::FbUiFontSizes fontSizes; // Offset: 59552
    keen::ds::FbUiCharacterStyles namedStyles; // Offset: 59632
    keen::ds::FbUiParagraphStyles namedParagraphStyles; // Offset: 66352
    keen::ds::FbUiSounds sounds; // Offset: 66480
    keen::ds::FbUiTestParameters testParameters; // Offset: 68712
    keen::ds::FbUiFrostedGlassParameters frostedGlass; // Offset: 69200
    keen::ds::SystemErrorLoca systemErrors; // Offset: 69228
    keen::ds::FbUiServerRoleSettings serverRoleSettings; // Offset: 69776
    keen::ds::FbUiDifficultySettings difficultySettings; // Offset: 69856
    keen::ds::UiTexture noRtxWarning; // Offset: 72776
    keen::ds::FbUiCredits credits; // Offset: 72824
    keen::ds::FbUiLoreIntro loreIntro; // Offset: 73416
    keen::DsArray<keen::ds::FbUiWorldEvent> worldEvents; // Offset: 73640
};

struct FbUiMap {
    keen::ObjectReference<keen::ds::Scene> scene; // Offset: 0
    keen::float32 isolineSpacing; // Offset: 16
    keen::ObjectReference<keen::ds::Image> baseGradient; // Offset: 20
    keen::ObjectReference<keen::ds::Image> isolineGradient; // Offset: 36
    keen::ObjectReference<keen::ds::Image> fogNoise; // Offset: 52
    keen::uint8 fogZoneBorderSdfDistance; // Offset: 68
    keen::ObjectReference<keen::ds::Image> fogZoneBorderGradient; // Offset: 72
    keen::ObjectReference<keen::ds::Image> fogZoneTextureNormal; // Offset: 88
    keen::ObjectReference<keen::ds::Image> fogZoneTextureDangerous; // Offset: 104
};

struct FbUiTexture {
    keen::uint16 width; // Offset: 0
    keen::uint16 height; // Offset: 2
    keen::uint8 levelCount; // Offset: 4
    keen::PixelFormat format; // Offset: 5
    keen::TextureType type; // Offset: 6
    keen::ContentHash data; // Offset: 8
    keen::ds::string debugName; // Offset: 24
};

struct FbUiMapResource {
    keen::float32 tileSize; // Offset: 0
    keen::uint2 tileCount; // Offset: 4
    keen::float2 normalizedTileSize; // Offset: 12
    keen::ds::FbUiTexture baseGradientTexture; // Offset: 24
    keen::ds::FbUiTexture isolineGradientTexture; // Offset: 88
    keen::ds::FbUiTexture fogZoneBorderGradientTexture; // Offset: 152
    keen::ds::FbUiTexture fogNoiseTexture; // Offset: 216
    keen::ds::FbUiTexture fogZoneTextureNormal; // Offset: 280
    keen::ds::FbUiTexture fogZoneTextureDangerous; // Offset: 344
};

struct FbUiMapTileResource {
    keen::ds::FbUiTexture mapTexture; // Offset: 0
};

typedef keen::FatalErrorId FatalErrorId;

struct GameBenchmarkSampleZone {
    keen::ds::string name; // Offset: 0
    keen::ds::string valueName; // Offset: 40
    keen::Time minDuration; // Offset: 80
    keen::Time maxDuration; // Offset: 88
    keen::Time averageDuration; // Offset: 96
    keen::uint64 minValue; // Offset: 104
    keen::uint64 maxValue; // Offset: 112
    keen::uint64 averageValue; // Offset: 120
    keen::uint32 sampleCount; // Offset: 128
};

struct GameBenchmarkSample {
    keen::uint16 frameCount; // Offset: 0
    keen::Time sampleTime; // Offset: 8
    keen::DsArray<keen::ds::GameBenchmarkSampleZone> zones; // Offset: 16
};

struct GameBenchmarkPlace {
    keen::float3 position; // Offset: 0
    keen::HashKey32 instanceHash; // Offset: 12
    keen::DsArray<keen::ds::GameBenchmarkSample> samples; // Offset: 16
    keen::Guid guid; // Offset: 56
};

struct GameBenchmarkResource {
    keen::ds::string description; // Offset: 0
    keen::ds::string bauPath; // Offset: 40
    keen::ContentHash hash; // Offset: 80
};

struct GameBenchmarkResult {
    keen::ds::string name; // Offset: 0
    keen::ds::string author; // Offset: 40
    keen::ds::string machine; // Offset: 80
    keen::ds::string engineVersion; // Offset: 120
    keen::CalendarTimeStamp date; // Offset: 160
    keen::DsArray<keen::ds::GameBenchmarkResource> resources; // Offset: 168
    keen::DsArray<keen::ds::GameBenchmarkPlace> places; // Offset: 208
};

typedef keen::GameFrameworkWindowType GameFrameworkWindowType;

struct GameFrameworkGraphicsConfig {
    keen::StaticArray<keen::uint8,128> apiName; // Offset: 0
    keen::ds::GameFrameworkWindowType windowType; // Offset: 128
    keen::sint32 windowPosX; // Offset: 132
    keen::sint32 windowPosY; // Offset: 136
    keen::uint32 windowSizeX; // Offset: 140
    keen::uint32 windowSizeY; // Offset: 144
    keen::uint32 presentationInterval; // Offset: 148
};

struct GameFrameworkConfig {
    keen::ds::GameFrameworkGraphicsConfig graphics; // Offset: 0
};

typedef keen::GameUiAxis GameUiAxis;

typedef keen::GameUiFrameLayout GameUiFrameLayout;

typedef keen::GameUiScrollingSliderStyle GameUiScrollingSliderStyle;

typedef keen::GameUiScrollingHotkeyFlag GameUiScrollingHotkeyFlag;

typedef keen::GameUiMouseDragInputFlag GameUiMouseDragInputFlag;

typedef keen::GameUiMouseDragInputMask GameUiMouseDragInputMask;

typedef keen::GameUiScrollingKeyMask GameUiScrollingKeyMask;

struct GameUiScrollbarParameterData {
    keen::ds::GameUiAxis direction; // Offset: 0
    keen::UiColor rangeRectColor; // Offset: 4
    keen::UiColor sliderIdleColor; // Offset: 12
    keen::UiColor sliderHoverColor; // Offset: 20
    keen::UiColor sliderOutlineColor; // Offset: 28
    keen::ds::UiNineSliceTexture rangeTexture; // Offset: 36
    keen::ds::UiNineSliceTexture sliderTexture; // Offset: 100
    keen::ds::UiTexture sliderGripTexture; // Offset: 164
    keen::ds::GameUiScrollingSliderStyle sliderStyle; // Offset: 212
    keen::float32 sliderIdleWidth; // Offset: 216
    keen::float32 sliderHoverWidth; // Offset: 220
    keen::float32 baseWidth; // Offset: 224
    keen::float32 rangeTextureWidth; // Offset: 228
    keen::bool useInverseRangeRect; // Offset: 232
    keen::bool useGlobalFocus; // Offset: 233
    keen::bool enableDrag; // Offset: 234
    keen::bool enableTouchDrag; // Offset: 235
    keen::bool forceScrollbar; // Offset: 236
    keen::ds::UiPosition offset; // Offset: 240
    keen::UiBorder padding; // Offset: 248
    keen::UiBorder sliderMargin; // Offset: 264
};

struct GameUiScrollingLayoutParameterData {
    keen::UiColor borderColor; // Offset: 0
    keen::ds::UiTexture scrollHintTexture; // Offset: 8
    keen::UiBorder padding; // Offset: 56
    keen::UiAlignment scrollbarAlignment; // Offset: 72
    keen::bool showScrollHint; // Offset: 74
    keen::bool enableScrollbar; // Offset: 75
    keen::bool useNavigation; // Offset: 76
    keen::bool stealCapture; // Offset: 77
    keen::bool doScissorWhenScrolling; // Offset: 78
    keen::bool centerChildren; // Offset: 79
    keen::bool enableDrag; // Offset: 80
    keen::bool forceScrollbar; // Offset: 81
    keen::bool useGlobalFocus; // Offset: 82
    keen::bool useFillerSeperatorLineDistance; // Offset: 83
    keen::bool consumeInput; // Offset: 84
    keen::bool useAutoScrolling; // Offset: 85
    keen::float32 fillerSeperatorLineDistance; // Offset: 88
    keen::float32 spacing; // Offset: 92
    keen::ds::GameUiScrollingKeyMask scrollingHotKeyMask; // Offset: 96
    keen::ds::GameUiMouseDragInputMask mouseDragInputMask; // Offset: 97
    keen::ds::GameUiScrollbarParameterData scrollBar; // Offset: 100
};

struct SlotJointMapping {
    keen::ds::string head; // Offset: 0
    keen::ds::string chest; // Offset: 40
    keen::ds::string pelvis; // Offset: 80
    keen::ds::string footL; // Offset: 120
    keen::ds::string footR; // Offset: 160
    keen::ds::string footRL; // Offset: 200
    keen::ds::string footRR; // Offset: 240
    keen::ds::string handR; // Offset: 280
    keen::ds::string handL; // Offset: 320
    keen::ds::string kneeR; // Offset: 360
    keen::ds::string kneeL; // Offset: 400
    keen::ds::string armL; // Offset: 440
    keen::ds::string block; // Offset: 480
};

struct ModelBase {
};

struct ModelHierarchy {
    keen::ds::string exportNode; // Offset: 0
    keen::float32 scale; // Offset: 40
    keen::float32 xanimScale; // Offset: 44
    keen::bool rotateY; // Offset: 48
    keen::ds::SlotJointMapping slotJointMapping; // Offset: 56
    keen::ds::PreviewModelArray previewModels; // Offset: 576
};

struct ModelHierarchyJointData {
    keen::uint32 index; // Offset: 0
    keen::ds::string name; // Offset: 8
    keen::uint32 parentIndex; // Offset: 48
    keen::uint32 tag; // Offset: 52
    keen::Matrix43 defaultPose; // Offset: 64
    keen::bool fixPosition; // Offset: 128
};

struct ModelHierarchyData {
    keen::DsArray<keen::ds::ModelHierarchyJointData> joints; // Offset: 0
    keen::uint64 defaultPoseHash; // Offset: 40
    keen::ds::SlotJointMapping slotJointMapping; // Offset: 48
    keen::ds::PreviewModelArray previewModels; // Offset: 568
};

struct ModelPose {
    keen::DsArray<keen::ds::vf32_data> data; // Offset: 0
    keen::uint32 alignedJointCount; // Offset: 40
};

struct ModelHierarchyJointDescription {
    keen::DsArray<keen::ds::string> jointDescriptions; // Offset: 0
};

struct ModelHierarchyResource {
    keen::Guid hierarchyId; // Offset: 0
    keen::DsArray<keen::uint32> jointNames; // Offset: 16
    keen::DsArray<keen::uint16> joinParentIndices; // Offset: 56
    keen::DsArray<keen::Matrix43> skinToJointMatrices; // Offset: 96
    keen::uint32 jointCount; // Offset: 136
    keen::ds::ModelPose defaultPose; // Offset: 144
    keen::DsArray<keen::AnimationJoint> defaultPoseJoints; // Offset: 192
};

typedef keen::GpcVariantFlag GpcVariantFlag;

struct GpcShaderVariant {
    keen::Bitmask8<keen::GpcVariantFlag> mask; // Offset: 0
    keen::ContentHash code; // Offset: 4
    keen::ContentHash strippedCode; // Offset: 20
};

struct GpcShaderResource {
    keen::DsArray<keen::ds::GpcShaderVariant> variants; // Offset: 0
    keen::ds::string entryPoint; // Offset: 40
};

typedef keen::GpcPrimitiveType GpcPrimitiveType;

typedef keen::GpcCullMode GpcCullMode;

typedef keen::GpcFillMode GpcFillMode;

typedef keen::GpcWindingOrder GpcWindingOrder;

typedef keen::GpcBlendOp GpcBlendOp;

typedef keen::GpcBlendFactor GpcBlendFactor;

typedef keen::GpcComparisonFunction GpcComparisonFunction;

struct GpcRasterPipelineResource {
    keen::ds::string name; // Offset: 0
    keen::HashKey32 hash; // Offset: 40
    keen::DsArray<keen::PixelFormat> colorTargetFormats; // Offset: 48
    keen::PixelFormat depthStencilTargetFormat; // Offset: 88
    keen::uint8 sampleCount; // Offset: 89
    keen::ds::GpcPrimitiveType primitiveType; // Offset: 90
    keen::uint8 patchSize; // Offset: 91
    keen::ds::GpcCullMode cullMode; // Offset: 92
    keen::ds::GpcFillMode fillMode; // Offset: 93
    keen::ds::GpcWindingOrder windingOrder; // Offset: 94
    keen::ds::GpcBlendOp blendOp; // Offset: 95
    keen::ds::GpcBlendFactor blendSourceFactor; // Offset: 96
    keen::ds::GpcBlendFactor blendDestFactor; // Offset: 97
    keen::bool sampleShading; // Offset: 98
    keen::bool alphaToCoverage; // Offset: 99
    keen::ds::GpcComparisonFunction depthComparisonFunction; // Offset: 100
    keen::bool depthWriteEnable; // Offset: 101
    keen::float32 constDepthBias; // Offset: 104
    keen::float32 slopeDepthBias; // Offset: 108
    keen::ds::GpcShaderResource vsShaderCode; // Offset: 112
    keen::ds::GpcShaderResource tcShaderCode; // Offset: 192
    keen::ds::GpcShaderResource teShaderCode; // Offset: 272
    keen::ds::GpcShaderResource fsShaderCode; // Offset: 352
};

struct GpcComputePipelineResource {
    keen::ds::string name; // Offset: 0
    keen::HashKey32 hash; // Offset: 40
    keen::uint3 groupSize; // Offset: 44
    keen::ds::GpcShaderResource computeShader; // Offset: 56
};

struct GpcResource {
    keen::HashKey32 signatureHash; // Offset: 0
    keen::DsArray<keen::ds::GpcRasterPipelineResource> rasterPipelines; // Offset: 8
    keen::DsArray<keen::ds::GpcComputePipelineResource> computePipelines; // Offset: 48
};

struct GpcResourceList {
    keen::ds::string path; // Offset: 0
};

typedef keen::gpu::u32 gpu.u32;

typedef keen::gpu::s32 gpu.s32;

typedef keen::gpu::f32 gpu.f32;

typedef keen::gpu::u32_1 gpu.u32_1;

typedef keen::gpu::u32_2 gpu.u32_2;

typedef keen::gpu::u32_3 gpu.u32_3;

typedef keen::gpu::u32_4 gpu.u32_4;

typedef keen::gpu::s32_1 gpu.s32_1;

typedef keen::gpu::s32_2 gpu.s32_2;

typedef keen::gpu::s32_3 gpu.s32_3;

typedef keen::gpu::s32_4 gpu.s32_4;

typedef keen::gpu::f32_1 gpu.f32_1;

typedef keen::gpu::f32_2 gpu.f32_2;

typedef keen::gpu::f32_3 gpu.f32_3;

typedef keen::gpu::f32_4 gpu.f32_4;

typedef keen::gpu::f32_3x4 gpu.f32_3x4;

typedef keen::gpu::f32_4x4 gpu.f32_4x4;

typedef keen::gpu::DrawIndirectParameter gpu.DrawIndirectParameter;

typedef keen::gpu::DrawIndexedIndirectParameter gpu.DrawIndexedIndirectParameter;

typedef keen::gpu::DispatchIndirectParameter gpu.DispatchIndirectParameter;

struct BindlessTexture2D_float4 {
    keen::uint32 index; // Offset: 0
};

struct BindlessTexture2D_float {
    keen::uint32 index; // Offset: 0
};

struct BindlessTexture3D_float4 {
    keen::uint32 index; // Offset: 0
};

struct BindlessTexture3D_float {
    keen::uint32 index; // Offset: 0
};

struct BindlessTexture3D_uint {
    keen::uint32 index; // Offset: 0
};

struct BindlessSampler {
    keen::uint32 index; // Offset: 0
};

struct GpuSystemInformation {
    keen::StaticArray<keen::uint8,64> description; // Offset: 0
    keen::StaticArray<keen::uint8,64> model; // Offset: 64
    keen::uint64 videoMemorySize; // Offset: 128
    keen::uint64 sharedMemorySize; // Offset: 136
    keen::bool hasDirectX9; // Offset: 144
    keen::bool hasDirectX11; // Offset: 145
    keen::bool hasGl1; // Offset: 146
    keen::bool hasGl2; // Offset: 147
    keen::bool hasGl3; // Offset: 148
    keen::bool hasGl4; // Offset: 149
    keen::bool hasGles2; // Offset: 150
    keen::bool hasGles3; // Offset: 151
    keen::bool hasMetal; // Offset: 152
    keen::bool hasVulkan; // Offset: 153
};

struct DisplaySystemInformation {
    keen::StaticArray<keen::uint8,64> description; // Offset: 0
    keen::uint32 gpuIndex; // Offset: 64
    keen::uint32 pixelWidth; // Offset: 68
    keen::uint32 pixelHeight; // Offset: 72
    keen::float32 aspectRatio; // Offset: 76
    keen::uint32 dpi; // Offset: 80
};

struct GraphicsSystemInformation {
    keen::uint32 totalPixelWidth; // Offset: 0
    keen::uint32 totalPixelHeight; // Offset: 4
    keen::uint32 gpuCount; // Offset: 8
    keen::uint32 displayCount; // Offset: 12
    keen::StaticArray<keen::ds::GpuSystemInformation,4> gpus; // Offset: 16
    keen::StaticArray<keen::ds::DisplaySystemInformation,4> displays; // Offset: 656
};

struct HistogramData {
    keen::DsString id; // Offset: 0
    keen::DsArray<keen::uint32> slots; // Offset: 40
    keen::uint32 valueCount; // Offset: 80
    keen::sint64 valueSum; // Offset: 88
    keen::sint64 minValue; // Offset: 96
    keen::sint64 maxValue; // Offset: 104
    keen::sint64 rangeStart; // Offset: 112
    keen::sint64 rangeEnd; // Offset: 120
    keen::bool isLinear; // Offset: 128
    keen::bool isTime; // Offset: 129
};

struct HolisticEngineVersion {
    keen::ds::string gitHash; // Offset: 0
};

typedef keen::HolisticSceneRenderFlag HolisticSceneRenderFlag;

typedef keen::HolisticSceneRenderFlags HolisticSceneRenderFlags;

typedef keen::SceneCameraSpeed SceneCameraSpeed;

typedef keen::SceneCameraSpeedBoostFactor SceneCameraSpeedBoostFactor;

struct HolisticSceneCameraSettings {
    keen::ds::SceneCameraSpeed cameraSpeed; // Offset: 0
    keen::ds::SceneCameraSpeedBoostFactor cameraSpeedBoost; // Offset: 1
    keen::float farClip; // Offset: 4
    keen::float fovY; // Offset: 8
};

struct HolisticSceneEditorLighting {
    keen::float4 sunColor; // Offset: 0
    keen::float iblIntensity; // Offset: 16
    keen::float editorFixedExposure; // Offset: 20
    keen::bool forceEditorLighting; // Offset: 24
};

typedef keen::HolisticSnappingFlag HolisticSnappingFlag;

typedef keen::HolisticSnappingFlags HolisticSnappingFlags;

typedef keen::HolisticSceneViewOverlay HolisticSceneViewOverlay;

typedef keen::HolisticSceneViewOverlays HolisticSceneViewOverlays;

struct HolisticSceneSnappingSettings {
    keen::uint32 gridSize; // Offset: 0
    keen::float32 angleStep; // Offset: 4
    keen::ds::HolisticSnappingFlags lockedSnappingFlags; // Offset: 8
};

struct HolisticOverlaySettings {
    keen::ds::HolisticSceneViewOverlays overlays; // Offset: 0
    keen::bool showOverlays; // Offset: 4
    keen::bool isNonSelectableOverlayExpanded; // Offset: 5
    keen::bool isCustomLightOverlayExpanded; // Offset: 6
    keen::StaticArray<keen::bool,3> isAlbedoTintLayerOverlayExpanded; // Offset: 7
};

struct HolisticSceneToolboxSettings {
    keen::bool randomRotateY; // Offset: 0
    keen::bool alignToNormal; // Offset: 1
};

struct HolisticPersistentSceneSettings {
    keen::ds::HolisticSceneCameraSettings camera; // Offset: 0
    keen::ds::HolisticSceneEditorLighting lighting; // Offset: 12
    keen::ds::HolisticSceneSnappingSettings snapping; // Offset: 40
    keen::ds::HolisticOverlaySettings overlaySettings; // Offset: 52
    keen::ds::HolisticSceneToolboxSettings toolbox; // Offset: 64
};

struct HolisticPersistentPreviewSettings {
    keen::ds::HolisticSceneCameraSettings camera; // Offset: 0
    keen::ds::HolisticSceneEditorLighting lighting; // Offset: 12
    keen::ds::HolisticOverlaySettings overlaySettings; // Offset: 40
};

struct HolisticPersistentUserSettings {
    keen::ds::HolisticPersistentSceneSettings scene; // Offset: 0
    keen::ds::HolisticPersistentPreviewSettings preview; // Offset: 68
};

struct HolisticVfxTestParameters {
    keen::WorldTransform worldTransform; // Offset: 0
    keen::float3 targetPosition; // Offset: 56
};

struct HolisticMapFilterCollection {
};

struct HolisticMapFilterDirectory {
};

struct HolisticMapFilter {
    keen::float markerSize; // Offset: 0
    keen::Color color; // Offset: 4
    keen::bool isVisible; // Offset: 8
};

struct Folder {
};

struct ImporterModelConfig {
    keen::DsArray<keen::ds::string> parentNamePatters; // Offset: 0
    keen::DsArray<keen::ds::string> nameIncludePatters; // Offset: 40
    keen::DsArray<keen::ds::string> nameExcludePatters; // Offset: 80
};

struct ImporterTemplate {
};

struct ImporterTemplateObject {
    keen::ds::string descriptionFormat; // Offset: 0
    keen::ds::string type; // Offset: 40
    keen::ds::string initialState; // Offset: 80
    keen::uint32 sortIndex; // Offset: 120
    keen::Guid containerId; // Offset: 124
};

typedef keen::ImporterAction ImporterAction;

typedef keen::ds::string SourceFileHash;

struct ImporterFileTemplate {
    keen::ds::string extension; // Offset: 0
    keen::ds::ImporterAction action; // Offset: 40
    keen::ds::SourceFileHash contentHash; // Offset: 48
};

struct TagCollection {
};

struct ObjectTagGroup {
    keen::Color color; // Offset: 0
};

struct ObjectTag {
};

typedef keen::ObjectReference<keen::ds::ObjectTag> TagReference;

struct TagDirectoryContent {
    keen::DsArray<keen::ds::ObjectTag> tags; // Offset: 0
    keen::DsArray<keen::ds::ObjectTagGroup> groups; // Offset: 40
};

typedef keen::HolisticImporterObjectType HolisticImporterObjectType;

struct SourceFile {
    keen::ds::SourceFileHash fileHash; // Offset: 0
    keen::ds::HolisticImporterObjectType targetType; // Offset: 40
};

typedef keen::ObjectReference<keen::ds::SourceFile> SourceFileReference;

struct SourceData {
    keen::ds::SourceFileHash dataHash; // Offset: 0
};

typedef keen::ObjectReference<keen::ds::SourceData> SourceDataReference;

struct WhiteboxTagDirectory {
};

struct WhiteboxTagGroup {
    keen::Color color; // Offset: 0
};

struct WhiteboxTag {
};

struct LootTagGroup {
    keen::Color color; // Offset: 0
};

struct LootTag {
};

struct DefaultLootLabelCollectionRootDirectory {
};

struct DefaultLootLabelCollectionDirectory {
};

struct DefaultLootLabelCollection {
};

struct DungeonRoomContextTag {
    keen::bool invert; // Offset: 0
};

struct DungeonRoomGroundContextTag {
};

struct DungeonRoomCeilingContextTag {
};

typedef keen::ObjectReference<keen::ds::WhiteboxTag> WhiteboxTagReference;

typedef keen::ObjectReference<keen::ds::WhiteboxTagGroup> WhiteboxTagGroupReference;

struct WhiteboxTagInstance {
    keen::ds::WhiteboxTagReference tag; // Offset: 0
};

typedef keen::ObjectReference<keen::ds::LootTag> LootTagReference;

struct LootTagInstance {
    keen::ds::LootTagReference tag; // Offset: 0
    keen::float32 itemLootWeight; // Offset: 16
};

struct WhiteboxTagInfo {
    keen::Guid instance; // Offset: 0
    keen::ds::WhiteboxTagReference tag; // Offset: 16
    keen::ds::WhiteboxTagGroupReference group; // Offset: 32
};

struct WhiteboxTagInheritanceInfo {
    keen::Guid parentId; // Offset: 0
    keen::Guid tagGuid; // Offset: 16
};

struct WhiteboxTagInheritanceList {
    keen::DsArray<keen::ds::WhiteboxTagInheritanceInfo> inheritedTags; // Offset: 0
};

typedef keen::ImageType ImageType;

typedef keen::ImageColorSpace ImageColorSpace;

typedef keen::ImageContentType ImageContentType;

struct Image {
    keen::ds::ImageType type; // Offset: 0
    keen::DsString slice; // Offset: 8
    keen::DsString alphaChannel; // Offset: 48
    keen::ds::ImageColorSpace colorSpace; // Offset: 88
    keen::ds::ImageContentType contentType; // Offset: 92
    keen::uint32 sizeDivider; // Offset: 96
    keen::uint32 slices; // Offset: 100
    keen::uint32 sliceRows; // Offset: 104
};

struct ImageInfo {
    keen::uint32 width; // Offset: 0
    keen::uint32 height; // Offset: 4
    keen::uint32 depth; // Offset: 8
    keen::DsString name; // Offset: 16
};

struct ChunkedImage {
    keen::uint2 tileSize; // Offset: 0
    keen::uint2 numTiles; // Offset: 8
    keen::uint2 dimension; // Offset: 16
};

struct ImageColorRange {
    keen::float4 averageColor; // Offset: 0
    keen::float4 minColor; // Offset: 16
    keen::float4 maxColor; // Offset: 32
};

typedef keen::ScatterImageType ScatterImageType;

struct ScatterImage {
    keen::ds::ScatterImageType type; // Offset: 0
    keen::uint32 upscaleFactor; // Offset: 4
};

struct ScatterImageMetaData {
    keen::ds::ChunkedImage chunkedImage; // Offset: 8
};

struct ScatterImageAreaMetaData {
    keen::uint2 tileRangeX; // Offset: 32
    keen::uint2 tileRangeY; // Offset: 40
};

struct ScatterImageLoadParameters {
    keen::Guid imageGuid; // Offset: 48
    keen::uint32 channel; // Offset: 64
};

struct GameKnowledgeDirectory {
    keen::ObjectReference<keen::ds::ItemDirectory> itemDirectory; // Offset: 0
    keen::ObjectReference<keen::ds::NpcDialogDirectory> dialogDirectory; // Offset: 16
    keen::ObjectReference<keen::ds::RecipeList> recipeDirectory; // Offset: 32
    keen::ObjectReference<keen::ds::JournalDirectory> journalDirectory; // Offset: 48
};

struct GameKnowledgeSubDirectory {
};

struct GameKnowledgeObjectBase {
    keen::bool sendToAnalytics; // Offset: 0
};

struct WorldKnowledgeObject {
    keen::bool generateAdditionalPlayerKnowledge; // Offset: 1
};

struct PlayerKnowledgeObject {
    keen::bool unlocksSkillPoints; // Offset: 1
    keen::uint8 unlockedSkillPoints; // Offset: 2
    keen::ObjectReference<keen::ds::ExperienceBalanceValue> experienceGain; // Offset: 4
    keen::ds::AchievementDataReference unlockAchievement; // Offset: 20
};

struct SceneKnowledgeRequirement {
    keen::ds::ecs::TemplateReference targetSubentity; // Offset: 104
};

struct KnowledgeObjectInfo {
    keen::ds::KnowledgeId id; // Offset: 0
    keen::ds::string name; // Offset: 8
    keen::bool isPlayerKnowledge; // Offset: 48
    keen::bool generateAdditionalPlayerKnowledge; // Offset: 49
    keen::bool sendToAnalytics; // Offset: 50
    keen::uint8 unlockedSkillPoints; // Offset: 51
    keen::HashKey32 experienceGainId; // Offset: 52
    keen::ds::AchievementId achievementId; // Offset: 56
};

struct KnowledgeExperienceCountInfo {
    keen::DsArray<keen::ds::KnowledgeExperienceCount> experienceObjects; // Offset: 0
};

struct KnowledgeExperienceCount {
    keen::HashKey32 experienceObjectId; // Offset: 0
    keen::uint32 count; // Offset: 4
};

struct KnowledgeObjectResource {
    keen::ds::KnowledgeId id; // Offset: 0
    keen::bool sendToAnalytics; // Offset: 4
};

struct WorldKnowledgeObjectResource {
    keen::bool hasOptionalPlayerProgression; // Offset: 8
};

struct PlayerKnowledgeObjectResource {
    keen::uint8 unlockedSkillPoints; // Offset: 8
    keen::HashKey32 experienceGainId; // Offset: 12
    keen::ds::AchievementId achievementId; // Offset: 16
};

struct GameKnowledgeResource {
    keen::DsArray<keen::ds::WorldKnowledgeObjectResource> worldKnowledge; // Offset: 0
    keen::DsArray<keen::ds::PlayerKnowledgeObjectResource> playerKnowledge; // Offset: 40
    keen::DsArray<keen::ds::KnowledgeId> dialogKnowledgeIds; // Offset: 80
    keen::DsArray<keen::ds::KnowledgeId> itemKnowledgeIds; // Offset: 120
};

struct GameKnowledgeDbInfo {
    keen::DsArray<keen::ds::KnowledgeObjectInfo> worldKnowledgeObjects; // Offset: 0
    keen::DsArray<keen::ds::KnowledgeObjectInfo> playerKnowledgeObjects; // Offset: 40
};

struct KnowledgeQueryDirectory {
    keen::ObjectReference<keen::ds::GameKnowledgeDirectory> knowledgeDirectory; // Offset: 0
    keen::ObjectReference<keen::ds::WorldKnowledgeObject> demoKnowledge; // Offset: 16
};

struct KnowledgeQuerySubDirectory {
};

typedef keen::KnowledgeQueryOperator KnowledgeQueryOperator;

struct GameKnowledgeQuery {
    keen::ds::KnowledgeQueryOperator type; // Offset: 0
    keen::bool invert; // Offset: 1
};

struct BaseKnowledgeQueryAction {
    keen::bool invert; // Offset: 0
};

struct KnowledgeQueryAction {
    keen::bool usePlayerKnowledge; // Offset: 1
    keen::ObjectReference<keen::ds::WorldKnowledgeObject> worldKnowledge; // Offset: 4
    keen::ObjectReference<keen::ds::PlayerKnowledgeObject> playerKnowledge; // Offset: 20
};

struct ItemKnowledgeQueryAction {
    keen::ds::ItemKnowledgeTrigger itemKnowledge; // Offset: 1
    keen::bool worldItemKnowledge; // Offset: 2
    keen::ObjectReference<keen::ds::ItemInfo> item; // Offset: 4
};

struct DialogKnowledgeQueryAction {
    keen::ObjectReference<keen::ds::NpcDialogOptionBase> dialogOption; // Offset: 4
};

typedef keen::NpcQueryActionType NpcQueryActionType;

struct NpcQueryAction {
    keen::ds::NpcQueryActionType type; // Offset: 1
    keen::ObjectReference<keen::ds::WorkshopDefinition> npc; // Offset: 4
    keen::ds::ecs::TemplateReference npcEntity; // Offset: 20
    keen::ObjectReference<keen::ds::CraftingPropDefinition> requiredCraftingProp; // Offset: 36
};

struct CraftingQueryAction {
    keen::ObjectReference<keen::ds::Recipe> recipe; // Offset: 4
};

struct PredefinedKnowledgeQueryAction {
    keen::bool usePlayerKnowledge; // Offset: 1
    keen::ds::PredefinedKnowledgeTypes knowledge; // Offset: 2
};

typedef keen::CompareOperator CompareOperator;

struct FlameAltarCountQueryAction {
    keen::ds::CompareOperator operation; // Offset: 1
    keen::uint16 count; // Offset: 2
};

struct FlameAltarLevelQueryAction {
    keen::ds::CompareOperator operation; // Offset: 1
    keen::uint16 count; // Offset: 2
};

struct MotherFlameLevelQueryAction {
    keen::ds::CompareOperator operation; // Offset: 1
    keen::uint16 count; // Offset: 2
};

struct PlayerLevelQueryAction {
    keen::ds::CompareOperator operation; // Offset: 1
    keen::uint16 count; // Offset: 2
};

struct OtherQueryAction {
    keen::ObjectReference<keen::ds::GameKnowledgeQuery> query; // Offset: 4
};

struct InventoryQueryAction {
    keen::ObjectReference<keen::ds::ItemInfo> item; // Offset: 4
};

typedef keen::KnowledgeQueryActionType KnowledgeQueryActionType;

struct KnowledgeQueryActionInfo {
    keen::ds::KnowledgeQueryActionType type; // Offset: 0
    keen::ds::string name; // Offset: 8
    keen::ds::KnowledgeId queryId; // Offset: 48
    keen::uint32 queryIndex; // Offset: 52
    keen::uint32 playerProgressionQueryIndex; // Offset: 56
    keen::bool invertResult; // Offset: 60
    keen::bool isPlayerAction; // Offset: 61
};

typedef keen::KnowledgeQueryType KnowledgeQueryType;

struct GameKnowledgeQueryResourceBase {
    keen::ds::string name; // Offset: 0
    keen::ds::KnowledgeId queryId; // Offset: 40
    keen::uint32 queryIndex; // Offset: 44
    keen::ds::KnowledgeQueryType type; // Offset: 48
    keen::bool isPlayerQuery; // Offset: 49
    keen::bool invertResult; // Offset: 50
};

struct GameKnowledgeQueryResource {
    keen::bool hasOptionalPlayerProgression; // Offset: 56
    keen::DsArray<keen::ds::KnowledgeQueryActionInfo> actions; // Offset: 64
};

struct GameRuntimeQueryResource {
    keen::ds::ItemReference itemRef; // Offset: 56
    keen::ds::ItemId itemId; // Offset: 72
    keen::ds::NpcQueryActionType npcActionType; // Offset: 76
    keen::ds::NpcId npcId; // Offset: 80
    keen::ds::CraftingPropId craftingProp; // Offset: 84
    keen::ds::CompareOperator compareOperation; // Offset: 88
    keen::uint16 compareValue; // Offset: 90
};

struct GameKnowledgeQueryResourceDb {
    keen::ds::KnowledgeId demoKnowledgeId; // Offset: 0
    keen::uint32 playerQueryStartIndex; // Offset: 4
    keen::uint32 runtimePlayerQueryStartIndex; // Offset: 8
    keen::DsArray<keen::ds::GameKnowledgeQueryResource> queries; // Offset: 16
    keen::DsArray<keen::ds::GameRuntimeQueryResource> runtimeQueries; // Offset: 56
};

typedef keen::RecipeKnowledgeType RecipeKnowledgeType;

struct GameKnowledgeQueryTriggerSubDirectory {
};

struct GameKnowledgeQueryTriggerDirectory {
    keen::ObjectReference<keen::ds::KnowledgeQueryDirectory> knowledgeQueries; // Offset: 0
};

struct GameKnowledgeQueryTrigger {
    keen::bool canUnlockKnowledge; // Offset: 0
    keen::bool canRemoveKnowledge; // Offset: 1
    keen::ds::GameKnowledgeRequirement requirement; // Offset: 4
    keen::ds::KnowledgeId queryId; // Offset: 108
    keen::DsArray<keen::ds::KnowledgeId> unlockKnowledge; // Offset: 112
};

struct GameKnowledgeQueryTriggerResource {
    keen::DsArray<keen::ds::GameKnowledgeQueryTrigger> worldQueries; // Offset: 0
    keen::DsArray<keen::ds::GameKnowledgeQueryTrigger> playerQueries; // Offset: 40
};

typedef keen::DebugKnowledgeQuerySource DebugKnowledgeQuerySource;

struct DebugServerKnowledgeMessage {
    keen::uint16 changeCounter; // Offset: 0
    keen::uint16 playerIndex; // Offset: 2
    keen::bool isPlayerKnowledge; // Offset: 4
    keen::DsArray<keen::ds::KnowledgeId> unlockedKnowledge; // Offset: 8
};

struct DebugResetKnowledgeMessage {
    keen::bool isPlayerKnowledge; // Offset: 0
};

struct DebugUnlockFullKnowledgeMessage {
    keen::bool unlockPlayerKnowledge; // Offset: 0
};

struct DebugToggleKnowledgeMessage {
    keen::ds::KnowledgeId knowledgeId; // Offset: 0
    keen::bool resultState; // Offset: 4
    keen::bool isPlayerKnowledge; // Offset: 5
    keen::uint16 playerIndex; // Offset: 6
};

typedef keen::DebugKnowledgeQueryResultType DebugKnowledgeQueryResultType;

struct DebugKnowledgeQueryResult {
    keen::ds::DebugKnowledgeQueryResultType type; // Offset: 0
    keen::uint32 queryIndex; // Offset: 4
    keen::bool isPending; // Offset: 8
    keen::bool isPendingPersonal; // Offset: 9
    keen::bool result; // Offset: 10
    keen::bool resultPersonal; // Offset: 11
};

struct SceneKnowledgeOverride {
    keen::ds::ecs::TemplateReference entityTemplate; // Offset: 0
};

struct SceneKnowledgeTriggerOverride {
    keen::ds::GameKnowledgeTrigger knowledgeTrigger; // Offset: 16
};

struct SceneKnowledgeRequirementOverride {
    keen::ds::GameKnowledgeRequirement knowledgeRequirement; // Offset: 16
};

struct SceneKnowledgeMapMarkerOverride {
    keen::ds::GameKnowledgeRequirement hintState; // Offset: 16
    keen::ds::GameKnowledgeRequirement visibleState; // Offset: 120
    keen::bool hasCompletedState; // Offset: 224
    keen::ds::GameKnowledgeRequirement completedState; // Offset: 228
};

typedef keen::SceneKnowledgeOverrideType SceneKnowledgeOverrideType;

struct SceneKnowledgeOverrideInfo {
    keen::Guid entityTemplateGuid; // Offset: 0
    keen::ds::SceneKnowledgeOverrideType type; // Offset: 16
    keen::ds::KnowledgeId knowledgeId; // Offset: 20
    keen::ds::KnowledgeId knowledgeId2; // Offset: 24
    keen::ds::KnowledgeId knowledgeId3; // Offset: 28
};

struct SceneKnowledgeOverrides {
    keen::DsArray<keen::ds::SceneKnowledgeOverrideInfo> knowledgeOverrides; // Offset: 0
};

struct DebugKnowledgeQueryResults {
    keen::DsArray<keen::ds::DebugKnowledgeQueryResult> results; // Offset: 0
    keen::uint8 playerIndex; // Offset: 40
};

struct LocaTagGroup {
};

typedef keen::LocaLanguages LocaLanguages;

typedef keen::ObjectReference<keen::ds::LocaCrowdinProject> LocaCrowdinProjectReference;

struct LocaCrowdinProject {
    keen::LanguageId inputLanguage; // Offset: 0
    keen::ds::LocaCrowdinProjectReference inputProject; // Offset: 4
    keen::ds::LocaLanguages outputLanguages; // Offset: 24
    keen::uint64 projectId; // Offset: 32
    keen::uint64 fileId; // Offset: 40
    keen::bool onlyApproved; // Offset: 48
    keen::ds::SourceFileReference crowdinCSV; // Offset: 52
};

struct LocaTagCollection {
    keen::ds::LocaCrowdinProjectReference crowdinWritingProject; // Offset: 0
    keen::ds::LocaCrowdinProjectReference crowdinTranslationProject; // Offset: 16
};

struct LocaTagCollectionResourceLanguage {
    keen::LanguageId language; // Offset: 0
    keen::ContentHash dataHash; // Offset: 4
};

struct LocaTagCollectionResource {
    keen::ContentHash keenglishDataHash; // Offset: 0
    keen::DsArray<keen::ds::LocaTagCollectionResourceLanguage> languages; // Offset: 16
};

typedef keen::LocaArgumentType LocaArgumentType;

struct LocaTagArgument {
    keen::uint32 id; // Offset: 0
    keen::ds::LocaArgumentType type; // Offset: 4
};

struct LocaTagResource {
    keen::ds::LocaTagId id; // Offset: 0
    keen::ds::string text; // Offset: 8
    keen::DsArray<keen::ds::LocaTagArgument> arguments; // Offset: 48
    keen::uint32 genericArguments; // Offset: 88
};

struct LocaTagCollectionResourceData {
    keen::DsArray<keen::ds::LocaTagResource> tags; // Offset: 0
};

struct BSpline {
    keen::DsArray<keen::Vector3> controlPoints; // Offset: 0
    keen::bool closed; // Offset: 40
};

struct MemorySystemInformationBlock {
    keen::StaticArray<keen::uint8,32> name; // Offset: 0
    keen::uint32 size; // Offset: 32
    keen::uint16 type; // Offset: 36
};

struct MemorySystemInformation {
    keen::uint64 totalSize; // Offset: 0
    keen::uint64 allocatedSize; // Offset: 8
    keen::uint64 freeSize; // Offset: 16
    keen::StaticArray<keen::ds::MemorySystemInformationBlock,32> memoryBlocks; // Offset: 24
    keen::uint32 memoryBlockCount; // Offset: 1304
};

struct Midi {
};

typedef keen::MidiInstrumentSampleType MidiInstrumentSampleType;

struct InstrumentSampleCollection {
    keen::ObjectReference<keen::ds::SamplerInstrument> samplesLute; // Offset: 0
    keen::ObjectReference<keen::ds::SamplerInstrument> samplesLuteChord; // Offset: 16
    keen::ObjectReference<keen::ds::SamplerInstrument> samplesFlute; // Offset: 32
    keen::ObjectReference<keen::ds::SamplerInstrument> samplesHarp; // Offset: 48
    keen::ObjectReference<keen::ds::SamplerInstrument> samplesDounDoun; // Offset: 64
    keen::ObjectReference<keen::ds::SamplerInstrument> samplesTambourin; // Offset: 80
};

struct InstrumentSample {
    keen::bool isPitched; // Offset: 0
    keen::uint8 baseNote; // Offset: 1
    keen::float32 fineTune; // Offset: 4
    keen::float32 volume; // Offset: 8
};

struct SamplerInstrument {
    keen::float32 volume; // Offset: 0
    keen::uint32 releaseTime; // Offset: 4
    keen::bool isMonophone; // Offset: 8
    keen::ds::MidiInstrumentSampleType instrument; // Offset: 9
};

struct SamplerInstrumentLayer {
    keen::ObjectReference<keen::ds::InstrumentSample> sample; // Offset: 0
    keen::uint8 minNote; // Offset: 16
    keen::uint8 maxNote; // Offset: 17
    keen::uint8 minVelocity; // Offset: 18
    keen::uint8 maxVelocity; // Offset: 19
};

struct InstrumentSampleData {
    keen::bool isPitched; // Offset: 0
    keen::float32 tuning; // Offset: 4
    keen::DsArray<keen::sint16> samples; // Offset: 8
};

struct SamplerInstrumentResourceSample {
    keen::bool isPitched; // Offset: 0
    keen::float32 tuning; // Offset: 4
    keen::uint8 minNote; // Offset: 8
    keen::uint8 maxNote; // Offset: 9
    keen::uint8 minVelocity; // Offset: 10
    keen::uint8 maxVelocity; // Offset: 11
    keen::uint32 sampleOffset; // Offset: 12
    keen::uint32 sampleLength; // Offset: 16
};

struct SamplerInstrumentResource {
    keen::float volume; // Offset: 0
    keen::float releaseTime; // Offset: 4
    keen::bool isMonophone; // Offset: 8
    keen::DsArray<keen::ds::SamplerInstrumentResourceSample> samples; // Offset: 16
    keen::ContentHash sampleData; // Offset: 56
    keen::ds::MidiInstrumentSampleType instrument; // Offset: 72
};

struct MidiEvent {
    keen::uint32 timestamp; // Offset: 0
    keen::uint8 eventType; // Offset: 4
    keen::uint8 subType; // Offset: 5
    keen::uint8 param1; // Offset: 6
    keen::uint8 param2; // Offset: 7
};

typedef keen::MidiTrackRole MidiTrackRole;

struct MidiTrack {
    keen::ds::string name; // Offset: 0
    keen::ds::string instrumentName; // Offset: 40
    keen::ds::MidiInstrumentSampleType instrument; // Offset: 80
    keen::ds::MidiTrackRole role; // Offset: 81
    keen::DsArray<keen::ds::MidiEvent> events; // Offset: 88
};

struct MidiTimeSignature {
    keen::uint8 numerator; // Offset: 0
    keen::uint8 denominator; // Offset: 1
    keen::uint8 amountOf32NotesInQN; // Offset: 2
    keen::uint8 metronomeTicksPQN; // Offset: 3
};

struct MidiResource {
    keen::ds::MidiTimeSignature timeSignature; // Offset: 0
    keen::uint16 pulsesPQN; // Offset: 4
    keen::bool isSMPTE; // Offset: 6
    keen::DsArray<keen::ds::MidiTrack> tracks; // Offset: 8
    keen::uint32 songDurationMS; // Offset: 48
    keen::ds::string debugName; // Offset: 56
};

typedef keen::ObjectReference<keen::ds::MidiResource> MidiResourceReference;

struct NotifierContainer {
};

typedef keen::CharacterUtterance CharacterUtterance;

struct VoicePack {
    keen::ds::SoundContainerReference attackShort; // Offset: 0
    keen::ds::SoundContainerReference attackLong; // Offset: 16
    keen::ds::SoundContainerReference attackFinisher; // Offset: 32
    keen::ds::SoundContainerReference attackChainFinisherLong; // Offset: 48
    keen::ds::SoundContainerReference attackRollFinisher; // Offset: 64
    keen::ds::SoundContainerReference die; // Offset: 80
    keen::ds::SoundContainerReference hit; // Offset: 96
    keen::ds::SoundContainerReference jump; // Offset: 112
    keen::ds::SoundContainerReference exhausted; // Offset: 128
    keen::ds::SoundContainerReference staminaDrain; // Offset: 144
    keen::ds::SoundContainerReference customization; // Offset: 160
};

struct VoicePackResource {
    keen::StaticArray<keen::ds::SoundContainerReference,11> sound; // Offset: 0
};

typedef keen::ObjectReference<keen::ds::VoicePackResource> VoicePackResourceReference;

struct VoicePackSubDirectory {
};

struct VoicePackDirectory {
};

struct VoicePackDirectoryResource {
    keen::DsArray<keen::ds::VoicePackResourceReference> voicePacks; // Offset: 0
};

struct Notifier {
    keen::ds::VfxReference defaultVfx; // Offset: 0
    keen::ds::SoundContainerReference defaultSound; // Offset: 16
    keen::ds::CharacterUtterance playerVoice; // Offset: 32
};

struct NotifierResource {
    keen::ObjectReference<keen::ds::VfxResource> defaultVfx; // Offset: 0
    keen::ds::VfxUserEffectParameterDataBlock defaultVfxInitParameters; // Offset: 16
    keen::ds::SoundContainerReference defaultSound; // Offset: 80
    keen::ds::CharacterUtterance playerVoice; // Offset: 96
};

struct NotifierEventBase {
    keen::ds::AttachmentSlot slot; // Offset: 96
    keen::ds::ecs::Offset notifierOffset; // Offset: 100
    keen::bool attach; // Offset: 140
    keen::bool cancelFromActorSequence; // Offset: 141
};

typedef keen::FootId FootId;

struct FootPassingEvent {
    keen::ds::FootId foot; // Offset: 96
};

struct NotifierEvent {
    keen::ds::NotifierReference notifier; // Offset: 144
};

struct VfxNotifierEvent {
    keen::ds::VfxReference vfx; // Offset: 144
    keen::ds::VfxUserEffectParameterDataBlock vfxParameters; // Offset: 160
};

struct SfxNotifierEvent {
    keen::ds::SoundContainerReference sound; // Offset: 144
    keen::float32 noiseRange; // Offset: 160
};

struct EnvironmentEffectNotifierEvent {
    keen::Guid eventGuid; // Offset: 144
    keen::ds::EnvironmentEffectType environmentEffectType; // Offset: 160
    keen::float32 rayOffsetY; // Offset: 164
    keen::float32 rayLength; // Offset: 168
};

struct FoleyEffectNotifierEvent {
    keen::Guid eventGuid; // Offset: 144
    keen::ds::FoleyType foleyType; // Offset: 160
};

struct ClothSimulationEventModel {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
};

struct ClothSimulationEvent {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 96
    keen::float32 damping; // Offset: 112
    keen::float32 linearInertia; // Offset: 116
    keen::float32 angularInertia; // Offset: 120
    keen::float32 centrifugalInertia; // Offset: 124
    keen::float32 solverFrequency; // Offset: 128
    keen::float32 collisionFriction; // Offset: 132
    keen::float32 motionConstraintsMaxRadius; // Offset: 136
    keen::float32 motionConstraintsUnlimitedRadius; // Offset: 140
    keen::float32 gravity; // Offset: 144
    keen::DsArray<keen::Guid> models; // Offset: 152
};

struct ClothSimulationResetVelocityEvent {
};

struct ChainSimulationEvent {
    keen::float32 damping; // Offset: 96
    keen::float32 linearInertia; // Offset: 100
    keen::float32 angularInertia; // Offset: 104
    keen::float32 centrifugalInertia; // Offset: 108
    keen::float32 collisionFriction; // Offset: 112
    keen::float32 motionConstraintRadius; // Offset: 116
    keen::float32 gravity; // Offset: 120
    keen::DsArray<keen::Guid> models; // Offset: 128
};

typedef keen::CpuArchitecure CpuArchitecure;

struct CpuSystemInformation {
    keen::ds::CpuArchitecure architecture; // Offset: 0
    keen::uint32 bitCount; // Offset: 4
    keen::uint32 cpuCount; // Offset: 8
    keen::uint32 threadCount; // Offset: 12
    keen::StaticArray<keen::uint8,16> vendorId; // Offset: 16
    keen::StaticArray<keen::uint8,64> brand; // Offset: 32
    keen::bool hasSSE2; // Offset: 96
    keen::bool hasSSE42; // Offset: 97
    keen::bool hasAVX; // Offset: 98
    keen::bool hasAVX2; // Offset: 99
    keen::bool hasNeon; // Offset: 100
};

typedef keen::DeviceId DeviceId;

struct DeviceSystemInformation {
    keen::ds::DeviceId id; // Offset: 0
    keen::StaticArray<keen::uint8,64> model; // Offset: 4
    keen::StaticArray<keen::uint8,64> name; // Offset: 68
    keen::StaticArray<keen::uint8,18> macAddress; // Offset: 132
    keen::bool isRooted; // Offset: 150
};

typedef keen::OperatingSystemType OperatingSystemType;

struct OsSystemInformation {
    keen::ds::OperatingSystemType type; // Offset: 0
    keen::uint32 majorVersion; // Offset: 4
    keen::uint32 minorVersion; // Offset: 8
    keen::uint32 build; // Offset: 12
    keen::StaticArray<keen::uint8,32> versionString; // Offset: 16
    keen::StaticArray<keen::uint8,32> distribution; // Offset: 48
    keen::uint32 bitCount; // Offset: 80
};

struct AtmosphereShaderData {
    keen::uint32 isValid; // Offset: 0
    keen::float32 planetRadius; // Offset: 4
    keen::float2 yToNormalizedHeight; // Offset: 8
    keen::float3 rayleighScattering; // Offset: 16
    keen::float32 invRayleighDistribution; // Offset: 28
    keen::float3 rayleighExtinction; // Offset: 32
    keen::float32 pad3; // Offset: 44
    keen::float32 mieScattering; // Offset: 48
    keen::float32 mieExtinction; // Offset: 52
    keen::float32 mieG; // Offset: 56
    keen::float32 invMieDistribution; // Offset: 60
};

struct PreintegrateAtmosphereTransmittanceShaderData {
    keen::float2 invTextureSize; // Offset: 0
    keen::float2 pixelToHeight; // Offset: 8
    keen::float planetRadius; // Offset: 16
    keen::float cutoffRadius; // Offset: 20
    keen::float mieExtinction; // Offset: 24
    keen::float invMieDistribution; // Offset: 28
    keen::float3 rayleighExtinction; // Offset: 32
    keen::float invRayleighDistribution; // Offset: 44
};

struct ComputeAtmosphereScatteringLutShaderData {
    keen::float3 invTextureSize; // Offset: 0
    keen::float pad0; // Offset: 12
    keen::float2 texcoordToHeight; // Offset: 16
    keen::float2 pad1; // Offset: 24
    keen::float2 yToNormalizedHeight; // Offset: 32
    keen::float planetRadius; // Offset: 40
    keen::float cutoffRadius; // Offset: 44
    keen::float3 rayleighExtinction; // Offset: 48
    keen::float invRayleighDistribution; // Offset: 60
    keen::float3 rayleighScattering; // Offset: 64
    keen::float pad2; // Offset: 76
    keen::float mieExtinction; // Offset: 80
    keen::float invMieDistribution; // Offset: 84
    keen::float mieScattering; // Offset: 88
    keen::float mieG; // Offset: 92
};

struct ComputeAtmosphereAmbientIlluminationLutShaderData {
    keen::float3 invTextureSize; // Offset: 0
    keen::float pad0; // Offset: 12
};

struct Material {
};

struct BillboardMaterial {
    keen::ObjectReference<keen::ds::Image> albedoMap; // Offset: 0
    keen::ObjectReference<keen::ds::Image> opacityMap; // Offset: 16
    keen::ObjectReference<keen::ds::Image> roughnessMap; // Offset: 32
    keen::ObjectReference<keen::ds::Image> reflectanceMap; // Offset: 48
    keen::ObjectReference<keen::ds::Image> metallicMap; // Offset: 64
    keen::ObjectReference<keen::ds::Image> normalMap; // Offset: 80
    keen::ObjectReference<keen::ds::Image> translucencyMap; // Offset: 96
    keen::ObjectReference<keen::ds::Image> aoMap; // Offset: 112
};

typedef keen::BillboardRfxTexture BillboardRfxTexture;

struct StreamedTexture2D_float {
    keen::uint32 index; // Offset: 0
};

struct StreamedTexture2D_float4 {
    keen::uint32 index; // Offset: 0
};

struct BillboardRfxRenderMaterial {
    keen::ds::StreamedTexture2D_float opacityMap; // Offset: 0
    keen::ds::StreamedTexture2D_float4 albedoMap; // Offset: 4
    keen::ds::StreamedTexture2D_float4 materialParamsMap; // Offset: 8
    keen::ds::StreamedTexture2D_float4 normalMap; // Offset: 12
};

struct BrickVisibilityPassConstants {
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 0
    keen::float3 cameraWorldPosition; // Offset: 64
    keen::uint32 frameId; // Offset: 76
};

struct BrickDebugShadingConstants {
    keen::float3 directionalLightDirection; // Offset: 0
    keen::float3 directionalLightColor; // Offset: 16
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
};

struct VolumetricFogGridMaterial {
    keen::float3 absorption; // Offset: 0
    keen::float3 scattering; // Offset: 16
    keen::float3 emission; // Offset: 32
};

struct VolumetricFogGridCascadeShaderData {
    keen::float3 origin; // Offset: 0
    keen::float32 size; // Offset: 12
    keen::int3 pixelOffset; // Offset: 16
    keen::uint32 explicitPad0; // Offset: 28
};

struct VolumetricFogGridShaderData {
    keen::uint32 flags; // Offset: 0
    keen::float3 origin; // Offset: 4
    keen::float3 size; // Offset: 16
    keen::uint3 topLevelMaxVoxel; // Offset: 32
    keen::ds::VolumetricFogGridMaterial none; // Offset: 48
    keen::ds::VolumetricFogGridMaterial dangerous; // Offset: 96
    keen::ds::VolumetricFogGridMaterial deadly; // Offset: 144
    keen::ds::VolumetricFogGridMaterial decorative; // Offset: 192
    keen::StaticArray<keen::ds::VolumetricFogGridCascadeShaderData,8> cascades; // Offset: 240
};

struct BrickFillGBufferConstants {
    keen::ds::VolumetricFogGridShaderData fogGrid; // Offset: 0
    keen::uint32 layerCount; // Offset: 496
    keen::uint32 showLayerWeight; // Offset: 500
    keen::uint32 debugLayerIndex; // Offset: 504
    keen::uint2 outputSize; // Offset: 512
    keen::float2 invOutputSize; // Offset: 520
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 528
    keen::uint32 isMaterialDataValid; // Offset: 592
    keen::float3 cameraWorldPosition; // Offset: 596
    keen::float exposureCorrection; // Offset: 608
    keen::float time; // Offset: 612
};

struct GpuCullingFrustum {
    keen::float4 plane0; // Offset: 0
    keen::float4 plane1; // Offset: 16
    keen::float4 plane2; // Offset: 32
    keen::float4 plane3; // Offset: 48
    keen::float4 plane4; // Offset: 64
    keen::float4 plane5; // Offset: 80
};

struct GpuOcclusionCullingShaderData {
    keen::float2 depthPyramidResolution; // Offset: 0
    keen::float2 screenToDepthPyramidUvScale; // Offset: 8
    keen::float P00; // Offset: 16
    keen::float P11; // Offset: 20
    keen::float P03; // Offset: 24
    keen::float P13; // Offset: 28
    keen::float P22; // Offset: 32
    keen::float P23; // Offset: 36
    keen::float zNear; // Offset: 40
    keen::float zFar; // Offset: 44
    keen::uint orthoProjection; // Offset: 48
};

struct BrickCullingShaderParameters {
    keen::uint32 instanceCount; // Offset: 0
    keen::ds::GpuCullingFrustum frustum; // Offset: 16
    keen::GraphicsMatrix43 worldToViewMatrix; // Offset: 112
    keen::ds::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 160
};

struct BrickDrawCommandData {
    keen::uint32 indexCount; // Offset: 0
    keen::uint32 instanceCount; // Offset: 4
    keen::uint32 firstIndex; // Offset: 8
    keen::sint32 vertexOffset; // Offset: 12
    keen::uint32 firstInstance; // Offset: 16
};

struct BrickSdfBakingShaderParameters {
    keen::uint3 textureOffset; // Offset: 0
    keen::uint32 resolution; // Offset: 12
};

struct BrickVoxelCopyShaderParameters {
    keen::uint32 dwordCount; // Offset: 0
    keen::uint32 brickIndex; // Offset: 4
    keen::uint2 brickData; // Offset: 8
};

struct BrickVoxelDilateShaderParameters {
    keen::uint32 dwordCount; // Offset: 0
    keen::uint32 innerSize; // Offset: 4
};

struct NewBrickCommandData {
    keen::uint2 data; // Offset: 0
    keen::uint32 index; // Offset: 8
};

struct BrickUploadShaderParameters {
    keen::uint32 newBrickCount; // Offset: 0
};

typedef keen::BuildingMappingType BuildingMappingType;

struct BuildingMaterialParameters {
    keen::ds::BuildingMappingType mapping; // Offset: 0
    keen::bool edgeOnlySide; // Offset: 1
    keen::DsArray<keen::ds::DecoObjectRuleSet> decoObjectRules; // Offset: 8
};

struct BuildingMaterialParametersResource {
    keen::DsArray<keen::ds::BuildingMaterialParameters> materials; // Offset: 0
};

struct BuildingMaterials {
    keen::DsArray<keen::ObjectReference<keen::ds::PbrBuildingMaterial>> materials; // Offset: 0
};

struct RenderTexture {
    keen::uint16 width; // Offset: 0
    keen::uint16 height; // Offset: 2
    keen::uint16 depth; // Offset: 4
    keen::uint16 arraySize; // Offset: 6
    keen::uint8 levelCount; // Offset: 8
    keen::TextureType type; // Offset: 9
    keen::PixelFormat format; // Offset: 10
    keen::ContentHash data; // Offset: 12
    keen::ds::string debugName; // Offset: 32
};

struct BuildingMaterialLayerImages {
    keen::ds::RenderTexture emissiveMap; // Offset: 0
    keen::ds::RenderTexture albedoMap; // Offset: 72
    keen::ds::RenderTexture metallicMap; // Offset: 144
    keen::ds::RenderTexture roughnessMap; // Offset: 216
    keen::ds::RenderTexture reflectanceMap; // Offset: 288
    keen::ds::RenderTexture normalMap; // Offset: 360
    keen::ds::RenderTexture heightMap; // Offset: 432
    keen::ds::RenderTexture aoMap; // Offset: 504
};

struct BuildingMaterialImages {
    keen::ds::BuildingMaterialLayerImages baseSide; // Offset: 0
    keen::ds::BuildingMaterialLayerImages baseTop; // Offset: 576
    keen::ds::BuildingMaterialLayerImages baseBottom; // Offset: 1152
    keen::ds::BuildingMaterialLayerImages edge; // Offset: 1728
    keen::ds::BuildingMaterialLayerImages noise; // Offset: 2304
};

struct BuildingMaterialBlendingMaterialLayerTextureShaderData {
    keen::ds::StreamedTexture2D_float4 emissiveMap; // Offset: 0
    keen::float32 emissiveMapIntensity; // Offset: 4
    keen::float32 emissiveExposureCorrectionFactor; // Offset: 8
    keen::ds::StreamedTexture2D_float4 albedoMap; // Offset: 12
    keen::ds::StreamedTexture2D_float metallicMap; // Offset: 16
    keen::ds::StreamedTexture2D_float roughnessMap; // Offset: 20
    keen::ds::StreamedTexture2D_float reflectanceMap; // Offset: 24
    keen::ds::StreamedTexture2D_float4 normalMap; // Offset: 28
    keen::ds::StreamedTexture2D_float heightMap; // Offset: 32
    keen::ds::StreamedTexture2D_float aoMap; // Offset: 36
    keen::float32 tilingFactor; // Offset: 40
    keen::float32 displacementScale; // Offset: 44
    keen::float32 displacementOffset; // Offset: 48
    keen::float32 emissiveGiFactor; // Offset: 52
};

struct BuildingMaterialBlendingMaterialLayerShaderData {
    keen::ds::BuildingMaterialBlendingMaterialLayerTextureShaderData baseSideTexture; // Offset: 0
    keen::ds::BuildingMaterialBlendingMaterialLayerTextureShaderData baseTopTexture; // Offset: 56
    keen::ds::BuildingMaterialBlendingMaterialLayerTextureShaderData baseBottomTexture; // Offset: 112
    keen::ds::BuildingMaterialBlendingMaterialLayerTextureShaderData edgeTexture; // Offset: 168
    keen::ds::BuildingMaterialBlendingMaterialLayerTextureShaderData edgeTopTexture; // Offset: 224
    keen::ds::BuildingMaterialBlendingMaterialLayerTextureShaderData noiseTexture; // Offset: 280
    keen::float32 heightBlendingRange; // Offset: 336
    keen::float32 heightBlendingRangeNoise; // Offset: 340
    keen::float32 edgeBlendingCurve; // Offset: 344
    keen::uint32 edgeOnlySide; // Offset: 348
    keen::float2 noiseBlendRange; // Offset: 352
    keen::float32 bevelRadius; // Offset: 360
    keen::uint32 isRoof; // Offset: 364
};

struct RenderParameterBlock {
    keen::HashKey32 typeSignatureHash; // Offset: 0
    keen::ContentHash data; // Offset: 4
    keen::DsArray<keen::ds::RenderParameterBlockPatchPoint> patchPoints; // Offset: 24
    keen::DsArray<keen::ds::RenderTexture> textures; // Offset: 64
    keen::DsArray<keen::ds::RenderSampler> samplers; // Offset: 104
    keen::ds::string debugName; // Offset: 144
};

struct BuildingMaterialBlendingResource {
    keen::uint32 layerCount; // Offset: 0
    keen::uint32 layerSizeInBytes; // Offset: 4
    keen::uint32 pad0; // Offset: 8
    keen::uint32 pad1; // Offset: 12
    keen::ds::RenderParameterBlock renderingParameterBlock; // Offset: 16
    keen::DsArray<keen::ds::RenderModelImageSizeInfo> renderingImageSizeInfos; // Offset: 200
    keen::DsArray<keen::uint32> renderingLayerImageSizeInfoStartIndices; // Offset: 240
};

struct BuildingMaterialMapping {
    keen::ObjectReference<keen::ds::BaseVoxelMaterial> voxelMaterial; // Offset: 0
    keen::uint8 id; // Offset: 16
};

struct BuildingMaterialPalette {
};

struct BuildingMaterialPalettesFolder {
};

typedef keen::ObjectReference<keen::ds::BuildingMaterialPalette> BuildingMaterialPaletteId;

typedef keen::DecoObjectRuleType DecoObjectRuleType;

typedef keen::DecoObjectPartMode DecoObjectPartMode;

typedef keen::DecoObjectPart DecoObjectPart;

struct DecoObjectInstance {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
    keen::ds::DecoObjectPart part; // Offset: 16
    keen::sint32 fixedOrderKey; // Offset: 20
};

struct DecoObjectRule {
    keen::ds::DecoObjectRuleType rule; // Offset: 0
    keen::ds::DecoObjectPartMode partMode; // Offset: 1
    keen::bool onDestructionEdge; // Offset: 2
    keen::bool limitOnePerVoxel; // Offset: 3
    keen::bool symmetrical; // Offset: 4
    keen::Vector3 offset; // Offset: 16
    keen::Vector3 rotationVariation; // Offset: 32
    keen::float32 density; // Offset: 48
};

struct DecoObjectRuleSet {
    keen::ds::DecoObjectRuleType rule; // Offset: 0
    keen::ds::DecoObjectPartMode partMode; // Offset: 1
    keen::bool onDestructionEdge; // Offset: 2
    keen::bool limitOnePerVoxel; // Offset: 3
    keen::bool symmetrical; // Offset: 4
    keen::float32 density; // Offset: 8
    keen::Vector3 offset; // Offset: 16
    keen::Vector3 rotationVariation; // Offset: 32
    keen::bool fixedOrder; // Offset: 48
    keen::DsArray<keen::ObjectReference<keen::ds::Model>> startModels; // Offset: 56
    keen::DsArray<keen::ObjectReference<keen::ds::Model>> middleModels; // Offset: 96
    keen::DsArray<keen::ObjectReference<keen::ds::Model>> endModels; // Offset: 136
};

struct DecoObjectRules {
    keen::DsArray<keen::ds::DecoObjectRuleSet> rules; // Offset: 0
};

struct BuildingMaterialListEntry {
    keen::Guid guid; // Offset: 0
    keen::ObjectReference<keen::ds::PbrBuildingMaterial> pbrBuildingMaterial; // Offset: 16
};

struct BuildingMaterialList {
    keen::DsArray<keen::ds::BuildingMaterialListEntry> entries; // Offset: 0
};

struct FFX_CACAO_Constants {
    keen::float2 DepthUnpackConsts; // Offset: 0
    keen::float2 CameraTanHalfFOV; // Offset: 8
    keen::float2 NDCToViewMul; // Offset: 16
    keen::float2 NDCToViewAdd; // Offset: 24
    keen::float2 DepthBufferUVToViewMul; // Offset: 32
    keen::float2 DepthBufferUVToViewAdd; // Offset: 40
    keen::float32 EffectRadius; // Offset: 48
    keen::float32 EffectShadowStrength; // Offset: 52
    keen::float32 EffectShadowPow; // Offset: 56
    keen::float32 EffectShadowClamp; // Offset: 60
    keen::float32 EffectFadeOutMul; // Offset: 64
    keen::float32 EffectFadeOutAdd; // Offset: 68
    keen::float32 EffectHorizonAngleThreshold; // Offset: 72
    keen::float32 EffectSamplingRadiusNearLimitRec; // Offset: 76
    keen::float32 DepthPrecisionOffsetMod; // Offset: 80
    keen::float32 NegRecEffectRadius; // Offset: 84
    keen::float32 LoadCounterAvgDiv; // Offset: 88
    keen::float32 AdaptiveSampleCountLimit; // Offset: 92
    keen::float32 InvSharpness; // Offset: 96
    keen::sint32 PassIndex; // Offset: 100
    keen::float32 BilateralSigmaSquared; // Offset: 104
    keen::float32 BilateralSimilarityDistanceSigma; // Offset: 108
    keen::StaticArray<keen::float4,5> PatternRotScaleMatrices; // Offset: 112
    keen::float32 DetailAOStrength; // Offset: 192
    keen::float32 Dummy0; // Offset: 196
    keen::float32 Dummy1; // Offset: 200
    keen::float32 Dummy2; // Offset: 204
    keen::float2 SSAOBufferDimensions; // Offset: 208
    keen::float2 SSAOBufferInverseDimensions; // Offset: 216
    keen::float2 DepthBufferDimensions; // Offset: 224
    keen::float2 DepthBufferInverseDimensions; // Offset: 232
    keen::int2 DepthBufferOffset; // Offset: 240
    keen::float2 PerPassFullResUVOffset; // Offset: 248
    keen::float2 OutputBufferDimensions; // Offset: 256
    keen::float2 OutputBufferInverseDimensions; // Offset: 264
    keen::float2 ImportanceMapDimensions; // Offset: 272
    keen::float2 ImportanceMapInverseDimensions; // Offset: 280
    keen::float2 DeinterleavedDepthBufferDimensions; // Offset: 288
    keen::float2 DeinterleavedDepthBufferInverseDimensions; // Offset: 296
    keen::float2 DeinterleavedDepthBufferOffset; // Offset: 304
    keen::float2 DeinterleavedDepthBufferNormalisedOffset; // Offset: 312
    keen::GraphicsMatrix44 NormalsWorldToViewspaceMatrix; // Offset: 320
};

typedef keen::VoxelChunkPassType VoxelChunkPassType;

struct PackedShaderWorldTransform {
    keen::uint3 position; // Offset: 0
    keen::float scale; // Offset: 12
    keen::float4 orientation; // Offset: 16
};

struct PackedShaderWorldPositionUniform {
    keen::uint3 position; // Offset: 0
};

struct VoxelChunkShaderData {
    keen::ds::PackedShaderWorldTransform packedTransform; // Offset: 0
    keen::ds::PackedShaderWorldPositionUniform worldPosition; // Offset: 32
    keen::GraphicsMatrix43 transform; // Offset: 48
    keen::float4 boundingSphere; // Offset: 96
    keen::float scale; // Offset: 112
    keen::uint triangleIndexOffset; // Offset: 116
    keen::uint triangleIndexCount; // Offset: 120
    keen::uint quadIndexOffset; // Offset: 124
    keen::uint quadIndexCount; // Offset: 128
    keen::uint vertexOffset; // Offset: 132
    keen::uint bakedTriangleMaterialDataOffset; // Offset: 136
    keen::uint chunkletOffset; // Offset: 140
    keen::uint chunkletCount; // Offset: 144
    keen::uint chunkletVisibilityOffset; // Offset: 148
    keen::uint highlightColorPaletteIndexTransparency; // Offset: 152
    keen::uint sizeFeedbackIndex; // Offset: 156
    keen::StaticArray<keen::uint,3> pipelineIndices; // Offset: 160
    keen::uint flags; // Offset: 172
};

struct ShaderChunkletCullingSubView {
    keen::ds::PackedShaderWorldPositionUniform cameraPosition; // Offset: 0
    keen::uint32 flags; // Offset: 16
    keen::float3 exclusionCircle; // Offset: 20
    keen::float3 viewDirection; // Offset: 32
    keen::ds::GpuCullingFrustum cameraCenteredFrustum; // Offset: 48
    keen::GraphicsMatrix43 cameraCenteredToViewMatrix; // Offset: 144
    keen::ds::GpuOcclusionCullingShaderData occlusionData; // Offset: 192
};

struct ShaderChunkletCullingPass {
    keen::uint32 flags; // Offset: 0
    keen::uint32 subViewIndex; // Offset: 4
    keen::uint32 passType; // Offset: 8
};

struct RenderChunkletCullingShaderParameters {
    keen::StaticArray<keen::ds::ShaderChunkletCullingSubView,9> subViews; // Offset: 0
    keen::StaticArray<keen::ds::ShaderChunkletCullingPass,8> passes; // Offset: 2304
    keen::uint32 subViewCount; // Offset: 2432
    keen::uint32 passCount; // Offset: 2436
    keen::uint32 jobCount; // Offset: 2440
    keen::uint32 stageIndex; // Offset: 2444
};

struct CulledChunklet {
    keen::uint data0; // Offset: 0
    keen::uint visibility; // Offset: 4
};

struct ChunkletPrefixSumShaderParameters {
    keen::uint batchCount; // Offset: 0
    keen::uint stageIndex; // Offset: 4
};

struct VoxelChunkArgumentsPrepareShaderParameters {
    keen::uint groupSize; // Offset: 0
};

struct RenderChunkletDrawPrepareShaderParameters {
    keen::uint batchCount; // Offset: 0
    keen::uint batchOffset; // Offset: 4
};

struct ChunkletPipelineInfoShaderData {
    keen::uint flags; // Offset: 0
};

struct ChunkletDrawCommand {
    keen::uint vertexCount; // Offset: 0
    keen::uint instanceCount; // Offset: 4
    keen::uint vertexOffset; // Offset: 8
    keen::uint instanceOffset; // Offset: 12
};

struct ChunkletPushConstants {
    keen::uint drawIndex; // Offset: 0
};

struct VoxelChunkSizeFeedbackShaderParameters {
    keen::float3 viewPosition; // Offset: 0
    keen::float pixelSize; // Offset: 12
    keen::uint chunkCount; // Offset: 16
};

struct RenderChunklet {
    keen::uint data0; // Offset: 0
};

struct ChunkletCullingDebugCounters {
    keen::uint culledByOrientation; // Offset: 0
    keen::uint culledByFrustum; // Offset: 4
    keen::uint culledByOcclusion; // Offset: 8
    keen::uint culledByVisibility; // Offset: 12
    keen::uint culledByExclusion; // Offset: 16
};

struct ClusterCullingCellData {
    keen::uint2 lightListCountAndOffset; // Offset: 0
    keen::uint2 decalListCountAndOffset; // Offset: 8
};

struct ClusterCullingShaderData {
    keen::GraphicsMatrix44 inverseProjectionMatrix; // Offset: 0
    keen::GraphicsMatrix43 viewMatrix; // Offset: 64
    keen::uint3 clusterSize; // Offset: 112
    keen::uint cellLightListOffsetCounterOffset; // Offset: 124
    keen::uint cellDecalListOffsetCounterOffset; // Offset: 128
    keen::float2 linearDepthParameters; // Offset: 132
    keen::float2 tileRatio; // Offset: 144
    keen::uint pointLightCounterOffset; // Offset: 152
    keen::uint maxPointLightCount; // Offset: 156
    keen::uint decalCounterOffset; // Offset: 160
    keen::uint maxDecalCount; // Offset: 164
};

struct ClusterCullingDebugPushConstants {
    keen::uint2 debugImageSize; // Offset: 0
};

typedef keen::GpuCulling2StageId GpuCulling2StageId;

typedef keen::GpuCulling2PassType GpuCulling2PassType;

typedef keen::GpuCulling2PassId GpuCulling2PassId;

struct GpuCulling2SubViewConstants {
    keen::uint flags; // Offset: 0
    keen::float3 exclusionCircle; // Offset: 4
    keen::float minObjectSize; // Offset: 16
    keen::GraphicsMatrix43 cameraCenteredToViewMatrix; // Offset: 32
    keen::ds::GpuCullingFrustum cameraCenteredFrustum; // Offset: 80
    keen::ds::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 176
};

struct GpuCulling2PassConstants {
    keen::uint flags; // Offset: 0
    keen::uint subViewIndex; // Offset: 4
    keen::uint passType; // Offset: 8
};

struct GpuCulling2ShaderParameters {
    keen::StaticArray<keen::ds::GpuCulling2SubViewConstants,11> subViews; // Offset: 0
    keen::StaticArray<keen::ds::GpuCulling2PassConstants,12> passes; // Offset: 2640
    keen::uint subViewCount; // Offset: 2832
    keen::uint passCount; // Offset: 2836
    keen::uint visibleGroupMask; // Offset: 2840
    keen::uint isLateStage; // Offset: 2844
    keen::uint flags; // Offset: 2848
    keen::uint instanceCount; // Offset: 2852
    keen::uint batchCount; // Offset: 2856
    keen::float pixelSizeCullingBias; // Offset: 2860
    keen::uint meshCount; // Offset: 2864
    keen::uint maxCulledInstanceCount; // Offset: 2868
    keen::uint scanShaderGroupSize; // Offset: 2872
    keen::uint fixupShaderGroupSize; // Offset: 2876
    keen::ds::PackedShaderWorldPositionUniform mainViewCameraPosition; // Offset: 2880
    keen::float mainViewPixelSize; // Offset: 2896
};

struct GpuCulling2SubViewDebugCounters {
    keen::uint notCulled; // Offset: 0
    keen::uint culledByFrustum; // Offset: 4
    keen::uint culledByOcclusion; // Offset: 8
    keen::uint culledBySize; // Offset: 12
    keen::uint culledByExclusion; // Offset: 16
};

struct GpuCulling2PassDebugCounters {
    keen::uint notCulled; // Offset: 0
};

struct GpuCulling2Counters {
    keen::uint culledInstanceCount; // Offset: 0
    keen::uint leftoverInstances; // Offset: 4
    keen::uint firstInstanceCount; // Offset: 8
};

typedef keen::GpuCulling2DispatchCommandId GpuCulling2DispatchCommandId;

struct GpuCulling2DebugCounters {
    keen::StaticArray<keen::ds::GpuCulling2SubViewDebugCounters,11> subViews; // Offset: 0
    keen::StaticArray<keen::ds::GpuCulling2PassDebugCounters,12> passes; // Offset: 220
    keen::uint culledByGroupMask; // Offset: 268
    keen::uint culledByPixelSize; // Offset: 272
};

struct GpuCulling2CulledInstanceData {
    keen::uint meshIndexAndBatchIndex; // Offset: 0
    keen::uint instanceIndex; // Offset: 4
};

struct GpuCulling2PixelQuery {
    keen::uint2 position; // Offset: 0
};

struct GpuCulling2PixelQueryResult {
    keen::uint stageId; // Offset: 0
    keen::uint instanceIndex; // Offset: 4
    keen::uint instanceDataIndex; // Offset: 8
    keen::uint meshIndexAndBatchIndex; // Offset: 12
};

typedef keen::GpuCulling2HighlightType GpuCulling2HighlightType;

struct GpuCulling2RenderData {
    keen::ds::GpuCulling2PixelQuery pixelQuery; // Offset: 0
    keen::ds::GpuCulling2PixelQueryResult pixelQueryResult; // Offset: 8
    keen::ds::GpuCulling2HighlightType highlightType; // Offset: 24
    keen::uint highlightValue; // Offset: 28
    keen::uint highlightValue2; // Offset: 32
};

struct RenderMaterialMeshShaderData {
    keen::float3 positionScale; // Offset: 0
    keen::uint materialDataIndex; // Offset: 12
    keen::float3 positionOffset; // Offset: 16
    keen::uint modelMaterialData; // Offset: 28
    keen::uint skinningDataByteOffsetAndClothMeshIndex; // Offset: 32
    keen::uint blendShapeVertexOffset; // Offset: 36
    keen::uint blendShapeMask; // Offset: 40
    keen::uint vertexCount; // Offset: 44
};

struct RenderDrawCommandData {
    keen::uint32 indexCount; // Offset: 0
    keen::uint32 instanceCount; // Offset: 4
    keen::uint32 indexOffset; // Offset: 8
    keen::sint32 vertexOffset; // Offset: 12
    keen::uint32 instanceOffset; // Offset: 16
    keen::uint32 materialMeshIndexAndLodIndex; // Offset: 20
};

struct RenderDrawData {
    keen::uint modelIndex; // Offset: 0
    keen::uint instanceDataIndex; // Offset: 4
    keen::uint groupMask; // Offset: 8
    keen::uint _pad; // Offset: 12
};

struct RenderModelDrawData {
    keen::float4 boundingSphere; // Offset: 0
    keen::uint modelLodStartIndex; // Offset: 16
    keen::uint modelLodCount; // Offset: 20
    keen::uint hasCardClusterLod; // Offset: 24
    keen::uint sizeFeedbackIndex; // Offset: 28
    keen::StaticArray<keen::float,8> lodPixelSizes; // Offset: 32
};

struct RenderModelLodDrawData {
    keen::uint materialMeshStartIndex; // Offset: 0
    keen::uint materialMeshCount; // Offset: 4
    keen::uint _pad0; // Offset: 8
    keen::uint _pad1; // Offset: 12
};

struct RenderMaterialMeshDrawData {
    keen::uint pipelineIndex; // Offset: 0
    keen::uint indexCount; // Offset: 4
    keen::uint indexOffset; // Offset: 8
    keen::int vertexOffset; // Offset: 12
};

struct GpuCullingDrawCounter {
    keen::uint32 offset; // Offset: 0
    keen::uint32 maxCount; // Offset: 4
};

struct GpuCullingDebugCounters {
    keen::uint32 notCulled; // Offset: 0
    keen::uint32 culledByVisibility; // Offset: 4
    keen::uint32 culledBySize; // Offset: 8
    keen::uint32 culledByFrustum; // Offset: 12
    keen::uint32 culledByOcclusion; // Offset: 16
    keen::uint32 culledByExclusion; // Offset: 20
};

struct CullingShaderData {
    keen::float3 viewPosition; // Offset: 0
    keen::int fixedLod; // Offset: 12
    keen::uint viewVisibilityMask; // Offset: 16
    keen::float pixelSize; // Offset: 20
    keen::float pixelSizeCullingBias; // Offset: 24
    keen::uint visibleGroupMask; // Offset: 28
    keen::ds::GpuCullingFrustum frustum; // Offset: 32
    keen::float3 exclusionCircle; // Offset: 128
    keen::GraphicsMatrix43 worldToViewMatrix; // Offset: 144
    keen::GraphicsMatrix44 projectionMatrix; // Offset: 192
    keen::ds::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 256
    keen::uint drawCounterOffset; // Offset: 320
    keen::uint occlusionCullingEnabled; // Offset: 324
    keen::uint exclusionCullingEnabled; // Offset: 328
    keen::uint useLastFrameVisibility; // Offset: 332
    keen::uint cpuDrawCount; // Offset: 336
    keen::uint cullSmallObjects; // Offset: 340
    keen::float smallObjectRadius; // Offset: 344
    keen::uint forceCardClusterLod; // Offset: 348
    keen::uint useCameraCenteredSpace; // Offset: 352
    keen::ds::PackedShaderWorldPositionUniform cameraWorldPosition; // Offset: 368
};

struct UploadRenderInstancesShaderData {
    keen::uint32 uploadInstanceCount; // Offset: 0
};

struct DebugOcclusionCullingShaderParameters {
    keen::ds::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 0
    keen::float4 viewSpaceSphere; // Offset: 64
};

struct DebugOcclusionCullingResultShaderData {
    keen::uint isValid; // Offset: 0
    keen::uint level; // Offset: 4
    keen::float2 rectMin; // Offset: 8
    keen::float2 rectMax; // Offset: 16
    keen::float2 uv; // Offset: 24
};

typedef keen::CurvePointTangent CurvePointTangent;

typedef keen::CurveTangent CurveTangent;

struct CurvePoint {
    keen::ds::CurveTangent tangent; // Offset: 8
    keen::ds::CurvePointTangent pointTangent; // Offset: 9
};

struct ImageDiffShaderParameters {
    keen::float32 threshold; // Offset: 0
};

struct DebugMagnifierShaderParameters {
    keen::uint imageWidth; // Offset: 0
    keen::uint imageHeight; // Offset: 4
    keen::uint2 mousePos; // Offset: 8
    keen::float4 borderColor; // Offset: 16
    keen::float magnificationAmount; // Offset: 32
    keen::float magnifierScreenRadius; // Offset: 36
    keen::int magnifierOffsetX; // Offset: 40
    keen::int magnifierOffsetY; // Offset: 44
    keen::float brightness; // Offset: 48
    keen::float contrast; // Offset: 52
};

typedef keen::VisualizeTextureOp VisualizeTextureOp;

typedef keen::VisualizeTextureChannel VisualizeTextureChannel;

struct VisualizeTextureCommandShaderData {
    keen::ds::VisualizeTextureOp op; // Offset: 0
    keen::ds::VisualizeTextureChannel channel; // Offset: 4
    keen::uint32 scale; // Offset: 8
    keen::float power; // Offset: 12
};

struct VisualizeTextureShaderParameters {
    keen::uint2 targetSize; // Offset: 0
    keen::StaticArray<keen::ds::VisualizeTextureCommandShaderData,4> commands; // Offset: 16
};

struct VisualizeOverdrawShaderParameters {
    keen::uint2 targetSize; // Offset: 0
    keen::float scale; // Offset: 8
};

struct IblVisualizationData {
    keen::GraphicsMatrix44 ndcToWorldMatrix; // Offset: 0
    keen::float iblIntensity; // Offset: 64
    keen::float exposure; // Offset: 68
};

typedef keen::DecalNormalBlendMode DecalNormalBlendMode;

typedef keen::DecalRoughnessBlendMode DecalRoughnessBlendMode;

struct Decal {
    keen::bool affectShading; // Offset: 0
    keen::ObjectReference<keen::ds::Image> albedoMap; // Offset: 4
    keen::ObjectReference<keen::ds::Image> opacityMap; // Offset: 20
    keen::ObjectReference<keen::ds::Image> normalMap; // Offset: 36
    keen::ds::DecalNormalBlendMode normalBlendMode; // Offset: 52
    keen::ObjectReference<keen::ds::Image> roughnessMap; // Offset: 56
    keen::ds::DecalRoughnessBlendMode roughnessBlendMode; // Offset: 72
    keen::ObjectReference<keen::ds::Image> emissiveMap; // Offset: 76
    keen::ObjectReference<keen::ds::Image> emissiveAlphaMap; // Offset: 92
    keen::ObjectReference<keen::ds::Image> metallicMap; // Offset: 108
    keen::ObjectReference<keen::ds::Image> aoMap; // Offset: 124
    keen::bool affectTerrainVoxelMesh; // Offset: 140
    keen::bool affectBuildingVoxelMesh; // Offset: 141
    keen::bool affectRoofVoxelMesh; // Offset: 142
    keen::bool affectModels; // Offset: 143
    keen::bool affectSkinnedModels; // Offset: 144
    keen::bool affectBuildingDecoModels; // Offset: 145
    keen::bool affectScatterDetailModels; // Offset: 146
    keen::bool affectScattering; // Offset: 147
    keen::ObjectReference<keen::ds::Image> scatterScaleMap; // Offset: 148
    keen::float scatterScaleFactor; // Offset: 164
};

typedef keen::DecalLayer DecalLayer;

typedef keen::DecalLayerMask DecalLayerMask;

struct DecalMaterialData {
    keen::ds::BindlessTexture2D_float4 albedoMap; // Offset: 0
    keen::ds::BindlessTexture2D_float4 normalMap; // Offset: 4
    keen::ds::BindlessTexture2D_float roughnessMap; // Offset: 8
    keen::ds::BindlessTexture2D_float metallicMap; // Offset: 12
    keen::ds::BindlessTexture2D_float4 emissiveMap; // Offset: 16
    keen::ds::BindlessTexture2D_float aoMap; // Offset: 20
    keen::ds::BindlessTexture2D_float scatterScaleMap; // Offset: 24
    keen::uint32 decalLayerMask; // Offset: 28
    keen::float scatterScaleFactor; // Offset: 32
};

struct RenderDecal {
    keen::ds::RenderParameterBlock parameterBlock; // Offset: 0
};

struct WeatherSurfaceMaterialData {
    keen::float snowUVScale; // Offset: 0
    keen::float snowScale; // Offset: 4
    keen::float frostUVScale; // Offset: 8
    keen::float frostScale; // Offset: 12
    keen::float3 frostAlbedo; // Offset: 16
    keen::float frostRoughness; // Offset: 28
    keen::float3 frostPuddleAlbedo; // Offset: 32
    keen::float frostPorosityScale; // Offset: 44
    keen::float snowVertexNormalPower; // Offset: 48
    keen::float snowVertexNormalCutoff; // Offset: 52
};

struct GrassMovementData {
    keen::ds::PackedShaderWorldPositionUniform origin; // Offset: 0
    keen::float2 reciprocalSize; // Offset: 16
    keen::uint32 validData; // Offset: 24
};

struct TessellatedMaterialConstants {
    keen::float2 levelMapping; // Offset: 0
    keen::float32 maxLevel; // Offset: 8
};

typedef keen::RenderShaderDebugMode RenderShaderDebugMode;

struct RenderDebugConstants {
    keen::ds::RenderShaderDebugMode debugMode; // Offset: 0
    keen::uint32 debugNeutralAlbedo; // Offset: 4
    keen::uint32 debugTextureIndex; // Offset: 8
    keen::float32 debugTextureAlpha; // Offset: 12
    keen::float4 debugValue; // Offset: 16
};

struct DynamicHeightmapSamplingShaderData {
    keen::uint size; // Offset: 0
    keen::float inverseSize; // Offset: 4
    keen::int2 origin; // Offset: 8
    keen::float scale; // Offset: 16
    keen::float2 distanceFade; // Offset: 20
    keen::uint explicitPad0; // Offset: 28
};

struct WeatherSampleConstants {
    keen::uint flags; // Offset: 0
    keen::float2 texcoordMappingScale; // Offset: 4
    keen::float2 texcoordMappingOffset; // Offset: 16
    keen::float2 snowBorderMapping; // Offset: 24
    keen::float32 cameraPositionY; // Offset: 32
    keen::ds::DynamicHeightmapSamplingShaderData heightMap; // Offset: 48
    keen::float3 heightMapCameraPosition; // Offset: 80
    keen::float3 frostVoxelTexcoordMappingScale; // Offset: 96
    keen::float3 frostVoxelTexcoordMappingOffset; // Offset: 112
};

struct RenderLightFactors {
    keen::float32 sun; // Offset: 0
    keen::float32 skyGeometrySun; // Offset: 4
    keen::float32 pointLights; // Offset: 8
    keen::float32 gi; // Offset: 12
    keen::float32 emissive; // Offset: 16
    keen::float32 exposure; // Offset: 20
    keen::float32 exposureCorrection; // Offset: 24
};

struct SnowDisplacementData {
    keen::ds::PackedShaderWorldPositionUniform tileOrigin; // Offset: 0
    keen::float reciprocalSize; // Offset: 16
    keen::float rcpNormalScale; // Offset: 20
    keen::float halfWorldSize; // Offset: 24
    keen::float heightScale; // Offset: 28
    keen::uint32 validData; // Offset: 32
};

struct RenderGBufferConstants {
    keen::GraphicsMatrix43 viewMatrix; // Offset: 0
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 48
    keen::GraphicsMatrix44 prevViewProjectionMatrix; // Offset: 112
    keen::float3 cameraWorldPosition; // Offset: 176
    keen::float32 time; // Offset: 188
    keen::float32 prevTime; // Offset: 192
    keen::ds::GrassMovementData grassMovement; // Offset: 208
    keen::ds::GrassMovementData grassMovementPrevious; // Offset: 240
    keen::ds::TessellatedMaterialConstants terrainTessellation; // Offset: 272
    keen::ds::TessellatedMaterialConstants buildingTessellation; // Offset: 288
    keen::ds::RenderDebugConstants debugData; // Offset: 304
    keen::uint32 enableCloth; // Offset: 336
    keen::uint32 enableLavaShader; // Offset: 340
    keen::uint32 buildingMaterialBlendingLayerCount; // Offset: 344
    keen::uint32 worldMaterialBlendingLayerCount; // Offset: 348
    keen::ds::WeatherSurfaceMaterialData weatherSurfaceMaterialData; // Offset: 352
    keen::ds::WeatherSampleConstants weather; // Offset: 416
    keen::ds::RenderLightFactors lightFactors; // Offset: 544
    keen::uint32 blueNoiseSizeMask; // Offset: 576
    keen::uint2 blueNoiseOffset; // Offset: 580
    keen::uint32 isVoxelMaterialDataValid; // Offset: 588
    keen::float highlightAmount; // Offset: 592
    keen::float highlightIntensity; // Offset: 596
    keen::StaticArray<keen::float4,8> highlightColorPaletteArray; // Offset: 608
    keen::float mipBias; // Offset: 736
    keen::uint32 useStochasticMaterialSampling; // Offset: 740
    keen::float2 cancelJitter; // Offset: 744
    keen::ds::PackedShaderWorldPositionUniform cameraPosition; // Offset: 752
    keen::ds::PackedShaderWorldPositionUniform prevCameraPosition; // Offset: 768
    keen::GraphicsMatrix44 cameraCenteredToClipSpaceMatrix; // Offset: 784
    keen::GraphicsMatrix44 prevCameraCenteredToClipSpaceMatrix; // Offset: 848
    keen::ds::SnowDisplacementData snowDisplacement; // Offset: 912
};

struct CascadeShadowShaderData {
    keen::GraphicsMatrix43 viewProjectionMatrix; // Offset: 0
    keen::GraphicsMatrix43 viewMatrix; // Offset: 48
    keen::float4 fadeParameters0; // Offset: 96
    keen::float4 fadeParameters1; // Offset: 112
};

struct RenderShadowAtlasShaderData {
    keen::float4 viewMatrixRowZ; // Offset: 0
    keen::float4 atlasSize; // Offset: 16
    keen::float4 cascadeCount; // Offset: 32
    keen::float4 firstCascadeDistanceFadeParameters; // Offset: 48
    keen::StaticArray<keen::ds::CascadeShadowShaderData,8> cascades; // Offset: 64
};

struct ForwardDirectionalLightData {
    keen::float3 direction; // Offset: 0
    keen::float pad0; // Offset: 12
    keen::float3 color; // Offset: 16
    keen::float pad1; // Offset: 28
};

struct ForwardIblData {
    keen::float4 azimuthRotationXZ; // Offset: 0
    keen::float32 specularMipLevelCount; // Offset: 16
    keen::float32 intensity; // Offset: 20
    keen::uint32 isValid; // Offset: 24
};

struct Fog2ShadowVolumeTransform {
    keen::StaticArray<keen::GraphicsMatrix43,4> worldToCascadeMatrices; // Offset: 0
};

struct Fog2ShadowVolumeSampleParameters {
    keen::ds::Fog2ShadowVolumeTransform transform; // Offset: 0
    keen::uint32 cascadeCount; // Offset: 192
    keen::float32 invCascadeCount; // Offset: 196
    keen::float32 halfPixelWidth; // Offset: 200
};

struct VolumetricShadowRuntimeData {
    keen::ds::Fog2ShadowVolumeSampleParameters fog2ShadowVolumeSampleParameters; // Offset: 0
    keen::float3 directionalLightDirection; // Offset: 208
    keen::uint32 flags; // Offset: 220
    keen::float2 cloudMapTexcoordMapping; // Offset: 224
    keen::float32 pad0; // Offset: 232
    keen::float32 pad1; // Offset: 236
};

struct DeferredLightingConstants {
    keen::ds::RenderLightFactors lightFactors; // Offset: 0
    keen::uint2 outputSize; // Offset: 32
    keen::float2 invOutputSize; // Offset: 40
    keen::float32 time; // Offset: 48
    keen::GraphicsMatrix43 viewMatrix; // Offset: 64
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 112
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 176
    keen::float3 cameraWorldPosition; // Offset: 240
    keen::float3 playerWorldPosition; // Offset: 256
    keen::float4 clearColor; // Offset: 272
    keen::ds::RenderShadowAtlasShaderData atlasData; // Offset: 288
    keen::ds::ForwardDirectionalLightData directionalLightData0; // Offset: 1376
    keen::ds::AtmosphereShaderData atmosphere; // Offset: 1408
    keen::ds::ForwardIblData iblData; // Offset: 1472
    keen::uint32 fogDisabled; // Offset: 1500
    keen::uint32 ssaoEnabled; // Offset: 1504
    keen::uint32 useAoMin; // Offset: 1508
    keen::uint32 useAoMaps; // Offset: 1512
    keen::uint32 giEnabled; // Offset: 1516
    keen::uint32 pointLightsEnabled; // Offset: 1520
    keen::uint32 useHorizonBasedSpecularOcclusion; // Offset: 1524
    keen::ds::VolumetricShadowRuntimeData volumetricShadowRuntimeData; // Offset: 1536
    keen::ds::RenderDebugConstants debugData; // Offset: 1776
    keen::uint32 accumulateSceneBrightness; // Offset: 1808
};

struct VisibilityMaterialParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::GraphicsMatrix44 inverseViewProjectionMatrix; // Offset: 16
    keen::uint32 drawCommandBufferOffsetEarly; // Offset: 80
    keen::uint32 drawCommandBufferOffsetEarlyTessellated; // Offset: 84
    keen::uint32 drawCommandBufferOffsetLate; // Offset: 88
    keen::uint32 drawCommandBufferOffsetLateTessellated; // Offset: 92
};

struct DepthOfFieldConstants {
    keen::float focalLength; // Offset: 0
    keen::float focalDistance; // Offset: 4
    keen::float cocScale; // Offset: 8
    keen::float2 linearDepthParameters; // Offset: 16
    keen::float2 kernelScale; // Offset: 24
    keen::float2 sceneImagePixelSize; // Offset: 32
    keen::float2 jitterOffset; // Offset: 40
    keen::GraphicsMatrix44 invProjectionMatrix; // Offset: 48
    keen::StaticArray<keen::float4,48> samplesHigh; // Offset: 112
    keen::StaticArray<keen::float4,9> samplesLow; // Offset: 880
};

struct DepthPyramidShaderParameters {
    keen::float2 inverseOutputResolution; // Offset: 0
    keen::uint2 inputResolution; // Offset: 8
};

typedef keen::DetailScatterModelAlignmentAxis DetailScatterModelAlignmentAxis;

struct DetailScatterModel {
    keen::ds::DetailScatterModelAlignmentAxis alignmentAxis; // Offset: 0
    keen::bool spawnInside; // Offset: 1
    keen::bool spawnOutside; // Offset: 2
    keen::float32 alignWithNormalStrength; // Offset: 4
    keen::float32 randomRotationXStrength; // Offset: 8
    keen::float32 randomRotationYStrength; // Offset: 12
    keen::float32 randomRotationZStrength; // Offset: 16
    keen::float32 minFadeoutDistance; // Offset: 20
    keen::float32 maxFadeoutDistance; // Offset: 24
    keen::float32 minScale; // Offset: 28
    keen::float32 maxScale; // Offset: 32
    keen::float32 mapScaleStrength; // Offset: 36
    keen::float32 materialWeightScaleStrength; // Offset: 40
};

struct DetailScatterInstance {
    keen::ObjectReference<keen::ds::DetailScatterModel> model; // Offset: 0
    keen::float32 probability; // Offset: 16
    keen::bool onlyOnWeathered; // Offset: 20
};

typedef keen::TextureChannel TextureChannel;

struct DetailScatterGroup {
    keen::ds::TextureChannel mapChannel; // Offset: 0
};

struct DetailScatterLayer {
    keen::ObjectReference<keen::ds::Image> map; // Offset: 0
    keen::float32 mapTilingSize; // Offset: 16
};

struct DetailScatterLayerShaderData {
    keen::ds::BindlessTexture2D_float4 map; // Offset: 0
    keen::float32 mapTilingFactor; // Offset: 4
    keen::uint32 pad0; // Offset: 8
    keen::uint32 pad1; // Offset: 12
    keen::ds::BindlessTexture2D_float edgeNoiseMap; // Offset: 16
    keen::float32 edgeNoiseTilingFactor; // Offset: 20
    keen::float32 edgeNoiseMappingFactor; // Offset: 24
    keen::uint32 pad2; // Offset: 28
    keen::uint4 modelOffset; // Offset: 32
    keen::uint4 modelCount; // Offset: 48
};

struct DetailScatterModelProbabilityCutoffShaderData {
    keen::float32 value; // Offset: 0
};

struct DetailScatterModelShaderData {
    keen::float32 minFadeoutDistance; // Offset: 0
    keen::float32 maxFadeoutDistance; // Offset: 4
    keen::float32 minScale; // Offset: 8
    keen::float32 maxScale; // Offset: 12
    keen::float32 alignWithNormalStrength; // Offset: 16
    keen::uint32 params0; // Offset: 20
    keen::uint32 params1; // Offset: 24
    keen::float32 lodDistance; // Offset: 28
};

struct DetailScatterShaderData {
    keen::ds::BindlessSampler scatterMapSampler; // Offset: 0
    keen::uint32 pad0; // Offset: 4
    keen::uint32 pad1; // Offset: 8
    keen::uint32 pad2; // Offset: 12
};

struct DetailScatterResource {
    keen::ds::RenderParameterBlock shaderDataParameterBlock; // Offset: 0
    keen::ds::RenderParameterBlock layersShaderDataParameterBlock; // Offset: 184
    keen::ds::RenderParameterBlock modelsShaderDataParameterBlock; // Offset: 368
    keen::ds::RenderParameterBlock modelProbabilityCutoffsShaderDataParameterBlock; // Offset: 552
    keen::DsArray<keen::ObjectReference<keen::ds::RenderModel>> models; // Offset: 736
    keen::float largestModelRadius; // Offset: 776
};

struct DissolveMaterialParameters {
    keen::bool enable; // Offset: 0
    keen::float32 noiseTiling; // Offset: 4
    keen::float32 noiseFadeRange; // Offset: 8
    keen::ObjectReference<keen::ds::Image> noiseMap; // Offset: 12
    keen::bool enableEdgeGlow; // Offset: 28
    keen::float32 edgeWidth; // Offset: 32
    keen::Color edgeColor; // Offset: 36
};

struct DynamicHeightmapFillShaderParameters {
    keen::uint2 targetSize; // Offset: 0
    keen::float2 inverseTargetSize; // Offset: 8
    keen::uint2 ditherPos; // Offset: 16
    keen::int2 origin; // Offset: 24
    keen::float scale; // Offset: 32
    keen::float worldTop; // Offset: 36
};

struct DynamicHeightmapRasterizeTreesShaderParameters {
    keen::float32 scale; // Offset: 0
};

struct CollectGpuCullingTreesShaderParameters {
    keen::uint drawCountBufferOffset; // Offset: 0
    keen::uint drawCommandBufferOffset; // Offset: 4
};

struct FfxShadowDenoiserShaderParameters {
    keen::GraphicsMatrix44 inverseProjectionMatrix; // Offset: 0
    keen::GraphicsMatrix44 inverseViewProjectionMatrix; // Offset: 64
    keen::GraphicsMatrix44 reprojectionMatrix; // Offset: 128
    keen::GraphicsMatrix43 viewMatrix; // Offset: 192
    keen::float3 cameraPosition; // Offset: 240
    keen::uint2 packedSize; // Offset: 256
    keen::uint2 targetSize; // Offset: 264
    keen::float2 inverseTargetSize; // Offset: 272
    keen::uint32 isFirstFrame; // Offset: 280
    keen::uint32 pixelSize; // Offset: 284
    keen::float32 depthSigma; // Offset: 288
};

struct FfxShadowDenoiserPushConstants {
    keen::uint32 stepSize; // Offset: 0
};

struct FogMaterialParameters {
    keen::float32 absorption; // Offset: 0
    keen::Color scattering; // Offset: 4
    keen::HdrColorRgb emission; // Offset: 8
    keen::float32 density; // Offset: 24
};

struct FoliageAnimationAdvancedParameters {
    keen::float32 branchPhaseOffset; // Offset: 0
    keen::float32 detailFrequency; // Offset: 4
    keen::float32 edgeAmplitude; // Offset: 8
    keen::float32 branchAmplitude; // Offset: 12
};

struct FoliageAnimationModelParameters {
    keen::float32 assetHeightFactor; // Offset: 0
    keen::float32 globalStiffnessFactor; // Offset: 4
    keen::ds::FoliageAnimationAdvancedParameters advancedParameters; // Offset: 8
};

struct GrassPushbackModelParameters {
    keen::float32 bounceTime; // Offset: 0
    keen::uint32 bounceCount; // Offset: 4
    keen::float32 bounceDamping; // Offset: 8
    keen::float32 strength; // Offset: 12
};

struct GrassPushbackShaderParameters {
    keen::float32 bounceDamping; // Offset: 0
    keen::float32 bounceFrequency; // Offset: 4
    keen::float32 oneOverBounceTime; // Offset: 8
    keen::float32 strength; // Offset: 12
};

struct FoliageAnimationShaderParameters {
    keen::uint32 flags; // Offset: 0
    keen::float32 precomputedBendScale; // Offset: 4
    keen::float32 globalStiffnessFactor; // Offset: 8
    keen::ds::FoliageAnimationAdvancedParameters advancedParameters; // Offset: 12
    keen::ds::GrassPushbackShaderParameters pushBack; // Offset: 28
};

struct GrassAnimationModelParameters {
    keen::float32 largeDisplacementWeight; // Offset: 0
    keen::float32 smallDisplacementWeight; // Offset: 4
};

struct GrassAnimationShaderParameters {
    keen::uint32 flags; // Offset: 0
    keen::float32 largeDisplacementWeight; // Offset: 4
    keen::float32 smallDisplacementWeight; // Offset: 8
    keen::float32 oneOverModelHeight; // Offset: 12
    keen::ds::GrassPushbackShaderParameters pushBack; // Offset: 16
};

struct ForestFogFootprintMaterial {
};

struct ForestFogFootprintRenderMaterial {
};

struct RenderPushConstants2 {
    keen::uint32 drawCommandBufferOffset; // Offset: 0
    keen::uint32 isLateCullingPass; // Offset: 4
    keen::uint32 drawIndex; // Offset: 8
    keen::uint32 isRunningOnSteamDeck; // Offset: 12
};

struct VfxDrawPushConstants {
    keen::uint32 baseDrawIndex; // Offset: 0
};

struct RenderShadowPassConstants {
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 0
    keen::float3 cameraWorldPosition; // Offset: 64
    keen::float32 time; // Offset: 76
    keen::ds::GrassMovementData grassMovement; // Offset: 80
    keen::ds::SnowDisplacementData snowDisplacement; // Offset: 112
    keen::uint32 enableCloth; // Offset: 160
    keen::ds::TessellatedMaterialConstants terrainTessellation; // Offset: 176
    keen::ds::TessellatedMaterialConstants buildingTessellation; // Offset: 192
    keen::uint32 blueNoiseSizeMask; // Offset: 208
    keen::uint2 blueNoiseOffset; // Offset: 212
    keen::uint32 useStochasticMaterialSampling; // Offset: 220
    keen::uint32 isVoxelMaterialDataValid; // Offset: 224
    keen::ds::PackedShaderWorldPositionUniform cameraPosition; // Offset: 240
    keen::GraphicsMatrix44 cameraCenteredToClipSpaceMatrix; // Offset: 256
    keen::uint32 buildingMaterialBlendingLayerCount; // Offset: 320
    keen::uint32 worldMaterialBlendingLayerCount; // Offset: 324
};

struct RenderDepthConstants {
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 0
    keen::float3 cameraWorldPosition; // Offset: 64
    keen::float32 time; // Offset: 76
    keen::float32 prevTime; // Offset: 80
    keen::ds::GrassMovementData grassMovement; // Offset: 96
    keen::ds::GrassMovementData grassMovementPrevious; // Offset: 128
    keen::ds::SnowDisplacementData snowDisplacement; // Offset: 160
    keen::uint32 enableCloth; // Offset: 208
    keen::ds::TessellatedMaterialConstants terrainTessellation; // Offset: 224
    keen::ds::TessellatedMaterialConstants buildingTessellation; // Offset: 240
    keen::float mipBias; // Offset: 256
    keen::uint32 blueNoiseSizeMask; // Offset: 260
    keen::uint2 blueNoiseOffset; // Offset: 264
    keen::uint32 useStochasticMaterialSampling; // Offset: 272
    keen::uint32 isVoxelMaterialDataValid; // Offset: 276
    keen::float2 cancelJitter; // Offset: 280
    keen::ds::PackedShaderWorldPositionUniform cameraPosition; // Offset: 288
    keen::ds::PackedShaderWorldPositionUniform prevCameraPosition; // Offset: 304
    keen::GraphicsMatrix44 cameraCenteredToClipSpaceMatrix; // Offset: 320
    keen::GraphicsMatrix44 prevCameraCenteredToClipSpaceMatrix; // Offset: 384
    keen::uint32 buildingMaterialBlendingLayerCount; // Offset: 448
    keen::uint32 worldMaterialBlendingLayerCount; // Offset: 452
};

struct RenderForwardConstants {
    keen::GraphicsMatrix43 viewMatrix; // Offset: 0
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 48
    keen::GraphicsMatrix44 prevViewProjectionMatrix; // Offset: 112
    keen::GraphicsMatrix44 cameraCenteredToClipSpaceMatrix; // Offset: 176
    keen::ds::PackedShaderWorldPositionUniform cameraPosition; // Offset: 240
    keen::float3 cameraWorldPosition; // Offset: 256
    keen::float32 time; // Offset: 268
    keen::ds::RenderDebugConstants debugData; // Offset: 272
    keen::ds::ForwardDirectionalLightData directionalLightData0; // Offset: 304
    keen::ds::RenderLightFactors lightFactors; // Offset: 336
};

struct VoxelWorldShadowCascadeShaderData {
    keen::GraphicsMatrix44 worldToShadowMatrix; // Offset: 0
};

struct VoxelWorldShadowMapShaderData {
    keen::StaticArray<keen::ds::VoxelWorldShadowCascadeShaderData,2> cascades; // Offset: 0
    keen::float2 shadowMapSize; // Offset: 128
    keen::float2 inverseShadowMapSize; // Offset: 136
    keen::uint32 isValid; // Offset: 144
};

struct RenderTransparentConstants {
    keen::GraphicsMatrix43 viewMatrix; // Offset: 0
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 48
    keen::GraphicsMatrix44 prevViewProjectionMatrix; // Offset: 112
    keen::float3 cameraWorldPosition; // Offset: 176
    keen::float32 time; // Offset: 188
    keen::ds::RenderDebugConstants debugData; // Offset: 192
    keen::uint32 fogDisabled; // Offset: 224
    keen::uint32 shadowsDisabled; // Offset: 228
    keen::uint32 manyLightsShadowsEnabled; // Offset: 232
    keen::uint32 measureOverdraw; // Offset: 236
    keen::uint32 isFsrEnabled; // Offset: 240
    keen::ds::RenderShadowAtlasShaderData atlasData; // Offset: 256
    keen::ds::ForwardDirectionalLightData directionalLightData0; // Offset: 1344
    keen::ds::VolumetricShadowRuntimeData volumetricShadowRuntimeData; // Offset: 1376
    keen::ds::AtmosphereShaderData atmosphere; // Offset: 1616
    keen::ds::RenderLightFactors lightFactors; // Offset: 1680
    keen::ds::VoxelWorldShadowMapShaderData voxelWorldShadowMap; // Offset: 1712
    keen::ds::PackedShaderWorldPositionUniform cameraPosition; // Offset: 1872
    keen::GraphicsMatrix44 cameraCenteredToClipSpaceMatrix; // Offset: 1888
};

struct RenderDebugPassConstants {
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 0
    keen::ds::ForwardDirectionalLightData directionalLightData0; // Offset: 64
    keen::ds::VolumetricShadowRuntimeData volumetricShadowRuntimeData; // Offset: 96
    keen::ds::PackedShaderWorldPositionUniform cameraPosition; // Offset: 336
    keen::GraphicsMatrix44 cameraCenteredToClipSpaceMatrix; // Offset: 352
};

struct ViewSpacePositionReconstructionData {
    keen::GraphicsMatrix44 screenToTargetSpaceTransform; // Offset: 0
};

struct Fog2ViewVolumeTransform {
    keen::float32 depthRemap; // Offset: 0
    keen::float32 invDepthRemap; // Offset: 4
};

struct Fog2ViewVolumeSampleParameters {
    keen::ds::Fog2ViewVolumeTransform transform; // Offset: 0
    keen::float3 viewVolumeSize; // Offset: 16
};

struct RenderForwardTransparentConstants {
    keen::ds::ViewSpacePositionReconstructionData viewSpacePositionReconstructionData; // Offset: 0
    keen::ds::Fog2ViewVolumeSampleParameters viewVolumeSampleParameters; // Offset: 64
    keen::float2 linearDepthParameters; // Offset: 96
    keen::uint32 fogFlags; // Offset: 104
};

typedef keen::RenderModelMaterialDataType RenderModelMaterialDataType;

struct Fsr3UpscalerConstants {
    keen::int2 iRenderSize; // Offset: 0
    keen::int2 iMaxRenderSize; // Offset: 8
    keen::int2 iDisplaySize; // Offset: 16
    keen::int2 iInputColorResourceDimensions; // Offset: 24
    keen::int2 iLumaMipDimensions; // Offset: 32
    keen::int iLumaMipLevelToUse; // Offset: 40
    keen::int iFrameIndex; // Offset: 44
    keen::float4 fDeviceToViewDepth; // Offset: 48
    keen::float2 fJitter; // Offset: 64
    keen::float2 fMotionVectorScale; // Offset: 72
    keen::float2 fDownscaleFactor; // Offset: 80
    keen::float2 fMotionVectorJitterCancellation; // Offset: 88
    keen::float fExposure; // Offset: 96
    keen::float fPreExposure; // Offset: 100
    keen::float fPreviousFramePreExposure; // Offset: 104
    keen::float fTanHalfFOV; // Offset: 108
    keen::float fJitterSequenceLength; // Offset: 112
    keen::float fDeltaTime; // Offset: 116
    keen::float fDynamicResChangeFactor; // Offset: 120
    keen::float fViewSpaceToMetersFactor; // Offset: 124
};

struct Fsr3UpscalerSpdConstants {
    keen::uint mips; // Offset: 0
    keen::uint numWorkGroups; // Offset: 4
    keen::uint2 workGroupOffset; // Offset: 8
    keen::uint2 renderSize; // Offset: 16
};

struct Fsr3UpscalerRcasConstants {
    keen::uint4 rcasConfig; // Offset: 0
};

typedef keen::GiQuality GiQuality;

typedef keen::GiProbeSize GiProbeSize;

typedef keen::GiIrradianceProbeSize GiIrradianceProbeSize;

typedef keen::GiDispatchSize GiDispatchSize;

typedef keen::SdfBvhVariant SdfBvhVariant;

struct GiQualitySettings {
    keen::ds::GiProbeSize radianceAndDistancePixelCount; // Offset: 0
    keen::ds::GiIrradianceProbeSize irradiancePixelCount; // Offset: 4
    keen::uint atlasSizeX; // Offset: 8
    keen::uint atlasSizeY; // Offset: 12
    keen::uint globalRayBudget; // Offset: 16
    keen::float frustumRaysScaleUpBudgetThreshold; // Offset: 20
    keen::uint frustumMinRaysPerProbe; // Offset: 24
    keen::uint frustumIncreasedMinRaysPerProbe; // Offset: 28
    keen::uint frustumMaxProbeRayCount; // Offset: 32
    keen::uint frustumRayBatchSize; // Offset: 36
    keen::uint worldCacheRayBatchSize; // Offset: 40
    keen::uint worldCacheMinRaysPerProbe; // Offset: 44
    keen::uint worldCacheMaxProbeRayCount; // Offset: 48
    keen::uint ambientRayBatchSize; // Offset: 52
    keen::uint ambientMinRaysPerProbe; // Offset: 56
    keen::uint ambientMaxProbeRayCount; // Offset: 60
    keen::uint ambientFroxelDepthSliceCount; // Offset: 64
    keen::float frustumLightCacheStartDiameter; // Offset: 68
    keen::float worldCacheLightCacheStartDiameter; // Offset: 72
    keen::uint maxNeighboursSharingHistory; // Offset: 76
    keen::uint maxNeighboursSharingRays; // Offset: 80
    keen::ds::GiDispatchSize neighbourCandidateDispatchSize; // Offset: 84
    keen::float fillAmbientProbeRayCountScale; // Offset: 88
    keen::bool fillAmbientProbesIteratively; // Offset: 92
    keen::uint minimumFilledRaysToAmbientProbes; // Offset: 96
    keen::uint prefilterRadianceLevelCount; // Offset: 100
    keen::float prefilterAngleScale; // Offset: 104
    keen::uint rayBinCascadeStartOffset; // Offset: 108
    keen::uint worldCacheRayBinCascadeStartOffset; // Offset: 112
    keen::ds::SdfBvhVariant sdfBvhVariant; // Offset: 116
};

struct GiSunLightShaderData {
    keen::float3 direction0; // Offset: 0
    keen::float3 directLight0; // Offset: 16
    keen::float3 indirectLight0; // Offset: 32
    keen::float3 direction1; // Offset: 48
    keen::float3 indirectLight1; // Offset: 64
};

struct GiShadowShaderData {
    keen::ds::RenderShadowAtlasShaderData shadowAtlas; // Offset: 0
    keen::ds::VolumetricShadowRuntimeData volumetricShadowRuntimeData; // Offset: 1088
    keen::uint32 flags; // Offset: 1328
};

struct GiProbe {
    keen::float3 pushedOutPosition; // Offset: 0
    keen::float size; // Offset: 12
    keen::float probeDataQuality; // Offset: 16
    keen::uint32 probeRadianceSum; // Offset: 20
    keen::uint32 rayListStartIndexAndProbeState; // Offset: 24
    keen::uint32 rayListRayCountAndRequestedRayCount; // Offset: 28
};

struct GiMovingAverageEstimatorData {
    keen::float3 shortMean; // Offset: 0
    keen::float vbbr; // Offset: 12
    keen::float3 variance; // Offset: 16
    keen::float inconsistency; // Offset: 28
};

struct GiMovingAverageEstimatorDataEncoded {
    keen::uint4 data; // Offset: 0
};

typedef keen::GiProbeType GiProbeType;

typedef keen::GiRayHitType GiRayHitType;

struct GiRayHit {
    keen::float2 octahedralNormal; // Offset: 0
    keen::uint rayHitIndex; // Offset: 8
    keen::uint materialIndex; // Offset: 12
    keen::float3 origin; // Offset: 16
    keen::uint sdfLevelAndHitTypeAndRayIndex; // Offset: 28
};

struct GiRayHitDecoded {
    keen::float3 normal; // Offset: 0
    keen::uint rayHitIndex; // Offset: 12
    keen::float3 origin; // Offset: 16
    keen::uint sdfLevel; // Offset: 28
    keen::ds::GiRayHitType hitType; // Offset: 32
    keen::uint rayIndex; // Offset: 36
    keen::uint materialIndex; // Offset: 40
};

struct GiRayHitCounters {
    keen::uint terrainRayCount; // Offset: 0
    keen::uint buildingRayCount; // Offset: 4
    keen::uint skyRayCount; // Offset: 8
};

struct GiRayEncoded {
    keen::uint4 data; // Offset: 0
};

struct GiRayDecoded {
    keen::float3 direction; // Offset: 0
    keen::float hitDistance; // Offset: 12
    keen::float3 radiance; // Offset: 16
};

struct GiRayListData {
    keen::float3 origin; // Offset: 0
    keen::uint probeIndexAndRayCount; // Offset: 12
    keen::float3 direction; // Offset: 16
    keen::uint rayStorageIndex; // Offset: 28
};

struct GiPrepareVisualisationParameters {
    keen::float3 cameraOrigin; // Offset: 0
    keen::float3 farPlaneOrigin; // Offset: 16
    keen::float3 farPlaneX; // Offset: 32
    keen::float3 farPlaneY; // Offset: 48
    keen::uint2 outputSize; // Offset: 64
};

struct VoxelMaterialBlendingConstants {
    keen::ds::VolumetricFogGridShaderData fogGrid; // Offset: 0
    keen::uint hasBakingData; // Offset: 496
    keen::uint hasSimpleWorldData; // Offset: 500
    keen::uint buildingMaterialCount; // Offset: 504
    keen::float exposureCorrection; // Offset: 508
};

struct LightCacheCascadeShaderData {
    keen::int3 origin; // Offset: 0
    keen::int3 scrollDelta; // Offset: 16
};

struct LightCacheLookupShaderData {
    keen::float3 gridOrigin; // Offset: 0
    keen::float cascadeCellStartDiameter; // Offset: 12
    keen::StaticArray<keen::ds::LightCacheCascadeShaderData,12> cascades; // Offset: 16
};

struct GiVisualisationParameters {
    keen::ds::VoxelMaterialBlendingConstants voxelMaterialBlending; // Offset: 0
    keen::ds::AtmosphereShaderData atmosphere; // Offset: 512
    keen::ds::GiShadowShaderData shadow; // Offset: 576
    keen::ds::LightCacheLookupShaderData primaryLightCache; // Offset: 1920
    keen::ds::LightCacheLookupShaderData worldCachelightCache; // Offset: 2320
    keen::ds::WeatherSampleConstants weatherSampleConstants; // Offset: 2720
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 2848
    keen::uint2 screenSize; // Offset: 2912
    keen::float2 invScreenSize; // Offset: 2920
    keen::float3 cameraOrigin; // Offset: 2928
    keen::float lightFactorPointLights; // Offset: 2940
    keen::float3 sunDirection; // Offset: 2944
    keen::float exposure; // Offset: 2956
    keen::float exposureCorrection; // Offset: 2960
    keen::float3 farPlaneOrigin; // Offset: 2964
    keen::uint32 forceNeutralAlbedo; // Offset: 2976
    keen::float3 farPlaneX; // Offset: 2980
    keen::uint32 useWorldCache; // Offset: 2992
    keen::float3 farPlaneY; // Offset: 2996
    keen::uint32 useFrustumProbesAsWorldCache; // Offset: 3008
    keen::float3 lightFactorSun; // Offset: 3012
    keen::float lightFactorEmissive; // Offset: 3024
    keen::float3 lightFactorSky; // Offset: 3028
    keen::float lightFactorGi; // Offset: 3040
    keen::uint32 atlasSizeX; // Offset: 3044
    keen::uint32 atlasSizeY; // Offset: 3048
};

struct GiCreateProbeDrawCommandPushConstants {
    keen::uint32 vertexCount; // Offset: 0
};

struct GiProbePrefilterLevels {
    keen::uint probeSize; // Offset: 0
};

struct GiProbeVisualisationParameters {
    keen::StaticArray<keen::ds::GiProbePrefilterLevels,8> radianceMapProbeLevels; // Offset: 0
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 128
    keen::uint sphereBandPower; // Offset: 192
    keen::float exposure; // Offset: 196
    keen::uint32 drawPixelCage; // Offset: 200
    keen::uint32 hoverProbeIndex; // Offset: 204
    keen::uint32 selectedProbeIndex; // Offset: 208
    keen::uint32 pushOutByDistance; // Offset: 212
    keen::uint32 drawIrradiance; // Offset: 216
    keen::uint32 visibleRadianceSpecularMip; // Offset: 220
    keen::uint32 atlasSizeX; // Offset: 224
    keen::uint32 atlasSizeY; // Offset: 228
    keen::uint32 debugWorldCache; // Offset: 232
    keen::float probeSizeScale; // Offset: 236
    keen::uint32 drawMovingAverageEstimatorShortMean; // Offset: 240
    keen::uint32 drawMovingAverageEstimatorVbbr; // Offset: 244
    keen::uint32 drawMovingAverageEstimatorVariance; // Offset: 248
    keen::uint32 drawMovingAverageEstimatorInconsistency; // Offset: 252
};

struct GiShootShadowRaysParameters {
    keen::float3 sunDirection; // Offset: 0
    keen::uint32 maxRayCount; // Offset: 12
    keen::uint32 drawSunShadowRayProbeIndex; // Offset: 16
};

struct GiProbeUpdateParameters {
    keen::ds::LightCacheLookupShaderData lightCacheLookup; // Offset: 0
    keen::uint3 minMaxRayCount; // Offset: 400
    keen::uint32 maxDeleteListCount; // Offset: 412
    keen::uint32 debugEnabled; // Offset: 416
    keen::uint32 drawPushOut; // Offset: 420
    keen::uint32 framesTillProbeInactive; // Offset: 424
    keen::uint32 maxProbeCount; // Offset: 428
    keen::float probeRecycleAgeScale; // Offset: 432
    keen::float invFramesTillProbeInactive; // Offset: 436
    keen::float invFramesTillProbeQualityReached; // Offset: 440
    keen::uint32 useDirectionToOffsetProbes; // Offset: 444
};

struct LightCacheFreeEntriesConstants {
    keen::uint32 maxDeleteListCount; // Offset: 0
};

struct GiProbeShootRaysParameters {
    keen::ds::LightCacheLookupShaderData lightCache; // Offset: 0
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 400
    keen::float2 debugScreenSizeInv; // Offset: 464
    keen::uint32 frameId; // Offset: 472
    keen::uint32 rotateRays; // Offset: 476
    keen::uint32 maxRayCount; // Offset: 480
    keen::uint32 writeOutDirection; // Offset: 484
    keen::uint32 traceBvhSdfInstances; // Offset: 488
    keen::uint32 useSortedBins; // Offset: 492
    keen::uint32 showRayBins; // Offset: 496
    keen::uint32 debugSelectedProbeIndex; // Offset: 500
    keen::uint2 debugMouseScreenPosition; // Offset: 504
    keen::uint2 rayBinDirectionIndexRange; // Offset: 512
    keen::uint rayBinCascadeStartOffset; // Offset: 520
};

struct GiProbeSortHitsParameters {
    keen::uint32 maxRayCount; // Offset: 0
};

struct GiProbeShadeHitsParameters {
    keen::ds::VoxelMaterialBlendingConstants voxelMaterialBlending; // Offset: 0
    keen::ds::LightCacheLookupShaderData primaryLightCache; // Offset: 512
    keen::ds::LightCacheLookupShaderData worldCachelightCache; // Offset: 912
    keen::ds::AtmosphereShaderData atmosphere; // Offset: 1312
    keen::ds::GiShadowShaderData shadow; // Offset: 1376
    keen::ds::GiSunLightShaderData sun; // Offset: 2720
    keen::ds::WeatherSampleConstants weatherSampleConstants; // Offset: 2800
    keen::float3 sunDirection; // Offset: 2928
    keen::float lightFactorPointLights; // Offset: 2940
    keen::float3 sunColor; // Offset: 2944
    keen::uint32 maxHitCount; // Offset: 2956
    keen::float3 lightFactorSky; // Offset: 2960
    keen::float lightFactorEmissive; // Offset: 2972
    keen::uint2 debugRaysRange; // Offset: 2976
    keen::float lightFactorGi; // Offset: 2984
    keen::uint32 enablePointLights; // Offset: 2988
    keen::uint32 enablePointLightShadows; // Offset: 2992
    keen::float pointLightInfluenceScale; // Offset: 2996
    keen::uint32 traceBvhSdfInstances; // Offset: 3000
    keen::uint32 forceNeutralAlbedo; // Offset: 3004
    keen::uint32 isFogEnabled; // Offset: 3008
    keen::uint32 maxRayCount; // Offset: 3012
    keen::uint32 useWorldCache; // Offset: 3016
    keen::uint32 useFrustumProbesAsWorldCache; // Offset: 3020
    keen::float exposure; // Offset: 3024
    keen::float primaryCacheExposureCorrection; // Offset: 3028
    keen::float worldCacheExposureCorrection; // Offset: 3032
    keen::uint32 drawRaysInRange; // Offset: 3036
    keen::uint32 drawRaysProbeIndex; // Offset: 3040
    keen::uint32 atlasSizeX; // Offset: 3044
    keen::uint32 atlasSizeY; // Offset: 3048
    keen::uint32 applyWetness; // Offset: 3052
    keen::float3 cameraWorldPosition; // Offset: 3056
    keen::uint32 applySnow; // Offset: 3068
    keen::uint32 applyCloudMap; // Offset: 3072
};

struct GiRasterizeIrradianceParameters {
    keen::ds::LightCacheLookupShaderData lightCacheLookup; // Offset: 0
    keen::StaticArray<keen::ds::GiProbePrefilterLevels,8> radianceMapProbeLevels; // Offset: 400
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 528
    keen::GraphicsMatrix44 previousInvViewProjectionMatrix; // Offset: 592
    keen::GraphicsMatrix44 clipSpaceToCameraCenteredMatrix; // Offset: 656
    keen::GraphicsMatrix44 previousCameraCenteredToClipSpaceMatrix; // Offset: 720
    keen::float3 cameraWorldPosition; // Offset: 784
    keen::uint32 radianceMipsCount; // Offset: 796
    keen::float3 previousCameraWorldPosition; // Offset: 800
    keen::uint32 useStochasticSampling; // Offset: 812
    keen::uint2 screenSize; // Offset: 816
    keen::float2 invScreenSize; // Offset: 824
    keen::uint2 blueNoiseOffset; // Offset: 832
    keen::float previousExposureCorrection; // Offset: 840
    keen::float exposureCorrection; // Offset: 844
    keen::float2 linearDepthParameters; // Offset: 848
    keen::float exposure; // Offset: 856
    keen::uint32 useStochasticReflectedRadiance; // Offset: 860
    keen::uint32 useStochasticReflectedIrradiance; // Offset: 864
    keen::uint32 stochasticFrameId; // Offset: 868
    keen::uint32 useHistory; // Offset: 872
    keen::uint32 atlasSizeX; // Offset: 876
    keen::uint32 atlasSizeY; // Offset: 880
    keen::uint32 colorCodeReprojection; // Offset: 884
    keen::uint2 mousePos; // Offset: 888
    keen::uint32 drawPixelCage; // Offset: 896
    keen::uint32 groundTruthSpecular; // Offset: 900
    keen::uint32 writeToSceneBrightness; // Offset: 904
};

struct GiVisualizeIrradianceParameters {
    keen::uint2 screenSize; // Offset: 0
    keen::float giLightFactor; // Offset: 8
    keen::float exposure; // Offset: 12
};

struct GiProbeBlendRadianceParameters {
    keen::uint32 maxProbeCount; // Offset: 0
    keen::float previousExposureInverse; // Offset: 4
    keen::float exposure; // Offset: 8
    keen::float maxRayRadiance; // Offset: 12
    keen::float warmupProbeQualityBorderline; // Offset: 16
    keen::uint32 atlasSizeX; // Offset: 20
    keen::uint32 atlasSizeY; // Offset: 24
    keen::uint32 debugProbeIndex; // Offset: 28
    keen::float varianceGuidedRayCountThreshold; // Offset: 32
};

struct GiProbeBlendWorldCacheRadianceParameters {
    keen::uint32 maxProbeCount; // Offset: 0
    keen::float maxRayRadiance; // Offset: 4
    keen::uint32 debugProbeIndex; // Offset: 8
    keen::float previousExposureInverse; // Offset: 12
    keen::float exposure; // Offset: 16
};

struct GiBlendNeighbourRadianceProbesParameters {
    keen::ds::LightCacheLookupShaderData lightCacheLookup; // Offset: 0
    keen::float exposure; // Offset: 400
    keen::float exposureCorrectionFactor; // Offset: 404
    keen::uint32 blendIterations; // Offset: 408
    keen::uint32 blendRaysIterations; // Offset: 412
    keen::uint32 maxProbeCount; // Offset: 416
    keen::uint32 drawNeighbourBlendProbeIndex; // Offset: 420
    keen::uint32 showBlendPixels; // Offset: 424
    keen::uint32 onlyShowDebugInfo; // Offset: 428
    keen::uint32 atlasSizeX; // Offset: 432
    keen::uint32 atlasSizeY; // Offset: 436
    keen::float allowOccludedPixelsAfterDistance; // Offset: 440
    keen::float occludedPixelsDepthBias; // Offset: 444
    keen::uint32 debugNeighbourPixelProjection; // Offset: 448
    keen::float2 debugPixelProjectionParameters; // Offset: 452
};

struct GiBlendNeighbourRadianceProbesRootConstantData {
    keen::uint randomSeed; // Offset: 0
    keen::float doNotShareProbesBelowQuality; // Offset: 4
    keen::uint blendIterations; // Offset: 8
};

struct GiProbeShadeHitsPipelineRootConstantData {
    keen::uint rayHitType; // Offset: 0
    keen::uint probeType; // Offset: 4
};

struct GiProbePrepareShadeIndirectDispatchesParameters {
    keen::uint dispatchSize; // Offset: 0
    keen::uint shadowDispatchSize; // Offset: 4
    keen::uint prepareShadowRays; // Offset: 8
};

struct GiProbePrefilterRadianceParameters {
    keen::uint2 lowResolutionSize; // Offset: 0
    keen::float2 invSourceSize; // Offset: 8
    keen::uint2 sourceSize; // Offset: 16
    keen::float invProbeSize; // Offset: 24
    keen::float invSourceProbeSize; // Offset: 28
    keen::float sampleScale; // Offset: 32
    keen::float linearEnergyScale; // Offset: 36
    keen::float cosAngleScale; // Offset: 40
    keen::uint maxProbeCount; // Offset: 44
    keen::uint atlasSizeX; // Offset: 48
    keen::uint atlasSizeY; // Offset: 52
};

struct GiProbeBlendIrradianceParameters {
    keen::uint32 maxProbeCount; // Offset: 0
    keen::float updateFromPreviousExposure; // Offset: 4
    keen::float exposure; // Offset: 8
    keen::uint32 debugProbeIndex; // Offset: 12
    keen::uint32 highlightNewProbes; // Offset: 16
    keen::uint32 atlasSizeX; // Offset: 20
    keen::uint32 atlasSizeY; // Offset: 24
};

struct GiProbeBlendDistanceParameters {
    keen::uint32 maxProbeCount; // Offset: 0
    keen::uint32 atlasSizeX; // Offset: 4
    keen::uint32 atlasSizeY; // Offset: 8
    keen::uint32 frameId; // Offset: 12
    keen::uint32 debugProbeIndex; // Offset: 16
    keen::float exposure; // Offset: 20
};

struct GiProbeDebugData {
    keen::uint isCoveringPixel; // Offset: 0
};

struct GiDebugProbeInfo {
    keen::float3 pushedOutPosition; // Offset: 0
    keen::uint probeIndex; // Offset: 12
    keen::uint3 cellCoordinate; // Offset: 16
    keen::uint cascadeIndex; // Offset: 28
    keen::uint requestedRayCount; // Offset: 32
    keen::uint rayCount; // Offset: 36
    keen::float probeQuality; // Offset: 40
    keen::uint isNew; // Offset: 44
};

struct ShSpectralCoeffs {
    keen::float4 r; // Offset: 0
    keen::float4 g; // Offset: 16
    keen::float4 b; // Offset: 32
};

struct GiPopulateRayListPrepareIndirectParameters {
    keen::uint dispatchSize; // Offset: 0
};

struct GiPopulateRayListParameters {
    keen::ds::LightCacheLookupShaderData lightCache; // Offset: 0
    keen::uint maxRayCount; // Offset: 400
    keen::uint maxProbeCount; // Offset: 404
    keen::uint rayBatchSize; // Offset: 408
    keen::uint frameId; // Offset: 412
    keen::uint rotateRays; // Offset: 416
    keen::float randomDirectionScale; // Offset: 420
    keen::uint useUniformSamplingAfterFrames; // Offset: 424
    keen::uint validRadianceMaps; // Offset: 428
    keen::float minLuminanceSumForRayGuiding; // Offset: 432
    keen::uint sortRaysIntoBins; // Offset: 436
    keen::uint rayBinCascadeStartOffset; // Offset: 440
    keen::uint atlasSizeX; // Offset: 444
    keen::uint atlasSizeY; // Offset: 448
};

struct GiPopulateWorldCacheRayListParameters {
    keen::ds::LightCacheLookupShaderData lightCache; // Offset: 0
    keen::uint maxRayCount; // Offset: 400
    keen::uint maxProbeCount; // Offset: 404
    keen::uint rayBatchSize; // Offset: 408
    keen::uint frameId; // Offset: 412
    keen::uint rotateRays; // Offset: 416
    keen::float randomDirectionScale; // Offset: 420
    keen::uint sortRaysIntoBins; // Offset: 424
    keen::uint rayBinCascadeStartOffset; // Offset: 428
    keen::uint atlasSizeX; // Offset: 432
    keen::uint atlasSizeY; // Offset: 436
};

struct GiCullRequestedRaysWithRayBudgetParameters {
    keen::ds::LightCacheLookupShaderData lightCache; // Offset: 0
    keen::uint maxRaysPerProbe; // Offset: 400
    keen::uint maxRayCount; // Offset: 404
    keen::float frustumRaysScaleUpBudgetThreshold; // Offset: 408
    keen::uint rayBatchSize; // Offset: 412
    keen::uint maxProbeCount; // Offset: 416
    keen::uint debugEnabled; // Offset: 420
    keen::uint sortRaysIntoBins; // Offset: 424
    keen::uint rayBinCascadeStartOffset; // Offset: 428
};

struct GiPrepareRayBinsParameters {
    keen::uint maxProbeCount; // Offset: 0
};

struct GiCalculateBinDirectionOffsetParameters {
    keen::uint maxRayCount; // Offset: 0
};

struct GiSortRaysIntoBinsParameters {
    keen::uint maxRayCount; // Offset: 0
    keen::uint maxProbeCount; // Offset: 4
    keen::uint debugSorting; // Offset: 8
};

struct GiCullRequestedAmbientRaysWithRayBudgetParameters {
    keen::uint maxRayCount; // Offset: 0
    keen::uint maxProbeCount; // Offset: 4
    keen::uint rayBatchSize; // Offset: 8
    keen::uint debugEnabled; // Offset: 12
};

struct GiWorldCacheBlendSphericalHarmonicsIrradianceParameters {
    keen::uint maxProbeCount; // Offset: 0
    keen::uint debugEnabled; // Offset: 4
};

struct GiCleanupCacheParameters {
    keen::uint maxProbeCount; // Offset: 0
    keen::uint atlasSizeX; // Offset: 4
    keen::uint atlasSizeY; // Offset: 8
};

struct GiFillAmbientProbesParameters {
    keen::StaticArray<keen::float4,8> cascadeOriginAndSpacing; // Offset: 0
    keen::StaticArray<keen::int4,8> cascadeGridSpaceOffset; // Offset: 128
    keen::float3 referencePosition; // Offset: 256
    keen::float exposureCorrection; // Offset: 268
    keen::uint32 maxHitCount; // Offset: 272
    keen::float maxRayCountScale; // Offset: 276
    keen::uint32 minFillRayCount; // Offset: 280
    keen::uint32 useReverseRayReprojection; // Offset: 284
    keen::uint32 debugSelectedProbeIndex; // Offset: 288
    keen::uint32 debugEnabled; // Offset: 292
    keen::uint32 atlasSizeX; // Offset: 296
    keen::uint32 atlasSizeY; // Offset: 300
};

struct GiAmbientConvergeParameters {
    keen::StaticArray<keen::float4,8> cascadeOriginAndSpacing; // Offset: 0
    keen::StaticArray<keen::int4,8> cascadeGridSpaceOffset; // Offset: 128
    keen::uint32 shouldUseHistory; // Offset: 256
    keen::float hysteresis; // Offset: 260
    keen::uint minRaysPerProbe; // Offset: 264
    keen::uint maxRaysPerProbe; // Offset: 268
    keen::uint32 atlasSizeX; // Offset: 272
    keen::uint32 atlasSizeY; // Offset: 276
    keen::float previousExposureCorrection; // Offset: 280
    keen::float exposure; // Offset: 284
    keen::uint32 debugProbeHighlightEnabled; // Offset: 288
    keen::uint32 debugSelectedProbeId; // Offset: 292
    keen::uint32 debugEnabled; // Offset: 296
    keen::uint32 debugStarvingProbes; // Offset: 300
};

struct GiCalculateAmbientProbesVisibilityParameters {
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 0
    keen::ds::GpuCullingFrustum frustum; // Offset: 64
    keen::StaticArray<keen::float4,8> cascadeOriginAndSpacing; // Offset: 160
    keen::StaticArray<keen::int4,8> lastCascadeGridSpaceOffset; // Offset: 288
    keen::StaticArray<keen::int4,8> cascadeGridSpaceOffset; // Offset: 416
    keen::float3 cameraPosition; // Offset: 544
    keen::uint32 shouldUpdateCameraVisibility; // Offset: 556
    keen::float2 linearDepthParameters; // Offset: 560
    keen::uint32 debugShowVisibilityRays; // Offset: 568
    keen::uint32 debugActiveCascade; // Offset: 572
};

struct GiAmbientProbeVisualisationParameters {
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 0
    keen::StaticArray<keen::int4,8> cascadeGridSpaceOffset; // Offset: 64
    keen::StaticArray<keen::float4,8> cascadeOriginAndSpacing; // Offset: 192
    keen::uint sphereBandPower; // Offset: 320
    keen::float exposure; // Offset: 324
    keen::uint cascadeIndex; // Offset: 328
    keen::uint debugSelectedProbeIndex; // Offset: 332
    keen::uint showVisibilityMask; // Offset: 336
    keen::uint renderConvergedTexture; // Offset: 340
    keen::uint useGridCoordinatesWithoutOffset; // Offset: 344
    keen::uint showWarmupProbes; // Offset: 348
};

struct GiAmbientDebugProbeInfo {
    keen::uint3 cellCoordinate; // Offset: 0
    keen::uint probeIndex; // Offset: 12
    keen::uint cascadeIndex; // Offset: 16
    keen::uint rayIntersectedProbeCount; // Offset: 20
};

struct GiPopulateAmbientRayListParameters {
    keen::uint maxRayCount; // Offset: 0
    keen::uint frameId; // Offset: 4
    keen::uint rotateRays; // Offset: 8
    keen::float randomDirectionScale; // Offset: 12
    keen::uint rayBatchSize; // Offset: 16
    keen::uint atlasSizeX; // Offset: 20
    keen::uint atlasSizeY; // Offset: 24
};

struct GiAmbientRayListData {
    keen::float3 origin; // Offset: 0
    keen::uint rayListStartIndex; // Offset: 12
    keen::float3 direction; // Offset: 16
    keen::uint probeRayCount; // Offset: 28
};

struct GiAmbientProbesLookupData {
    keen::StaticArray<keen::float4,8> cascadeOriginAndSpacing; // Offset: 0
    keen::StaticArray<keen::int4,8> cascadeGridSpaceOffset; // Offset: 128
    keen::StaticArray<keen::float4,8> gridSpaceReferencePosition; // Offset: 256
    keen::float3 referencePosition; // Offset: 384
};

struct GiAmbientFroxelVolumeParameters {
    keen::float3 depthRemap; // Offset: 0
    keen::uint tileSize; // Offset: 12
    keen::uint3 froxelVolumeSize; // Offset: 16
    keen::float near; // Offset: 28
    keen::float3 invFroxelVolumeSize; // Offset: 32
    keen::float far; // Offset: 44
    keen::float2 linearDepthParameters; // Offset: 48
    keen::uint2 screenSize; // Offset: 56
};

struct GiFillAmbientFroxelVolumeParameters {
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 0
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 64
    keen::GraphicsMatrix44 previousViewProjectionMatrix; // Offset: 128
    keen::GraphicsMatrix44 previousInvViewProjectionMatrix; // Offset: 192
    keen::ds::GiAmbientProbesLookupData ambientProbeLookup; // Offset: 256
    keen::ds::GiAmbientFroxelVolumeParameters froxelData; // Offset: 656
    keen::float3 cameraPosition; // Offset: 720
    keen::float exposure; // Offset: 732
    keen::uint2 blueNoiseOffset; // Offset: 736
    keen::float2 invScreenSize; // Offset: 744
    keen::float3 previousCameraPosition; // Offset: 752
    keen::uint historyValid; // Offset: 764
    keen::float previousToCurrentExposure; // Offset: 768
    keen::uint debugShowFroxels; // Offset: 772
    keen::uint debugDrawFroxelZIndex; // Offset: 776
    keen::uint debugColorCodeReprojection; // Offset: 780
};

struct GiProbePrepareFillRaysIndirectDispatchParameters {
    keen::uint dispatchSize; // Offset: 0
    keen::uint minimumAllowedRays; // Offset: 4
    keen::float rayCountScale; // Offset: 8
};

struct GiFillAmbientProbesWithAmbientRaysRootConstantData {
    keen::uint activeCascadeIndex; // Offset: 0
};

struct GiCalculateAmbientProbesVisibilityRootConstantData {
    keen::uint activeCascadeIndex; // Offset: 0
};

struct GiAmbientConvergeRootConstantData {
    keen::uint activeCascadeIndex; // Offset: 0
};

typedef keen::GiDebugStep GiDebugStep;

typedef keen::GiDebugProbeType GiDebugProbeType;

struct GizmoMaterial {
};

struct GizmoRfxRenderMaterial {
    keen::float4 dummy; // Offset: 0
};

struct GpuCounterFillCommand {
    keen::uint32 byteOffset; // Offset: 0
    keen::uint32 value; // Offset: 4
};

struct FillBufferParameters {
    keen::uint32 commandCount; // Offset: 0
};

typedef keen::GpuDataCacheImageStreamingState GpuDataCacheImageStreamingState;

struct GpuDataCacheImageStreamingMemoryBlockInfo {
    keen::uint64 sizeInBytes; // Offset: 0
};

struct GpuDataCacheMemoryRangeInfo {
    keen::uint8 blockIndex; // Offset: 0
    keen::uint64 offset; // Offset: 8
    keen::uint64 size; // Offset: 16
};

typedef keen::GpuImageStreamingDataLoadingState GpuImageStreamingDataLoadingState;

struct GpuDataCacheImageStreamingImageInfo {
    keen::uint32 handle; // Offset: 0
    keen::ds::string name; // Offset: 8
    keen::TextureType type; // Offset: 48
    keen::PixelFormat format; // Offset: 49
    keen::ContentHash content; // Offset: 52
    keen::uint3 originalSize; // Offset: 68
    keen::uint8 mipTailStartLevel; // Offset: 80
    keen::float32 requiredLevel; // Offset: 84
    keen::uint8 currentLevel; // Offset: 88
    keen::uint32 sampledLevelsMask; // Offset: 92
    keen::ds::GpuImageStreamingDataLoadingState state; // Offset: 96
    keen::ds::GpuDataCacheMemoryRangeInfo memoryRange; // Offset: 104
    keen::ds::GpuDataCacheMemoryRangeInfo loadingMemoryRange; // Offset: 128
    keen::uint64 estimatedRequiredMemorySize; // Offset: 152
    keen::uint64 actualRequiredMemorySize; // Offset: 160
};

typedef keen::ImageStreamingAlgorithm ImageStreamingAlgorithm;

struct GpuDataCacheImageStreamingStateMessage {
    keen::ds::GpuDataCacheImageStreamingState state; // Offset: 0
    keen::bool isSamplerFeedbackResetEnabled; // Offset: 1
    keen::uint64 currentUploadBudget; // Offset: 8
    keen::uint64 uploadBudget; // Offset: 16
    keen::ds::ImageStreamingAlgorithm algorithm; // Offset: 24
    keen::DsArray<keen::ds::GpuDataCacheImageStreamingMemoryBlockInfo> memoryBlocks; // Offset: 32
    keen::uint64 totalMemorySize; // Offset: 72
    keen::uint64 allocatedMemorySize; // Offset: 80
    keen::uint64 loadingMemorySize; // Offset: 88
    keen::DsArray<keen::ds::GpuDataCacheImageStreamingImageInfo> images; // Offset: 96
    keen::uint64 estimatedWorkingSetSize; // Offset: 136
    keen::uint64 actualWorkingSetSize; // Offset: 144
};

struct GpuDataCacheSetSamplerFeedbackResetMessage {
    keen::bool enableReset; // Offset: 0
};

struct GpuDataCacheSetImageStreamingAlgorithmMessage {
    keen::ds::ImageStreamingAlgorithm algorithm; // Offset: 0
};

struct GpuDataCacheFlushImageStreamingMemoryMessage {
};

struct GpuDebugRendererVertex {
    keen::float3 position; // Offset: 0
    keen::uint32 color; // Offset: 12
};

typedef keen::GpuDebugRendererContextCounter GpuDebugRendererContextCounter;

struct GpuDebugRendererContextState {
    keen::uint32 lineCounterOffset; // Offset: 0
    keen::uint32 maxLineCount; // Offset: 4
};

struct GpuDebugRendererDrawParameters {
    keen::GraphicsMatrix44 mvp; // Offset: 0
};

struct GpuModel {
    keen::uint32 nodeModelIndex0; // Offset: 0
    keen::uint32 nodeModelIndex1; // Offset: 4
    keen::uint32 nodeModelIndex2; // Offset: 8
    keen::uint32 nodeModelIndex3; // Offset: 12
    keen::uint32 nodeModelIndex4; // Offset: 16
    keen::uint32 nodeModelIndex5; // Offset: 20
};

struct GrassMovementUpdateParameters {
    keen::uint2 textureSize; // Offset: 0
    keen::uint lastTextureId; // Offset: 8
    keen::uint bodyCounterOffset; // Offset: 12
    keen::float2 size; // Offset: 16
    keen::float2 oneOverSize; // Offset: 24
    keen::ds::PackedShaderWorldPositionUniform currentOrigin; // Offset: 32
    keen::float historyStrength; // Offset: 48
    keen::ds::PackedShaderWorldPositionUniform lastOrigin; // Offset: 64
    keen::float deltaTime; // Offset: 80
    keen::float2 oneOverTextureSize; // Offset: 84
};

struct GrassMovementBody {
    keen::uint3 packedPosition; // Offset: 0
    keen::float outerRadius; // Offset: 12
    keen::float innerRadius; // Offset: 16
    keen::float strength; // Offset: 20
};

struct GridMaterial {
    keen::float32 lineSize; // Offset: 0
    keen::float32 axisSize; // Offset: 4
    keen::Color color0; // Offset: 8
    keen::Color color1; // Offset: 12
};

struct GridRfxRenderMaterial {
    keen::float32 axisSize; // Offset: 0
    keen::float32 lineSize; // Offset: 4
    keen::float4 color0; // Offset: 8
    keen::float4 color1; // Offset: 24
};

struct VfxGridMaterial {
    keen::float32 cellSize; // Offset: 0
    keen::Color color; // Offset: 4
};

struct VfxGridRfxRenderMaterial {
    keen::float3 color; // Offset: 0
    keen::float32 invCellSize; // Offset: 12
};

typedef keen::IblSourceType IblSourceType;

struct Ibl {
    keen::ds::IblSourceType sourceType; // Offset: 0
    keen::uint16 diffuseOutputSize; // Offset: 2
    keen::uint16 diffuseSampleCount; // Offset: 4
    keen::uint16 specularSampleCount; // Offset: 6
};

struct IblResource {
    keen::uint16 diffuseSize; // Offset: 0
    keen::ContentHash diffuseData; // Offset: 4
    keen::uint16 specularSize; // Offset: 20
    keen::uint8 specularLevelCount; // Offset: 22
    keen::ContentHash specularData; // Offset: 24
};

struct SpecularIblLutResource {
    keen::uint16 size; // Offset: 0
    keen::uint8 levelCount; // Offset: 2
    keen::ContentHash content; // Offset: 4
};

struct CreateDispatchArgsShaderData {
    keen::uint targetThreadGroupSize; // Offset: 0
    keen::uint targetBufferOffset; // Offset: 4
    keen::uint threadCountOffsetX; // Offset: 8
    keen::uint threadCountPerSourceCount; // Offset: 12
};

struct LightCacheFrustumTestShaderParameters {
    keen::float3 cellCenter; // Offset: 0
    keen::float32 cellSize; // Offset: 12
    keen::float3 sunDirection; // Offset: 16
};

struct LightCacheFrustumTestShaderResult {
    keen::StaticArray<keen::float4,9> planes; // Offset: 0
    keen::uint32 hits; // Offset: 144
};

struct LightCacheCounters {
    keen::uint32 allocationCount; // Offset: 0
    keen::uint32 maxAllocationCount; // Offset: 4
    keen::uint32 freeListIndex; // Offset: 8
    keen::uint32 visibleCount; // Offset: 12
    keen::uint32 deleteCount; // Offset: 16
};

struct LightCacheAllocateGiProbeParameters {
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 0
    keen::ds::LightCacheLookupShaderData lightCache; // Offset: 64
    keen::uint2 screenSize; // Offset: 464
    keen::float2 invScreenSize; // Offset: 472
    keen::float3 cameraPosition; // Offset: 480
    keen::uint32 frameId; // Offset: 492
    keen::uint2 blueNoiseOffset; // Offset: 496
    keen::uint32 allocateDownsample; // Offset: 504
    keen::uint cascadeCellCount; // Offset: 508
    keen::uint2 mousePosition; // Offset: 512
    keen::uint showCascadeTransitions; // Offset: 520
};

struct LightCachePrepareAllocateParameters {
    keen::uint32 maxEntryCount; // Offset: 0
};

struct LightCachePrepareEntriesParameters {
    keen::uint32 entryCount; // Offset: 0
};

struct LightCacheRecycleEntriesParameters {
    keen::uint32 maxEntryCount; // Offset: 0
    keen::float entryRecycleAgeScale; // Offset: 4
};

struct LightCacheAllocateEntriesParameters {
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 0
    keen::ds::LightCacheLookupShaderData lightCache; // Offset: 64
    keen::uint2 screenSize; // Offset: 464
    keen::float2 invScreenSize; // Offset: 472
    keen::uint32 allocateDownsample; // Offset: 480
    keen::uint32 frameId; // Offset: 484
    keen::uint32 cascadeCellCount; // Offset: 488
};

struct LightCacheAllocateEntriesAtPositionsParameters {
    keen::ds::LightCacheLookupShaderData lightCache; // Offset: 0
    keen::ds::LightCacheLookupShaderData primaryLightCache; // Offset: 400
    keen::float maxRange; // Offset: 800
    keen::uint32 useDirectionBuffer; // Offset: 804
    keen::uint32 usePrimaryCache; // Offset: 808
    keen::uint32 maxEntryCount; // Offset: 812
    keen::float3 cameraPosition; // Offset: 816
    keen::uint32 minCascade; // Offset: 828
};

struct LightCacheScrollCascadesParameters {
    keen::ds::LightCacheLookupShaderData lightCache; // Offset: 0
};

struct LightCacheDebugParameters {
    keen::ds::ViewSpacePositionReconstructionData worldSpaceReconstructionData; // Offset: 0
    keen::uint2 screenSize; // Offset: 64
    keen::ds::LightCacheLookupShaderData lightCache; // Offset: 80
    keen::uint32 totalCellCount; // Offset: 480
    keen::uint32 frameId; // Offset: 484
};

struct LightCacheLightCullingIndirectCounter {
    keen::uint activeLightCount; // Offset: 0
    keen::uint lightCount; // Offset: 4
    keen::uint lightCacheLightListOffset; // Offset: 8
    keen::uint lightCacheEntryCount; // Offset: 12
};

struct LightCacheLightCullingUniformBuffer {
    keen::ds::LightCacheLookupShaderData lightCacheLookup; // Offset: 0
    keen::uint lightCountOffset; // Offset: 400
    keen::uint maxLightCount; // Offset: 404
    keen::uint maxLightCacheEntries; // Offset: 408
    keen::uint lightCacheEntries; // Offset: 412
};

struct LightCacheLightCullingResultUniformBuffer {
    keen::ds::LightCacheLookupShaderData lightCacheLookup; // Offset: 0
    keen::uint lightCacheDataEntryCount; // Offset: 400
};

struct LightCacheLightCullingDebugParameters {
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 0
    keen::uint2 targetSize; // Offset: 64
    keen::float2 invTargetSize; // Offset: 72
    keen::ds::LightCacheLookupShaderData lightCache; // Offset: 80
};

typedef keen::ManyLightsShadowsQuality ManyLightsShadowsQuality;

struct ManyLightsShadowsQualitySettings {
    keen::uint atlasSizeX; // Offset: 0
    keen::uint atlasSizeY; // Offset: 4
    keen::uint shadowAtlasTextureSize; // Offset: 8
    keen::float shadowMapBias; // Offset: 12
    keen::float shadowMapNormalBias; // Offset: 16
    keen::float gaussianScale; // Offset: 20
    keen::float exponentialShadowConstantX; // Offset: 24
    keen::float exponentialShadowConstantY; // Offset: 28
    keen::ds::SdfBvhVariant sdfBvhVariant; // Offset: 32
};

struct ManyLightsShadowsIndirectCounter {
    keen::uint activeLightCount; // Offset: 0
    keen::uint lightCount; // Offset: 4
};

struct ManyLightsShadowsIndirectArgument {
    keen::uint3 updateShadowAtlas; // Offset: 0
    keen::uint3 updateLightCache; // Offset: 12
    keen::uint3 activeLight32; // Offset: 24
    keen::uint3 atlasBorders; // Offset: 36
};

struct ManyLightsPackedSdfShaderData {
    keen::float4 sphere; // Offset: 0
    keen::uint modelPartIndex; // Offset: 16
    keen::uint instancePartIndex; // Offset: 20
};

struct ManyLightsShadowsAtlasParameters {
    keen::uint2 atlasSize; // Offset: 0
    keen::uint atlasMaxEntries; // Offset: 8
    keen::uint atlasHashMapSize; // Offset: 12
    keen::uint atlasElementSize; // Offset: 16
    keen::uint atlasElementTexelCount; // Offset: 20
    keen::uint atlasElementBorder; // Offset: 24
    keen::float2 atlasExponentialShadowConstant; // Offset: 32
    keen::float2 atlasExponentialShadowChebyshevConstants; // Offset: 40
    keen::float atlasNormalBias; // Offset: 48
    keen::float atlasShadowMapBias; // Offset: 52
};

struct ManyLightsShadowsUniformBuffer {
    keen::GraphicsMatrix44 invViewProj; // Offset: 0
    keen::GraphicsMatrix43 viewMatrix; // Offset: 64
    keen::uint2 bufferDimensions; // Offset: 112
    keen::float2 invBufferDimensions; // Offset: 120
    keen::uint frameId; // Offset: 128
    keen::uint lightCount; // Offset: 132
    keen::uint maxLightCount; // Offset: 136
    keen::float gaussianBlurScale; // Offset: 140
    keen::uint enableOcclusionCulling; // Offset: 144
    keen::ds::GpuOcclusionCullingShaderData occlusionCulling; // Offset: 160
    keen::ds::ManyLightsShadowsAtlasParameters atlasParameters; // Offset: 224
    keen::uint2 mousePosition; // Offset: 288
    keen::uint outputUseNDotL; // Offset: 296
    keen::uint outputDrawCellBoxes; // Offset: 300
    keen::uint outputShowLightPosition; // Offset: 304
    keen::uint showLighWithRealSize; // Offset: 308
    keen::float sizeOfDebugSphere; // Offset: 312
};

struct ManyLightsShadowsResultUniformBuffer {
    keen::uint enabled; // Offset: 0
    keen::ds::ManyLightsShadowsAtlasParameters atlasParameters; // Offset: 16
    keen::uint showLightInfluence; // Offset: 80
    keen::uint useAtlasSampler; // Offset: 84
    keen::uint useAtlasBias; // Offset: 88
};

struct ManyLightsGatherSdfShaderParameters {
    keen::uint sdfInstanceCount; // Offset: 0
};

struct GaussianRootConstantData {
    keen::uint2 blurVector; // Offset: 0
};

typedef keen::ObjectReference<keen::ds::Material> MaterialReference;

typedef keen::ModelType ModelType;

typedef keen::ModelTangentSpaceType ModelTangentSpaceType;

struct ModelMaterialMapEntry {
    keen::ds::string name; // Offset: 0
    keen::ds::MaterialReference material; // Offset: 40
};

typedef keen::ObjectReference<keen::ds::BlendShapeId> ModelBlendShapeIdReference;

struct ModelBlendShapeIdDirectory {
};

struct ModelBlendShapeMapEntry {
    keen::ds::string name; // Offset: 0
    keen::ds::ModelBlendShapeIdReference id; // Offset: 40
};

struct ModelConverterBlendShapeNames {
    keen::DsArray<keen::ds::string> names; // Offset: 0
    keen::DsArray<keen::ds::string> selection; // Offset: 40
    keen::DsArray<keen::Guid> ids; // Offset: 80
};

struct ModelLodGenerationParameters {
    keen::uint32 maxLod; // Offset: 0
    keen::float32 triangleReductionPerStep; // Offset: 4
    keen::float32 maxErrorPerStep; // Offset: 8
};

struct ModelDisplacementOverrides {
    keen::float32 displacementScale; // Offset: 0
    keen::float32 displacementOffset; // Offset: 4
};

struct ModelClothColliderSphere {
    keen::float3 position; // Offset: 0
    keen::float32 radius; // Offset: 12
};

struct ModelClothColliderSphereInstance {
    keen::uint32 instanceIndex; // Offset: 16
};

struct ModelClothColliderCapsule {
    keen::ds::ModelClothColliderSphere sphere0; // Offset: 0
    keen::ds::ModelClothColliderSphere sphere1; // Offset: 16
};

struct ModelClothColliderCapsuleInstance {
    keen::uint32 instanceIndex; // Offset: 32
};

struct ClothCollider {
    keen::ObjectReference<keen::ds::ModelHierarchy> hierarchy; // Offset: 0
};

struct ModelClothSleeveCapsuleCollider {
    keen::ds::string upperBoneName; // Offset: 32
    keen::ds::string lowerBoneName; // Offset: 72
    keen::uint32 instanceIndex; // Offset: 112
};

struct ModelChain {
    keen::ds::string rootBoneName; // Offset: 0
    keen::bool propagateRotation; // Offset: 40
    keen::float32 gravity; // Offset: 44
    keen::float32 mass; // Offset: 48
    keen::float32 dragCoefficient; // Offset: 52
    keen::float32 liftCoefficient; // Offset: 56
    keen::float32 stiffnessFrequencey; // Offset: 60
    keen::float32 damping; // Offset: 64
    keen::float32 motionConstraintRadius; // Offset: 68
    keen::float32 linearInertia; // Offset: 72
    keen::float32 angularInertia; // Offset: 76
    keen::float32 centrifugalInertia; // Offset: 80
    keen::float32 phasesStiffness; // Offset: 84
    keen::float32 phasesStiffnessMultiplier; // Offset: 88
    keen::float32 phasesCompressionLimit; // Offset: 92
    keen::float32 phasesStretchLimit; // Offset: 96
    keen::float32 collisionFriction; // Offset: 100
};

struct ModelChainBundle {
};

typedef keen::ModelModelChainBoneConstraintAxis ModelModelChainBoneConstraintAxis;

struct ModelChainBoneConstraint {
    keen::ds::string boneName; // Offset: 0
    keen::ds::ModelModelChainBoneConstraintAxis axis; // Offset: 40
    keen::float32 minAngle; // Offset: 44
    keen::float32 maxAngle; // Offset: 48
};

struct ModelClothColliderBoneAttachment {
    keen::ds::string boneName; // Offset: 0
    keen::float32 weight; // Offset: 40
};

struct ModelMaterial {
    keen::ds::string name; // Offset: 0
    keen::ds::MaterialReference material; // Offset: 40
};

struct ModelBlendshape {
    keen::ds::string name; // Offset: 0
    keen::ds::ModelBlendShapeIdReference id; // Offset: 40
};

struct ModelClothColliderContainer {
};

struct Model {
    keen::ObjectReference<keen::ds::ModelHierarchy> hierarchy; // Offset: 0
    keen::ds::string export_node; // Offset: 16
    keen::float32 scale; // Offset: 56
    keen::float32 k3dScale; // Offset: 60
    keen::bool create_backfaces; // Offset: 64
    keen::bool support_raytracing; // Offset: 65
    keen::ds::string raytrace_node_name; // Offset: 72
    keen::bool rotateY; // Offset: 112
    keen::float32 lodValue; // Offset: 116
    keen::ds::ModelLodGenerationParameters generatedLods; // Offset: 120
    keen::bool ignoreClothCollider; // Offset: 132
    keen::bool enableCardClusterLod; // Offset: 133
    keen::uint64 cardClusterVersion; // Offset: 136
    keen::bool enableGrassAnimation; // Offset: 144
    keen::ds::GrassAnimationModelParameters grassAnimation; // Offset: 148
    keen::bool enableGrassPushback; // Offset: 156
    keen::ds::GrassPushbackModelParameters grassPushback; // Offset: 160
    keen::bool enableSdf; // Offset: 176
};

struct CardClusterInfo {
    keen::bool isValid; // Offset: 0
    keen::ds::RenderTexture albedoMap; // Offset: 8
    keen::ds::RenderTexture materialParamsMap; // Offset: 80
    keen::ds::RenderTexture normalMap; // Offset: 152
    keen::ds::RenderTexture opacityMap; // Offset: 224
    keen::float32 texCoord0Delta; // Offset: 296
    keen::uint32 vertexCount; // Offset: 300
    keen::uint32 indexCount; // Offset: 304
    keen::ContentHash vertexBufferHash; // Offset: 308
    keen::ContentHash indexBufferHash; // Offset: 324
    keen::AxisAlignedBox aabb; // Offset: 352
    keen::Sphere boundingSphere; // Offset: 384
};

struct ColorGradient {
    keen::ObjectReference<keen::ds::Image> image; // Offset: 0
};

struct ShaderModelChunkMesh {
    keen::float3 positionScale; // Offset: 0
    keen::uint32 materialIndex; // Offset: 12
    keen::float3 positionOffset; // Offset: 16
    keen::uint32 indexOffset; // Offset: 28
    keen::uint32 vertexOffset; // Offset: 32
    keen::uint32 indexCount; // Offset: 36
};

struct ShaderModelChunkPipelineIndex {
    keen::uint32 index; // Offset: 0
};

struct ShaderModelChunkModelMesh {
    keen::uint32 meshIndex; // Offset: 0
    keen::StaticArray<keen::ds::ShaderModelChunkPipelineIndex,3> pipelineIndices; // Offset: 4
};

struct ShaderModelChunkModel {
    keen::float4 boundingSphere; // Offset: 0
    keen::StaticArray<keen::ds::ShaderModelChunkModelMesh,2> meshes; // Offset: 16
    keen::uint32 meshCount; // Offset: 48
    keen::uint32 modelSizeFeedbackIndex; // Offset: 52
};

struct ShaderModelChunkSubView {
    keen::uint flags; // Offset: 0
    keen::float3 exclusionCircle; // Offset: 4
    keen::float minObjectSize; // Offset: 16
    keen::ds::PackedShaderWorldPositionUniform cameraPosition; // Offset: 32
    keen::GraphicsMatrix43 cameraCenteredToViewMatrix; // Offset: 48
    keen::ds::GpuCullingFrustum cameraCenteredFrustum; // Offset: 96
    keen::ds::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 192
};

struct ShaderModelChunkPassConstants {
    keen::uint32 subViewIndex; // Offset: 0
    keen::uint32 passType; // Offset: 4
};

struct ShaderModelChunkInstanceCullingShaderParameters {
    keen::StaticArray<keen::ds::ShaderModelChunkSubView,9> subViews; // Offset: 0
    keen::StaticArray<keen::ds::ShaderModelChunkPassConstants,10> passes; // Offset: 2304
    keen::uint32 subViewCount; // Offset: 2464
    keen::uint32 passCount; // Offset: 2468
    keen::uint32 maxDrawCount; // Offset: 2472
    keen::uint32 maxMeshCount; // Offset: 2476
    keen::float distanceCullingThreshold; // Offset: 2480
    keen::float distanceCullingJitterFactor; // Offset: 2484
    keen::float modelSizeFeedbackPixelSize; // Offset: 2488
    keen::uint smallObjectCulling; // Offset: 2492
    keen::uint writeForestFogFootprints; // Offset: 2496
};

typedef keen::ModelChunkType ModelChunkType;

struct ShaderModelChunk {
    keen::float4 boundingSphere; // Offset: 0
    keen::ds::PackedShaderWorldPositionUniform worldOrigin; // Offset: 16
    keen::float3 extents; // Offset: 32
    keen::float scale; // Offset: 44
    keen::float4 orientation; // Offset: 48
    keen::ds::PackedShaderWorldTransform transform; // Offset: 64
    keen::uint32 instanceOffset; // Offset: 96
    keen::uint32 instanceCount; // Offset: 100
    keen::ds::ModelChunkType type; // Offset: 104
};

struct ShaderModelChunkInstance {
    keen::uint32 packedPosition; // Offset: 0
    keen::uint32 packedOrientation; // Offset: 4
    keen::uint32 packedScaleModelIndex; // Offset: 8
};

struct ShaderModelChunkCandidate {
    keen::uint32 chunkIndex; // Offset: 0
    keen::uint32 visibilityMask; // Offset: 4
};

struct ShaderModelChunkCullingShaderParameters {
    keen::ds::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 0
    keen::ds::PackedShaderWorldPositionUniform cameraPosition; // Offset: 64
    keen::GraphicsMatrix43 cameraCenteredToViewMatrix; // Offset: 80
    keen::uint candidateCount; // Offset: 128
};

struct ShaderModelChunkInstanceCullingPushConstants {
    keen::uint chunkCandidateIndex; // Offset: 0
};

struct ShaderModelChunkDrawData {
    keen::float3 positionScale; // Offset: 0
    keen::uint materialIndex; // Offset: 12
    keen::float3 positionOffset; // Offset: 16
};

struct ShaderModelChunkDraw {
    keen::uint packedChunkIndexAndMeshCounterIndex; // Offset: 0
    keen::uint instanceIndex; // Offset: 4
};

struct ShaderModelChunkRenderInstance {
    keen::float3 cameraRelativePosition; // Offset: 0
    keen::float scale; // Offset: 12
    keen::float4 orientation; // Offset: 16
};

struct ShaderModelChunkPushConstant {
    keen::uint baseDrawIndex; // Offset: 0
    keen::uint isRunningOnSteamDeck; // Offset: 4
};

struct ShaderModelChunkWriteDrawCommandsPushConstants {
    keen::uint batchIndex; // Offset: 0
    keen::uint maxMeshCount; // Offset: 4
};

struct ShaderModelChunkWriteInstanceDataConstants {
    keen::ds::PackedShaderWorldPositionUniform cameraPosition; // Offset: 0
};

struct ShaderModelChunkBatchPrepareShaderParameters {
    keen::uint groupSize; // Offset: 0
};

struct MotionVectorsShaderParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::float2 cancelJitter; // Offset: 16
    keen::GraphicsMatrix44 prevViewProjectionMatrix; // Offset: 32
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 96
};

struct MotionVectorsDebugShaderParameters {
    keen::uint2 targetSize; // Offset: 0
    keen::float2 inverseTargetSize; // Offset: 8
};

struct FFX_ParallelSortCB {
    keen::uint NumKeys; // Offset: 0
    keen::int NumBlocksPerThreadGroup; // Offset: 4
    keen::uint NumThreadGroups; // Offset: 8
    keen::uint NumThreadGroupsWithAdditionalBlocks; // Offset: 12
    keen::uint NumReduceThreadgroupPerBin; // Offset: 16
    keen::uint NumScanValues; // Offset: 20
    keen::uint _pad0; // Offset: 24
    keen::uint _pad1; // Offset: 28
};

struct KEEN_VFX_ParallelSortData {
    keen::float highSortKey; // Offset: 0
    keen::float lowSortKey; // Offset: 4
    keen::uint instanceIndex; // Offset: 8
    keen::uint _pad; // Offset: 12
};

struct FFX_SetupIndirectCB {
    keen::uint NumKeysCounterByteOffset; // Offset: 0
    keen::uint MaxNumKeys; // Offset: 4
    keen::uint MaxThreadGroups; // Offset: 8
};

struct FFX_RootConstantData {
    keen::uint CShiftBit; // Offset: 0
};

struct PbrMaterialScalarValue {
    keen::float32 value; // Offset: 0
    keen::ObjectReference<keen::ds::Image> image; // Offset: 4
};

struct PbrMaterialColorValue {
    keen::Color value; // Offset: 0
    keen::ObjectReference<keen::ds::Image> image; // Offset: 4
};

struct PbrMaterialParameters {
    keen::ds::PbrMaterialColorValue emissive; // Offset: 0
    keen::float32 emissiveMapIntensity; // Offset: 20
    keen::float32 emissiveExposureCorrectionFactor; // Offset: 24
    keen::float32 emissiveGiFactor; // Offset: 28
    keen::ds::PbrMaterialColorValue albedo; // Offset: 32
    keen::ds::PbrMaterialScalarValue metallic; // Offset: 52
    keen::ds::PbrMaterialScalarValue roughness; // Offset: 72
    keen::ds::PbrMaterialScalarValue reflectance; // Offset: 92
    keen::ObjectReference<keen::ds::Image> normal; // Offset: 112
    keen::ObjectReference<keen::ds::Image> height; // Offset: 128
    keen::ObjectReference<keen::ds::Image> ao; // Offset: 144
    keen::bool enableLavaShader; // Offset: 160
    keen::ObjectReference<keen::ds::Image> distortionMap; // Offset: 164
    keen::ObjectReference<keen::ds::Image> lightningMap; // Offset: 180
    keen::ObjectReference<keen::ds::Image> gradientMap; // Offset: 196
    keen::float32 distortionMapScale; // Offset: 212
    keen::float32 distortionMapSpeed; // Offset: 216
    keen::float32 distortionMapIntensity; // Offset: 220
    keen::float32 lightningMapScrollSpeed; // Offset: 224
    keen::float32 lightningMapIntensity; // Offset: 228
};

typedef keen::VertexColorChannelRgb VertexColorChannelRgb;

struct PbrMaterialTintLayer {
    keen::bool enable; // Offset: 0
    keen::ObjectReference<keen::ds::Image> maskMap; // Offset: 4
};

typedef keen::RenderSamplerAddressMode RenderSamplerAddressMode;

struct PbrMaterialLayer {
    keen::ObjectReference<keen::ds::Image> emissiveMap; // Offset: 0
    keen::ObjectReference<keen::ds::Image> albedoMap; // Offset: 16
    keen::ObjectReference<keen::ds::Image> metallicMap; // Offset: 32
    keen::ObjectReference<keen::ds::Image> roughnessMap; // Offset: 48
    keen::ObjectReference<keen::ds::Image> reflectanceMap; // Offset: 64
    keen::ObjectReference<keen::ds::Image> normalMap; // Offset: 80
    keen::ObjectReference<keen::ds::Image> heightMap; // Offset: 96
    keen::ObjectReference<keen::ds::Image> aoMap; // Offset: 112
    keen::ObjectReference<keen::ds::Image> opacityMap; // Offset: 128
    keen::StaticArray<keen::ds::PbrMaterialTintLayer,3> albedoTint; // Offset: 144
    keen::uint8 uvSet; // Offset: 204
    keen::float32 uvScaling; // Offset: 208
    keen::bool uvScalingYEnable; // Offset: 212
    keen::float32 uvScalingY; // Offset: 216
    keen::ds::RenderSamplerAddressMode addressModeU; // Offset: 220
    keen::ds::RenderSamplerAddressMode addressModeV; // Offset: 221
    keen::float32 heightBias; // Offset: 224
    keen::bool enableAnisotropy; // Offset: 228
    keen::ObjectReference<keen::ds::Image> anisotropicDirectionMap; // Offset: 232
    keen::float32 anisotropy; // Offset: 248
    keen::bool maskAnisotropy; // Offset: 252
    keen::float32 emissiveMapIntensity; // Offset: 256
    keen::float32 emissiveExposureCorrectionFactor; // Offset: 260
    keen::float32 emissiveGiFactor; // Offset: 264
};

typedef keen::PbrMaterialBlendMode PbrMaterialBlendMode;

struct PbrMaterialBlendVertexValue {
    keen::ds::VertexColorChannel blendLayer1Channel; // Offset: 0
};

struct PbrMaterialBlendMap {
    keen::ObjectReference<keen::ds::Image> map; // Offset: 0
    keen::ds::RenderSamplerAddressMode addressModeU; // Offset: 16
    keen::ds::RenderSamplerAddressMode addressModeV; // Offset: 17
    keen::uint8 uvSet; // Offset: 18
    keen::float32 uvScaling; // Offset: 20
    keen::bool uvScalingYEnable; // Offset: 24
    keen::float32 uvScalingY; // Offset: 28
};

struct PbrMaterialOverlayNormalMap {
    keen::ObjectReference<keen::ds::Image> normalMap; // Offset: 0
    keen::ObjectReference<keen::ds::Image> aoMap; // Offset: 16
    keen::ds::RenderSamplerAddressMode addressModeU; // Offset: 32
    keen::ds::RenderSamplerAddressMode addressModeV; // Offset: 33
    keen::uint8 uvSet; // Offset: 34
    keen::float32 uvScaling; // Offset: 36
    keen::bool uvScalingYEnable; // Offset: 40
    keen::float32 uvScalingY; // Offset: 44
    keen::bool useVertexColorChannelWeight; // Offset: 48
    keen::ds::VertexColorChannel vertexColorChannel; // Offset: 49
};

struct PbrTranslucency {
    keen::float32 strength; // Offset: 0
    keen::ObjectReference<keen::ds::Image> thicknessMap; // Offset: 4
    keen::Color color; // Offset: 20
    keen::float viewDependency; // Offset: 24
    keen::float wrapShadingStrength; // Offset: 28
};

struct PbrMaterial {
    keen::DsArray<keen::ds::PbrMaterialLayer> blendLayers; // Offset: 0
    keen::ds::PbrMaterialBlendMode blendMode; // Offset: 40
    keen::ds::PbrMaterialBlendVertexValue blendVertexVertexValue; // Offset: 41
    keen::ds::PbrMaterialBlendMap blendMap; // Offset: 44
    keen::ds::PbrMaterialOverlayNormalMap overlayNormalLayer; // Offset: 76
    keen::bool multiplyEmissiveByVertexColor; // Offset: 128
    keen::ds::VertexColorChannelRgb multiplyEmissiveVertexColorChannel; // Offset: 129
    keen::bool multiplyAlbedoByVertexColor; // Offset: 130
    keen::ds::VertexColorChannelRgb multiplyAlbedoVertexColorChannel; // Offset: 131
    keen::bool multiplyAoByVertexColorChannel; // Offset: 132
    keen::ds::VertexColorChannel multiplyAoVertexColorChannel; // Offset: 133
    keen::bool multiplyAlphaByVertexAlpha; // Offset: 134
    keen::ds::PbrTranslucency translucency; // Offset: 136
    keen::bool enableGiWrapShading; // Offset: 168
    keen::bool adjustGiNormals; // Offset: 169
    keen::bool enableGiSpecular; // Offset: 170
    keen::bool enableBackfaceCulling; // Offset: 171
    keen::bool useFlippedBackfaceNormals; // Offset: 172
    keen::bool enableAlphaBlending; // Offset: 173
    keen::bool enableAlphaTest; // Offset: 174
    keen::bool enableShadowAlphaTest; // Offset: 175
    keen::bool enableHashedAlphaTest; // Offset: 176
    keen::bool disableFrostShader; // Offset: 177
    keen::bool disableSnowShader; // Offset: 178
    keen::bool disableWetnessShader; // Offset: 179
    keen::bool enableFrostShaderGlitter; // Offset: 180
    keen::bool enableGradientMapSupport; // Offset: 181
    keen::bool enableTessellation; // Offset: 182
    keen::float32 tessellationStartDistance; // Offset: 184
    keen::float32 tessellationSubdivisions; // Offset: 188
    keen::float32 displacementScale; // Offset: 192
    keen::float32 displacementOffset; // Offset: 196
    keen::bool enableShadows; // Offset: 200
    keen::bool enableContactShadows; // Offset: 201
    keen::ds::DissolveMaterialParameters dissolve; // Offset: 204
};

struct PbrMaterialEmissiveMapShaderData {
    keen::float32 intensity; // Offset: 0
    keen::float32 exposureCorrectionFactor; // Offset: 4
};

struct PbrMaterialTintShaderData {
    keen::uint32 enableLayerBitMask; // Offset: 0
    keen::StaticArray<keen::ds::StreamedTexture2D_float,3> maskMaps; // Offset: 4
};

struct PbrMaterialDisplacementSettings {
    keen::float32 scale; // Offset: 0
    keen::float32 offset; // Offset: 4
};

struct PbrTerrainMaterialLayer {
    keen::ObjectReference<keen::ds::Image> albedoMap; // Offset: 0
    keen::ObjectReference<keen::ds::Image> roughnessMap; // Offset: 16
    keen::ObjectReference<keen::ds::Image> normalMap; // Offset: 32
    keen::ObjectReference<keen::ds::Image> heightMap; // Offset: 48
    keen::ObjectReference<keen::ds::Image> aoMap; // Offset: 64
    keen::float32 tilingSize; // Offset: 80
};

struct PbrTerrainMaterialBlendingSmoothness {
    keen::float32 position; // Offset: 0
    keen::float32 smoothness; // Offset: 4
    keen::float32 heightBias; // Offset: 8
};

struct PbrTerrainMaterialCenterBlendingSmoothness {
    keen::float32 smoothness; // Offset: 0
    keen::float32 heightBias; // Offset: 4
};

typedef keen::PbrTerrainMaterialDetailNormalBlendMode PbrTerrainMaterialDetailNormalBlendMode;

struct PbrTerrainMaterialDisplacementLayer {
    keen::float32 scale; // Offset: 0
    keen::float32 origin; // Offset: 4
};

struct PbrBuildingNoiseBlendRange {
    keen::float32 min; // Offset: 0
    keen::float32 max; // Offset: 4
};

struct PbrBuildingMaterialDisplacementLayer {
    keen::float32 scale; // Offset: 0
    keen::float32 offset; // Offset: 4
};

struct PbrBuildingMaterial {
    keen::ds::PbrMaterialLayer baseMaterialSide; // Offset: 0
    keen::ds::PbrBuildingMaterialDisplacementLayer baseMaterialSideDisplacement; // Offset: 268
    keen::ds::PbrMaterialLayer baseMaterialTop; // Offset: 276
    keen::ds::PbrBuildingMaterialDisplacementLayer baseMaterialTopDisplacement; // Offset: 544
    keen::ds::PbrMaterialLayer baseMaterialBottom; // Offset: 552
    keen::ds::PbrBuildingMaterialDisplacementLayer baseMaterialBottomDisplacement; // Offset: 820
    keen::ds::PbrMaterialLayer edgeMaterial; // Offset: 828
    keen::ds::PbrBuildingMaterialDisplacementLayer edgeMaterialDisplacement; // Offset: 1096
    keen::ds::PbrBuildingMaterialDisplacementLayer edgeMaterialTopDisplacement; // Offset: 1104
    keen::ds::PbrMaterialLayer noiseMaterial; // Offset: 1112
    keen::ds::PbrBuildingMaterialDisplacementLayer noiseMaterialDisplacement; // Offset: 1380
    keen::float32 edgeBlendingCurve; // Offset: 1388
    keen::ds::PbrBuildingNoiseBlendRange noiseBlendRange; // Offset: 1392
    keen::bool edgeOnlySide; // Offset: 1400
    keen::float32 bevelRadius; // Offset: 1404
    keen::ds::BuildingMappingType mapping; // Offset: 1408
};

struct PbrBuildingDetailScatterLayerTop {
};

struct PbrBuildingDetailScatterLayerSide {
};

struct PbrBuildingDetailScatterLayerBottom {
};

struct PbrBuildingDetailScatterLayerNoise {
};

typedef keen::PbrRfxRenderMaterialFlag PbrRfxRenderMaterialFlag;

typedef keen::PbrRfxRenderMaterialFlagMask PbrRfxRenderMaterialFlagMask;

struct RfxSampler {
    keen::uint32 id; // Offset: 0
};

struct PbrRfxRenderMaterial {
    keen::uint32 layerParameters; // Offset: 0
    keen::ds::StreamedTexture2D_float blendMap; // Offset: 4
    keen::float2 blendMapTexcoordScaling; // Offset: 8
    keen::StaticArray<keen::ds::StreamedTexture2D_float4,2> albedoMap; // Offset: 16
    keen::StaticArray<keen::ds::StreamedTexture2D_float4,2> normalMap; // Offset: 24
    keen::StaticArray<keen::ds::StreamedTexture2D_float4,2> emissiveMap; // Offset: 32
    keen::StaticArray<keen::ds::StreamedTexture2D_float4,2> materialParamsMap; // Offset: 40
    keen::StaticArray<keen::ds::StreamedTexture2D_float,2> heightMap; // Offset: 48
    keen::StaticArray<keen::ds::RfxSampler,2> layerSampler; // Offset: 56
    keen::StaticArray<keen::float2,2> texCoordScaling; // Offset: 64
    keen::StaticArray<keen::ds::StreamedTexture2D_float4,2> anisotropyDirectionMap; // Offset: 80
    keen::StaticArray<keen::float,2> anisotropyStrength; // Offset: 88
    keen::StaticArray<keen::float,2> constantReflectance; // Offset: 96
    keen::StaticArray<keen::ds::PbrMaterialTintShaderData,2> albedoTintShaderData; // Offset: 104
    keen::StaticArray<keen::float,2> heightBlendingRange; // Offset: 136
    keen::uint32 multiplyEmissiveVertexColorChannelSwizzle; // Offset: 144
    keen::uint32 multiplyAlbedoVertexColorChannelSwizzle; // Offset: 148
    keen::uint32 multiplyAoVertexColorChannelSwizzle; // Offset: 152
    keen::ds::RfxSampler blendMapSampler; // Offset: 156
    keen::float translucencyStrength; // Offset: 160
    keen::ds::StreamedTexture2D_float translucencyMap; // Offset: 164
    keen::StaticArray<keen::ds::PbrMaterialEmissiveMapShaderData,2> emissiveMapShaderData; // Offset: 168
    keen::ds::StreamedTexture2D_float4 overlayNormalMap; // Offset: 184
    keen::ds::StreamedTexture2D_float overlayAoMap; // Offset: 188
    keen::ds::RfxSampler overlayNormalMapSampler; // Offset: 192
    keen::uint32 overlayNormalMapVertexColorChannelSwizzle; // Offset: 196
    keen::float2 overlayNormalMapTexCoordScaling; // Offset: 200
    keen::float3 dissolveEdgeGlowColor; // Offset: 208
    keen::float32 dissolveEdgeGlowWidthInv; // Offset: 220
    keen::float32 dissolveEdgeGlowParam; // Offset: 224
    keen::ds::BindlessTexture3D_float dissolveNoiseMap; // Offset: 228
    keen::float32 dissolveNoiseTiling; // Offset: 232
    keen::float32 dissolveNoiseFadeRange; // Offset: 236
    keen::uint32 flags; // Offset: 240
};

struct post_processing.NightAdaptation {
    keen::bool enable; // Offset: 0
    keen::float strength; // Offset: 4
};

struct post_processing.WhiteBalance {
    keen::bool enable; // Offset: 0
    keen::float temperature; // Offset: 4
    keen::float tint; // Offset: 8
};

struct post_processing.ChannelMixer {
    keen::bool enable; // Offset: 0
    keen::HdrColorRgb r; // Offset: 4
    keen::HdrColorRgb g; // Offset: 20
    keen::HdrColorRgb b; // Offset: 36
};

struct post_processing.WeightedColor {
    keen::HdrColorRgb color; // Offset: 0
    keen::float weight; // Offset: 16
};

struct post_processing.TonalColors {
    keen::bool enable; // Offset: 0
    keen::ds::post_processing::WeightedColor shadows; // Offset: 4
    keen::ds::post_processing::WeightedColor midtones; // Offset: 24
    keen::ds::post_processing::WeightedColor highlights; // Offset: 44
    keen::float shadowStart; // Offset: 64
    keen::float midStart; // Offset: 68
    keen::float midEnd; // Offset: 72
    keen::float highlightEnd; // Offset: 76
};

struct post_processing.ColorChannelWeights {
    keen::float32 red; // Offset: 0
    keen::float32 green; // Offset: 4
    keen::float32 blue; // Offset: 8
};

struct post_processing.SlopeOffsetColor {
    keen::bool enable; // Offset: 0
    keen::ds::post_processing::ColorChannelWeights slope; // Offset: 4
    keen::ds::post_processing::ColorChannelWeights offset; // Offset: 16
    keen::ds::post_processing::ColorChannelWeights power; // Offset: 28
};

struct post_processing.Contrast {
    keen::bool enable; // Offset: 0
    keen::float strength; // Offset: 4
};

struct post_processing.Vibrance {
    keen::bool enable; // Offset: 0
    keen::float strength; // Offset: 4
};

struct post_processing.Saturation {
    keen::bool enable; // Offset: 0
    keen::float strength; // Offset: 4
};

struct post_processing.Curves {
    keen::bool enable; // Offset: 0
    keen::ds::post_processing::ColorChannelWeights shadowGamma; // Offset: 4
    keen::ds::post_processing::ColorChannelWeights midpoint; // Offset: 16
    keen::ds::post_processing::ColorChannelWeights highlightScale; // Offset: 28
};

struct post_processing.ColorFilter {
    keen::bool enable; // Offset: 0
    keen::HdrColorRgb color; // Offset: 4
};

struct post_processing.ColorGrading {
    keen::ds::post_processing::NightAdaptation nightAdaptation; // Offset: 0
    keen::ds::post_processing::WhiteBalance whiteBalance; // Offset: 8
    keen::ds::post_processing::ChannelMixer channelMixer; // Offset: 20
    keen::ds::post_processing::TonalColors tonalColors; // Offset: 72
    keen::ds::post_processing::SlopeOffsetColor slopeOffsetColor; // Offset: 152
    keen::ds::post_processing::Contrast contrast; // Offset: 192
    keen::ds::post_processing::Vibrance vibrance; // Offset: 200
    keen::ds::post_processing::Saturation saturation; // Offset: 208
    keen::ds::post_processing::Curves curves; // Offset: 216
};

struct PostProcessingParameters {
    keen::ds::post_processing::ColorFilter colorFilter; // Offset: 0
    keen::ds::post_processing::ColorGrading colorGrading; // Offset: 20
};

struct TonemappingConstants {
    keen::float4 curve; // Offset: 0
    keen::float3 crosstalkPreSaturation; // Offset: 16
    keen::float hdrMax; // Offset: 28
    keen::float3 crosstalk; // Offset: 32
    keen::float3 crosstalkPostSaturation; // Offset: 48
};

typedef keen::PostProcessingCompositeFlag PostProcessingCompositeFlag;

typedef keen::PostProcessingCompositeFlags PostProcessingCompositeFlags;

struct PostProcessingCompositeConstants {
    keen::uint32 flags; // Offset: 0
    keen::float3 colorFilter; // Offset: 4
    keen::float32 bloomStrength; // Offset: 16
    keen::float32 temporalNoise; // Offset: 20
    keen::float3 lutOffset; // Offset: 32
    keen::float3 lutScale; // Offset: 48
    keen::float4 vignetteColor; // Offset: 64
    keen::float4 flashColor; // Offset: 80
    keen::ds::TonemappingConstants toneMapping; // Offset: 96
};

struct PostProcessingHistogramConstants {
    keen::uint2 targetSize; // Offset: 0
    keen::float32 exposure; // Offset: 8
    keen::float32 inverseExposure; // Offset: 12
    keen::uint32 useSceneBrightness; // Offset: 16
};

struct PostProcessingHistogramResult {
    keen::StaticArray<keen::uint32,256> pixelCount; // Offset: 0
};

struct SceneHistogramShaderParameters {
    keen::uint2 targetSize; // Offset: 0
};

struct BloomConstants {
    keen::float2 halfPixelSize; // Offset: 0
    keen::uint applyBilateralGrid; // Offset: 8
    keen::float bilateralGridDetail; // Offset: 12
    keen::float thresholdLow; // Offset: 16
    keen::float thresholdHigh; // Offset: 20
    keen::float fogContribution; // Offset: 24
    keen::float compression; // Offset: 28
    keen::float scale; // Offset: 32
};

struct ClearBilateralGridConstants {
    keen::uint3 gridSize; // Offset: 0
};

struct FillBilateralGridConstants {
    keen::uint3 gridSize; // Offset: 0
    keen::uint2 sourceSize; // Offset: 16
    keen::float2 oneOverSourceSize; // Offset: 24
    keen::float32 inverseExposure; // Offset: 32
};

struct CopyResultBilateralGridConstants {
    keen::uint3 gridSize; // Offset: 0
};

struct BlurBilateralGridConstants {
    keen::uint3 gridSize; // Offset: 0
    keen::float3 oneOverGridSize; // Offset: 16
};

struct ApplyBilateralGridConstants {
    keen::float3 oneOverGridSize; // Offset: 0
    keen::float inverseExposure; // Offset: 12
    keen::float midPointLogLuminance; // Offset: 16
    keen::float highlightContrastFactor; // Offset: 20
    keen::float shadowContrastFactor; // Offset: 24
    keen::float detailFactor; // Offset: 28
};

struct PrefixSumPrepareConstants {
    keen::uint32 maxElementCount; // Offset: 0
    keen::uint32 counterIndex; // Offset: 4
};

struct SmallPrefixSumShaderParameters {
    keen::uint32 elementCount; // Offset: 0
};

struct RenderShaderVertexAttribute {
    keen::uint8 location; // Offset: 0
    keen::uint8 format; // Offset: 1
};

typedef keen::RenderVertexFormat RenderVertexFormat;

typedef keen::TextureAlphaMode TextureAlphaMode;

typedef keen::TextureContentType TextureContentType;

typedef keen::TextureConverterFlag TextureConverterFlag;

typedef keen::TextureConverterFlags TextureConverterFlags;

struct RenderTextureChannelData {
    keen::ObjectReference<keen::ds::Image> image; // Offset: 0
    keen::ds::TextureChannel sourceChannel; // Offset: 16
    keen::ObjectReference<keen::ds::Image> roughnessNormalMapImage; // Offset: 20
    keen::bool clampRoughnessNormalU; // Offset: 36
    keen::bool clampRoughnessNormalV; // Offset: 37
    keen::ds::TextureChannel targetChannel; // Offset: 38
};

struct RenderMaterialTextureSamplingInfo {
    keen::uint8 vertexAttributeId; // Offset: 0
    keen::float32 scaling; // Offset: 4
};

struct RenderMaterialTextureElement {
    keen::DsArray<keen::ds::RenderTextureChannelData> textureChannels; // Offset: 0
    keen::ds::RenderMaterialTextureSamplingInfo samplingInfo; // Offset: 40
};

struct RenderMaterialTextureData {
    keen::uint32 offset; // Offset: 0
    keen::TextureType textureType; // Offset: 4
    keen::PixelFormat pixelFormat; // Offset: 5
    keen::ds::TextureAlphaMode alphaMode; // Offset: 6
    keen::DsArray<keen::ds::RenderMaterialTextureElement> textureElements; // Offset: 8
    keen::ds::TextureContentType contentType; // Offset: 48
    keen::ds::TextureConverterFlags convertFlags; // Offset: 52
    keen::ds::string name; // Offset: 56
};

typedef keen::RenderSamplerFilterMode RenderSamplerFilterMode;

typedef keen::RenderComparisonFunction RenderComparisonFunction;

struct RenderMaterialSamplerData {
    keen::uint32 offset; // Offset: 0
    keen::ds::RenderSamplerAddressMode addressModeU; // Offset: 4
    keen::ds::RenderSamplerAddressMode addressModeV; // Offset: 5
    keen::ds::RenderSamplerAddressMode addressModeW; // Offset: 6
    keen::ds::RenderSamplerFilterMode minFilter; // Offset: 7
    keen::ds::RenderSamplerFilterMode magFilter; // Offset: 8
    keen::ds::RenderSamplerFilterMode mipFilter; // Offset: 9
    keen::ds::RenderComparisonFunction comparisonFunction; // Offset: 10
};

typedef keen::RenderEffectId RenderEffectId;

typedef keen::RenderMaterialFlagMask RenderMaterialFlagMask;

struct RenderMaterialConverterData {
    keen::Guid objectId; // Offset: 0
    keen::ds::string description; // Offset: 16
    keen::ds::RenderEffectId effectId; // Offset: 56
    keen::ds::RenderMaterialFlagMask flags; // Offset: 57
    keen::DsArray<keen::uint8> data; // Offset: 64
    keen::HashKey32 dataTypeSignature; // Offset: 104
    keen::DsArray<keen::ds::RenderMaterialTextureData> textures; // Offset: 112
    keen::DsArray<keen::ds::RenderMaterialSamplerData> samplers; // Offset: 152
    keen::ds::RenderVertexFormat vertexFormat; // Offset: 192
    keen::HashKey32 instanceDataTypeNameHash; // Offset: 196
};

typedef keen::RenderMemoryAllocatorObjectType RenderMemoryAllocatorObjectType;

struct RenderMemoryAllocatorObjectState {
    keen::ds::RenderMemoryAllocatorObjectType type; // Offset: 0
    keen::ds::string name; // Offset: 8
    keen::uint32 allocationRegionHandle; // Offset: 48
    keen::uint32 allocationMemoryType; // Offset: 52
    keen::uint64 allocationBlockHandle; // Offset: 56
    keen::uint64 allocationOffset; // Offset: 64
    keen::uint64 allocationSize; // Offset: 72
};

struct RenderMemoryAllocatorAllocationState {
    keen::uint32 handle; // Offset: 0
    keen::ds::string name; // Offset: 8
    keen::DsArray<keen::ds::RenderMemoryAllocatorObjectState> objects; // Offset: 48
};

struct RenderMemoryAllocatorBlockState {
    keen::uint64 handle; // Offset: 0
    keen::uint64 sizeInBytes; // Offset: 8
    keen::uint32 refCount; // Offset: 16
};

struct RenderMemoryAllocatorRegionMemoryTypeState {
    keen::uint32 memoryType; // Offset: 0
    keen::uint8 graphicsDeviceMemoryTypeIndex; // Offset: 4
    keen::bool isMapped; // Offset: 5
    keen::DsArray<keen::ds::RenderMemoryAllocatorBlockState> blocks; // Offset: 8
};

struct RenderMemoryAllocatorRegionState {
    keen::uint32 handle; // Offset: 0
    keen::ds::string name; // Offset: 8
    keen::GraphicsDeviceMemoryPriority priority; // Offset: 48
    keen::uint64 chunkSize; // Offset: 56
    keen::DsArray<keen::ds::RenderMemoryAllocatorRegionMemoryTypeState> memoryTypes; // Offset: 64
};

struct RenderMemoryAllocatorState {
    keen::DsArray<keen::ds::RenderMemoryAllocatorAllocationState> allocations; // Offset: 0
    keen::DsArray<keen::ds::RenderMemoryAllocatorRegionState> regions; // Offset: 40
};

struct RenderResources {
    keen::ObjectReference<keen::ds::RenderSystemResource> renderSystem; // Offset: 0
    keen::ObjectReference<keen::ds::WorldMaterialBlending2Resource> worldMaterialBlending2; // Offset: 16
    keen::ObjectReference<keen::ds::BuildingMaterialBlendingResource> buildingMaterialBlending; // Offset: 32
    keen::ObjectReference<keen::ds::GiVoxelBuildingMaterialResource> giVoxelBuildingMaterial; // Offset: 48
    keen::ObjectReference<keen::ds::DetailScatterResource> worldDetailScatter; // Offset: 64
    keen::ObjectReference<keen::ds::DetailScatterResource> buildingDetailScatter; // Offset: 80
    keen::ObjectReference<keen::ds::AnalyticFogResource> analyticFog; // Offset: 96
    keen::ObjectReference<keen::ds::VolumetricFog2Resource> volumetricFog2; // Offset: 112
    keen::ObjectReference<keen::ds::VolumetricFogGridRenderParameters> volumetricFogGridParameters; // Offset: 128
    keen::DsArray<keen::ObjectReference<keen::ds::GpcResource>> gpcResources; // Offset: 144
    keen::ObjectReference<keen::ds::ColorPaletteCollection> colorPaletteCollection; // Offset: 184
};

struct RenderSceneCaptureModel {
    keen::WorldTransform transform; // Offset: 0
    keen::ObjectReference<keen::ds::RenderModel> modelResource; // Offset: 56
};

typedef keen::RenderLightType RenderLightType;

struct RenderLight {
    keen::ds::RenderLightType type; // Offset: 0
    keen::HdrColorRgb color; // Offset: 4
    keen::bool castShadows; // Offset: 20
    keen::float32 radius; // Offset: 24
};

struct RenderSceneCaptureLight {
    keen::WorldTransform transform; // Offset: 0
    keen::ds::RenderLight light; // Offset: 56
};

struct RenderSceneCaptureVfxInstance {
    keen::WorldTransform transform; // Offset: 0
    keen::ObjectReference<keen::ds::VfxResource> vfxResource; // Offset: 56
    keen::float4 color; // Offset: 72
    keen::float4 param0; // Offset: 88
    keen::float4 param1; // Offset: 104
    keen::float4 param2; // Offset: 120
    keen::float4 param3; // Offset: 136
    keen::Time startTime; // Offset: 152
    keen::bool isActive; // Offset: 160
    keen::bool killWhenCulled; // Offset: 161
};

struct RenderSceneCaptureChunk {
    keen::WorldTransform transform; // Offset: 0
    keen::ContentHash voxelData; // Offset: 56
};

struct RenderSceneCapture {
    keen::WorldTransform captureViewTransform; // Offset: 0
    keen::DsArray<keen::ds::RenderSceneCaptureModel> models; // Offset: 56
    keen::DsArray<keen::ds::RenderSceneCaptureLight> lights; // Offset: 96
    keen::DsArray<keen::ds::RenderSceneCaptureVfxInstance> vfxInstances; // Offset: 136
};

typedef keen::RenderAntiAliasingSettingsValidMask RenderAntiAliasingSettingsValidMask;

typedef keen::RenderTextureQualitySettingsValidMask RenderTextureQualitySettingsValidMask;

struct RenderSettingsFeatures {
    keen::ds::RenderAntiAliasingSettingsValidMask antialiasingValidMask; // Offset: 0
    keen::ds::RenderTextureQualitySettingsValidMask textureQualityValidMask; // Offset: 4
};

typedef keen::RenderSettingsPreset RenderSettingsPreset;

typedef keen::RenderAntiAliasingSetting RenderAntiAliasingSetting;

typedef keen::RenderFsr2PresetSetting RenderFsr2PresetSetting;

typedef keen::RenderFsr3PresetSetting RenderFsr3PresetSetting;

typedef keen::RenderDlssPresetSetting RenderDlssPresetSetting;

typedef keen::RenderTextureQualitySetting RenderTextureQualitySetting;

typedef keen::RenderShadowQualitySetting RenderShadowQualitySetting;

typedef keen::RenderContactShadowsSetting RenderContactShadowsSetting;

typedef keen::RenderGiSetting RenderGiSetting;

typedef keen::RenderReflectionsSetting RenderReflectionsSetting;

typedef keen::RenderFogQualitySetting RenderFogQualitySetting;

typedef keen::RenderFogVolumetricShadowQualitySetting RenderFogVolumetricShadowQualitySetting;

typedef keen::RenderSsaoSetting RenderSsaoSetting;

typedef keen::RenderDistantObjectsSetting RenderDistantObjectsSetting;

typedef keen::RenderDecoObjectsSetting RenderDecoObjectsSetting;

typedef keen::RenderDetailScatteringSetting RenderDetailScatteringSetting;

typedef keen::RenderVoxelMeshQualitySetting RenderVoxelMeshQualitySetting;

typedef keen::RenderTessellationSetting RenderTessellationSetting;

typedef keen::RenderPointLightShadowsSetting RenderPointLightShadowsSetting;

struct RenderSettings {
    keen::ds::RenderSettingsPreset preset; // Offset: 0
    keen::ds::RenderAntiAliasingSetting antiAliasing; // Offset: 4
    keen::ds::RenderFsr2PresetSetting fsr2; // Offset: 8
    keen::ds::RenderFsr3PresetSetting fsr3; // Offset: 12
    keen::ds::RenderDlssPresetSetting dlss; // Offset: 16
    keen::ds::RenderTextureQualitySetting textures; // Offset: 20
    keen::ds::RenderShadowQualitySetting shadows; // Offset: 24
    keen::ds::RenderContactShadowsSetting contactShadows; // Offset: 28
    keen::ds::RenderGiSetting dynamicGi; // Offset: 32
    keen::ds::RenderReflectionsSetting reflections; // Offset: 36
    keen::ds::RenderFogQualitySetting fog; // Offset: 40
    keen::ds::RenderFogVolumetricShadowQualitySetting volumetricShadow; // Offset: 44
    keen::ds::RenderSsaoSetting ssao; // Offset: 48
    keen::ds::RenderDistantObjectsSetting distantObjects; // Offset: 52
    keen::ds::RenderDecoObjectsSetting decoObjects; // Offset: 56
    keen::ds::RenderDetailScatteringSetting detailScattering; // Offset: 60
    keen::ds::RenderVoxelMeshQualitySetting voxelMeshQuality; // Offset: 64
    keen::ds::RenderTessellationSetting tessellation; // Offset: 68
    keen::ds::RenderPointLightShadowsSetting pointLightShadows; // Offset: 72
    keen::float32 sharpness; // Offset: 76
};

struct RenderSettingsGpuPresets {
};

typedef keen::RenderSettingsGpuTargetResolution RenderSettingsGpuTargetResolution;

typedef keen::RenderSettingsGpuTargetFps RenderSettingsGpuTargetFps;

struct RenderSettingsGpuMapping {
    keen::ds::RenderSettingsGpuTargetResolution targetResolution; // Offset: 0
    keen::ds::RenderSettingsGpuTargetFps targetFps; // Offset: 4
    keen::ds::RenderSettings settings; // Offset: 8
};

struct RenderSettingsGpuMatch {
    keen::ds::string name; // Offset: 0
};

struct RenderSettingsGpuPresetsResource {
    keen::DsArray<keen::ds::RenderSettingsGpuPresetsResourceGpu> gpus; // Offset: 0
    keen::DsArray<keen::ds::RenderSettingsGpuPresetResource> presets; // Offset: 40
};

struct RenderSettingsGpuPresetsResourceGpu {
    keen::HashKey32 nameHash; // Offset: 0
    keen::uint32 presetIndex; // Offset: 4
};

struct RenderSettingsGpuPresetResource {
    keen::ds::RenderSettings settings; // Offset: 0
    keen::uint32 targetPixelCount; // Offset: 80
    keen::uint32 targetFps; // Offset: 84
};

struct ForwardPointLightData {
    keen::float3 position; // Offset: 0
    keen::float32 sqrRadius; // Offset: 12
    keen::float3 color; // Offset: 16
    keen::float falloffWeight; // Offset: 28
    keen::uint32 uniqueId; // Offset: 32
    keen::uint32 enableShadows; // Offset: 36
    keen::float radius; // Offset: 40
    keen::uint32 pad2; // Offset: 44
};

struct ForwardDecalData {
    keen::GraphicsMatrix43 decalTransform; // Offset: 0
    keen::float4 worldBoundingSphere; // Offset: 48
    keen::float4 color; // Offset: 64
    keen::float4 emissiveTintAndAlpha; // Offset: 80
    keen::uint32 materialDataIndex; // Offset: 96
    keen::float32 normalFade; // Offset: 100
    keen::uint layerMask; // Offset: 104
    keen::uint enableTransparencyCompositionMask; // Offset: 108
};

struct ClusterCullingInfo {
    keen::uint3 clusterSize; // Offset: 0
    keen::uint32 enableOverdraw; // Offset: 12
    keen::float2 inverseViewportSize; // Offset: 16
    keen::float32 zNear; // Offset: 24
    keen::float32 zFar; // Offset: 28
};

struct RenderWeatherMaskResource {
    keen::ds::RenderTexture mask; // Offset: 0
};

struct RenderWeatherResource {
    keen::float2 snowBorderRangeMapping; // Offset: 0
    keen::ds::RenderWeatherMaskResource snowBorderMask; // Offset: 8
};

struct RenderWeatherPhenomenonResource {
    keen::ds::RenderTexture cloudMap; // Offset: 0
};

struct RenderWeatherRasterCouldsParameters {
    keen::float32 invRenderTargetSize; // Offset: 0
};

struct RenderWeatherRasterCloudsInstanceData {
    keen::float4 transformM; // Offset: 0
    keen::float2 transformT; // Offset: 16
    keen::uint32 data; // Offset: 24
    keen::ds::BindlessTexture2D_float4 cloudMap; // Offset: 28
    keen::ds::BindlessTexture2D_float restrictMask; // Offset: 32
    keen::ds::BindlessTexture2D_float excludeMask; // Offset: 36
};

struct RenderWeatherWeatherMapSubtractParameters {
    keen::float32 wetnessValue; // Offset: 0
    keen::float32 puddleValue; // Offset: 4
};

struct RenderWeatherWeatherMapAddParameters {
    keen::float32 rainWetnessValue; // Offset: 0
    keen::float32 rainPuddleValue; // Offset: 4
};

struct RenderWeatherDynamicWetnessSampleUpload {
    keen::uint32 pointIndex; // Offset: 0
    keen::sint32 instanceIndex; // Offset: 4
    keen::sint32 boneIndex; // Offset: 8
    keen::float3 localPosition; // Offset: 12
};

struct RenderWeatherDynamicWetnessSample {
    keen::sint32 instanceIndex; // Offset: 0
    keen::sint32 boneIndex; // Offset: 4
    keen::float3 localPosition; // Offset: 8
};

struct RenderWeatherDynamicWetnessUpdateConstants {
    keen::uint32 uploadCount; // Offset: 0
    keen::float dryWetnessValue; // Offset: 4
    keen::float addRainWetnessValue; // Offset: 8
    keen::ds::PackedShaderWorldPositionUniform cameraPosition; // Offset: 16
    keen::ds::WeatherSampleConstants weatherSampleConstants; // Offset: 32
};

struct RenderWeatherFilterDynamicHeightmapConstants {
    keen::float2 rcpTextureSize; // Offset: 0
};

typedef keen::RenderWeatherInstanceFlags RenderWeatherInstanceFlags;

struct RenderWeatherInstanceParameters {
    keen::float2 positionXZ; // Offset: 0
    keen::Angle orientation; // Offset: 8
    keen::float2 scaleXZ; // Offset: 12
    keen::float32 strength; // Offset: 20
    keen::float32 rainThreshold; // Offset: 24
    keen::ds::RenderWeatherInstanceFlags flags; // Offset: 28
};

struct RenderWeatherDebugInstanceState {
    keen::uint32 handle; // Offset: 0
    keen::ds::RenderWeatherInstanceParameters parameters; // Offset: 4
};

struct RenderWeatherDebugState {
    keen::bool debugDrawInstances; // Offset: 0
    keen::DsArray<keen::ds::RenderWeatherDebugInstanceState> instances; // Offset: 8
};

struct RenderWeatherDebugUpdateDebugDrawInstances {
    keen::bool debugDrawInstances; // Offset: 0
};

struct RenderWeatherDebugAddInstance {
    keen::ObjectReference<keen::ds::RenderWeatherPhenomenonResource> phenomenon; // Offset: 0
    keen::ds::RenderWeatherInstanceParameters parameters; // Offset: 16
};

struct RenderWeatherDebugRemoveInstance {
    keen::uint32 handle; // Offset: 0
};

struct RenderWeatherDebugSetInstanceParameters {
    keen::uint32 handle; // Offset: 0
    keen::ds::RenderWeatherInstanceParameters parameters; // Offset: 4
};

typedef keen::RenderWeatherInstanceFlag RenderWeatherInstanceFlag;

typedef keen::RenderWeatherDebugMode RenderWeatherDebugMode;

typedef keen::Fsr3QualityPreset Fsr3QualityPreset;

typedef keen::RenderUpscaleTechnique RenderUpscaleTechnique;

typedef keen::RenderFeatureFlag RenderFeatureFlag;

typedef keen::RenderFeatureFlags RenderFeatureFlags;

struct BlendShapeId {
};

typedef keen::BeaufortWindForce BeaufortWindForce;

struct ShaderDataPrimitiveTypes {
    keen::sint32 f0; // Offset: 0
    keen::float32 f1; // Offset: 4
    keen::sint64 f2; // Offset: 8
    keen::float4 f3; // Offset: 16
    keen::float3 f4; // Offset: 32
    keen::float2 f5; // Offset: 44
    keen::uint3 f6; // Offset: 52
    keen::uint4 f7; // Offset: 64
};

struct RenderColorGradingMap {
    keen::ObjectReference<keen::ds::Image> image; // Offset: 0
};

struct RenderColorGradingMapResource {
    keen::ContentHash content; // Offset: 0
    keen::ds::string debugName; // Offset: 16
};

typedef keen::ObjectReference<keen::ds::RenderColorGradingMapResource> RenderColorGradingMapReference;

typedef keen::RenderViewDebugDrawMode RenderViewDebugDrawMode;

typedef keen::RenderDescriptorSetId RenderDescriptorSetId;

typedef keen::RenderSubpassIndex RenderSubpassIndex;

typedef keen::RenderPipelineStage RenderPipelineStage;

typedef keen::ShaderCompileSourceLanguage ShaderCompileSourceLanguage;

typedef keen::RenderPrimitiveType RenderPrimitiveType;

struct RenderSampler {
    keen::ds::RenderSamplerAddressMode addressModeU; // Offset: 0
    keen::ds::RenderSamplerAddressMode addressModeV; // Offset: 1
    keen::ds::RenderSamplerAddressMode addressModeW; // Offset: 2
    keen::ds::RenderSamplerFilterMode minFilter; // Offset: 3
    keen::ds::RenderSamplerFilterMode magFilter; // Offset: 4
    keen::ds::RenderSamplerFilterMode mipFilter; // Offset: 5
    keen::ds::RenderComparisonFunction comparisonFunction; // Offset: 6
    keen::bool anisotropyEnable; // Offset: 7
};

typedef keen::RenderParameterBlockPatchPointType RenderParameterBlockPatchPointType;

struct RenderParameterBlockPatchPoint {
    keen::ds::RenderParameterBlockPatchPointType type; // Offset: 0
    keen::uint32 offset; // Offset: 4
    keen::uint32 size; // Offset: 8
    keen::uint32 parameterIndex; // Offset: 12
};

struct RenderVertexAttribute {
    keen::uint8 location; // Offset: 0
    keen::uint8 format; // Offset: 1
    keen::uint8 stream; // Offset: 2
};

typedef keen::ComputeGroupCountAlgorithm ComputeGroupCountAlgorithm;

struct RenderModelImageSizeInfo {
    keen::float32 texelsPerMeter; // Offset: 0
};

typedef keen::RenderMaterialFlag RenderMaterialFlag;

struct RenderMaterialImage {
    keen::uint32 dataOffset; // Offset: 0
    keen::uint16 width; // Offset: 4
    keen::uint16 height; // Offset: 6
    keen::uint16 depth; // Offset: 8
    keen::uint16 arraySize; // Offset: 10
    keen::uint8 levelCount; // Offset: 12
    keen::TextureType type; // Offset: 13
    keen::PixelFormat format; // Offset: 14
    keen::ContentHash data; // Offset: 16
    keen::bool enableStreaming; // Offset: 32
    keen::ds::string debugName; // Offset: 40
};

struct RenderMaterialSampler {
    keen::uint32 dataOffset; // Offset: 0
    keen::ds::RenderSamplerAddressMode addressModeU; // Offset: 4
    keen::ds::RenderSamplerAddressMode addressModeV; // Offset: 5
    keen::ds::RenderSamplerAddressMode addressModeW; // Offset: 6
    keen::ds::RenderSamplerFilterMode minFilter; // Offset: 7
    keen::ds::RenderSamplerFilterMode magFilter; // Offset: 8
    keen::ds::RenderSamplerFilterMode mipFilter; // Offset: 9
    keen::ds::RenderComparisonFunction comparisonFunction; // Offset: 10
    keen::bool anisotropyEnable; // Offset: 11
};

typedef keen::RfxSamplerId RfxSamplerId;

struct RenderMaterialResource {
    keen::ds::RenderEffectId effectId; // Offset: 0
    keen::ds::RenderMaterialFlagMask flags; // Offset: 1
    keen::DsArray<keen::uint8> data; // Offset: 8
    keen::HashKey32 dataTypeSignature; // Offset: 48
    keen::DsArray<keen::ds::RenderMaterialImage> images; // Offset: 56
    keen::DsArray<keen::ds::RenderMaterialSampler> samplers; // Offset: 96
    keen::ds::string debugName; // Offset: 136
};

typedef keen::ObjectReference<keen::ds::RenderMaterialResource> RenderMaterialResourceReference;

struct RenderMaterialTextureInfo {
    keen::uint3 size; // Offset: 0
    keen::ds::RenderMaterialTextureSamplingInfo samplingInfo; // Offset: 12
};

struct RenderMaterialInfo {
    keen::ds::RenderEffectId effectId; // Offset: 0
    keen::ds::RenderMaterialFlagMask flags; // Offset: 1
    keen::HashKey32 dataTypeSignature; // Offset: 4
    keen::bool hasStreamedTextures; // Offset: 8
    keen::DsArray<keen::ds::RenderMaterialTextureInfo> textures; // Offset: 16
};

struct RenderBlendResourceData {
    keen::ObjectReference<keen::ds::BlendShapeId> id; // Offset: 0
};

struct RenderMaterialMesh {
    keen::AxisAlignedBox aabb; // Offset: 0
    keen::Sphere boundingSphere; // Offset: 32
    keen::ds::RenderEffectId renderEffectId; // Offset: 48
    keen::uint8 clothMeshIndex; // Offset: 49
    keen::ds::RenderMaterialResourceReference material; // Offset: 52
    keen::ds::RenderMaterialFlagMask materialFlags; // Offset: 68
    keen::DsArray<keen::ds::RenderModelImageSizeInfo> materialImageSizeInfos; // Offset: 72
    keen::ContentHash materialModelData; // Offset: 112
    keen::HashKey32 materialModelDataTypeSignatureHash; // Offset: 128
    keen::float3 positionScale; // Offset: 132
    keen::float3 positionOffset; // Offset: 144
    keen::uint32 vertexCount; // Offset: 156
    keen::uint32 indexCount; // Offset: 160
    keen::ContentHash vertexData; // Offset: 164
    keen::ContentHash indexData; // Offset: 180
    keen::ContentHash skinningData; // Offset: 196
    keen::ContentHash blendShapeVertexData; // Offset: 212
    keen::uint32 blendShapeMask; // Offset: 228
    keen::ds::string debugName; // Offset: 232
};

struct RenderModelLod {
    keen::uint32 firstMeshIndex; // Offset: 0
    keen::uint32 meshCount; // Offset: 4
    keen::float32 pixelSize; // Offset: 8
};

typedef keen::RenderRayTraceVertexFormat RenderRayTraceVertexFormat;

struct RenderRayTraceMeshPart {
    keen::uint32 jointIndex; // Offset: 0
    keen::uint32 indexOffset; // Offset: 4
    keen::uint32 indexCount; // Offset: 8
    keen::uint32 vertexOffset; // Offset: 12
    keen::uint32 vertexCount; // Offset: 16
};

struct RenderRayTraceMesh {
    keen::ds::RenderRayTraceVertexFormat vertexFormat; // Offset: 0
    keen::uint32 vertexCount; // Offset: 4
    keen::uint32 indexCount; // Offset: 8
    keen::ContentHash vertexData; // Offset: 12
    keen::ContentHash indexData; // Offset: 28
    keen::DsArray<keen::ds::RenderRayTraceMeshPart> parts; // Offset: 48
};

struct RenderModelClothSleeve {
    keen::float3 center0; // Offset: 0
    keen::float32 radius0; // Offset: 12
    keen::float3 center1; // Offset: 16
    keen::float32 radius1; // Offset: 28
    keen::uint32 upperJointIndex; // Offset: 32
    keen::uint32 lowerJointIndex; // Offset: 36
    keen::uint32 instanceIndex; // Offset: 40
    keen::ContentHash planes; // Offset: 44
    keen::ContentHash particleIndicies; // Offset: 60
};

struct RenderModelSdfMaterial {
    keen::float3 albedo; // Offset: 0
    keen::uint dummy; // Offset: 12
    keen::float3 emissive; // Offset: 16
};

struct RenderModelSdfPart {
    keen::uint3 resolution; // Offset: 0
    keen::uint32 jointIndex; // Offset: 12
    keen::uint8 mipLevelCount; // Offset: 16
    keen::float3 origin; // Offset: 20
    keen::float3 totalSize; // Offset: 32
    keen::ContentHash pixels; // Offset: 44
    keen::ds::RenderModelSdfMaterial material; // Offset: 60
};

struct RenderModelSdfData {
    keen::DsArray<keen::ds::RenderModelSdfPart> parts; // Offset: 0
};

struct RenderGradientMapResource {
    keen::uint16 width; // Offset: 0
    keen::uint8 levelCount; // Offset: 2
    keen::PixelFormat format; // Offset: 3
    keen::ContentHash data; // Offset: 4
    keen::ds::string debugName; // Offset: 24
};

struct RenderModelClothColliderData {
    keen::bool hasSkinning; // Offset: 0
    keen::bool ignoreClothCollider; // Offset: 1
    keen::DsArray<keen::ds::RenderClothColliderSphere> spheres; // Offset: 8
    keen::DsArray<keen::ds::RenderClothColliderCapsule> capsules; // Offset: 48
    keen::DsArray<keen::ds::RenderModelColliderInstanceData> instances; // Offset: 88
};

struct SkinnedTreeModelData {
    keen::DsArray<keen::Matrix43> jointMatrix; // Offset: 0
    keen::DsArray<keen::uint> jointParent; // Offset: 40
    keen::DsArray<keen::ds::SkinnedTreeModelSpringData> jointSpringData; // Offset: 80
    keen::DsArray<keen::uint> leafJoints; // Offset: 120
    keen::DsArray<keen::Matrix43> inverseTransformTree; // Offset: 160
};

struct RenderModel {
    keen::ds::string debugName; // Offset: 0
    keen::DsArray<keen::ds::RenderMaterialMesh> meshes; // Offset: 40
    keen::DsArray<keen::ds::RenderModelLod> lods; // Offset: 80
    keen::AxisAlignedBox aabb; // Offset: 128
    keen::ds::RenderRayTraceMesh rayTraceMesh; // Offset: 160
    keen::ObjectReference<keen::ds::ModelHierarchyResource> hierarchy; // Offset: 248
    keen::uint16 hierarchyJointCount; // Offset: 264
    keen::DsArray<keen::uint16> skinningMap; // Offset: 272
    keen::DsOptional<keen::ds::RenderModelClothData> cloth; // Offset: 312
    keen::DsOptional<keen::ds::RenderModelChainData> chain; // Offset: 328
    keen::ds::RenderModelClothColliderData collider; // Offset: 344
    keen::DsArray<keen::ds::RenderModelClothSleeve> sleeves; // Offset: 472
    keen::DsArray<keen::ds::RenderBlendResourceData> blendShapes; // Offset: 512
    keen::uint32 jointCount; // Offset: 552
    keen::HashKey32 instanceDataTypeNameHash; // Offset: 556
    keen::bool hasCardClusterLod; // Offset: 560
    keen::ds::RenderModelSdfData sdf; // Offset: 568
    keen::ds::SkinnedTreeModelData skinnedTree; // Offset: 608
};

struct RenderClothVertexSkinningData {
    keen::StaticArray<keen::uint8,4> jointIndices; // Offset: 0
    keen::StaticArray<keen::uint8,4> jointWeights; // Offset: 4
};

struct RenderClothFabricResource {
    keen::uint32 numParticles; // Offset: 0
    keen::DsArray<keen::uint32> phaseIndices; // Offset: 8
    keen::DsArray<keen::uint32> sets; // Offset: 48
    keen::DsArray<keen::float> restValues; // Offset: 88
    keen::DsArray<keen::float> stiffnessValues; // Offset: 128
    keen::DsArray<keen::uint32> indices; // Offset: 168
    keen::DsArray<keen::uint32> anchors; // Offset: 208
    keen::DsArray<keen::float> tetherLengths; // Offset: 248
    keen::DsArray<keen::uint32> triangles; // Offset: 288
};

struct RenderClothMeshResource {
    keen::ds::RenderClothFabricResource fabric; // Offset: 0
    keen::DsArray<keen::float3> simulationPositions; // Offset: 328
    keen::DsArray<keen::float32> simulationInvMasses; // Offset: 368
    keen::DsArray<keen::float32> simulationStiffnesses; // Offset: 408
    keen::DsArray<keen::float32> simulationVertexWeights; // Offset: 448
    keen::DsArray<keen::uint3> simulationTriangles; // Offset: 488
    keen::DsArray<keen::uint16> simulationBlendshapeDeltas; // Offset: 528
    keen::DsArray<keen::ds::RenderClothVertexSkinningData> simulationSkinningData; // Offset: 568
    keen::DsArray<keen::uint16> skinnedVertexIndices; // Offset: 608
    keen::DsArray<keen::float3> renderPositions; // Offset: 648
    keen::DsArray<keen::float2> renderUvs; // Offset: 688
    keen::DsArray<keen::uint3> renderTriangles; // Offset: 728
    keen::DsArray<keen::uint16> renderSimulationVertexIndices; // Offset: 768
};

struct RenderClothMesh {
    keen::ContentHash data; // Offset: 0
    keen::float32 gravity; // Offset: 16
    keen::float32 windStrength; // Offset: 20
    keen::float32 dragCoefficient; // Offset: 24
    keen::float32 liftCoefficient; // Offset: 28
    keen::float32 damping; // Offset: 32
    keen::float32 linearInertia; // Offset: 36
    keen::float32 angularInertia; // Offset: 40
    keen::float32 centrifugalInertia; // Offset: 44
    keen::float32 tetherStiffness; // Offset: 48
    keen::float32 phasesStiffness; // Offset: 52
    keen::float32 phasesCompressionLimit; // Offset: 56
    keen::float32 phasesStretchLimit; // Offset: 60
    keen::float32 motionConstraintsStiffness; // Offset: 64
    keen::float32 collisionFriction; // Offset: 68
    keen::float32 solverFrequency; // Offset: 72
    keen::float32 motionConstraintsUnlimitedRadius; // Offset: 76
    keen::float32 motionConstraintsMaxRadius; // Offset: 80
};

struct RenderClothColliderSkinningData {
    keen::StaticArray<keen::uint8,4> jointIndices; // Offset: 0
    keen::StaticArray<keen::uint8,4> jointWeights; // Offset: 4
};

struct RenderClothColliderSphere {
    keen::float3 center; // Offset: 0
    keen::float32 radius; // Offset: 12
    keen::ds::RenderClothColliderSkinningData skinningData; // Offset: 16
};

struct RenderClothColliderCapsule {
    keen::float3 center0; // Offset: 0
    keen::float32 radius0; // Offset: 12
    keen::float3 center1; // Offset: 16
    keen::float32 radius1; // Offset: 28
    keen::ds::RenderClothColliderSkinningData skinningData; // Offset: 32
};

struct RenderModelColliderData {
    keen::bool hasSkinning; // Offset: 0
    keen::DsArray<keen::ds::RenderClothColliderSphere> spheres; // Offset: 8
    keen::DsArray<keen::ds::RenderClothColliderCapsule> capsules; // Offset: 48
};

struct RenderModelColliderInstanceData {
    keen::DsArray<keen::uint8> sphereIndices; // Offset: 0
    keen::DsArray<keen::uint8> capsuleIndices; // Offset: 40
};

struct RenderModelClothData {
    keen::bool hasSkinning; // Offset: 0
    keen::DsArray<keen::ds::RenderClothMesh> meshes; // Offset: 8
};

struct RenderClothColliderResource {
    keen::bool hasSkinning; // Offset: 0
    keen::uint32 maxJointIndex; // Offset: 4
    keen::DsArray<keen::ds::RenderClothColliderSphere> spheres; // Offset: 8
    keen::DsArray<keen::ds::RenderClothColliderCapsule> capsules; // Offset: 48
};

struct RenderModelChainConfig {
    keen::bool propagateRotation; // Offset: 0
    keen::float32 gravity; // Offset: 4
    keen::float32 mass; // Offset: 8
    keen::float32 dragCoefficient; // Offset: 12
    keen::float32 liftCoefficient; // Offset: 16
    keen::float32 stiffnessFrequencey; // Offset: 20
    keen::float32 damping; // Offset: 24
    keen::float32 motionConstraintRadius; // Offset: 28
    keen::float32 linearInertia; // Offset: 32
    keen::float32 angularInertia; // Offset: 36
    keen::float32 centrifugalInertia; // Offset: 40
    keen::float32 phasesStiffness; // Offset: 44
    keen::float32 phasesStiffnessMultiplier; // Offset: 48
    keen::float32 phasesCompressionLimit; // Offset: 52
    keen::float32 phasesStretchLimit; // Offset: 56
    keen::float32 collisionFriction; // Offset: 60
};

struct RenderModelChain {
    keen::Guid guid; // Offset: 0
    keen::uint16 jointBeginIndex; // Offset: 16
    keen::uint16 jointEndIndex; // Offset: 18
    keen::uint16 constraintBeginIndex; // Offset: 20
    keen::uint16 constraintEndIndex; // Offset: 22
    keen::uint8 configIndex; // Offset: 24
    keen::uint8 colliderIndex; // Offset: 25
};

struct RenderModelChainData {
    keen::DsArray<keen::ds::RenderModelChain> chains; // Offset: 0
    keen::DsArray<keen::ds::RenderModelChainConfig> configs; // Offset: 40
    keen::DsArray<keen::ds::RenderModelColliderData> chainColliders; // Offset: 80
    keen::DsArray<keen::uint8> anchorHierarchyJoints; // Offset: 120
    keen::DsArray<keen::Matrix43> anchorDefaultPose; // Offset: 160
    keen::DsArray<keen::float3> anchorRestPosition; // Offset: 200
    keen::DsArray<keen::uint8> joints; // Offset: 240
    keen::DsArray<keen::Matrix43> modelMatrices; // Offset: 280
    keen::DsArray<keen::Matrix43> skinToJointMatrix; // Offset: 320
    keen::DsArray<keen::float3> restPosition; // Offset: 360
    keen::DsArray<keen::uint8> constraintJoints; // Offset: 400
    keen::DsArray<keen::float3> constraints; // Offset: 440
};

struct RenderModelMaterialMeshData {
    keen::AxisAlignedBox aabb; // Offset: 0
    keen::ds::RenderEffectId renderEffectId; // Offset: 32
    keen::uint32 vertexCount; // Offset: 36
    keen::uint32 indexCount; // Offset: 40
    keen::ContentHash vertexData; // Offset: 44
    keen::ContentHash indexData; // Offset: 60
};

struct RenderModelLodMeshData {
    keen::DsArray<keen::ds::RenderModelMaterialMeshData> meshes; // Offset: 0
};

struct RenderModelMeshData {
    keen::DsArray<keen::ds::RenderModelLodMeshData> lods; // Offset: 0
    keen::HashKey32 instanceDataTypeNameHash; // Offset: 40
};

struct RenderModelLodInfo {
    keen::uint32 vertexCount; // Offset: 0
    keen::uint32 indexCount; // Offset: 4
};

struct RenderModelInfo {
    keen::DsArray<keen::ds::RenderModelLodInfo> lods; // Offset: 0
    keen::ObjectReference<keen::ds::ModelHierarchyResource> modelHierarchy; // Offset: 40
};

typedef keen::AnalyticFogShapeType AnalyticFogShapeType;

struct AnalyticFogShape {
    keen::ds::AnalyticFogShapeType type; // Offset: 0
    keen::float3 halfSize; // Offset: 4
    keen::float32 falloff; // Offset: 16
};

struct RenderFogInjection {
    keen::ds::AnalyticFogShape shape; // Offset: 0
    keen::float32 absorption; // Offset: 20
    keen::Color scattering; // Offset: 24
    keen::Color emission; // Offset: 28
    keen::float32 density; // Offset: 32
};

struct RenderFogDissolve {
    keen::ds::AnalyticFogShape shape; // Offset: 0
    keen::float32 strength; // Offset: 20
};

struct RenderModelDrawData2 {
    keen::float4 boundingSphere; // Offset: 0
    keen::uint flags; // Offset: 16
    keen::uint sizeFeedbackIndex; // Offset: 20
    keen::uint firstMesh; // Offset: 24
    keen::uint lodCount; // Offset: 28
    keen::StaticArray<keen::uint,8> lodMeshOffsets; // Offset: 32
    keen::StaticArray<keen::uint,8> lodMeshCounts; // Offset: 64
    keen::StaticArray<keen::float,8> lodPixelSizes; // Offset: 96
};

struct RenderMeshDrawData2 {
    keen::float3 positionScale; // Offset: 0
    keen::uint materialDataIndex; // Offset: 12
    keen::float3 positionOffset; // Offset: 16
    keen::uint pipelineBits; // Offset: 28
    keen::uint indexOffset; // Offset: 32
    keen::uint indexCount; // Offset: 36
    keen::int vertexOffset; // Offset: 40
    keen::uint modelMaterialData; // Offset: 44
    keen::uint skinningDataByteOffsetAndClothMeshIndex; // Offset: 48
    keen::uint blendShapeVertexOffset; // Offset: 52
    keen::uint blendShapeMask; // Offset: 56
    keen::uint vertexCount; // Offset: 60
};

struct RenderInstanceData {
    keen::ds::PackedShaderWorldTransform packedTransform; // Offset: 0
    keen::GraphicsMatrix43 transform; // Offset: 32
    keen::uint32 tintColor; // Offset: 80
    keen::ds::BindlessTexture2D_float4 tintGradientMap; // Offset: 84
    keen::uint32 highlightColorPaletteIndexTransparency; // Offset: 88
    keen::uint32 flagsAndEmissiveFactor; // Offset: 92
    keen::float4 dissolveParameters; // Offset: 96
    keen::float32 dissolveEdgeBrightness; // Offset: 112
    keen::float32 alphaClip; // Offset: 116
    keen::uint32 activeBlendShapeMask; // Offset: 120
    keen::uint32 blendShapeWeights; // Offset: 124
    keen::StaticArray<keen::uint,4> clothMeshDataOffsets; // Offset: 128
    keen::uint32 albedoTintColorIndices; // Offset: 144
    keen::uint32 skinMatrixOffset; // Offset: 148
    keen::uint32 decalLayerMask; // Offset: 152
    keen::uint32 dynamicWetnessOffset; // Offset: 156
    keen::uint32 modelIndex; // Offset: 160
    keen::uint32 groupMask; // Offset: 164
};

struct DetailScatteringInstanceData {
    keen::uint3 packedWorldPosition; // Offset: 0
    keen::uint scaleAndFadeout; // Offset: 12
    keen::float4 orientation; // Offset: 16
};

struct HighlightColorPaletteSettings {
    keen::float highlightAmount; // Offset: 0
    keen::float highlightIntensity; // Offset: 4
    keen::Color invalidHighlightColor; // Offset: 8
    keen::Color validHighlightColor; // Offset: 12
    keen::Color mutedHighlightColor; // Offset: 16
    keen::Color group1HighlightColor; // Offset: 20
    keen::Color group2HighlightColor; // Offset: 24
    keen::Color group3HighlightColor; // Offset: 28
    keen::Color group4HighlightColor; // Offset: 32
};

struct WeatherSurfaceMaterialSettings {
    keen::float snowUVScale; // Offset: 0
    keen::float snowScale; // Offset: 4
    keen::float snowVertexNormalPower; // Offset: 8
    keen::float snowVertexNormalCutoff; // Offset: 12
    keen::float frostUVScale; // Offset: 16
    keen::float frostScale; // Offset: 20
    keen::float frostRoughness; // Offset: 24
    keen::float frostPorosityScale; // Offset: 28
    keen::Color frostAlbedo; // Offset: 32
    keen::Color frostPuddleAlbedo; // Offset: 36
};

struct RenderSystemResource {
    keen::ds::SpecularIblLutResource specularIblLut; // Offset: 0
    keen::ObjectReference<keen::ds::Image> blueNoiseMap; // Offset: 20
    keen::ds::RenderTexture blueNoiseRenderImage; // Offset: 40
    keen::ObjectReference<keen::ds::SlopeDefinition> globalSlopeDefinition; // Offset: 112
    keen::ds::HighlightColorPaletteSettings highlightColorPalette; // Offset: 128
    keen::ds::WeatherSurfaceMaterialSettings weatherSurfaceMaterialSettings; // Offset: 164
    keen::bool verifyDecoObjectMeshCountLimit; // Offset: 204
    keen::bool verifyDetailScatteringMeshCountLimit; // Offset: 205
    keen::ObjectReference<keen::ds::render::AtmosphereParameters> atmosphere; // Offset: 208
    keen::ObjectReference<keen::ds::ZoneVisualizationSettings> zoneVisualizationSettings; // Offset: 224
    keen::ObjectReference<keen::ds::Image> frostBlendMask; // Offset: 240
    keen::ObjectReference<keen::ds::Image> snowRoughness; // Offset: 256
    keen::ObjectReference<keen::ds::Image> snowAlbedo; // Offset: 272
    keen::ObjectReference<keen::ds::Image> snowNormal; // Offset: 288
    keen::ds::RenderTexture frostBlendMaskRenderImage; // Offset: 304
    keen::ds::RenderTexture snowRoughnessRenderImage; // Offset: 376
    keen::ds::RenderTexture snowAlbedoRenderImage; // Offset: 448
    keen::ds::RenderTexture snowNormalRenderImage; // Offset: 520
};

struct RenderModelChunkInstance {
    keen::float3 position; // Offset: 0
    keen::float scale; // Offset: 12
    keen::Quaternion orientation; // Offset: 16
    keen::uint16 modelIndex; // Offset: 32
    keen::bool canBeCulled; // Offset: 34
};

struct RenderModelChunkModelData {
    keen::WorldPosition origin; // Offset: 0
    keen::float3 extents; // Offset: 24
    keen::DsArray<keen::ds::RenderModelChunkInstance> instances; // Offset: 40
    keen::DsArray<keen::uint16> entityIndexMap; // Offset: 80
    keen::DsArray<keen::Guid> modelGuids; // Offset: 120
};

struct RenderModelChunkModelResource {
    keen::ContentHash modelData; // Offset: 0
    keen::HashKey32 modelDataTypeSignatureHash; // Offset: 16
};

struct RenderModelChunkGridResource {
    keen::uint2 chunkCount; // Offset: 0
};

struct GBufferTemporalFilterConstants {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::float temporalWeight; // Offset: 16
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::GraphicsMatrix44 prevViewProjectionMatrix; // Offset: 96
};

struct TransparentMergeStartConstants {
    keen::uint instanceCounterByteOffset; // Offset: 0
    keen::uint maxInstanceCount; // Offset: 4
};

struct TransparentMergePrepareConstants {
    keen::uint maxTriangleCount; // Offset: 0
};

struct VoxelChunklet {
    keen::float4 sphere; // Offset: 0
    keen::float4 normal; // Offset: 16
};

struct GiVoxelMaterial {
    keen::float3 emissive; // Offset: 0
    keen::float3 albedo; // Offset: 12
    keen::float roughness; // Offset: 24
    keen::float metallic; // Offset: 28
    keen::float reflectance; // Offset: 32
};

struct GiVoxelBuildingMaterial {
    keen::ds::GiVoxelMaterial top; // Offset: 0
    keen::ds::GiVoxelMaterial side; // Offset: 36
    keen::ds::GiVoxelMaterial bottom; // Offset: 72
};

struct GiVoxelBuildingMaterialResource {
    keen::DsArray<keen::ds::GiVoxelBuildingMaterial> materials; // Offset: 0
};

struct BakeWorldTriangleMaterialDataVertexShaderParameters {
    keen::uint32 layerCount; // Offset: 0
    keen::uint32 vertexCount; // Offset: 4
    keen::uint32 vertexOffset; // Offset: 8
    keen::uint32 perVertexBakingDataOffset; // Offset: 12
    keen::float4 translationAndScale; // Offset: 16
};

struct BakeWorldTriangleMaterialDataTriangleShaderParameters {
    keen::uint32 triangleCount; // Offset: 0
    keen::uint32 vertexOffset; // Offset: 4
    keen::uint32 indexOffset; // Offset: 8
    keen::uint32 perVertexBakingDataOffset; // Offset: 12
    keen::float4 translationAndScale; // Offset: 16
    keen::uint32 bakedTriangleMaterialDataOffset; // Offset: 32
    keen::uint32 feedbackDataOffset; // Offset: 36
    keen::uint4 debug; // Offset: 48
};

struct PatchMeshVerticesParameters {
    keen::float3 positionOffset; // Offset: 0
    keen::uint vertexCount; // Offset: 12
    keen::float3 positionScale; // Offset: 16
    keen::uint vertexStride; // Offset: 28
    keen::uint vertexOffset; // Offset: 32
};

struct RenderBlendShapeSlot {
    keen::ObjectReference<keen::ds::BlendShapeId> id; // Offset: 0
    keen::float weight; // Offset: 16
};

typedef keen::DetailScatteringPass DetailScatteringPass;

typedef keen::DetailScatteringError DetailScatteringError;

typedef keen::DetailScatteringDebugMode DetailScatteringDebugMode;

struct ScatterModelData {
    keen::ds::GpuModel model; // Offset: 0
};

struct ScatteredObjectData {
    keen::uint modelIndexAndLodIndex; // Offset: 0
    keen::float fadeout; // Offset: 4
};

struct ScatterTriangleCullingShaderParameters {
    keen::ds::PackedShaderWorldPositionUniform cameraWorldPosition; // Offset: 0
    keen::GraphicsMatrix43 cameraCenteredToViewMatrix; // Offset: 16
    keen::uint triangleBinSize; // Offset: 64
    keen::ds::GpuCullingFrustum frustum; // Offset: 80
    keen::ds::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 176
    keen::uint occlusionCullingEnabled; // Offset: 240
    keen::uint chunkletBinSize; // Offset: 244
    keen::float boundingSphereBias; // Offset: 248
    keen::float maxScatterDistance; // Offset: 252
};

struct ScatterTriangleCullingPushConstants {
    keen::uint chunkIndex; // Offset: 0
};

struct ScatterChunkletCullingShaderParameters {
    keen::ds::PackedShaderWorldPositionUniform cameraWorldPosition; // Offset: 0
    keen::GraphicsMatrix43 cameraCenteredToViewMatrix; // Offset: 16
    keen::uint chunkletBinSize; // Offset: 64
    keen::ds::GpuCullingFrustum frustum; // Offset: 80
    keen::ds::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 176
    keen::uint occlusionCullingEnabled; // Offset: 240
    keen::float boundingSphereBias; // Offset: 244
    keen::float maxScatterDistance; // Offset: 248
};

struct ScatterChunkletCullingPushConstants {
    keen::uint jobCount; // Offset: 0
};

struct ScatterObjectPrepareShaderParameters {
    keen::uint targetGroupSize; // Offset: 0
};

struct DetailScatteringShaderData {
    keen::ds::PackedShaderWorldPositionUniform cameraWorldPosition; // Offset: 0
    keen::uint scatteredObjectCounterOffset; // Offset: 16
    keen::uint scatteredObjectCapacity; // Offset: 20
    keen::uint scatteredCandidateCounterOffset; // Offset: 24
    keen::GraphicsMatrix43 cameraCenteredToViewMatrix; // Offset: 32
    keen::GraphicsMatrix44 cameraCenteredViewProjection; // Offset: 80
    keen::float4 frustumPlane0; // Offset: 144
    keen::float4 frustumPlane1; // Offset: 160
    keen::float4 frustumPlane2; // Offset: 176
    keen::float4 frustumPlane3; // Offset: 192
    keen::float4 frustumPlane4; // Offset: 208
    keen::ds::TessellatedMaterialConstants terrainTessellation; // Offset: 224
    keen::ds::DynamicHeightmapSamplingShaderData dynamicHeightmap; // Offset: 240
    keen::uint dynamicHeightmapValid; // Offset: 272
    keen::uint debugMode; // Offset: 276
    keen::uint debugValue; // Offset: 280
    keen::float densityProbability; // Offset: 284
    keen::float modelSizeFeedbackPixelSize; // Offset: 288
    keen::float distanceCullingThreshold; // Offset: 292
    keen::float sizeCullingPixelSize; // Offset: 296
    keen::uint permutationBucketCount; // Offset: 300
    keen::float maxScatterDistance; // Offset: 304
    keen::float invMaxDistanceFadeLength; // Offset: 308
    keen::float displacementFadeoutStart; // Offset: 312
    keen::float displacementFadeoutEnd; // Offset: 316
    keen::float displacementStrength; // Offset: 320
    keen::ds::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 336
    keen::uint occlusionCullingEnabled; // Offset: 400
    keen::uint triangleBinSize; // Offset: 404
};

struct DetailScatteringChunkShaderData {
    keen::float4 translationAndScale; // Offset: 0
    keen::uint indexOffset; // Offset: 16
    keen::uint vertexOffset; // Offset: 20
    keen::uint bakedTriangleMaterialDataOffset; // Offset: 24
    keen::uint triangleCount; // Offset: 28
    keen::uint chunkletOffset; // Offset: 32
    keen::uint chunkletCount; // Offset: 36
};

struct ScatterInstanceOffsetShaderData {
    keen::uint scatterModelCount; // Offset: 0
    keen::uint instanceCounterOffset; // Offset: 4
    keen::ds::DetailScatteringDebugMode debugMode; // Offset: 8
    keen::uint debugValue; // Offset: 12
    keen::uint permutationBucketCount; // Offset: 16
};

struct ScatterInstancesShaderData {
    keen::uint scatteredObjectCounterOffset; // Offset: 0
    keen::ds::DetailScatteringDebugMode debugMode; // Offset: 4
    keen::uint debugValue; // Offset: 8
    keen::uint permutationBucketCount; // Offset: 12
};

struct BiomeMap {
    keen::ds::Biome baseBiome; // Offset: 0
};

struct BiomeMapLayer {
    keen::ds::Biome biome; // Offset: 0
};

struct BiomeMapInfo {
    keen::uint2 size; // Offset: 0
    keen::StaticArray<keen::ContentHash,7> data; // Offset: 8
};

struct SdfCascadeData {
    keen::GraphicsMatrix44 ndcToSdfMatrix; // Offset: 0
    keen::int3 origin; // Offset: 64
};

struct SdfShaderData {
    keen::uint32 sdfCascadeCount; // Offset: 0
    keen::uint32 sdfInstanceCount; // Offset: 4
    keen::uint32 sdfBaseDescriptorIndex; // Offset: 8
    keen::float32 sdfInvGridSize; // Offset: 12
};

struct SdfDebugShaderParameters {
    keen::ds::SdfShaderData sdf; // Offset: 0
    keen::float3 cameraPosition; // Offset: 16
    keen::uint32 visibleGroupMask; // Offset: 28
};

struct SdfCaptureDebugShaderParameters {
    keen::GraphicsMatrix44 inverseViewProjectionMatrix; // Offset: 0
    keen::float3 cameraPosition; // Offset: 64
};

struct SdfVoxelRegion {
    keen::int3 origin; // Offset: 0
    keen::uint32 bufferOffset; // Offset: 12
    keen::uint3 size; // Offset: 16
};

struct SdfUpdateShaderParameters {
    keen::ds::SdfVoxelRegion newVoxelRegion0; // Offset: 0
    keen::ds::SdfVoxelRegion newVoxelRegion1; // Offset: 32
    keen::ds::SdfVoxelRegion newVoxelRegion2; // Offset: 64
    keen::ds::SdfVoxelRegion dirtyVoxelRegion; // Offset: 96
    keen::int3 origin; // Offset: 128
    keen::uint32 size; // Offset: 140
};

struct SdfBakingShaderParameters {
    keen::int3 voxelOrigin; // Offset: 0
    keen::uint32 volumeSize; // Offset: 12
    keen::float32 voxelSizeInMeters; // Offset: 16
    keen::uint3 targetOffset; // Offset: 20
};

struct SdfFloodShaderParameters {
    keen::sint32 stepSize; // Offset: 0
};

struct SdfCascadeUpdateShaderParameters {
    keen::uint32 cascadeIndex; // Offset: 0
    keen::uint32 instanceCount; // Offset: 4
};

struct WorldChunkVoxelMaterialCopyShaderParameters {
    keen::uint32 dwordCount; // Offset: 0
    keen::uint32 innerSize; // Offset: 4
    keen::uint32 chunkIndex; // Offset: 8
    keen::uint2 chunkData; // Offset: 16
};

struct SdfModelShaderData {
    keen::uint32 partCount; // Offset: 0
    keen::uint32 partOffset; // Offset: 4
};

struct SdfModelPartShaderData {
    keen::uint32 descriptorIndex; // Offset: 0
};

struct SdfInstanceShaderData {
    keen::uint32 modelIndex; // Offset: 0
    keen::uint32 partCount; // Offset: 4
    keen::uint32 partOffset; // Offset: 8
};

struct SdfInstancePartShaderData {
    keen::GraphicsMatrix43 inverseTransform; // Offset: 0
    keen::GraphicsMatrix43 transform; // Offset: 48
    keen::float3 aabbMin; // Offset: 96
    keen::float3 aabbMax; // Offset: 108
};

struct SdfImageMaterialShaderData {
    keen::float3 albedo; // Offset: 0
    keen::float3 emissive; // Offset: 12
};

struct SdfSystemUpdateShaderParameters {
    keen::uint newModelCount; // Offset: 0
    keen::uint newModelPartCount; // Offset: 4
    keen::uint newMaterialCount; // Offset: 8
};

struct SdfSceneUpdateShaderParameters {
    keen::uint newInstanceCount; // Offset: 0
    keen::uint newInstancePartCount; // Offset: 4
};

struct SdfSystemShaderData {
    keen::uint activeInstanceCount; // Offset: 0
    keen::uint activeInstancePartCount; // Offset: 4
};

struct SdfAoTraceShaderParameters {
    keen::ds::ViewSpacePositionReconstructionData worldSpaceReconstructionData; // Offset: 0
    keen::uint32 frameId; // Offset: 64
    keen::float radius; // Offset: 68
};

struct SdfAoFilterShaderParameters {
    keen::float2 inverseTargetSize; // Offset: 0
    keen::uint32 frameId; // Offset: 8
    keen::uint32 isHistoryValid; // Offset: 12
};

typedef keen::SdfBvhBuildMethod SdfBvhBuildMethod;

struct SdfBvhCommonInstanceData {
    keen::GraphicsMatrix43 worldToUvwMatrix; // Offset: 0
    keen::GraphicsMatrix43 uvwToWorldMatrix; // Offset: 48
    keen::float3 aabbMin; // Offset: 96
    keen::uint descriptorIndex; // Offset: 108
    keen::float3 aabbMax; // Offset: 112
};

struct SdfBvhNodeShaderData {
    keen::float3 aabbMin; // Offset: 0
    keen::uint offset; // Offset: 12
    keen::float3 aabbMax; // Offset: 16
    keen::uint count; // Offset: 28
};

struct SdfBvhDebugVisualizeIntersectionShaderParameters {
    keen::float3 sunDirection; // Offset: 0
    keen::float3 cameraOrigin; // Offset: 16
    keen::float3 farPlaneOrigin; // Offset: 32
    keen::float3 farPlaneX; // Offset: 48
    keen::float3 farPlaneY; // Offset: 64
    keen::float2 inverseTargetSize; // Offset: 80
};

struct SdfBvhDebugTraversalShaderParameters {
    keen::float3 rayOrigin; // Offset: 0
    keen::float3 rayDirection; // Offset: 16
    keen::float rayLength; // Offset: 28
};

typedef keen::SdfBvhDebugStepType SdfBvhDebugStepType;

struct SdfBvhDebugStepLeafShaderData {
    keen::ds::SdfBvhCommonInstanceData instance; // Offset: 0
    keen::float boxHitDistance; // Offset: 124
    keen::float sdfHitDistance; // Offset: 128
    keen::float hitDistance; // Offset: 132
};

struct SdfBvhDebugStepInnerShaderData {
    keen::float3 aabbMin0; // Offset: 0
    keen::float3 aabbMax0; // Offset: 12
    keen::float3 aabbMin1; // Offset: 24
    keen::float3 aabbMax1; // Offset: 36
    keen::float hitDistance0; // Offset: 48
    keen::float hitDistance1; // Offset: 52
};

struct SdfBvhDebugStepShaderData {
    keen::ds::SdfBvhDebugStepType type; // Offset: 0
    keen::ds::SdfBvhDebugStepLeafShaderData leaf; // Offset: 4
    keen::ds::SdfBvhDebugStepInnerShaderData inner; // Offset: 140
    keen::float closestHit; // Offset: 196
};

struct RenderSdfShadowShaderParameters {
    keen::ds::ViewSpacePositionReconstructionData worldSpaceReconstructionData; // Offset: 0
    keen::float3 sunDirection; // Offset: 64
    keen::float sunConeAngle; // Offset: 76
    keen::uint2 targetSize; // Offset: 80
    keen::uint frameId; // Offset: 88
    keen::float rayBias; // Offset: 92
    keen::uint32 isSdfCacheValid; // Offset: 96
    keen::uint32 pixelSize; // Offset: 100
};

typedef keen::RasterShadowQuality RasterShadowQuality;

struct RenderShadowAtlasMaskShaderParameters {
    keen::ds::ViewSpacePositionReconstructionData cameraCenteredSpaceReconstructionData; // Offset: 0
    keen::ds::RenderShadowAtlasShaderData shadowAtlas; // Offset: 64
    keen::uint2 targetSize; // Offset: 1152
    keen::float texelSize; // Offset: 1160
    keen::float3 toLightDirection; // Offset: 1168
};

struct RenderShadowAtlasDebugShaderParameters {
    keen::ds::ViewSpacePositionReconstructionData cameraCenteredSpaceReconstructionData; // Offset: 0
    keen::ds::RenderShadowAtlasShaderData shadowAtlas; // Offset: 64
    keen::uint2 targetSize; // Offset: 1152
};

struct VoxelWorldShadowDebugShaderParameters {
    keen::ds::VoxelWorldShadowMapShaderData voxelWorldShadowMap; // Offset: 0
    keen::ds::ViewSpacePositionReconstructionData worldSpaceReconstructionData; // Offset: 160
    keen::uint2 targetSize; // Offset: 224
};

struct PrimeShadowMapConstants {
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 0
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 64
    keen::float3 cameraWorldPosition; // Offset: 128
    keen::uint32 depthPyramidMip; // Offset: 140
    keen::float2 depthPyramidAspectRatio; // Offset: 144
    keen::uint32 tileCountX; // Offset: 152
    keen::uint32 tileCountY; // Offset: 156
    keen::uint32 useCameraCenteredPosition; // Offset: 160
    keen::ds::PackedShaderWorldPositionUniform cameraPosition; // Offset: 176
    keen::GraphicsMatrix44 cameraCenteredToClipSpaceMatrix; // Offset: 192
    keen::GraphicsMatrix44 clipSpaceToCameraCenteredMatrix; // Offset: 256
};

typedef keen::RenderShadowMaskQuality RenderShadowMaskQuality;

struct RenderShadowMaskFillShaderParameters {
    keen::ds::SdfShaderData sdf; // Offset: 0
    keen::ds::LightCacheLookupShaderData lightCache; // Offset: 16
    keen::GraphicsMatrix44 inverseViewProjectionMatrix; // Offset: 416
    keen::float2 linearDepthParameters; // Offset: 480
    keen::ds::ViewSpacePositionReconstructionData worldSpaceReconstructionData; // Offset: 496
    keen::float2 tileRatio; // Offset: 560
    keen::uint32 pixelSize; // Offset: 568
    keen::uint32 frameId; // Offset: 572
    keen::float3 sunDirection; // Offset: 576
    keen::float32 sunConeAngle; // Offset: 588
    keen::float32 rayBias; // Offset: 592
    keen::uint32 visibleGroupMask; // Offset: 596
    keen::uint32 writeDebugOutput; // Offset: 600
    keen::uint32 enablePixelSdfCache; // Offset: 604
    keen::uint32 enableDebugTarget; // Offset: 608
};

struct RenderShadowMaskFilterShaderParameters {
    keen::uint2 targetSize; // Offset: 0
    keen::float32 historyWeight; // Offset: 8
};

struct RenderShadowMaskUpsampleShaderParameters {
    keen::ds::RenderShadowAtlasShaderData shadowAtlas; // Offset: 0
    keen::uint2 targetSize; // Offset: 1088
    keen::float2 linearDepthParameters; // Offset: 1096
    keen::ds::ViewSpacePositionReconstructionData worldSpaceReconstructionData; // Offset: 1104
    keen::uint32 pixelSize; // Offset: 1168
};

struct RenderContactShadowShaderParameters {
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 0
    keen::GraphicsMatrix44 unjitteredProjectionMatrix; // Offset: 64
    keen::GraphicsMatrix43 viewMatrix; // Offset: 128
    keen::ds::ViewSpacePositionReconstructionData worldSpaceReconstructionData; // Offset: 176
    keen::float rcpNearPlaneDistance; // Offset: 240
    keen::float3 sunDirection; // Offset: 244
    keen::uint2 targetSize; // Offset: 256
    keen::uint32 frameId; // Offset: 264
    keen::uint32 discardContents; // Offset: 268
    keen::uint32 stepCount; // Offset: 272
    keen::float32 rayLength; // Offset: 276
    keen::float32 depthThickness; // Offset: 280
    keen::float32 hardness; // Offset: 284
    keen::uint32 combineWithDenoisedShadows; // Offset: 288
    keen::uint32 enableJitter; // Offset: 292
};

struct RenderContactShadow2ShaderParameters {
    keen::float4 lightCoordinate; // Offset: 0
    keen::float2 invDepthTextureSize; // Offset: 16
    keen::int2 waveOffset; // Offset: 24
    keen::float subSurfaceShadowStrength; // Offset: 32
};

struct UnpackShadowMaskShaderParameters {
    keen::uint2 targetSize; // Offset: 0
};

struct PackShadowMaskShaderParameters {
    keen::uint2 targetSize; // Offset: 0
};

struct SharpnessParameters {
    keen::float32 kDetectRatio; // Offset: 0
    keen::float32 kDetectThres; // Offset: 4
    keen::float32 kMinContrastRatio; // Offset: 8
    keen::float32 kRatioNorm; // Offset: 12
    keen::float32 kContrastBoost; // Offset: 16
    keen::float32 kEps; // Offset: 20
    keen::float32 kSharpStartY; // Offset: 24
    keen::float32 kSharpScaleY; // Offset: 28
    keen::float32 kSharpStrengthMin; // Offset: 32
    keen::float32 kSharpStrengthScale; // Offset: 36
    keen::float32 kSharpLimitMin; // Offset: 40
    keen::float32 kSharpLimitScale; // Offset: 44
    keen::float32 kScaleX; // Offset: 48
    keen::float32 kScaleY; // Offset: 52
    keen::float32 kDstNormX; // Offset: 56
    keen::float32 kDstNormY; // Offset: 60
    keen::float32 kSrcNormX; // Offset: 64
    keen::float32 kSrcNormY; // Offset: 68
    keen::uint32 kInputViewportOriginX; // Offset: 72
    keen::uint32 kInputViewportOriginY; // Offset: 76
    keen::uint32 kInputViewportWidth; // Offset: 80
    keen::uint32 kInputViewportHeight; // Offset: 84
    keen::uint32 kOutputViewportOriginX; // Offset: 88
    keen::uint32 kOutputViewportOriginY; // Offset: 92
    keen::uint32 kOutputViewportWidth; // Offset: 96
    keen::uint32 kOutputViewportHeight; // Offset: 100
};

struct SimpleMaterial {
    keen::bool enableTextureStreaming; // Offset: 0
    keen::bool receiveShadows; // Offset: 1
    keen::ObjectReference<keen::ds::Image> colorMap; // Offset: 4
    keen::ObjectReference<keen::ds::Image> normalMap; // Offset: 20
    keen::HdrColorRgb tintColor; // Offset: 36
};

struct SimpleRfxRenderMaterial {
    keen::ds::StreamedTexture2D_float4 colorMap; // Offset: 0
    keen::uint32 receiveShadows; // Offset: 4
    keen::float3 tintColor; // Offset: 8
};

struct SimpleVoxelPbrMaterial {
    keen::float3 albedo; // Offset: 0
    keen::float roughness; // Offset: 12
    keen::float3 emissive; // Offset: 16
    keen::float metallic; // Offset: 28
    keen::float reflectance; // Offset: 32
};

struct SimpleWorldMaterialShaderLayerWeights {
    keen::float sideWeight; // Offset: 0
    keen::float bottomWeight; // Offset: 4
    keen::float topWeight; // Offset: 8
    keen::float flatnessWeight; // Offset: 12
    keen::float map0Weight; // Offset: 16
    keen::float map1Weight; // Offset: 20
    keen::float2 flatness; // Offset: 24
    keen::float4 sideParameters; // Offset: 32
};

struct SimpleWorldMaterialBlendMap {
    keen::ds::StreamedTexture2D_float map; // Offset: 0
    keen::float tilingFactor; // Offset: 4
};

struct SimpleVoxelLayerInfo {
    keen::uint data; // Offset: 0
};

struct SimpleWorldMaterialResource {
    keen::ds::RenderParameterBlock layerInfosParameterBlock; // Offset: 0
    keen::ds::RenderParameterBlock layerWeightsParameterBlock; // Offset: 184
    keen::ds::RenderParameterBlock layerPbrMaterialsParameterBlock; // Offset: 368
    keen::ds::RenderParameterBlock blendMapsParameterBlock; // Offset: 552
};

struct SimpleBuildingMaterialResource {
};

struct SkinnedTreeInstanceData {
    keen::uint skinMatrixOffset; // Offset: 0
};

struct SkinnedTreeModelSpringParameters {
    keen::float mass; // Offset: 0
    keen::float constant; // Offset: 4
    keen::float damping; // Offset: 8
    keen::float drag; // Offset: 12
};

struct SkinnedTreeModelParameters {
    keen::ds::SkinnedTreeModelSpringParameters trunk; // Offset: 0
    keen::ds::SkinnedTreeModelSpringParameters branch; // Offset: 16
};

struct SkinnedTreeModelSpringData {
    keen::float mass; // Offset: 0
    keen::float constant; // Offset: 4
    keen::float damping; // Offset: 8
    keen::float drag; // Offset: 12
};

struct CpuSkinVector3 {
    keen::ds::vf32_data x; // Offset: 0
    keen::ds::vf32_data y; // Offset: 16
    keen::ds::vf32_data z; // Offset: 32
};

struct CpuSkinMatrix33 {
    keen::ds::vf32_data x; // Offset: 0
    keen::ds::vf32_data y; // Offset: 16
    keen::ds::vf32_data z; // Offset: 32
};

struct CpuSkinMatrix43 {
    keen::ds::CpuSkinMatrix33 rot; // Offset: 0
    keen::ds::vf32_data pos; // Offset: 48
};

struct SkyTextureMaterial {
    keen::ObjectReference<keen::ds::Image> texture; // Offset: 0
    keen::ds::RenderSamplerAddressMode textureAddressMode; // Offset: 16
};

struct SkyTextureRfxRenderMaterial {
    keen::ds::BindlessTexture2D_float4 texture; // Offset: 0
    keen::ds::BindlessSampler sampler; // Offset: 4
};

struct SnowDisplacementUpdateParameters {
    keen::uint worldPixelSize; // Offset: 0
    keen::uint worldTextureSize; // Offset: 4
    keen::uint2 worldTileTopLeft; // Offset: 8
    keen::uint2 worldPositionTopLeft; // Offset: 16
    keen::uint2 oldWorldTileTopLeft; // Offset: 24
    keen::uint2 oldWorldPositionTopLeft; // Offset: 32
    keen::uint worldHeightScale; // Offset: 40
    keen::float rcpHeightScale; // Offset: 44
    keen::uint fadeOutHeightFill; // Offset: 48
    keen::uint heightMin; // Offset: 52
    keen::uint heightMax; // Offset: 56
    keen::uint oldHeightMin; // Offset: 60
    keen::uint bodyCounterOffset; // Offset: 64
};

struct SnowDisplacementBody {
    keen::uint3 packedPosition; // Offset: 0
    keen::float rcpMinSoftness; // Offset: 12
    keen::float rcpMaxSoftness; // Offset: 16
    keen::float heightNoiseScale; // Offset: 20
};

typedef keen::SsaoQuality SsaoQuality;

struct SsaoData {
    keen::ds::ViewSpacePositionReconstructionData viewspaceReconstructionData; // Offset: 0
    keen::float2 linearDepthParameters; // Offset: 64
    keen::uint2 _padding0; // Offset: 72
    keen::float32 ssaoIntensity; // Offset: 80
    keen::float32 ssaoBias; // Offset: 84
    keen::float32 ssaoScale; // Offset: 88
    keen::float32 ssaoSampleRadius; // Offset: 92
};

struct StochasticScreenSpaceReflectionsConstantData {
    keen::GraphicsMatrix44 g_inv_view_proj; // Offset: 0
    keen::GraphicsMatrix44 g_proj; // Offset: 64
    keen::GraphicsMatrix44 g_inv_proj; // Offset: 128
    keen::GraphicsMatrix43 g_view; // Offset: 192
    keen::GraphicsMatrix43 g_inv_view; // Offset: 240
    keen::GraphicsMatrix44 g_prev_view_proj; // Offset: 288
    keen::float3 g_camera_world_position; // Offset: 352
    keen::uint2 g_buffer_dimensions; // Offset: 368
    keen::float2 g_inv_buffer_dimensions; // Offset: 376
    keen::uint2 g_render_dimensions; // Offset: 384
    keen::float2 g_inv_render_dimensions; // Offset: 392
    keen::float g_temporal_stability_factor; // Offset: 400
    keen::float g_depth_buffer_thickness; // Offset: 404
    keen::float g_depth_buffer_thickness_far; // Offset: 408
    keen::float g_roughness_threshold; // Offset: 412
    keen::float g_temporal_variance_threshold; // Offset: 416
    keen::float g_sdf_ray_max_distance; // Offset: 420
    keen::float g_sdf_ray_start_offset; // Offset: 424
    keen::float g_sdf_hit_offset; // Offset: 428
    keen::uint g_frame_index; // Offset: 432
    keen::uint g_max_traversal_intersections; // Offset: 436
    keen::uint g_min_traversal_occupancy; // Offset: 440
    keen::uint g_most_detailed_mip; // Offset: 444
    keen::uint g_samples_per_quad; // Offset: 448
    keen::uint g_temporal_variance_guided_tracing_enabled; // Offset: 452
    keen::uint g_num_mips; // Offset: 456
    keen::uint g_resolution_downscale; // Offset: 460
    keen::float g_reflect_background; // Offset: 464
    keen::uint g_debug_reflection_rays; // Offset: 468
    keen::float g_edge_bleeding_max_distance; // Offset: 472
    keen::float g_edge_bleeding_offset; // Offset: 476
    keen::uint g_gi_enabled; // Offset: 480
    keen::float g_exposure; // Offset: 484
    keen::uint g_ground_truth_specular; // Offset: 488
};

struct StochasticScreenSpaceReflectionsUpscaleData {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 linearDepthParameters; // Offset: 8
};

struct DebugRootConstantData {
    keen::uint debug_mode; // Offset: 0
};

struct ApplyReflectionsConstants {
    keen::GraphicsMatrix44 clipSpaceToCameraCenteredMatrix; // Offset: 0
    keen::uint2 outputSize; // Offset: 64
    keen::float2 invOutputSize; // Offset: 72
    keen::float specularMax; // Offset: 80
    keen::uint enableHorizonBasedOcclusion; // Offset: 84
    keen::float giLightFactor; // Offset: 88
    keen::uint flags; // Offset: 92
    keen::float specularReflectionsFactor; // Offset: 96
    keen::uint groundTruthSpecular; // Offset: 100
    keen::uint writeToSceneBrightness; // Offset: 104
};

struct SurfacePickerShaderParameters {
    keen::ds::VolumetricFogGridShaderData fogGrid; // Offset: 0
    keen::float3 focusPosition; // Offset: 496
    keen::uint chunkCount; // Offset: 508
    keen::uint seed; // Offset: 512
    keen::float pickingRange; // Offset: 516
    keen::uint debugDrawPicks; // Offset: 520
    keen::uint enableDisplacement; // Offset: 524
};

struct SurfacePickerShaderData {
    keen::StaticArray<keen::uint,6> binSize; // Offset: 0
    keen::StaticArray<keen::uint,6> binOffset; // Offset: 24
    keen::StaticArray<keen::uint,6> binPickIndex; // Offset: 48
    keen::uint culledChunkCount; // Offset: 72
    keen::uint pointCount; // Offset: 76
};

struct SurfacePickerPointShaderData {
    keen::float3 position; // Offset: 0
    keen::float3 normal; // Offset: 12
};

struct SurfacePickerBakedDisplacementShaderData {
    keen::float displacement; // Offset: 0
    keen::float displacementTop; // Offset: 4
    keen::float displacementBottom; // Offset: 8
    keen::float displacementSide; // Offset: 12
};

struct TerraformingCursorMaterial {
    keen::ObjectReference<keen::ds::Image> noiseMap; // Offset: 0
    keen::float3 noiseUvScale; // Offset: 16
    keen::float32 ringThickness; // Offset: 28
    keen::HdrColorRgb ringColor; // Offset: 32
    keen::HdrColorRgb fillColor; // Offset: 48
};

struct TerraformingCursorRfxRenderMaterial {
    keen::float3 noiseUvScale; // Offset: 0
    keen::ds::BindlessTexture3D_float noiseMap; // Offset: 12
    keen::float3 ringColor; // Offset: 16
    keen::float32 ringThickness; // Offset: 28
    keen::float3 fillColor; // Offset: 32
};

struct TextureInfo {
    keen::uint16 width; // Offset: 0
    keen::uint16 height; // Offset: 2
    keen::uint16 depth; // Offset: 4
    keen::uint16 arraySize; // Offset: 6
    keen::uint8 levelCount; // Offset: 8
    keen::TextureType type; // Offset: 9
    keen::PixelFormat format; // Offset: 10
    keen::ContentHash data; // Offset: 12
};

struct TextureSizeInfo {
    keen::ds::TextureInfo info; // Offset: 0
    keen::DsArray<keen::Guid> sources; // Offset: 32
};

struct TransparentMaterial {
};

typedef keen::TransparentInstanceFlag TransparentInstanceFlag;

struct TransparentInstanceData {
    keen::uint32 indexCount; // Offset: 0
    keen::uint32 instanceCount; // Offset: 4
    keen::uint32 indexOffset; // Offset: 8
    keen::sint32 vertexOffset; // Offset: 12
    keen::uint32 instanceOffset; // Offset: 16
    keen::ds::BindlessTexture2D_float4 image; // Offset: 20
    keen::ds::BindlessSampler imageSampler; // Offset: 24
    keen::ds::BindlessSampler uvDistortionMapSampler; // Offset: 28
    keen::float32 edgeFadeOutFactor; // Offset: 32
    keen::float3 position; // Offset: 36
    keen::float32 depthFadeDistance; // Offset: 48
    keen::float4 rotation; // Offset: 52
    keen::float3 scale; // Offset: 68
    keen::float3 color; // Offset: 80
    keen::float32 alpha; // Offset: 92
    keen::float2 uvOffset; // Offset: 96
    keen::float2 uvScale; // Offset: 104
    keen::float2 uvDistortionOffset; // Offset: 112
    keen::float2 uvDistortionScale; // Offset: 120
    keen::float32 uvDistortionStrength; // Offset: 128
    keen::ds::BindlessTexture2D_float4 uvDistortionMap; // Offset: 132
    keen::float32 alphaClipValue; // Offset: 136
    keen::float32 alphaClipHalfRange; // Offset: 140
    keen::uint32 flags; // Offset: 144
    keen::ds::BindlessTexture2D_float4 motionVectorImage; // Offset: 148
    keen::float32 motionVectorScale; // Offset: 152
    keen::float32 flipbookTime; // Offset: 156
    keen::uint32 encodedFlipbookSize; // Offset: 160
};

struct TransparentRfxRenderMaterial {
};

typedef keen::BoolMask BoolMask;

struct VfxSamplerParameters {
    keen::ds::RenderSamplerAddressMode addressU; // Offset: 0
    keen::ds::RenderSamplerAddressMode addressV; // Offset: 1
    keen::ds::RenderSamplerAddressMode addressW; // Offset: 2
};

typedef keen::ShaderVariableComponentType ShaderVariableComponentType;

struct ShaderVariable {
    keen::ds::string name; // Offset: 0
    keen::ds::ShaderVariableComponentType componentType; // Offset: 40
    keen::uint8 componentCount; // Offset: 41
};

typedef keen::VfxBufferMemberComponentType VfxBufferMemberComponentType;

struct VfxBufferMember {
    keen::ds::string name; // Offset: 0
    keen::uint32 componentCount; // Offset: 40
    keen::ds::VfxBufferMemberComponentType componentType; // Offset: 44
    keen::uint32 offsetInBytes; // Offset: 48
};

struct VfxParticleStateBufferInfo {
    keen::DsArray<keen::ds::VfxBufferMember> members; // Offset: 0
    keen::uint32 sizeInBytes; // Offset: 40
};

typedef keen::VfxParameterType VfxParameterType;

struct VfxMeshPatchPointData {
    keen::uint32 indexCount; // Offset: 0
    keen::uint32 vertexCount; // Offset: 4
    keen::ContentHash vertexData; // Offset: 8
    keen::ContentHash indexData; // Offset: 24
    keen::float4 boundingSphere; // Offset: 40
};

struct VfxModelPatchPointData {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
};

struct VfxDecalPatchPointData {
    keen::ObjectReference<keen::ds::Decal> decal; // Offset: 0
};

struct VfxImagePatchPointData {
    keen::uint16 width; // Offset: 0
    keen::uint16 height; // Offset: 2
    keen::uint16 depth; // Offset: 4
    keen::ds::VfxSamplerParameters sampler; // Offset: 6
    keen::uint8 levelCount; // Offset: 9
    keen::TextureType type; // Offset: 10
    keen::PixelFormat format; // Offset: 11
    keen::ContentHash content; // Offset: 12
    keen::ds::string debugName; // Offset: 32
};

struct VfxEmitterPatchPointData {
    keen::uint32 childIndex; // Offset: 0
};

struct VfxCurvePatchPointData {
    keen::ContentHash samples; // Offset: 0
    keen::float32 startTime; // Offset: 16
    keen::float32 totalTime; // Offset: 20
    keen::uint32 sampleCount; // Offset: 24
    keen::ds::string name; // Offset: 32
};

typedef keen::VfxParticleParameterPatchPointType VfxParticleParameterPatchPointType;

struct VfxParticleParameterPatchPoint {
    keen::ds::VfxParticleParameterPatchPointType type; // Offset: 0
    keen::uint32 offset; // Offset: 4
    keen::uint32 size; // Offset: 8
    keen::uint32 dataIndex; // Offset: 12
};

struct VfxParticleUniformData {
    keen::ContentHash data; // Offset: 0
    keen::DsArray<keen::ds::VfxParticleParameterPatchPoint> patchPoints; // Offset: 16
    keen::DsArray<keen::ds::VfxImagePatchPointData> imageData; // Offset: 56
    keen::DsArray<keen::ds::VfxMeshPatchPointData> meshData; // Offset: 96
    keen::DsArray<keen::ds::VfxModelPatchPointData> modelData; // Offset: 136
    keen::DsArray<keen::ds::VfxEmitterPatchPointData> emitterData; // Offset: 176
    keen::DsArray<keen::ds::VfxCurvePatchPointData> curveData; // Offset: 216
    keen::DsArray<keen::ds::VfxDecalPatchPointData> decalData; // Offset: 256
};

typedef keen::VfxParticleFeature VfxParticleFeature;

typedef keen::VfxParticleFeatureMask VfxParticleFeatureMask;

struct VfxParticleResource {
    keen::ds::string name; // Offset: 0
    keen::uint32 parent; // Offset: 40
    keen::uint32 stateSize; // Offset: 44
    keen::uint32 maxCount; // Offset: 48
    keen::ContentHash code; // Offset: 52
    keen::ContentHash strippedCode; // Offset: 68
    keen::ds::VfxParticleUniformData uniformData; // Offset: 88
};

struct VfxUserEffectParameterDescription {
    keen::ds::string name; // Offset: 0
    keen::uint32 nameHash; // Offset: 40
    keen::uint32 offset; // Offset: 44
    keen::uint32 sizeInBytes; // Offset: 48
    keen::Guid inheritanceKey; // Offset: 52
};

struct VfxResource {
    keen::uint64 parameterHash; // Offset: 0
    keen::DsArray<keen::ds::VfxUserEffectParameterDescription> parameters; // Offset: 8
    keen::ds::VfxUserEffectParameterDataBlock defaultData; // Offset: 48
    keen::DsArray<keen::ds::VfxParticleResource> particles; // Offset: 112
    keen::DsArray<keen::ds::VfxParticleStateBufferInfo> stateInfos; // Offset: 152
    keen::float32 cullingDistanceMin; // Offset: 192
    keen::float32 cullingDistanceMax; // Offset: 196
    keen::uint32 killTimeInSeconds; // Offset: 200
    keen::ds::string debugName; // Offset: 208
};

struct VfxNode {
    keen::bool enabled; // Offset: 0
    keen::ObjectReference<keen::ds::VfxParticleDefinition> particle; // Offset: 4
    keen::uint32 maxCount; // Offset: 20
};

struct VfxDefinition {
    keen::float32 cullingDistanceMin; // Offset: 0
    keen::float32 cullingDistanceMax; // Offset: 4
    keen::uint32 killTimeInSeconds; // Offset: 8
};

struct VfxParticleDefinition {
};

typedef keen::VfxParticleValueKind VfxParticleValueKind;

struct VfxParameterDefinitionBase {
    keen::ds::VfxParticleValueKind kind; // Offset: 0
    keen::ds::string expression; // Offset: 8
};

struct VfxParameterDefinition_Float {
    keen::float32 defaultValue; // Offset: 48
};

struct VfxParameterDefinition_Float2 {
    keen::float2 defaultValue; // Offset: 48
};

struct VfxParameterDefinition_Float3 {
    keen::float3 defaultValue; // Offset: 48
};

struct VfxParameterDefinition_Float4 {
    keen::float4 defaultValue; // Offset: 48
};

struct VfxParameterDefinition_Int {
    keen::sint32 defaultValue; // Offset: 48
};

struct VfxParameterDefinition_Int2 {
    keen::int2 defaultValue; // Offset: 48
};

struct VfxParameterDefinition_Int3 {
    keen::int3 defaultValue; // Offset: 48
};

struct VfxParameterDefinition_Int4 {
    keen::int4 defaultValue; // Offset: 48
};

struct VfxParameterDefinition_UInt {
    keen::uint32 defaultValue; // Offset: 48
};

struct VfxParameterDefinition_UInt2 {
    keen::uint2 defaultValue; // Offset: 48
};

struct VfxParameterDefinition_UInt3 {
    keen::uint3 defaultValue; // Offset: 48
};

struct VfxParameterDefinition_UInt4 {
    keen::uint4 defaultValue; // Offset: 48
};

struct VfxParameterDefinition_Bool {
    keen::bool defaultValue; // Offset: 48
};

struct VfxParameterDefinition_Bool2 {
    keen::bool2 defaultValue; // Offset: 48
};

struct VfxParameterDefinition_Bool3 {
    keen::bool3 defaultValue; // Offset: 48
};

struct VfxParameterDefinition_Bool4 {
    keen::bool4 defaultValue; // Offset: 48
};

struct VfxParameterDefinition_Color {
    keen::Color defaultValue; // Offset: 48
};

struct VfxParameterDefinition_Quaternion {
    keen::float4 defaultValue; // Offset: 48
};

struct VfxParameterDefinition_Mesh {
    keen::ObjectReference<keen::ds::Model> defaultValue; // Offset: 48
};

struct VfxParameterDefinition_Model {
    keen::ObjectReference<keen::ds::Model> defaultValue; // Offset: 48
};

struct VfxParameterDefinition_Decal {
    keen::ObjectReference<keen::ds::Decal> defaultValue; // Offset: 48
};

struct VfxParameterDefinition_Emitter {
};

struct VfxParameterDefinition_Image {
    keen::ObjectReference<keen::ds::Image> defaultValue; // Offset: 48
    keen::ds::VfxSamplerParameters sampler; // Offset: 64
};

struct VfxStateDefinitionBase {
    keen::ds::VfxParticleValueKind kind; // Offset: 0
    keen::ds::string expression; // Offset: 8
};

struct VfxStateDefinition_Float {
    keen::float32 defaultValue; // Offset: 48
};

struct VfxStateDefinition_Float2 {
    keen::float2 defaultValue; // Offset: 48
};

struct VfxStateDefinition_Float3 {
    keen::float3 defaultValue; // Offset: 48
};

struct VfxStateDefinition_Float4 {
    keen::float4 defaultValue; // Offset: 48
};

struct VfxStateDefinition_Int {
    keen::sint32 defaultValue; // Offset: 48
};

struct VfxStateDefinition_Int2 {
    keen::int2 defaultValue; // Offset: 48
};

struct VfxStateDefinition_Int3 {
    keen::int3 defaultValue; // Offset: 48
};

struct VfxStateDefinition_Int4 {
    keen::int4 defaultValue; // Offset: 48
};

struct VfxStateDefinition_UInt {
    keen::uint32 defaultValue; // Offset: 48
};

struct VfxStateDefinition_UInt2 {
    keen::uint2 defaultValue; // Offset: 48
};

struct VfxStateDefinition_UInt3 {
    keen::uint3 defaultValue; // Offset: 48
};

struct VfxStateDefinition_UInt4 {
    keen::uint4 defaultValue; // Offset: 48
};

struct VfxStateDefinition_Bool {
    keen::bool defaultValue; // Offset: 48
};

struct VfxStateDefinition_Bool2 {
    keen::bool2 defaultValue; // Offset: 48
};

struct VfxStateDefinition_Bool3 {
    keen::bool3 defaultValue; // Offset: 48
};

struct VfxStateDefinition_Bool4 {
    keen::bool4 defaultValue; // Offset: 48
};

struct VfxStateDefinition_Color {
    keen::Color defaultValue; // Offset: 48
};

struct VfxStateDefinition_Quaternion {
    keen::float4 defaultValue; // Offset: 48
};

struct VfxExpressionBase {
};

struct VfxExpressionValue_Float1 {
    keen::float32 value; // Offset: 0
};

struct VfxExpressionValue_Float2 {
    keen::float2 value; // Offset: 0
};

struct VfxExpressionValue_Float3 {
    keen::float3 value; // Offset: 0
};

struct VfxExpressionValue_Float4 {
    keen::float4 value; // Offset: 0
};

struct VfxExpressionValue_Int1 {
    keen::sint32 value; // Offset: 0
};

struct VfxExpressionValue_Int2 {
    keen::int2 value; // Offset: 0
};

struct VfxExpressionValue_Int3 {
    keen::int3 value; // Offset: 0
};

struct VfxExpressionValue_Int4 {
    keen::int4 value; // Offset: 0
};

struct VfxExpressionValue_UInt1 {
    keen::uint32 value; // Offset: 0
};

struct VfxExpressionValue_UInt2 {
    keen::uint2 value; // Offset: 0
};

struct VfxExpressionValue_UInt3 {
    keen::uint3 value; // Offset: 0
};

struct VfxExpressionValue_UInt4 {
    keen::uint4 value; // Offset: 0
};

struct VfxExpressionValue_Bool {
    keen::bool value; // Offset: 0
};

struct VfxExpressionValue_Bool2 {
    keen::bool2 value; // Offset: 0
};

struct VfxExpressionValue_Bool3 {
    keen::bool3 value; // Offset: 0
};

struct VfxExpressionValue_Bool4 {
    keen::bool4 value; // Offset: 0
};

struct VfxExpressionValue_Color {
    keen::Color value; // Offset: 0
};

struct VfxExpressionValue_Quaternion {
    keen::float4 value; // Offset: 0
};

struct VfxExpressionValue_Particle {
    keen::ObjectReference<keen::ds::VfxNode> value; // Offset: 0
};

struct VfxExpressionValue_Mesh {
    keen::ObjectReference<keen::ds::Model> value; // Offset: 0
};

struct VfxExpressionValue_Model {
    keen::ObjectReference<keen::ds::Model> value; // Offset: 0
};

struct VfxExpressionValue_Decal {
    keen::ObjectReference<keen::ds::Decal> value; // Offset: 0
};

struct VfxExpressionValue_Image {
    keen::ObjectReference<keen::ds::Image> value; // Offset: 0
};

typedef keen::VfxExpressionType VfxExpressionType;

struct VfxParameterExpression {
    keen::ObjectReference<keen::ds::VfxParameterDefinitionBase> parameter; // Offset: 0
    keen::ds::VfxExpressionType type; // Offset: 16
    keen::ds::string expression; // Offset: 24
    keen::DsVariant<keen::ds::VfxExpressionBase> value; // Offset: 64
};

struct VfxStateExpression {
    keen::ObjectReference<keen::ds::VfxStateDefinitionBase> state; // Offset: 0
    keen::ds::VfxExpressionType type; // Offset: 16
    keen::ds::string expression; // Offset: 24
    keen::DsVariant<keen::ds::VfxExpressionBase> value; // Offset: 64
};

struct VfxEffectParameterBase {
};

struct VfxEffectParameterFloat {
    keen::float32 value; // Offset: 0
};

struct VfxEffectParameterFloat2 {
    keen::float2 value; // Offset: 0
};

struct VfxEffectParameterFloat3 {
    keen::float3 value; // Offset: 0
};

struct VfxEffectParameterFloat4 {
    keen::float4 value; // Offset: 0
};

struct VfxEffectParameterBool {
    keen::bool value; // Offset: 0
};

struct VfxEffectParameterBool2 {
    keen::bool2 value; // Offset: 0
};

struct VfxEffectParameterBool3 {
    keen::bool3 value; // Offset: 0
};

struct VfxEffectParameterBool4 {
    keen::bool4 value; // Offset: 0
};

struct VfxEffectParameterInt {
    keen::sint32 value; // Offset: 0
};

struct VfxEffectParameterInt2 {
    keen::int2 value; // Offset: 0
};

struct VfxEffectParameterInt3 {
    keen::int3 value; // Offset: 0
};

struct VfxEffectParameterInt4 {
    keen::int4 value; // Offset: 0
};

struct VfxEffectParameterUint {
    keen::uint32 value; // Offset: 0
};

struct VfxEffectParameterUint2 {
    keen::uint2 value; // Offset: 0
};

struct VfxEffectParameterUint3 {
    keen::uint3 value; // Offset: 0
};

struct VfxEffectParameterUint4 {
    keen::uint4 value; // Offset: 0
};

struct VfxEffectParameterQuaternion {
    keen::float4 value; // Offset: 0
};

struct VfxEffectParameterColor {
    keen::Color value; // Offset: 0
};

struct VfxEffectParameterGroup {
};

struct VfxGlobalEffectParameterDirectory {
};

struct VfxGlobalEffectParameterInfo {
    keen::Guid inheritanceKey; // Offset: 0
    keen::HashKey32 descriptionHash; // Offset: 16
    keen::DsTypeId typeNameHash; // Offset: 20
};

struct VfxGlobalEffectParameterRegistry {
    keen::DsArray<keen::ds::VfxGlobalEffectParameterInfo> parameters; // Offset: 0
};

struct VfxEffectParameterInfo {
    keen::ds::VfxUserEffectParameterDescription description; // Offset: 0
    keen::DsVariant<keen::ds::VfxEffectParameterBase> value; // Offset: 72
    keen::uint32 registerOffset; // Offset: 120
};

struct VfxUserEffectParameterInfos {
    keen::DsArray<keen::ds::VfxEffectParameterInfo> parameters; // Offset: 0
};

struct VfxProfileEntry {
    keen::Guid effectId; // Offset: 0
    keen::Time emitterGpuTime; // Offset: 16
    keen::Time particleGpuTime; // Offset: 24
    keen::uint32 instanceCount; // Offset: 32
    keen::uint32 chunkCount; // Offset: 36
    keen::uint32 dispatchCount; // Offset: 40
    keen::uint32 memoryUsage; // Offset: 44
};

struct VfxProfileMessage {
    keen::uint64 frameId; // Offset: 0
    keen::Time totalGpuTime; // Offset: 8
    keen::uint32 totalInstanceCount; // Offset: 16
    keen::uint32 totalMemoryUsage; // Offset: 20
    keen::uint32 totalDispatchCount; // Offset: 24
    keen::uint32 viewId; // Offset: 28
    keen::uint32 tickCount; // Offset: 32
    keen::DsArray<keen::ds::VfxProfileEntry> entries; // Offset: 40
};

struct vfx_converter.ParticleStateInfo {
    keen::DsVariant<keen::ds::VfxStateDefinitionBase> definition; // Offset: 0
    keen::ds::string name; // Offset: 48
    keen::Guid id; // Offset: 88
    keen::float64 sortKey; // Offset: 104
};

struct vfx_converter.ParticleParameterInfo {
    keen::DsVariant<keen::ds::VfxParameterDefinitionBase> definition; // Offset: 0
    keen::ds::string name; // Offset: 48
    keen::Guid id; // Offset: 88
    keen::float64 sortKey; // Offset: 104
    keen::DsArray<keen::ds::vfx_converter::ParticleParameterInfo> spawnParameters; // Offset: 112
};

struct vfx_converter.ParticleDefinitionInfo {
    keen::DsArray<keen::ds::vfx_converter::ParticleStateInfo> states; // Offset: 0
    keen::DsArray<keen::ds::vfx_converter::ParticleParameterInfo> parameters; // Offset: 40
    keen::bool isEmitter; // Offset: 80
};

struct VfxConverterConfiguration {
    keen::ds::VfxReference singleEffect; // Offset: 0
};

struct VfxNodeInfo {
    keen::Guid parentNodeId; // Offset: 0
    keen::Guid parentNodeDefinitionId; // Offset: 16
    keen::DsArray<keen::Guid> childNodeIds; // Offset: 32
    keen::bool isEnabled; // Offset: 72
};

struct VfxBufferEntry {
    keen::Guid id; // Offset: 0
    keen::ds::string name; // Offset: 16
    keen::DsTypeId typeNameHash; // Offset: 56
    keen::uint32 registerOffset; // Offset: 60
    keen::uint32 sizeInRegisters; // Offset: 64
    keen::bool hasCurveExpression; // Offset: 68
    keen::ds::string hlslTypeName; // Offset: 72
    keen::ds::string componentTypeName; // Offset: 112
    keen::uint32 componentCount; // Offset: 152
};

struct VfxBufferInfo {
    keen::DsArray<keen::ds::VfxBufferEntry> entries; // Offset: 0
    keen::uint32 sizeInRegisters; // Offset: 40
};

struct VfxParticleDefinitionCurveExpression {
    keen::Guid curveId; // Offset: 0
    keen::Guid referencedParameterId; // Offset: 16
};

struct VfxParticleDefinitionCurveExpressions {
    keen::DsArray<keen::ds::VfxParticleDefinitionCurveExpression> curves; // Offset: 0
};

struct VfxParameterTypeIndices {
    keen::DsArray<keen::ds::string> types; // Offset: 0
};

struct VfxBaseEffectParameters {
    keen::float4 orientation; // Offset: 0
    keen::float3 position; // Offset: 16
    keen::uint32 startTime; // Offset: 28
    keen::float3 scale; // Offset: 32
    keen::uint32 isActive; // Offset: 44
    keen::float cullingDistanceMin; // Offset: 48
    keen::float cullingDistanceMax; // Offset: 52
    keen::uint32 isHidden; // Offset: 56
    keen::uint32 age; // Offset: 60
};

struct VfxCombinedEffectParameters {
    keen::ds::VfxBaseEffectParameters base; // Offset: 0
    keen::ds::VfxUserEffectParameterDataBlock user; // Offset: 64
};

struct VfxMeshInfo {
    keen::float3 positionScale; // Offset: 0
    keen::uint32 materialIndex; // Offset: 12
    keen::float3 positionOffset; // Offset: 16
    keen::uint32 indexOffset; // Offset: 28
    keen::uint32 vertexOffset; // Offset: 32
    keen::uint32 indexCount; // Offset: 36
    keen::uint32 packedPipelineIndices; // Offset: 40
};

struct VfxModelInfo {
    keen::float4 boundingSphere; // Offset: 0
    keen::uint32 modelSizeFeedbackIndex; // Offset: 16
    keen::uint32 firstMeshOffset; // Offset: 20
    keen::uint32 meshCount; // Offset: 24
};

struct VfxModelInstanceTransform {
    keen::float4 orientation; // Offset: 0
    keen::uint3 packedPosition; // Offset: 16
    keen::float scale; // Offset: 28
};

struct VfxModelInstance {
    keen::ds::VfxModelInstanceTransform transform; // Offset: 0
    keen::ds::VfxModelInstanceTransform previousTransform; // Offset: 32
    keen::float3 color; // Offset: 64
    keen::float alpha; // Offset: 76
    keen::float3 dissolveOffset; // Offset: 80
    keen::float dissolveRadius; // Offset: 92
    keen::float dissolveEdgeBrightness; // Offset: 96
    keen::float alphaClip; // Offset: 100
    keen::uint emissiveFactor; // Offset: 104
};

struct VfxTerraformingCursorInstance {
    keen::float3 boxSize; // Offset: 0
    keen::float sphereRadius; // Offset: 12
    keen::float3 position; // Offset: 16
    keen::uint isBox; // Offset: 28
    keen::float3 uvOffset; // Offset: 32
    keen::float ringAlpha; // Offset: 44
    keen::float ringAlphaClip; // Offset: 48
    keen::float ringAlphaClipHalfRange; // Offset: 52
    keen::float fillAlpha; // Offset: 56
    keen::float fillHardness; // Offset: 60
};

struct VfxCullingInstance {
    keen::float4 orientation; // Offset: 0
    keen::float3 position; // Offset: 16
    keen::float scale; // Offset: 28
    keen::uint modelIndex; // Offset: 32
    keen::uint instanceDataIndex; // Offset: 36
    keen::uint instanceDataTypeId; // Offset: 40
    keen::uint isDissolveActive; // Offset: 44
};

struct VfxModelDrawData {
    keen::float3 positionScale; // Offset: 0
    keen::uint materialIndex; // Offset: 12
    keen::float3 positionOffset; // Offset: 16
    keen::float pad0; // Offset: 28
};

struct VfxIntermediateDraw {
    keen::uint meshCounterIndex; // Offset: 0
    keen::uint instanceIndex; // Offset: 4
};

struct VfxCullingSubView {
    keen::ds::GpuCullingFrustum cameraCenteredFrustum; // Offset: 0
    keen::float minObjectSize; // Offset: 96
};

struct VfxCullingPassConstants {
    keen::uint32 subViewIndex; // Offset: 0
    keen::uint32 normalPipelineShift; // Offset: 4
    keen::uint32 dissolvePipelineShift; // Offset: 8
    keen::uint32 firstBatchIndex; // Offset: 12
};

struct VfxCullInstancesConstants {
    keen::StaticArray<keen::ds::VfxCullingSubView,9> subViews; // Offset: 0
    keen::StaticArray<keen::ds::VfxCullingPassConstants,10> passes; // Offset: 1008
    keen::uint32 subViewCount; // Offset: 1168
    keen::uint32 passCount; // Offset: 1172
    keen::uint32 maxDrawCount; // Offset: 1176
    keen::uint32 maxMeshCount; // Offset: 1180
    keen::uint32 useOcclusionCulling; // Offset: 1184
    keen::float3 cameraWorldPosition; // Offset: 1188
    keen::GraphicsMatrix43 cameraCenteredToViewMatrix; // Offset: 1200
    keen::ds::GpuOcclusionCullingShaderData occlusionCullingData; // Offset: 1248
    keen::float modelSizeFeedbackPixelSize; // Offset: 1312
};

struct VfxWriteCulledDrawCommandsPushConstants {
    keen::uint firstBatchIndex; // Offset: 0
    keen::uint maxMeshCount; // Offset: 4
    keen::uint pipelineCount; // Offset: 8
};

struct PreloadVfxList {
};

struct PreloadVfxListResource {
    keen::DsArray<keen::Guid> vfxIds; // Offset: 0
};

struct VoxelMaterialVfxDataResource {
    keen::DsArray<keen::uint> materialType; // Offset: 0
};

struct GpuImage2D {
    keen::uint32 index; // Offset: 0
};

struct GpuImage3D {
    keen::uint32 index; // Offset: 0
};

struct GpuSampler {
    keen::uint32 index; // Offset: 0
};

struct GpuCombinedImage2D {
    keen::ds::GpuImage2D image; // Offset: 0
    keen::ds::GpuSampler sampler; // Offset: 4
};

struct GpuCombinedImage3D {
    keen::ds::GpuImage3D image; // Offset: 0
    keen::ds::GpuSampler sampler; // Offset: 4
};

struct GpuMesh {
    keen::uint32 vertexOffset; // Offset: 0
    keen::uint32 indexOffset; // Offset: 4
    keen::uint32 indexCount; // Offset: 8
    keen::uint32 vertexCount; // Offset: 12
    keen::float4 boundingSphere; // Offset: 16
};

struct GpuMeshVertex {
    keen::float3 position; // Offset: 0
    keen::float2 uv; // Offset: 12
    keen::float3 normal; // Offset: 20
    keen::float4 color; // Offset: 32
};

struct GpuDecal {
    keen::uint32 materialDataIndex; // Offset: 0
};

struct GpuCurve {
    keen::uint32 index; // Offset: 0
    keen::uint32 sampleCountMinusOne; // Offset: 4
    keen::float startTime; // Offset: 8
    keen::float inverseTotalTime; // Offset: 12
    keen::float inverseSampleDelta; // Offset: 16
};

struct VfxBaseParticleState {
    keen::uint myParentEmitterIndex; // Offset: 0
    keen::uint instanceIndex; // Offset: 4
    keen::uint rngState; // Offset: 8
    keen::uint tickCount; // Offset: 12
};

struct VfxEmitterState {
    keen::uint particleCounterByteOffset; // Offset: 0
    keen::uint spawnCounterByteOffset; // Offset: 4
    keen::uint maxParticleCount; // Offset: 8
    keen::uint maxSpawnCount; // Offset: 12
    keen::uint particleChunkIndex; // Offset: 16
    keen::uint instanceIndex; // Offset: 20
    keen::uint particleTypeIndex; // Offset: 24
    keen::uint explicitPad0; // Offset: 28
};

struct VfxChunkState {
    keen::uint freeParticleCounterByteOffset; // Offset: 0
    keen::uint currentActiveParticleCounterByteOffset; // Offset: 4
    keen::uint nextActiveParticleCounterByteOffset; // Offset: 8
    keen::uint explicitPad0; // Offset: 12
};

struct VfxUpdateBuffer {
    keen::uint time; // Offset: 0
    keen::float fixedTimeStep; // Offset: 4
    keen::float realTimeStep; // Offset: 8
    keen::uint currentTickId; // Offset: 12
    keen::uint transparentInstanceBufferCapacity; // Offset: 16
    keen::uint transparentInstanceCounterByteOffset; // Offset: 20
    keen::uint injectInstanceBufferCapacity; // Offset: 24
    keen::uint injectInstanceCounterByteOffset; // Offset: 28
    keen::uint pointLightBufferCapacity; // Offset: 32
    keen::uint pointLightCounterByteOffset; // Offset: 36
    keen::uint decalBufferCapacity; // Offset: 40
    keen::uint decalCounterByteOffset; // Offset: 44
    keen::uint grassMovementBodyCounterByteOffset; // Offset: 48
    keen::uint grassMovementBodyListCapacity; // Offset: 52
    keen::float32 exposure; // Offset: 56
    keen::float32 exposureCorrection; // Offset: 60
    keen::float3 cameraPosition; // Offset: 64
    keen::float timeOfDay; // Offset: 76
    keen::uint3 cameraWorldPosition; // Offset: 80
    keen::float4 cameraOrientation; // Offset: 96
    keen::StaticArray<keen::float4,5> frustumPlanes; // Offset: 112
    keen::float3 sunDirection; // Offset: 192
    keen::float32 sunDirectLightFadeFactor; // Offset: 204
    keen::float3 moonDirection; // Offset: 208
    keen::float32 moonDirectLightFadeFactor; // Offset: 220
    keen::uint skipInjectSort; // Offset: 224
    keen::uint worldChunkCount; // Offset: 228
    keen::uint useParallelRadixSort; // Offset: 232
    keen::ds::DynamicHeightmapSamplingShaderData dynamicHeightmap; // Offset: 240
    keen::uint isDynamicHeightmapValid; // Offset: 272
    keen::uint sdfCascadeCount; // Offset: 276
    keen::uint firstSdfImageIndex; // Offset: 280
    keen::float32 sdfInvGridSize; // Offset: 284
    keen::uint isSdfBvhValid; // Offset: 288
    keen::ds::VolumetricFogGridShaderData fogGrid; // Offset: 304
    keen::uint playerCount; // Offset: 800
    keen::StaticArray<keen::float4,16> playerPositions; // Offset: 816
    keen::uint maxCullingInstanceCount; // Offset: 1072
    keen::uint maxModelInstanceCount; // Offset: 1076
    keen::uint maxTerraformingCursorInstanceCount; // Offset: 1080
    keen::uint hideSpiders; // Offset: 1084
    keen::uint snowDisplacementBodyCounterByteOffset; // Offset: 1088
    keen::uint snowDisplacementBodyListCapacity; // Offset: 1092
    keen::ds::WeatherSampleConstants weatherSampleConstants; // Offset: 1104
};

struct VfxPushConstants {
    keen::uint data; // Offset: 0
};

struct VfxPrepareBuffer {
    keen::uint emitterCount; // Offset: 0
};

struct VfxWorldChunk {
    keen::uint vertexOffset; // Offset: 0
    keen::uint vertexCount; // Offset: 4
    keen::uint indexOffset; // Offset: 8
    keen::uint indexCount; // Offset: 12
    keen::uint type; // Offset: 16
    keen::float4 translationAndScale; // Offset: 20
};

struct GpuSortData {
    keen::float highSortKey; // Offset: 0
    keen::float lowSortKey; // Offset: 4
    keen::uint instanceIndex; // Offset: 8
    keen::uint explicitPad0; // Offset: 12
};

struct GpuSortShaderData {
    keen::uint elementCount; // Offset: 0
};

struct GpuSortWritebackShaderData {
    keen::uint elementCounterOffset; // Offset: 0
};

struct VfxChunkUpdateBuffer2 {
    keen::uint particleTypeParametersOffset; // Offset: 0
    keen::uint activeParticleCounterByteOffset; // Offset: 4
    keen::uint nextActiveParticleCounterByteOffset; // Offset: 8
    keen::uint freeParticleCounterByteOffset; // Offset: 12
    keen::uint particleStatesOffset; // Offset: 16
    keen::uint oldActiveParticleIndicesOffset; // Offset: 20
    keen::uint newActiveParticleIndicesOffset; // Offset: 24
    keen::uint freeParticleIndicesOffset; // Offset: 28
    keen::uint parentStatesOffset; // Offset: 32
    keen::uint oldActiveParentParticleIndicesOffset; // Offset: 36
    keen::uint childParticleStatesOffset; // Offset: 40
    keen::uint childParticleFreeListOffset; // Offset: 44
    keen::uint childActiveParticleIndicesOffset; // Offset: 48
    keen::uint chunkId; // Offset: 52
    keen::uint explicitPad0; // Offset: 56
    keen::uint explicitPad1; // Offset: 60
};

struct ViewReprojectionData {
    keen::GraphicsMatrix44 ndcToPreviousNdcMatrix; // Offset: 0
};

struct Fog2DownsampleDepthParameters {
    keen::uint2 sourceSize; // Offset: 0
    keen::float2 invSourceSize; // Offset: 8
};

struct Fog2MinMaxDepthParameters {
    keen::uint2 sourceSize; // Offset: 0
    keen::float2 invSourceSize; // Offset: 8
    keen::uint2 targetSize; // Offset: 16
    keen::uint32 tileSize; // Offset: 24
};

struct Fog2SampleSkyParameters {
    keen::float32 cloudLayerY; // Offset: 0
    keen::float32 planetRadius; // Offset: 4
};

struct Fog2CloudsErosionParameters {
    keen::float3 scrollSpeed; // Offset: 0
    keen::float32 tilingFactor; // Offset: 12
    keen::float32 heightTilingFactor; // Offset: 16
    keen::uint32 noiseTextureIndex; // Offset: 20
    keen::float32 strength; // Offset: 24
};

struct Fog2CloudsParameters {
    keen::float32 yRange; // Offset: 0
    keen::float32 invYRange; // Offset: 4
    keen::float2 texcoordMapping; // Offset: 8
    keen::uint32 cloudTypes; // Offset: 16
    keen::ds::Fog2CloudsErosionParameters erosionPass0; // Offset: 32
    keen::ds::Fog2CloudsErosionParameters erosionPass1; // Offset: 64
    keen::ds::Fog2CloudsErosionParameters erosionPass2; // Offset: 96
    keen::float3 emission; // Offset: 128
    keen::float3 inScatteringDivExtinction; // Offset: 144
    keen::float32 extinctionLn2; // Offset: 156
};

struct Fog2RenderSkyParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::uint2 blueNoiseOffset; // Offset: 16
    keen::uint32 blueNoiseSizeMask; // Offset: 24
    keen::uint32 ditherPatternOffset; // Offset: 28
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 32
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 96
    keen::uint32 rayMarchSampleCount; // Offset: 160
    keen::float3 lightFactorSun; // Offset: 164
    keen::float32 exposure; // Offset: 176
    keen::float3 lightFactorSky; // Offset: 180
    keen::ds::ForwardDirectionalLightData cloudsLight; // Offset: 192
    keen::ds::ForwardDirectionalLightData skyLight0; // Offset: 224
    keen::ds::ForwardDirectionalLightData skyLight1; // Offset: 256
    keen::ds::AtmosphereShaderData atmosphere; // Offset: 288
    keen::ds::Fog2CloudsParameters clouds; // Offset: 352
    keen::ds::Fog2SampleSkyParameters sky; // Offset: 512
    keen::float32 time; // Offset: 528
};

struct Fog2BlurSkyParameters {
    keen::uint2 outputSize; // Offset: 0
};

struct Fog2TfSkyParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::float32 oldWeight; // Offset: 16
    keen::float32 oldToNewExposure; // Offset: 20
    keen::GraphicsMatrix44 oldViewProjectionMatrix; // Offset: 32
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 96
    keen::ds::Fog2SampleSkyParameters sky; // Offset: 160
};

struct CloudsSampleConstants {
    keen::float2 texcoordMappingScale; // Offset: 0
    keen::float2 texcoordMappingOffset; // Offset: 8
};

struct Fog2SampleParameters {
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 0
    keen::float3 cameraPosition; // Offset: 64
    keen::ds::ForwardDirectionalLightData directionalLightData0; // Offset: 80
    keen::uint32 enableWeather; // Offset: 112
    keen::ds::WeatherSampleConstants weatherSampleConstants; // Offset: 128
    keen::ds::CloudsSampleConstants cloudsSampleConstants; // Offset: 256
    keen::ds::AtmosphereShaderData atmosphere; // Offset: 272
    keen::ds::VolumetricShadowRuntimeData volumetricShadow; // Offset: 336
    keen::ds::RenderShadowAtlasShaderData shadowAtlas; // Offset: 576
    keen::ds::VolumetricFogGridShaderData fogGrid; // Offset: 1664
    keen::ds::SdfShaderData fogGridSdf; // Offset: 2160
    keen::ds::GrassMovementData grassMovement; // Offset: 2176
    keen::float32 exposureCorrection; // Offset: 2208
    keen::float32 lightFactorEmissive; // Offset: 2212
    keen::float3 lightFactorSun; // Offset: 2224
    keen::float3 lightFactorSky; // Offset: 2240
    keen::float32 lightFactorPointLights; // Offset: 2252
    keen::ds::GiAmbientFroxelVolumeParameters giFroxelParameters; // Offset: 2256
    keen::float32 lightFactorGi; // Offset: 2320
    keen::float2 surfaceFadeFunction; // Offset: 2324
    keen::float32 surfaceWidthFactor; // Offset: 2332
    keen::float32 surfaceNoiseScrollSpeed; // Offset: 2336
    keen::float32 surfaceNoiseScaleFactor; // Offset: 2340
    keen::uint32 surfaceNoiseDescriptorIndex; // Offset: 2344
    keen::ds::VolumetricFogGridMaterial surfaceMaterial; // Offset: 2352
    keen::ds::SdfShaderData worldSdf; // Offset: 2400
    keen::float worldHeightPositionMapping; // Offset: 2416
    keen::float2 groundFadeFunction; // Offset: 2420
    keen::float2 groundGradientFadeFunction; // Offset: 2432
    keen::float32 groundHeightFactor; // Offset: 2440
    keen::float32 groundNoiseScrollSpeed; // Offset: 2444
    keen::float32 groundNoiseScale; // Offset: 2448
    keen::uint32 groundNoiseDescriptorIndex; // Offset: 2452
    keen::ds::VolumetricFogGridMaterial groundMaterialAbove; // Offset: 2464
    keen::ds::VolumetricFogGridMaterial groundMaterialBelow; // Offset: 2512
    keen::float32 heightExponent; // Offset: 2560
    keen::float32 forestExponent; // Offset: 2564
    keen::float2 heightFadeFunction; // Offset: 2568
    keen::float2 forestFadeFunction; // Offset: 2576
    keen::ds::VolumetricFogGridMaterial heightMaterial; // Offset: 2592
    keen::ds::VolumetricFogGridMaterial forestMaterial; // Offset: 2640
    keen::ds::VolumetricFogGridMaterial rainMaterial; // Offset: 2688
    keen::ds::VolumetricFogGridMaterial snowMaterial; // Offset: 2736
    keen::ds::VolumetricFogGridMaterial blizzardMaterial; // Offset: 2784
    keen::float32 time; // Offset: 2832
    keen::ds::VoxelWorldShadowMapShaderData voxelWorldShadowMap; // Offset: 2848
    keen::uint32 isGiEnabled; // Offset: 3008
    keen::ds::GiAmbientProbesLookupData ambientProbesLookupData; // Offset: 3024
};

struct Fog2RenderParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 16
    keen::ds::Fog2SampleSkyParameters sky; // Offset: 80
    keen::float32 exposure; // Offset: 96
};

struct Fog2RenderBlurResultParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
};

struct Fog2TemporalBlendResultParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::float32 oldWeight; // Offset: 16
    keen::float32 oldDepthDifferenceWeight; // Offset: 20
    keen::float2 linearDepthParameters; // Offset: 24
    keen::float32 oldToNewExposure; // Offset: 32
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 48
    keen::GraphicsMatrix44 oldViewProjectionMatrix; // Offset: 112
};

struct Fog2InitializeShadowVolumeParameters {
    keen::uint32 shadowVolumeResolution; // Offset: 0
    keen::float32 invShadowVolumeResolution; // Offset: 4
    keen::uint32 cascadeIndex; // Offset: 8
    keen::uint32 injectInstanceCounterByteOffset; // Offset: 12
    keen::GraphicsMatrix43 shadowCascadeToWorldMatrix; // Offset: 16
};

struct Fog2IntegrateShadowVolumeCascadeParameters {
    keen::uint32 shadowVolumeResolution; // Offset: 0
    keen::float32 invShadowVolumeResolution; // Offset: 4
    keen::uint32 cascadeIndex; // Offset: 8
    keen::GraphicsMatrix43 shadowCascadeToWorldMatrix; // Offset: 16
    keen::GraphicsMatrix43 worldToNextShadowCascadeMatrix; // Offset: 64
    keen::float32 dk; // Offset: 112
};

struct Fog2IntegrateLastShadowVolumeCascadeParameters {
    keen::uint32 shadowVolumeResolution; // Offset: 0
    keen::float32 invShadowVolumeResolution; // Offset: 4
    keen::uint32 cascadeIndex; // Offset: 8
    keen::GraphicsMatrix43 shadowCascadeToWorldMatrix; // Offset: 16
    keen::float32 dk; // Offset: 64
    keen::ds::VolumetricShadowRuntimeData volumetricShadow; // Offset: 80
};

struct Fog2WriteShadowViewVolumeParameters {
    keen::uint3 viewVolumeSize; // Offset: 0
    keen::float3 invViewVolumeSize; // Offset: 16
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::ds::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 96
    keen::uint2 blueNoiseOffset; // Offset: 112
    keen::uint32 blueNoiseSizeMask; // Offset: 120
    keen::uint32 manyLightsShadowsEnabled; // Offset: 124
};

struct Fog2TfShadowViewVolumeParameters {
    keen::uint3 viewVolumeSize; // Offset: 0
    keen::float32 oldWeight; // Offset: 12
    keen::float3 invViewVolumeSize; // Offset: 16
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::ds::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 96
    keen::GraphicsMatrix44 oldViewProjectionMatrix; // Offset: 112
    keen::ds::Fog2ViewVolumeTransform oldViewVolumeTransform; // Offset: 176
};

struct Fog2WriteScatteredLightVolumeParameters {
    keen::uint3 viewVolumeSize; // Offset: 0
    keen::float3 invViewVolumeSize; // Offset: 16
    keen::float32 exposure; // Offset: 28
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::ds::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 96
    keen::uint2 blueNoiseOffset; // Offset: 112
    keen::uint32 blueNoiseSizeMask; // Offset: 120
    keen::uint32 manyLightsShadowsEnabled; // Offset: 124
    keen::uint32 isShadowViewVolumeValid; // Offset: 128
};

struct Fog2TfScatteredLightVolumeParameters {
    keen::uint3 viewVolumeSize; // Offset: 0
    keen::float32 oldWeight; // Offset: 12
    keen::float3 invViewVolumeSize; // Offset: 16
    keen::float32 oldToNewExposure; // Offset: 28
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::ds::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 96
    keen::GraphicsMatrix44 oldViewProjectionMatrix; // Offset: 112
    keen::ds::Fog2ViewVolumeTransform oldViewVolumeTransform; // Offset: 176
};

struct Fog2InitializeParticipatingMediaVolumeParameters {
    keen::uint3 viewVolumeSize; // Offset: 0
    keen::float3 invViewVolumeSize; // Offset: 16
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::ds::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 96
    keen::uint2 blueNoiseOffset; // Offset: 112
    keen::uint32 blueNoiseSizeMask; // Offset: 120
    keen::uint32 injectInstanceCounterByteOffset; // Offset: 124
};

struct Fog2WriteViewVolumeSourceTermParameters {
    keen::uint3 viewVolumeSize; // Offset: 0
    keen::float3 invViewVolumeSize; // Offset: 16
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::ds::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 96
    keen::float32 exposure; // Offset: 112
    keen::float32 exposureCorrection; // Offset: 116
    keen::uint2 blueNoiseOffset; // Offset: 120
    keen::uint32 blueNoiseSizeMask; // Offset: 128
    keen::uint32 manyLightsShadowsEnabled; // Offset: 132
    keen::uint32 isShadowViewVolumeValid; // Offset: 136
    keen::uint32 isScatteredLightVolumeValid; // Offset: 140
};

struct Fog2TfViewVolumeParameters {
    keen::uint3 viewVolumeSize; // Offset: 0
    keen::float32 oldWeight; // Offset: 12
    keen::float3 invViewVolumeSize; // Offset: 16
    keen::float32 oldToNewExposure; // Offset: 28
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::ds::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 96
    keen::GraphicsMatrix44 oldViewProjectionMatrix; // Offset: 112
    keen::ds::Fog2ViewVolumeTransform oldViewVolumeTransform; // Offset: 176
};

struct Fog2IntegrateViewVolumeParameters {
    keen::uint3 viewVolumeSize; // Offset: 0
    keen::float3 invViewVolumeSize; // Offset: 16
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::ds::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 96
    keen::uint2 blueNoiseOffset; // Offset: 112
    keen::uint32 blueNoiseSizeMask; // Offset: 120
};

struct Fog2IntegrateViewVolume2Parameters {
    keen::uint3 viewVolumeSize; // Offset: 0
    keen::float32 windTime; // Offset: 12
    keen::float3 invViewVolumeSize; // Offset: 16
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 32
    keen::ds::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 96
};

struct Fog2RenderFogGridIntersectionsParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 16
    keen::ds::Fog2SampleSkyParameters sky; // Offset: 80
    keen::float3 fogGridMin; // Offset: 96
    keen::float3 fogGridMax; // Offset: 112
    keen::uint32 maxStepCount; // Offset: 124
};

struct Fog2RenderWeatherMapIntersectionsParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 16
    keen::ds::Fog2SampleSkyParameters sky; // Offset: 80
    keen::float2 weatherMapMin; // Offset: 96
    keen::float2 weatherMapMax; // Offset: 104
    keen::float2 weatherMapVoxelSize; // Offset: 112
    keen::uint32 maxStepCount; // Offset: 120
    keen::uint32 enableWeather; // Offset: 124
};

struct Fog2RenderRaymarchParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 16
    keen::ds::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 80
    keen::ds::Fog2SampleSkyParameters sky; // Offset: 96
    keen::uint2 blueNoiseOffset; // Offset: 112
    keen::uint32 blueNoiseSizeMask; // Offset: 120
    keen::float32 exposure; // Offset: 124
};

struct Fog2CompositeViewVolumeDebugParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 16
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 80
    keen::ds::Fog2ViewVolumeTransform viewVolumeTransform; // Offset: 144
    keen::GraphicsMatrix44 viewVolumeViewProjectionMatrix; // Offset: 160
    keen::GraphicsMatrix44 viewVolumeInvViewProjectionMatrix; // Offset: 224
    keen::float32 dk; // Offset: 288
};

struct Fog2RenderUpscaleResultParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::uint2 blueNoiseOffset; // Offset: 8
    keen::uint32 blueNoiseSizeMask; // Offset: 16
    keen::float2 linearDepthParameters; // Offset: 20
};

struct Fog2TestParameters {
    keen::uint2 outputSize; // Offset: 0
    keen::float2 invOutputSize; // Offset: 8
    keen::GraphicsMatrix44 invViewProjectionMatrix; // Offset: 16
};

typedef keen::Fog2CompositeFlag Fog2CompositeFlag;

typedef keen::Fog2CompositeFlags Fog2CompositeFlags;

struct Fog2CompositeParameters {
    keen::uint2 targetSize; // Offset: 0
    keen::float2 invTargetSize; // Offset: 8
    keen::uint32 flags; // Offset: 16
    keen::ds::Fog2ViewVolumeSampleParameters sampleParameters; // Offset: 32
    keen::uint2 blueNoiseOffset; // Offset: 64
    keen::uint32 blueNoiseSizeMask; // Offset: 72
};

struct Fog2DebugBlitParameters {
    keen::uint2 blitOffset; // Offset: 0
    keen::uint2 blitSize; // Offset: 8
    keen::float32 scale; // Offset: 16
};

struct VolumetricFog2ResourceData {
    keen::ObjectReference<keen::ds::VolumetricFogInitializationMaterial> initializationMaterial; // Offset: 0
    keen::ObjectReference<keen::ds::render::AtmosphereParameters> atmosphere; // Offset: 16
    keen::ds::FogMaterialParameters surfaceMaterial; // Offset: 32
    keen::float32 surfaceWidth; // Offset: 60
    keen::ds::ImageReference surfaceNoise; // Offset: 64
    keen::float32 surfaceNoiseScale; // Offset: 80
    keen::float32 surfaceNoiseScrollSpeed; // Offset: 84
    keen::FloatRange surfaceFadeRange; // Offset: 88
    keen::float32 groundHeightExponent; // Offset: 96
    keen::ds::FogMaterialParameters groundMaterialAbove; // Offset: 100
    keen::ds::FogMaterialParameters groundMaterialBelow; // Offset: 128
    keen::FloatRange groundFadeRange; // Offset: 156
    keen::FloatRange groundGradientFadeRange; // Offset: 164
    keen::ds::ImageReference groundNoise; // Offset: 172
    keen::float32 groundNoiseScale; // Offset: 188
    keen::float32 groundNoiseFlowSpeed; // Offset: 192
    keen::float32 heightExponent; // Offset: 196
    keen::ds::FogMaterialParameters heightMaterial; // Offset: 200
    keen::FloatRange heightFadeRange; // Offset: 228
    keen::float32 forestExponent; // Offset: 236
    keen::ds::FogMaterialParameters forestMaterial; // Offset: 240
    keen::FloatRange forestFadeRange; // Offset: 268
    keen::ds::FogMaterialParameters rainMaterial; // Offset: 276
    keen::ds::FogMaterialParameters snowMaterial; // Offset: 304
    keen::ds::FogMaterialParameters blizzardMaterial; // Offset: 332
};

struct VolumetricFog2Resource {
    keen::ds::Fog2SampleSkyParameters sampleSkyParameters; // Offset: 0
    keen::ds::Fog2CloudsParameters cloudParameters; // Offset: 16
    keen::ds::RenderTexture cloudTypes; // Offset: 176
    keen::ds::RenderTexture cloudErosionPass0; // Offset: 248
    keen::ds::RenderTexture cloudErosionPass1; // Offset: 320
    keen::ds::RenderTexture cloudErosionPass2; // Offset: 392
    keen::float2 surfaceFadeFunction; // Offset: 464
    keen::float32 surfaceWidth; // Offset: 472
    keen::ds::RenderTexture surfaceNoise; // Offset: 480
    keen::float32 surfaceNoiseScale; // Offset: 552
    keen::float32 surfaceNoiseScrollSpeed; // Offset: 556
    keen::ds::FogMaterialParameters surfaceMaterial; // Offset: 560
    keen::float32 groundHeightFactor; // Offset: 588
    keen::ds::FogMaterialParameters groundMaterialAbove; // Offset: 592
    keen::ds::FogMaterialParameters groundMaterialBelow; // Offset: 620
    keen::float2 groundFadeFunction; // Offset: 648
    keen::float2 groundGradientFadeFunction; // Offset: 656
    keen::ds::RenderTexture groundNoise; // Offset: 664
    keen::float32 groundNoiseScale; // Offset: 736
    keen::float32 groundNoiseScrollSpeed; // Offset: 740
    keen::float32 heightExponent; // Offset: 744
    keen::ds::FogMaterialParameters heightMaterial; // Offset: 748
    keen::float2 heightFadeFunction; // Offset: 776
    keen::float32 forestExponent; // Offset: 784
    keen::ds::FogMaterialParameters forestMaterial; // Offset: 788
    keen::float2 forestFadeFunction; // Offset: 816
    keen::ds::FogMaterialParameters rainMaterial; // Offset: 824
    keen::ds::FogMaterialParameters snowMaterial; // Offset: 852
    keen::ds::FogMaterialParameters blizzardMaterial; // Offset: 880
};

typedef keen::Fog2ShadowVolumeTransformMatrices Fog2ShadowVolumeTransformMatrices;

struct VolumetricFogGridRenderParameters {
    keen::ds::FogMaterialParameters noneMaterial; // Offset: 0
    keen::ds::FogMaterialParameters dangerousMaterial; // Offset: 28
    keen::ds::FogMaterialParameters deadlyMaterial; // Offset: 56
    keen::ds::FogMaterialParameters decorativeMaterial; // Offset: 84
};

struct VolumetricFogGridUpdateShaderData {
    keen::int3 origin; // Offset: 0
    keen::uint3 size; // Offset: 16
    keen::uint32 bufferOffset; // Offset: 28
};

struct GroundFogParameters {
    keen::float32 height; // Offset: 28
    keen::float32 angleFadeoutPosition; // Offset: 32
    keen::float32 angleFadeoutRange; // Offset: 36
    keen::float32 sdfGradientEpsilon; // Offset: 40
    keen::float32 flowSpeed; // Offset: 44
    keen::ObjectReference<keen::ds::Image> noise; // Offset: 48
    keen::float32 noiseTilingSize; // Offset: 64
};

struct CloudErosionPass {
    keen::float32 tilingSize; // Offset: 0
    keen::float32 heightTilingSize; // Offset: 4
    keen::float32 scrollSpeed; // Offset: 8
    keen::float32 strength; // Offset: 12
    keen::ObjectReference<keen::ds::Image> noise; // Offset: 16
};

struct CloudParameters {
    keen::float32 yMin; // Offset: 28
    keen::float32 yMax; // Offset: 32
    keen::ObjectReference<keen::ds::Image> cloudMap; // Offset: 36
    keen::ObjectReference<keen::ds::Image> cloudTypes; // Offset: 52
    keen::ds::CloudErosionPass erosionPass0; // Offset: 68
    keen::ds::CloudErosionPass erosionPass1; // Offset: 100
    keen::ds::CloudErosionPass erosionPass2; // Offset: 132
    keen::float32 shadowStrength; // Offset: 164
    keen::float32 shadowStrengthSlope; // Offset: 168
    keen::float32 shadowStrengthOffset; // Offset: 172
    keen::float32 fadeoutStart; // Offset: 176
    keen::float32 fadeoutRange; // Offset: 180
};

struct VolumetricFogInitializationMaterial {
    keen::ds::GroundFogParameters ground; // Offset: 0
    keen::ds::CloudParameters clouds; // Offset: 68
};

struct CloudLayerShadowParameterBlockData {
    keen::float32 yMin; // Offset: 0
    keen::float32 yMax; // Offset: 4
    keen::float32 invYRange; // Offset: 8
    keen::float32 shadowStrength; // Offset: 12
    keen::float2 shadowSampleMap; // Offset: 16
};

struct AnalyticFogShadowParameterBlock {
    keen::ds::CloudLayerShadowParameterBlockData clouds; // Offset: 0
};

struct AnalyticFogResource {
    keen::ds::RenderParameterBlock analyticFogShadowParameterBlock; // Offset: 0
    keen::ds::RenderTexture cloudMap; // Offset: 184
};

typedef keen::VolumetricFogInjectionShape VolumetricFogInjectionShape;

struct VolumetricFogInjectInstanceData {
    keen::float3 position; // Offset: 0
    keen::uint32 shape; // Offset: 12
    keen::float4 rotation; // Offset: 16
    keen::float3 size; // Offset: 32
    keen::float32 density; // Offset: 44
    keen::ds::BindlessTexture3D_float densityTexture; // Offset: 48
    keen::ds::BindlessSampler densityTextureSampler; // Offset: 52
    keen::float32 falloff; // Offset: 56
    keen::float3 uvOffset; // Offset: 60
    keen::float3 uvScale; // Offset: 72
    keen::float3 emission; // Offset: 84
    keen::float32 extinction; // Offset: 96
    keen::float3 scattering; // Offset: 100
    keen::float32 g; // Offset: 112
};

typedef keen::WeatherSampleFlag WeatherSampleFlag;

struct VoxelMaterialList {
    keen::ObjectReference<keen::ds::BaseVoxelMaterial> defaultTerrainMaterial; // Offset: 0
};

typedef keen::ObjectReference<keen::ds::BaseVoxelMaterial> VoxelMaterialReference;

struct TerrainMaterialLayer {
    keen::ObjectReference<keen::ds::PbrMaterialParameters> material; // Offset: 0
    keen::float32 tilingSize; // Offset: 16
    keen::bool enableSeparateTilingSizeY; // Offset: 20
    keen::float32 tilingSizeY; // Offset: 24
    keen::float32 parallaxDepth; // Offset: 28
    keen::uint32 parallaxMinLayerCount; // Offset: 32
    keen::uint32 parallaxMaxLayerCount; // Offset: 36
    keen::float32 parallaxFadeoutStart; // Offset: 40
    keen::float32 parallaxFadeoutLength; // Offset: 44
    keen::float32 parallaxMinAngle; // Offset: 48
    keen::float32 parallaxAngleFadeoutLength; // Offset: 52
    keen::ds::PbrTerrainMaterialDisplacementLayer displacement; // Offset: 56
};

struct TerrainMaterialOverlayBlendLayer {
    keen::float32 fadeInDistance; // Offset: 64
    keen::float32 fadeInRange; // Offset: 68
};

struct TerrainMaterialDetailBlendLayer {
    keen::float32 maxOpacity; // Offset: 72
    keen::float32 maxOpacityNormal; // Offset: 76
    keen::ds::PbrTerrainMaterialDetailNormalBlendMode mode; // Offset: 80
};

struct TerrainMaterialColorVariation {
    keen::ObjectReference<keen::ds::Image> map; // Offset: 0
    keen::float32 tilingSize; // Offset: 16
    keen::bool enableMidPoint; // Offset: 20
    keen::Color start; // Offset: 24
    keen::Color mid; // Offset: 28
    keen::Color end; // Offset: 32
    keen::float32 midPosition; // Offset: 36
};

typedef keen::WorldMaterialBlending2MappingDirection WorldMaterialBlending2MappingDirection;

struct WorldMaterial2Layer {
    keen::ds::WorldMaterialBlending2MappingDirection mappingDirection; // Offset: 0
    keen::float32 heightBias; // Offset: 4
    keen::ObjectReference<keen::ds::Image> edgeNoiseMap; // Offset: 8
    keen::float32 edgeNoiseMapTilingSize; // Offset: 24
    keen::float32 edgeNoiseStrength; // Offset: 28
    keen::ds::PbrTerrainMaterialCenterBlendingSmoothness frontRightBlendingSmoothness; // Offset: 32
    keen::bool enableSnowDisplacement; // Offset: 40
    keen::bool disableFrostShader; // Offset: 41
    keen::bool disableSnowShader; // Offset: 42
    keen::bool disableWetnessShader; // Offset: 43
    keen::bool enableFrostShaderGlitter; // Offset: 44
};

typedef keen::WorldMaterial2Area WorldMaterial2Area;

typedef keen::WorldMaterial2Side WorldMaterial2Side;

typedef keen::WorldMaterial2BlendingValue WorldMaterial2BlendingValue;

struct WorldMaterial2BlendingValueMapping {
    keen::float32 position; // Offset: 0
    keen::float32 range; // Offset: 4
};

struct WorldMaterial2Node {
    keen::bool enable; // Offset: 0
};

struct WorldMaterial2AreaNode {
    keen::ds::WorldMaterial2Area area; // Offset: 1
};

struct WorldMaterial2VoxelMaterialNode {
    keen::ObjectReference<keen::ds::BaseVoxelMaterial> voxelMaterial; // Offset: 4
};

struct WorldMaterial2SideSelectorNode {
    keen::ds::WorldMaterial2BlendingValueMapping topMapping; // Offset: 4
    keen::ds::WorldMaterial2BlendingValueMapping bottomMapping; // Offset: 12
};

struct WorldMaterial2SideNode {
    keen::ds::WorldMaterial2Side side; // Offset: 1
};

struct WorldMaterial2BlendingValueNode {
    keen::ds::WorldMaterial2BlendingValue value; // Offset: 1
    keen::ds::WorldMaterial2BlendingValueMapping mapping; // Offset: 4
    keen::bool invert; // Offset: 12
};

struct WorldMaterial2MapNode {
    keen::ObjectReference<keen::ds::Image> map; // Offset: 4
    keen::float32 mapTilingSize; // Offset: 20
};

struct WorldMaterial2LayerNode {
    keen::ObjectReference<keen::ds::WorldMaterial2Layer> material; // Offset: 4
};

struct WorldMaterial2 {
};

typedef keen::WorldMaterialBlending2BlendingMode WorldMaterialBlending2BlendingMode;

typedef keen::WorldMaterialBlending2BakingBlendValueOperationType WorldMaterialBlending2BakingBlendValueOperationType;

typedef keen::WorldMaterialBlending2BakingInputValue WorldMaterialBlending2BakingInputValue;

struct WorldMaterialBlending2BakingBlendValueOperation {
    keen::uint32 type; // Offset: 0
    keen::float32 param0; // Offset: 4
    keen::float32 param1; // Offset: 8
    keen::float32 param2; // Offset: 12
    keen::float32 param3; // Offset: 16
};

struct WorldMaterialBlending2BakingLayerShaderData {
    keen::StaticArray<keen::ds::WorldMaterialBlending2BakingBlendValueOperation,8> ops; // Offset: 0
    keen::uint32 opCount; // Offset: 160
};

struct WorldMaterialBlending2MaterialBlendLayerShaderData {
    keen::float2 weightFunction; // Offset: 0
};

typedef keen::WorldMaterialBlending2MaterialLayerFlag WorldMaterialBlending2MaterialLayerFlag;

struct WorldMaterialBlending2MaterialLayerRenderingShaderData {
    keen::uint32 mappingDirection; // Offset: 0
    keen::uint32 baseLayerIndex; // Offset: 4
    keen::uint32 blendLayerCount; // Offset: 8
    keen::uint32 detailBlendingMode; // Offset: 12
    keen::float32 heightBlendingFactor; // Offset: 16
    keen::ds::StreamedTexture2D_float edgeNoise; // Offset: 20
    keen::float32 edgeNoiseTilingFactor; // Offset: 24
    keen::float32 edgeNoiseMappingFactor; // Offset: 28
    keen::float4 frontRightBlendSmoothness; // Offset: 32
    keen::float2 detailWeightFunction; // Offset: 48
    keen::float2 detailOpacityMapping; // Offset: 56
    keen::StaticArray<keen::ds::WorldMaterialBlending2MaterialBlendLayerShaderData,4> blendLayerParameters; // Offset: 64
    keen::float3 colorVariationStart; // Offset: 96
    keen::ds::StreamedTexture2D_float4 colorVariationMap; // Offset: 108
    keen::float3 colorVariationMid; // Offset: 112
    keen::float32 colorVariationTilingFactor; // Offset: 124
    keen::float3 colorVariationEnd; // Offset: 128
    keen::uint32 flags; // Offset: 140
    keen::float3 colorVariationParams; // Offset: 144
};

struct WorldMaterialBlending2MaterialLayerTextureShaderData {
    keen::float2 tilingFactor; // Offset: 0
    keen::ds::StreamedTexture2D_float4 emissiveMap; // Offset: 8
    keen::float32 emissiveMapIntensity; // Offset: 12
    keen::float32 emissiveExposureCorrectionFactor; // Offset: 16
    keen::ds::StreamedTexture2D_float4 albedoMap; // Offset: 20
    keen::ds::StreamedTexture2D_float roughnessMap; // Offset: 24
    keen::ds::StreamedTexture2D_float4 normalMap; // Offset: 28
    keen::ds::StreamedTexture2D_float heightMap; // Offset: 32
    keen::ds::StreamedTexture2D_float aoMap; // Offset: 36
    keen::float32 displacementScale; // Offset: 40
    keen::float32 displacementOffset; // Offset: 44
    keen::float32 parallaxFactor; // Offset: 48
    keen::uint32 parallaxMinLayerCount; // Offset: 52
    keen::uint32 parallaxMaxLayerCount; // Offset: 56
    keen::float32 parallaxFadeoutStart; // Offset: 60
    keen::float32 parallaxInverseFadeoutLength; // Offset: 64
    keen::float32 parallaxMinAngleSin; // Offset: 68
    keen::float32 parallaxInverseAngleFadeoutLength; // Offset: 72
    keen::float32 emissiveGiFactor; // Offset: 76
    keen::float32 distortionMapScale; // Offset: 80
    keen::float32 distortionMapSpeed; // Offset: 84
    keen::float32 distortionMapIntensity; // Offset: 88
    keen::float32 lightningMapScrollSpeed; // Offset: 92
    keen::float32 lightningMapIntensity; // Offset: 96
    keen::ds::StreamedTexture2D_float4 distortionMap; // Offset: 100
    keen::ds::StreamedTexture2D_float4 lightningMap; // Offset: 104
    keen::ds::StreamedTexture2D_float4 gradientMap; // Offset: 108
};

struct WorldMaterialBlending2MaterialLayerRange {
    keen::uint32 firstLayer; // Offset: 0
    keen::uint32 layerCount; // Offset: 4
};

struct WorldMaterialBlending2Resource {
    keen::uint32 layerCount; // Offset: 0
    keen::ds::RenderParameterBlock bakingParameterBlock; // Offset: 8
    keen::ds::RenderParameterBlock renderingLayerParameterBlock; // Offset: 192
    keen::ds::RenderParameterBlock renderingTextureParameterBlock; // Offset: 376
    keen::ds::RenderParameterBlock voxelToLayerParameterBlock; // Offset: 560
    keen::DsArray<keen::ds::RenderModelImageSizeInfo> renderingLayerImageSizeInfos; // Offset: 744
    keen::DsArray<keen::uint32> renderingLayerImageSizeInfoStartIndices; // Offset: 784
    keen::DsArray<keen::ds::RenderModelImageSizeInfo> renderingTextureImageSizeInfos; // Offset: 824
    keen::DsArray<keen::uint32> renderingTextureImageSizeInfoStartIndices; // Offset: 864
    keen::DsArray<keen::bool> renderingLayerUsesSnowDisplacement; // Offset: 904
};

struct WorldMaterialBlending2DebugResource {
    keen::DsArray<keen::Guid> layerGuids; // Offset: 0
    keen::DsArray<keen::ds::string> layerNames; // Offset: 40
};

struct ZoneVisualizationSdfBoundingSphere {
    keen::float3 worldSpacePosition; // Offset: 0
    keen::float32 sqrRadius; // Offset: 12
};

typedef keen::ZoneVisualizationSdfElementType ZoneVisualizationSdfElementType;

struct ZoneVisualizationSdfElement {
    keen::float3 halfSize; // Offset: 0
    keen::ds::ZoneVisualizationSdfElementType type; // Offset: 12
};

struct ZoneVisualizationSdfShaderData {
    keen::uint32 elementCount; // Offset: 0
    keen::float32 smoothingRadius; // Offset: 4
};

struct ZoneVisualizationSdfShaderStorageData {
    keen::StaticArray<keen::ds::ZoneVisualizationSdfBoundingSphere,32> boundingSpheres; // Offset: 0
    keen::StaticArray<keen::ds::ZoneVisualizationSdfElement,32> elements; // Offset: 512
};

struct ZoneVisualizationSdfRenderingShaderData {
    keen::float32 borderInverseSize; // Offset: 0
    keen::float32 borderCurveMax; // Offset: 4
    keen::float32 noiseBorderTilingFactor; // Offset: 8
    keen::float32 noisePositionTilingFactor; // Offset: 12
    keen::float32 noiseOffset; // Offset: 16
    keen::float2 buildZoneCameraDistanceFadeFunction; // Offset: 20
    keen::float2 noBuildZoneCameraDistanceFadeFunction; // Offset: 32
    keen::float2 noBuildZoneBuildZoneDistanceFadeFunction; // Offset: 40
    keen::float2 noBuildZonePreviewDistanceFadeFunction; // Offset: 48
    keen::float3 buildZoneBorderColor; // Offset: 64
    keen::float3 noBuildZoneBorderColor; // Offset: 80
    keen::uint32 drawBuildZoneBorder; // Offset: 92
    keen::ds::ZoneVisualizationSdfBoundingSphere previewBuildZoneBoundingSphere; // Offset: 96
    keen::ds::ZoneVisualizationSdfElement previewBuildZone; // Offset: 112
    keen::float3 previewBuildZoneBorderColor; // Offset: 128
};

struct ZoneVisualizationRasterizationShaderData {
    keen::GraphicsMatrix43 viewMatrix; // Offset: 0
    keen::GraphicsMatrix44 viewProjectionMatrix; // Offset: 48
    keen::float3 cameraPosition; // Offset: 112
    keen::float4 color; // Offset: 128
    keen::float2 distanceFarFadeFunction; // Offset: 144
    keen::float2 distanceNearFadeFunction; // Offset: 152
};

struct ZoneVisualizationRasterizationPushConstants {
    keen::float3 boxCenter; // Offset: 0
    keen::float3 boxHalfSize; // Offset: 12
};

struct ZoneVisualizationSettings {
    keen::float32 smoothingRadius; // Offset: 0
    keen::HdrColorRgb buildZoneBorderColor; // Offset: 4
    keen::HdrColorRgb noBuildZoneBorderColor; // Offset: 20
    keen::HdrColorRgb previewBuildZoneBorderColor; // Offset: 36
    keen::float32 borderSize; // Offset: 52
    keen::float32 borderCurveMax; // Offset: 56
    keen::ObjectReference<keen::ds::Image> noiseTexture; // Offset: 60
    keen::float32 noiseBorderTilingSize; // Offset: 76
    keen::float32 noisePositionTilingSize; // Offset: 80
    keen::float32 noiseScrollSpeed; // Offset: 84
    keen::FloatRange buildZoneDistanceFadeRange; // Offset: 88
    keen::FloatRange noBuildZoneDistanceFadeRange; // Offset: 96
    keen::FloatRange noBuildZoneBuildZoneDistanceFadeRange; // Offset: 104
    keen::FloatRange noBuildZonePreviewDistanceFadeRange; // Offset: 112
    keen::HdrColorRgb playableAreaColor; // Offset: 120
    keen::float32 playableAreaAlpha; // Offset: 136
    keen::FloatRange playableAreaDistanceFadeRange; // Offset: 140
    keen::FloatRange playableAreaNearFadeRange; // Offset: 148
    keen::ObjectReference<keen::ds::Model> playableAreaModel; // Offset: 156
};

struct ZoneVisualizationResource {
    keen::float32 smoothingRadius; // Offset: 0
    keen::float32 borderInverseSize; // Offset: 4
    keen::float32 borderCurveMax; // Offset: 8
    keen::ds::RenderTexture noiseTexture; // Offset: 16
    keen::float32 noiseBorderTilingFactor; // Offset: 88
    keen::float32 noisePositionTilingFactor; // Offset: 92
    keen::float32 noiseScrollSpeed; // Offset: 96
    keen::float2 buildZoneCameraDistanceFadeFunction; // Offset: 100
    keen::float2 noBuildZoneCameraDistanceFadeFunction; // Offset: 108
    keen::float2 noBuildZoneBuildZoneDistanceFadeFunction; // Offset: 116
    keen::float2 noBuildZonePreviewDistanceFadeFunction; // Offset: 124
    keen::float3 buildZoneBorderColor; // Offset: 132
    keen::float3 noBuildZoneBorderColor; // Offset: 144
    keen::float3 previewBuildZoneBorderColor; // Offset: 156
    keen::float4 playableAreaColor; // Offset: 168
    keen::float2 playableAreaCameraDistanceFarFadeFunction; // Offset: 184
    keen::float2 playableAreaCameraDistanceNearFadeFunction; // Offset: 192
    keen::uint32 playableAreaMeshVertexCount; // Offset: 200
    keen::uint32 playableAreaMeshIndexCount; // Offset: 204
    keen::ContentHash playableAreaMeshData; // Offset: 208
};

struct BlockOutMeshPointBrushScatteringSettings {
    keen::bool disablePoint; // Offset: 0
    keen::bool disableLowerEdge; // Offset: 1
    keen::bool disableUpperEdge; // Offset: 2
    keen::bool disableWallTriangle0; // Offset: 3
    keen::bool disableWallTriangle1; // Offset: 4
};

struct BlockOutMeshPoint {
    keen::float3 position; // Offset: 0
    keen::float32 height; // Offset: 12
    keen::float2 offset; // Offset: 16
    keen::ds::BlockOutMeshPointBrushScatteringSettings brushScattering; // Offset: 24
};

typedef keen::DistributionRule DistributionRule;

typedef keen::DistributionNodeType DistributionNodeType;

struct SceneEntitySpawnData {
    keen::float3 velocity; // Offset: 0
    keen::Color tintColor; // Offset: 12
    keen::float32 triggerRange; // Offset: 16
    keen::float32 triggerRange2; // Offset: 20
    keen::float32 triggerRange3; // Offset: 24
    keen::ds::ecs::Offset triggerOffset; // Offset: 28
    keen::sint32 level; // Offset: 68
    keen::sint32 levelOffset; // Offset: 72
    keen::ds::ecs::EnemySettings enemySettings; // Offset: 76
    keen::ds::ecs::RandomSpawnerEntitySettings randomSpawnerSettings; // Offset: 140
    keen::ds::ecs::EnemyTestFlags enemyTestFlags; // Offset: 144
    keen::ds::AmbientEnvironment ambience; // Offset: 148
    keen::ObjectReference<keen::ds::ecs::EnemyMarkerTag> enemyMarkerTag; // Offset: 152
    keen::ds::LocaTagReference teleporterId; // Offset: 168
    keen::ds::LocaTagReference teleportTargetId; // Offset: 184
    keen::float32 jumpDistance; // Offset: 200
    keen::float32 jumpHeight; // Offset: 204
    keen::Quaternion jumpLaunchOffset; // Offset: 208
    keen::ds::ecs::EntitySpawnValueMask mask; // Offset: 224
};

struct DistributionNode {
    keen::ds::DistributionNodeType type; // Offset: 0
    keen::ObjectReference<keen::ds::Model> voxelBrush; // Offset: 4
    keen::float32 voxelBrushScale; // Offset: 20
    keen::float32 voxelBrushScaleVariation; // Offset: 24
    keen::ObjectReference<keen::ds::Scene> scene; // Offset: 28
    keen::sint32 spawnLevelOffset; // Offset: 44
    keen::ObjectReference<keen::ds::ecs::Template> spawnTemplate; // Offset: 48
    keen::ds::SceneEntitySpawnData spawnData; // Offset: 64
    keen::bool alignRotationToRoad; // Offset: 292
    keen::ObjectReference<keen::ds::AbstractScatterImage> map; // Offset: 296
    keen::ObjectReference<keen::ds::CompositeScatterImage> compositeMap; // Offset: 312
    keen::ds::DistributionRule rule; // Offset: 328
    keen::float32 density; // Offset: 332
    keen::float32 radius; // Offset: 336
    keen::float32 maxHeightDifference; // Offset: 340
    keen::float32 minDistance; // Offset: 344
    keen::float32 minContentDistance; // Offset: 348
    keen::float32 maxRoadDistance; // Offset: 352
    keen::bool onlyAtCrossings; // Offset: 356
    keen::bool snapToRoad; // Offset: 357
    keen::FloatRange rotationRange; // Offset: 360
};

struct DistributionNodeGroupEntry {
    keen::ds::DistributionNodeType type; // Offset: 0
    keen::Guid objectId; // Offset: 4
    keen::ObjectReference<keen::ds::Model> voxelBrush; // Offset: 20
    keen::float32 voxelBrushScale; // Offset: 36
    keen::float32 voxelBrushScaleVariation; // Offset: 40
    keen::ObjectReference<keen::ds::Scene> scene; // Offset: 44
    keen::sint32 spawnLevelOffset; // Offset: 60
    keen::ObjectReference<keen::ds::ecs::Template> spawnTemplate; // Offset: 64
    keen::ds::SceneEntitySpawnData spawnData; // Offset: 80
    keen::DsArray<keen::ds::WhiteboxTagInfo> whiteboxTags; // Offset: 312
    keen::float32 probabilityWeight; // Offset: 352
    keen::bool alignRotationToRoad; // Offset: 356
    keen::FloatRange rotationRange; // Offset: 360
};

struct RoadCrossingNode {
    keen::ObjectReference<keen::ds::Scene> scene; // Offset: 0
    keen::uint32 weight; // Offset: 16
    keen::bool keepPlainCrossing; // Offset: 20
};

struct ConvertedDistributionNode {
    keen::ObjectReference<keen::ds::AbstractScatterImage> map; // Offset: 0
    keen::ds::DistributionRule rule; // Offset: 16
    keen::float32 density; // Offset: 20
    keen::float32 radius; // Offset: 24
    keen::float32 maxHeightDifference; // Offset: 28
    keen::float32 minDistance; // Offset: 32
    keen::float32 minContentDistance; // Offset: 36
    keen::float32 maxRoadDistance; // Offset: 40
    keen::bool onlyAtCrossings; // Offset: 44
    keen::bool snapToRoad; // Offset: 45
    keen::Guid objectId; // Offset: 48
    keen::DsArray<keen::ds::DistributionNodeGroupEntry> groupEntries; // Offset: 64
};

struct DistributionNodes {
    keen::DsArray<keen::ds::ConvertedDistributionNode> nodes; // Offset: 0
    keen::DsArray<keen::ds::RoadCrossingNode> roadCrossings; // Offset: 40
};

struct ScatterSetImageInfos {
    keen::DsArray<keen::ObjectReference<keen::ds::ScatterImage>> images; // Offset: 0
};

typedef keen::ScatterResolution ScatterResolution;

struct ScatterNodeMap {
    keen::ObjectReference<keen::ds::Image> image; // Offset: 0
    keen::uint2 position; // Offset: 16
    keen::uint2 size; // Offset: 24
    keen::bool wrap; // Offset: 32
};

typedef keen::ScatterNodeFlag ScatterNodeFlag;

typedef keen::ScatterNodeFlags ScatterNodeFlags;

typedef keen::ScatterLocation ScatterLocation;

typedef keen::ScatterSetVoxelMap ScatterSetVoxelMap;

typedef keen::ScatterSetRule ScatterSetRule;

typedef keen::ScatterSetFootprintMap ScatterSetFootprintMap;

typedef keen::ScatterSetImageMap ScatterSetImageMap;

struct ScatterScaleRange {
    keen::float32 minValue; // Offset: 0
    keen::float32 maxValue; // Offset: 4
};

struct ScatterYawRange {
    keen::sint32 minValue; // Offset: 0
    keen::sint32 maxValue; // Offset: 4
};

struct ScatterPitchRange {
    keen::uint32 minValue; // Offset: 0
    keen::uint32 maxValue; // Offset: 4
};

typedef keen::ScatterNodeImageType ScatterNodeImageType;

struct ScatterNode {
    keen::ds::ScatterNodeImageType imageType; // Offset: 0
    keen::ObjectReference<keen::ds::AbstractScatterImage> scatterImage; // Offset: 4
    keen::ObjectReference<keen::ds::CompositeScatterImage> compositeScatterImage; // Offset: 20
    keen::ds::ScatterNodeMap map; // Offset: 36
    keen::ObjectReference<keen::ds::Model> model; // Offset: 72
    keen::ds::ecs::TemplateReference entity; // Offset: 88
    keen::ds::ScatterResolution resolution; // Offset: 104
    keen::ds::ScatterSetRule rule; // Offset: 105
    keen::ds::Biome biome; // Offset: 106
    keen::ds::ScatterLocation location; // Offset: 107
    keen::uint32 footprint; // Offset: 108
    keen::float32 probability; // Offset: 112
    keen::ds::ScatterScaleRange scale; // Offset: 116
    keen::ds::ScatterYawRange yaw; // Offset: 124
    keen::ds::ScatterPitchRange pitch; // Offset: 132
    keen::ds::ScatterNodeFlags flags; // Offset: 140
};

struct ScatterSetMaps {
    keen::ds::ScatterNodeImageType imageType; // Offset: 0
    keen::ObjectReference<keen::ds::Image> forest; // Offset: 4
    keen::ObjectReference<keen::ds::AbstractScatterImage> forestScatterImage; // Offset: 20
    keen::ObjectReference<keen::ds::CompositeScatterImage> forestCompositeScatterImage; // Offset: 36
};

struct ScatterSet3 {
    keen::ds::ScatterSetMaps maps; // Offset: 0
};

struct ScatterSetObject {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
    keen::ds::ecs::TemplateResourceReference entity; // Offset: 16
    keen::ds::ScatterSetRule rule; // Offset: 32
    keen::uint32 mapIndex; // Offset: 36
    keen::uint32 footprint; // Offset: 40
    keen::float32 probability; // Offset: 44
    keen::FloatRange scale; // Offset: 48
    keen::FloatRange yaw; // Offset: 56
    keen::FloatRange pitch; // Offset: 64
    keen::ds::ScatterNodeFlags flags; // Offset: 72
    keen::ds::Biome biome; // Offset: 73
    keen::ds::ScatterLocation location; // Offset: 74
    keen::ds::ScatterResolution resolution; // Offset: 75
    keen::DsString name; // Offset: 80
};

struct ScatterSetMapInfo {
    keen::uint2 size; // Offset: 0
    keen::ContentHash hash; // Offset: 8
    keen::DsString name; // Offset: 24
    keen::DsString bauPath; // Offset: 64
};

struct ScatterSetImageData {
    keen::uint2 imageSize; // Offset: 0
    keen::uint2 position; // Offset: 8
    keen::uint2 size; // Offset: 16
    keen::bool wrap; // Offset: 24
    keen::ContentHash hash; // Offset: 28
    keen::DsString name; // Offset: 48
    keen::DsString bauPath; // Offset: 88
    keen::Guid scatterImage; // Offset: 128
};

struct ScatterSetLocationObjects {
    keen::DsArray<keen::uint32> objects; // Offset: 0
};

struct ScatterSetResolutionObjects {
    keen::StaticArray<keen::ds::ScatterSetLocationObjects,3> locations; // Offset: 0
};

struct ScatterSet3Resource {
    keen::DsArray<keen::ds::ScatterSetImageData> maps; // Offset: 0
    keen::StaticArray<keen::ds::ScatterSetResolutionObjects,5> resolutions; // Offset: 40
    keen::DsArray<keen::ds::ScatterSetObject> objects; // Offset: 640
};

typedef keen::ObjectReference<keen::ds::ScatterSet3Resource> ScatterSet3ResourceReference;

typedef keen::composite_scatter_image::CompositeOperation composite_scatter_image.CompositeOperation;

typedef keen::composite_scatter_image::InputType composite_scatter_image.InputType;

typedef keen::composite_scatter_image::InputOperation composite_scatter_image.InputOperation;

struct composite_scatter_image.Input {
    keen::ds::composite_scatter_image::InputType type; // Offset: 0
    keen::ObjectReference<keen::ds::AbstractScatterImage> scatterImage; // Offset: 4
    keen::ObjectReference<keen::ds::CompositeScatterImage> compositeScatterImage; // Offset: 20
    keen::float32 value; // Offset: 36
    keen::ds::composite_scatter_image::InputOperation inputOperation; // Offset: 40
    keen::float32 inputToMaskMin; // Offset: 44
    keen::float32 inputToMaskMax; // Offset: 48
    keen::ds::composite_scatter_image::CompositeOperation operation; // Offset: 52
};

struct CompositeScatterImage {
    keen::uint32 upscaleFactor; // Offset: 0
    keen::StaticArray<keen::ds::composite_scatter_image::Input,6> inputs; // Offset: 4
    keen::float32 remapSourceFrom; // Offset: 340
    keen::float32 remapSourceTo; // Offset: 344
    keen::float32 outputLevelsFrom; // Offset: 348
    keen::float32 outputLevelsTo; // Offset: 352
};

struct TestCompositeScatterImage {
    keen::ObjectReference<keen::ds::CompositeScatterImage> testObjectReference; // Offset: 0
};

struct DungeonTriggerConfiguration {
};

struct DungeonTriggerSetup {
    keen::DsString identifier; // Offset: 0
    keen::Color color; // Offset: 40
};

struct DungeonTriggerSlot {
    keen::DsString identifier; // Offset: 0
    keen::HashKey32 triggerSlotHash; // Offset: 40
};

struct DungeonTriggerInput {
};

struct DungeonTriggerOutput {
    keen::bool sendActivateEvent; // Offset: 48
    keen::bool sendDeactivateEvent; // Offset: 49
    keen::bool sendResultSignal; // Offset: 50
};

struct DungeonTriggerInfo {
    keen::Color color; // Offset: 0
    keen::DsArray<keen::ds::DungeonTriggerInput> inputs; // Offset: 8
    keen::DsArray<keen::ds::DungeonTriggerOutput> outputs; // Offset: 48
};

typedef keen::ds::DungeonTriggerInfo EntityTriggerInfo;

struct DungeonTriggerGraph {
};

struct DungeonTriggerGraphNode {
    keen::Vector2 position; // Offset: 0
    keen::Guid roomInstanceId; // Offset: 8
};

struct DungeonTriggerGraphNodeEndPoint {
    keen::ObjectReference<keen::ds::SceneDungeonRoomWhitebox> trigger; // Offset: 24
    keen::ObjectReference<keen::ds::DungeonRoomScene> scene; // Offset: 40
    keen::ObjectReference<keen::ds::SceneDungeonRoomInstance> room; // Offset: 56
};

typedef keen::DungeonLogicOperator DungeonLogicOperator;

struct DungeonTriggerSettingsNode {
};

struct DungeonTriggerGraphNodeDungeonLogic {
};

struct DungeonTriggerGraphNodeBool {
    keen::bool value; // Offset: 24
};

struct DungeonTriggerGraphNodeAnd {
    keen::ds::DungeonLogicOperator op; // Offset: 24
};

struct DungeonTriggerGraphNodeOr {
    keen::ds::DungeonLogicOperator op; // Offset: 24
};

struct DungeonTriggerGraphNodeNot {
    keen::ds::DungeonLogicOperator op; // Offset: 24
};

typedef keen::DelayFlags DelayFlags;

struct DungeonTriggerGraphNodeDelay {
    keen::Time duration; // Offset: 24
    keen::ds::DelayMask filter; // Offset: 32
};

struct DungeonTriggerGraphNodeSender {
};

struct DungeonTriggerGraphNodeReceiver {
};

struct DungeonTriggerGraphNodeWhitebox {
};

struct DungeonTriggerGraphLink {
    keen::ObjectReference<keen::ds::DungeonTriggerGraphNode> startNode; // Offset: 0
    keen::ObjectReference<keen::ds::DungeonTriggerGraphNode> endNode; // Offset: 16
    keen::HashKey32 startSlot; // Offset: 32
    keen::HashKey32 endSlot; // Offset: 36
    keen::uint8 startIndex; // Offset: 40
    keen::uint8 endIndex; // Offset: 41
    keen::bool sendActivateEvent; // Offset: 42
    keen::bool sendDeactivateEvent; // Offset: 43
    keen::bool sendResultSignal; // Offset: 44
};

struct PrefabTriggerInfo {
    keen::Guid triggerEntityGuid; // Offset: 0
    keen::HashKey32 triggerSlotHash; // Offset: 16
};

struct PrefabContainmentSet {
    keen::DsArray<keen::HashKey32> triggerTypes; // Offset: 0
};

struct PrefabTriggerSlotType {
    keen::HashKey32 slotTypeId; // Offset: 0
    keen::bool isInput; // Offset: 4
    keen::Color uiColor; // Offset: 8
    keen::ds::string identifier; // Offset: 16
    keen::bool sendActivateEvent; // Offset: 56
    keen::bool sendDeactivateEvent; // Offset: 57
    keen::bool sendResultSignal; // Offset: 58
};

struct PrefabContainment {
    keen::Guid prefabId; // Offset: 0
    keen::DsArray<keen::ds::PrefabTriggerInfo> triggerGuids; // Offset: 16
    keen::DsArray<keen::ds::PrefabTriggerSlotType> slotDefinitions; // Offset: 56
    keen::DsArray<keen::ds::PrefabContainmentSet> containmentVariations; // Offset: 96
};

struct WhiteboxContainment {
    keen::DsArray<keen::ds::PrefabTriggerSlotType> slotDefinitions; // Offset: 0
    keen::DsArray<keen::ds::PrefabContainmentSet> containmentVariations; // Offset: 40
};

typedef keen::WhiteboxTriggerFlags WhiteboxTriggerFlags;

typedef keen::WhiteboxTriggerMask WhiteboxTriggerMask;

struct WhiteboxTriggerSetup {
    keen::ds::string triggerFormula; // Offset: 0
    keen::Time triggerDelay; // Offset: 40
    keen::ds::DelayMask triggerDelayMask; // Offset: 48
    keen::StaticArray<keen::HashKey32,16> triggerIds; // Offset: 52
    keen::HashKey32 triggerSlot; // Offset: 116
    keen::ds::WhiteboxTriggerMask triggerMask; // Offset: 120
    keen::uint8 triggerIndex; // Offset: 121
    keen::bool sendActivateEvent; // Offset: 122
    keen::bool sendDeactivateEvent; // Offset: 123
    keen::bool sendResultSignal; // Offset: 124
    keen::bool initialState; // Offset: 125
};

struct WhiteboxTriggerInfo {
    keen::Guid triggerObjectInstanceId; // Offset: 128
};

struct DungeonTrigger {
    keen::DsString identifier; // Offset: 0
    keen::WorldTransform transform; // Offset: 40
    keen::Guid roomSceneId; // Offset: 96
    keen::Guid roomInstanceId; // Offset: 112
    keen::Guid whiteboxInstanceId; // Offset: 128
    keen::DsArray<keen::ds::PrefabContainmentSet> containmentVariations; // Offset: 144
    keen::AxisAlignedBox boundingBox; // Offset: 192
};

struct RoomTriggerList {
    keen::Guid dungeonTriggerGraphId; // Offset: 0
    keen::DsArray<keen::ds::PrefabTriggerSlotType> slotDefinitions; // Offset: 16
    keen::DsArray<keen::ds::DungeonTrigger> trigger; // Offset: 56
};

struct DungeonTriggerWhitebox {
    keen::Guid id; // Offset: 0
    keen::DsArray<keen::ds::WhiteboxTriggerSetup> setups; // Offset: 16
};

struct DungeonTriggerRoom {
    keen::Guid id; // Offset: 0
    keen::DsArray<keen::ds::DungeonTriggerWhitebox> whiteboxes; // Offset: 16
};

struct DungeonTriggers {
    keen::DsArray<keen::ds::DungeonTriggerRoom> rooms; // Offset: 0
};

struct EntityAnimationPath {
    keen::ds::AttachmentSlot slot; // Offset: 0
    keen::Time length; // Offset: 8
};

struct EntityAnimationPathPoint {
    keen::float3 offset; // Offset: 0
    keen::Quaternion orientation; // Offset: 12
    keen::bool enableConstantRotationX; // Offset: 28
    keen::float constantRotationX; // Offset: 32
    keen::bool enableConstantRotationY; // Offset: 36
    keen::float constantRotationY; // Offset: 40
    keen::bool enableConstantRotationZ; // Offset: 44
    keen::float constantRotationZ; // Offset: 48
};

struct SceneTemplate {
};

struct SceneWaterTemplate {
};

typedef keen::WorldDistributionTypeFlag WorldDistributionTypeFlag;

struct VfxUserEffectParameterDataBlockIncludeDummy0 {
    keen::ds::VfxUserEffectParameterDataBlock dummy; // Offset: 0
};

struct SceneModel {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 64
    keen::ObjectReference<keen::ds::ClothCollider> clothCollider; // Offset: 80
    keen::Color color; // Offset: 96
};

struct EntitySpawnDefinition {
    keen::ds::ecs::TemplateReference templateReference; // Offset: 0
    keen::ObjectReference<keen::ds::Model> model; // Offset: 16
    keen::Color color; // Offset: 32
};

struct TemplatePreviewSubEntity {
    keen::Guid templateId; // Offset: 0
    keen::DsArray<keen::ObjectReference<keen::ds::Model>> models; // Offset: 16
    keen::ds::ecs::Offset offset; // Offset: 56
    keen::ds::AttachmentSlot slot; // Offset: 96
};

struct TemplatePreviewVfx {
    keen::ObjectReference<keen::ds::VfxDefinition> vfx; // Offset: 0
    keen::ds::ecs::Offset offset; // Offset: 16
    keen::ds::AttachmentSlot slot; // Offset: 56
    keen::DsOptional<keen::ds::VfxUserEffectParameterDataBlock> initParameters; // Offset: 64
};

struct TemplatePreviewPart {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
    keen::ds::ColorCombination paletteColors; // Offset: 16
    keen::ObjectReference<keen::ds::RenderGradientMapResource> gradient; // Offset: 64
    keen::DsArray<keen::ds::RenderBlendShapeSlot> blendShapes; // Offset: 80
};

struct TemplatePreview {
    keen::DsArray<keen::ds::TemplatePreviewPart> parts; // Offset: 0
    keen::ObjectReference<keen::ds::ecs::Template> spawnedEntity; // Offset: 40
    keen::ds::TemplatePreviewVfx vfx; // Offset: 56
    keen::DsArray<keen::ds::TemplatePreviewSubEntity> subEntities; // Offset: 136
    keen::ds::AttachmentSlotMask subEntityAttachmentMask; // Offset: 176
    keen::ObjectReference<keen::ds::AnimationGraph> animationGraph; // Offset: 180
    keen::StaticArray<keen::ds::AnimationJointIndex,14> slotJointIndexMapping; // Offset: 196
    keen::Guid hierarchyId; // Offset: 224
    keen::ds::ecs::ColliderDataArray allColliders; // Offset: 240
    keen::float scale; // Offset: 280
};

struct TemplateInfo {
    keen::DsString description; // Offset: 0
    keen::bool isPlayerSpawn; // Offset: 40
    keen::bool isMapMarker; // Offset: 41
    keen::bool isFakePlayerSpawner; // Offset: 42
    keen::bool isContainer; // Offset: 43
    keen::bool isActor; // Offset: 44
    keen::bool isAutomatedPlayer; // Offset: 45
    keen::bool isSkinned; // Offset: 46
    keen::bool doNotSave; // Offset: 47
    keen::bool questEntity; // Offset: 48
    keen::bool isNpc; // Offset: 49
    keen::bool isCraftingAssistant; // Offset: 50
    keen::ds::LocaTagId nameLocaId; // Offset: 52
    keen::ds::UiNpcRenderingOptions npcRenderingOptions; // Offset: 56
    keen::ds::WorkshopId workshopId; // Offset: 108
    keen::ds::LocaTagId workshopLabel; // Offset: 112
    keen::ds::CharacterPresetReference characterPresetReference; // Offset: 116
    keen::ds::ItemReference placementItem; // Offset: 132
    keen::ds::GameKnowledgeRequirement knowledgeRequirement; // Offset: 148
    keen::uint32 containerSlotCount; // Offset: 252
    keen::ObjectReference<keen::ds::BaseVoxelMaterial> floorMaterial; // Offset: 256
    keen::float32 floorMaterialRadius; // Offset: 272
    keen::ds::FloorMaterialShape floorMaterialShape; // Offset: 276
    keen::float32 floorMaterialNoiseStrength; // Offset: 280
    keen::ObjectReference<keen::ds::Model> fallbackModel; // Offset: 284
};

struct TemplateInfoCollection {
    keen::DsArray<keen::Guid> templateGuids; // Offset: 0
    keen::DsArray<keen::ds::TemplateInfo> templateInfos; // Offset: 40
    keen::DsArray<keen::AxisAlignedBox> templateBBoxes; // Offset: 80
};

struct TemplateSubentityIds {
    keen::DsArray<keen::Guid> subentityTemplateGuids; // Offset: 0
};

struct SceneEntitySpawn {
    keen::ObjectReference<keen::ds::EntitySpawnDefinition> entitySpawnDefinition; // Offset: 64
    keen::ObjectReference<keen::ds::ecs::Template> templateReference; // Offset: 80
    keen::ContentHash templatePreviewContentHash; // Offset: 96
    keen::ds::SceneEntitySpawnData spawnData; // Offset: 112
    keen::bool storeSceneId; // Offset: 340
    keen::bool snapToGround; // Offset: 341
    keen::bool enableFloorMaterial; // Offset: 342
};

struct EntitySpawnInfo {
    keen::ds::KnowledgeId unlockKnowledge; // Offset: 0
    keen::DsArray<keen::ds::SubEntityKnowledgeQuery> subEntityKnowledgeQueries; // Offset: 8
    keen::DsArray<keen::ds::KnowledgeId> triggerKnowledgeIds; // Offset: 48
    keen::HashKey32 uiWorldEventId; // Offset: 88
    keen::Guid knowledgeQuery; // Offset: 92
    keen::ds::LootContainerId lootContainerId; // Offset: 108
    keen::ds::FogRemovalId fogRemovalId; // Offset: 112
    keen::ds::JointAnimationReference entityAnimation; // Offset: 116
    keen::ds::AttachmentSlotMask entityAnimationSlotMask; // Offset: 132
};

struct SceneVoxelObject {
    keen::ObjectReference<keen::ds::VoxelObjectDefinition> voxelModel; // Offset: 64
    keen::bool isWeathered; // Offset: 80
    keen::Color color; // Offset: 84
};

typedef keen::VoxelBlitFunction VoxelBlitFunction;

struct SceneVoxelBrush {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 64
    keen::Color color; // Offset: 80
    keen::ds::VoxelMaterialReference material; // Offset: 84
    keen::bool disableDisplacement; // Offset: 100
    keen::bool resolveBiomePerVoxel; // Offset: 101
    keen::bool paintMaterialOnly; // Offset: 102
    keen::ds::VoxelBlitFunction blitFunction; // Offset: 103
    keen::bool allowNonManifold; // Offset: 104
    keen::ObjectReference<keen::ds::FogRemovalSetup> removableFogId; // Offset: 108
    keen::bool addDestructionEdge; // Offset: 124
};

struct SceneBlockOutBrushPoint {
    keen::float32 height; // Offset: 64
    keen::float2 offset; // Offset: 68
    keen::ds::BlockOutMeshPointBrushScatteringSettings brushScattering; // Offset: 76
};

struct SceneBlockOutBrush {
    keen::ds::VoxelMaterialReference material; // Offset: 64
    keen::Color color; // Offset: 80
    keen::bool enableTopDisplacement; // Offset: 84
    keen::bool enableTopBrushScattering; // Offset: 85
    keen::bool negativeVoxels; // Offset: 86
    keen::bool ignoreDisplacementBlockers; // Offset: 87
    keen::bool resolveBiomePerVoxel; // Offset: 88
    keen::ObjectReference<keen::ds::BlockOutBrushScatteringDefinition> scattering; // Offset: 92
    keen::ObjectReference<keen::ds::FogRemovalSetup> removableFogId; // Offset: 108
};

struct BlockOutBrushScatteringDefinition {
};

struct BlockOutBrushScatteringPointModel {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
    keen::FloatRange angleRange; // Offset: 16
    keen::FloatRange heightRange; // Offset: 24
    keen::float32 randomYRotation; // Offset: 32
    keen::float32 nonUniformScaling; // Offset: 36
    keen::float32 shearFactor; // Offset: 40
};

struct BlockOutBrushScatteringPoint {
    keen::DsArray<keen::ds::BlockOutBrushScatteringPointModel> models; // Offset: 0
};

struct BlockOutBrushScatteringLowerEdgeModel {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
    keen::FloatRange angleRange; // Offset: 16
    keen::float32 randomYRotation; // Offset: 24
    keen::FloatRange heightRange; // Offset: 28
    keen::float32 randomScaling; // Offset: 36
    keen::float32 scaleFactor; // Offset: 40
    keen::float32 nonUniformScaling; // Offset: 44
    keen::float32 shearFactor; // Offset: 48
};

struct BlockOutBrushScatteringLowEdge {
    keen::float32 modelsPerMeter; // Offset: 0
    keen::DsArray<keen::ds::BlockOutBrushScatteringLowerEdgeModel> models; // Offset: 8
};

struct BlockOutBrushScatteringUpperEdgeModel {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
    keen::FloatRange angleRange; // Offset: 16
    keen::float32 randomYRotation; // Offset: 24
    keen::FloatRange heightRange; // Offset: 28
    keen::float32 randomScaling; // Offset: 36
    keen::float32 scaleFactor; // Offset: 40
    keen::float32 nonUniformScaling; // Offset: 44
    keen::float32 shearFactor; // Offset: 48
};

struct BlockOutBrushScatteringUpperEdge {
    keen::float32 modelsPerMeter; // Offset: 0
    keen::DsArray<keen::ds::BlockOutBrushScatteringUpperEdgeModel> models; // Offset: 8
};

struct BlockOutBrushScatteringWallModel {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
    keen::FloatRange normalAngleRange; // Offset: 16
    keen::float32 maxOverhangY; // Offset: 24
    keen::float32 randomYRotation; // Offset: 28
};

struct BlockOutBrushScatteringWall {
    keen::float32 modelsPerMeter; // Offset: 0
    keen::DsArray<keen::ds::BlockOutBrushScatteringWallModel> models; // Offset: 8
};

struct BlockOutBrushScatteringTopModel {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
    keen::FloatRange normalAngleRange; // Offset: 16
    keen::float32 randomYRotation; // Offset: 24
    keen::FloatRange randomScale; // Offset: 28
};

struct BlockOutBrushScatteringTop {
    keen::float32 modelsPerMeter; // Offset: 0
    keen::DsArray<keen::ds::BlockOutBrushScatteringTopModel> models; // Offset: 8
};

struct BlockOutBrushScatteringDefinitionConverterData {
    keen::Guid id; // Offset: 0
    keen::DsArray<keen::ds::BlockOutBrushScatteringPoint> points; // Offset: 16
    keen::DsArray<keen::ds::BlockOutBrushScatteringLowEdge> lowerEdges; // Offset: 56
    keen::DsArray<keen::ds::BlockOutBrushScatteringUpperEdge> upperEdges; // Offset: 96
    keen::DsArray<keen::ds::BlockOutBrushScatteringWall> walls; // Offset: 136
    keen::DsArray<keen::ds::BlockOutBrushScatteringTop> tops; // Offset: 176
};

struct BlockOutBrushScatteringDefinitionConverterDependencies {
    keen::Guid id; // Offset: 0
    keen::DsArray<keen::Guid> models; // Offset: 16
};

struct SceneVoxelMultiBrush {
    keen::DsArray<keen::ds::SceneVoxelBrush> brushes; // Offset: 64
};

typedef keen::DestructionBubbleMode DestructionBubbleMode;

struct SceneDestructionBubble {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 64
    keen::ds::DestructionBubbleMode mode; // Offset: 80
    keen::bool dontDestroyEntities; // Offset: 81
    keen::float32 density; // Offset: 84
};

typedef keen::SceneSurfaceMaterialBubbleMode SceneSurfaceMaterialBubbleMode;

struct SceneSurfaceMaterialBubble {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 64
    keen::ds::VoxelMaterialReference material; // Offset: 80
    keen::uint depth; // Offset: 96
    keen::uint height; // Offset: 100
    keen::bool shelteredByTerrain; // Offset: 104
    keen::ds::SceneSurfaceMaterialBubbleMode mode; // Offset: 105
};

struct SceneCurvePoint {
};

struct SceneCurve {
};

struct SceneRoadPoint {
    keen::float32 widthScale; // Offset: 64
};

struct RoadDefinition {
    keen::float32 width; // Offset: 0
    keen::bool snapToGround; // Offset: 4
    keen::float32 snapStepSize; // Offset: 8
    keen::float32 snapAllowedError; // Offset: 12
    keen::float32 snapMaxSlopeChange; // Offset: 16
    keen::ObjectReference<keen::ds::VoxelRoadShapeDefinition> roadShape; // Offset: 20
    keen::ds::VoxelMaterialReference surfaceMaterial; // Offset: 36
    keen::ds::VoxelMaterialReference groundMaterial; // Offset: 52
    keen::float32 distributionNoise; // Offset: 68
    keen::float32 edgeNoiseWidth; // Offset: 72
    keen::float32 edgeNoiseScale; // Offset: 76
    keen::float32 edgeNoisePersistance; // Offset: 80
};

struct SceneRoad {
    keen::ObjectReference<keen::ds::RoadDefinition> definition; // Offset: 64
    keen::bool snapToOtherRoads; // Offset: 80
};

typedef keen::CaveVoxelMode CaveVoxelMode;

struct SceneDungeonCaveCurvePoint {
};

struct SceneDungeonCaveCurve {
    keen::ds::CaveVoxelMode mode; // Offset: 64
    keen::float32 height; // Offset: 68
    keen::ds::VoxelMaterialReference material; // Offset: 72
};

struct SceneTunnelPoint {
};

struct SceneTunnel {
    keen::float32 width; // Offset: 64
    keen::float32 height; // Offset: 68
    keen::ds::VoxelMaterialReference material; // Offset: 72
};

struct SceneScatterBlocker {
    keen::float32 radius; // Offset: 64
    keen::float32 fadeInDistance; // Offset: 68
};

typedef keen::DisplacementBlockerMode DisplacementBlockerMode;

struct SceneDisplacementBlocker {
    keen::float32 radius; // Offset: 64
    keen::float32 fadeInDistance; // Offset: 68
    keen::float32 innerDisplacementFactor; // Offset: 72
    keen::ds::DisplacementBlockerMode mode; // Offset: 76
    keen::bool affectFog; // Offset: 77
};

struct SceneVfx {
    keen::ObjectReference<keen::ds::VfxDefinition> effect; // Offset: 64
    keen::HdrColorRgb color; // Offset: 80
    keen::float4 param0; // Offset: 96
    keen::float4 param1; // Offset: 112
    keen::float4 param2; // Offset: 128
    keen::float4 param3; // Offset: 144
    keen::float32 duration; // Offset: 160
    keen::float3 targetPosition; // Offset: 164
    keen::Time startTime; // Offset: 176
    keen::bool isActive; // Offset: 184
};

struct SceneSound {
    keen::ds::SoundContainerReference soundContainer; // Offset: 64
    keen::float32 activeRange; // Offset: 80
};

struct SceneInstance {
    keen::ObjectReference<keen::ds::Scene> scene; // Offset: 64
    keen::bool connectToRoad; // Offset: 80
    keen::sint32 spawnLevelOffset; // Offset: 84
    keen::HashKey32 whiteboxSeed; // Offset: 88
};

struct SceneGroup {
    keen::bool isLocked; // Offset: 0
};

struct SceneRoadAttachmentPoint {
    keen::ObjectReference<keen::ds::RoadDefinition> roadDefinition; // Offset: 64
};

struct SceneScatterImage {
    keen::ObjectReference<keen::ds::ScatterImage> scatterImage; // Offset: 64
};

struct SceneScatterOrigin {
    keen::float32 distributionRadius; // Offset: 64
};

typedef keen::SceneAreaFlagMask SceneAreaFlagMask;

struct ScenePlayableArea {
    keen::float3 size; // Offset: 64
    keen::ds::SceneAreaFlagMask flags; // Offset: 76
    keen::ds::LocaTagReference mapMarkerId; // Offset: 80
};

struct SceneCinematicTimelineEvent {
};

struct SceneCinematicCameraSmoothing {
    keen::bool enableSmoothing; // Offset: 0
    keen::float lerpSpeed; // Offset: 4
};

struct SceneCinematicTimeLineAnimationEvent {
    keen::ds::AnimationReference animation; // Offset: 96
    keen::ObjectReference<keen::ds::SceneModel> modelObject; // Offset: 112
};

struct SceneCinematicTimeLineModelAnimationEvent {
};

struct SceneCinematicTimeLineCameraAnimationEvent {
    keen::Angle fovY; // Offset: 128
};

struct SceneCinematicTimeLineCameraEvent {
    keen::ds::SceneCamera key; // Offset: 96
    keen::ds::SceneCamera nextKey; // Offset: 232
    keen::Guid id; // Offset: 368
    keen::ds::SceneCinematicCameraSmoothing smoothing; // Offset: 384
    keen::float lerpSpeed; // Offset: 392
    keen::float nextLerpSpeed; // Offset: 396
};

struct SceneCinematicTimelineEventMaterializeVoxelObject {
    keen::ObjectReference<keen::ds::SceneVoxelObject> voxelObject; // Offset: 96
    keen::ds::SceneVoxelObject voxelData; // Offset: 112
};

struct SequenceTrack {
    keen::Time loopStart; // Offset: 0
    keen::Time loopEnd; // Offset: 8
    keen::bool loop; // Offset: 16
};

struct SceneCinematicTimelineTrack {
};

struct SceneCinematicTimelineCameraTrack {
};

struct SceneCinematicTimeline {
};

struct SceneCinematic {
    keen::ObjectReference<keen::ds::SceneCinematicTimeline> timeline; // Offset: 4
};

struct CinematicDynamicModelObject {
    keen::Guid objectGuid; // Offset: 0
    keen::ds::SceneModel sceneModel; // Offset: 16
};

struct CinematicSequenceResource {
    keen::DsArray<keen::ds::CinematicDynamicModelObject> dynamicModelObjects; // Offset: 96
};

struct SceneCinematicList {
    keen::DsArray<keen::Guid> cinematics; // Offset: 0
};

struct SceneModelTemplate {
    keen::ObjectReference<keen::ds::Model> defaultModel; // Offset: 0
};

struct SceneVoxelObjectTemplate {
    keen::ObjectReference<keen::ds::VoxelObjectDefinition> defaultVoxelModel; // Offset: 0
};

struct SceneVoxelBrushTemplate {
    keen::ObjectReference<keen::ds::Model> defaultModel; // Offset: 0
};

struct SceneDestructionBubbleTemplate {
    keen::ObjectReference<keen::ds::Model> defaultModel; // Offset: 0
};

struct SceneSurfaceMaterialBubbleTemplate {
    keen::ObjectReference<keen::ds::Model> defaultModel; // Offset: 0
    keen::ds::VoxelMaterialReference defaultMaterial; // Offset: 16
};

struct SceneVoxelMultiBrushTemplate {
};

struct SceneEntitySpawnTemplate {
    keen::ObjectReference<keen::ds::ecs::Template> defaultEntityTemplate; // Offset: 0
};

struct SceneVfxTemplate {
    keen::ObjectReference<keen::ds::VfxDefinition> defaultEffect; // Offset: 0
};

struct SceneWhiteboxTemplate {
    keen::ObjectReference<keen::ds::WhiteboxDefinition> defaultWhitebox; // Offset: 0
};

struct SceneRoadTemplate {
};

struct SceneScatterBlockerTemplate {
};

struct SceneDisplacementBlockerTemplate {
};

struct SceneSoundTemplate {
};

struct SceneCameraTemplate {
};

struct SceneInstanceTemplate {
    keen::ObjectReference<keen::ds::Scene> defaultScene; // Offset: 0
};

struct DungeonInstanceTemplate {
    keen::ObjectReference<keen::ds::DungeonScene> defaultDungeon; // Offset: 0
};

struct DungeonRoomInstanceTemplate {
    keen::ObjectReference<keen::ds::DungeonRoomScene> defaultDungeonRoom; // Offset: 0
};

struct SceneRoadAttachmentPointTemplate {
};

struct SceneScatterOriginTemplate {
};

struct ScenePlayableAreaTemplate {
};

struct SceneScatterEntity {
    keen::WorldTransform transform; // Offset: 0
    keen::uint16 index; // Offset: 56
};

struct SceneScatterChunkDataEntity {
    keen::uint32 index; // Offset: 0
    keen::WorldTransform transform; // Offset: 8
};

struct SceneScatterChunkData {
    keen::DsArray<keen::ds::SceneScatterChunkDataEntity> templateEntities; // Offset: 0
    keen::DsArray<keen::ds::SceneScatterChunkDataEntity> modelEntities; // Offset: 40
};

struct SpawnTemplateModel {
    keen::Guid templateGuid; // Offset: 0
    keen::DsArray<keen::Guid> modelsGuid; // Offset: 16
};

struct SpawnTemplateModels {
    keen::DsArray<keen::ds::SpawnTemplateModel> templateModels; // Offset: 0
    keen::uint32 templateCount; // Offset: 40
};

struct SpawnTemplateGuids {
    keen::DsArray<keen::Guid> templateGuids; // Offset: 0
    keen::uint32 templateCount; // Offset: 40
};

struct SceneScatterResource {
    keen::ds::ScatterSet3ResourceReference scatterSet; // Offset: 0
    keen::uint2 scatterStart; // Offset: 16
    keen::uint2 scatterSize; // Offset: 24
    keen::DsArray<keen::ds::SceneScatterEntity> templates; // Offset: 32
    keen::DsArray<keen::ds::SceneScatterEntity> models; // Offset: 72
    keen::DsArray<keen::Guid> templateGuids; // Offset: 112
    keen::DsArray<keen::Guid> modelGuids; // Offset: 152
    keen::DsArray<keen::DsString> templateNames; // Offset: 192
    keen::DsArray<keen::DsString> modelNames; // Offset: 232
    keen::ds::SpawnTemplateModels spawnTemplateModels; // Offset: 272
    keen::uint2 debugMapSize; // Offset: 320
    keen::DsArray<keen::DsString> debugMapNames; // Offset: 328
    keen::DsArray<keen::ContentHash> debugMaps; // Offset: 368
};

typedef keen::ObjectReference<keen::ds::SceneScatterResource> SceneScatterResourceReference;

struct SceneScatterChunkResource {
    keen::DsArray<keen::ds::SceneScatterEntity> templates; // Offset: 0
    keen::DsArray<keen::ds::SceneScatterEntity> models; // Offset: 40
    keen::DsArray<keen::Guid> templateGuids; // Offset: 80
    keen::DsArray<keen::Guid> modelGuids; // Offset: 120
    keen::DsArray<keen::DsString> templateNames; // Offset: 160
    keen::DsArray<keen::DsString> modelNames; // Offset: 200
};

typedef keen::SceneAreaFlag SceneAreaFlag;

struct ScenePlayableAreaBox {
    keen::WorldPosition areaMin; // Offset: 0
    keen::WorldPosition areaMax; // Offset: 24
    keen::ds::SceneAreaFlagMask flags; // Offset: 48
    keen::ds::LocaTagId mapMarkerId; // Offset: 52
};

struct SceneProceduralLayer {
    keen::ds::ContentPass contentPass; // Offset: 0
    keen::ObjectReference<keen::ds::ScatterSet3> scatterSet; // Offset: 4
    keen::ds::WorldDistributionTypeFlags distributionTypeMask; // Offset: 20
    keen::ds::SourceDataReference content; // Offset: 24
    keen::ds::SourceDataReference contentTags; // Offset: 40
    keen::bool connectManualSubscenesToRoad; // Offset: 56
};

typedef keen::SceneObjectType SceneObjectType;

typedef keen::SceneObjectTypeMask SceneObjectTypeMask;

struct SceneTreeNode {
    keen::ds::SceneObjectType type; // Offset: 0
    keen::uint32 typeIndex; // Offset: 4
    keen::uint32 childStart; // Offset: 8
    keen::uint32 childCount; // Offset: 12
};

struct SceneDistributionDebugData {
    keen::Vector3 position; // Offset: 0
    keen::Guid objectId; // Offset: 16
    keen::float32 radius; // Offset: 32
    keen::float32 minDistance; // Offset: 36
};

struct SceneDistributionTag {
    keen::ds::WhiteboxTagInfo tagInfo; // Offset: 0
    keen::uint32 sceneIndex; // Offset: 48
};

struct DistributionLootInfo {
    keen::Guid scatterSetId; // Offset: 0
    keen::uint32 objectIndex; // Offset: 16
};

struct SceneContent {
    keen::DsArray<keen::ds::SceneModel> models; // Offset: 0
    keen::DsArray<keen::ds::SceneLightResource> pointLights; // Offset: 40
    keen::DsArray<keen::ds::SceneCamera> cameras; // Offset: 80
    keen::DsArray<keen::ds::SceneEntitySpawnResource> spawns; // Offset: 120
    keen::DsArray<keen::ds::SceneVoxelObject> voxelObjects; // Offset: 160
    keen::DsArray<keen::ds::SceneVoxelBrush> voxelBrushes; // Offset: 200
    keen::DsArray<keen::ds::SceneDestructionBubble> destructionBubbles; // Offset: 240
    keen::DsArray<keen::ds::SceneSurfaceMaterialBubble> surfaceMaterialBubbles; // Offset: 280
    keen::DsArray<keen::ds::SceneVfx> vfxs; // Offset: 320
    keen::DsArray<keen::ds::SceneSound> sounds; // Offset: 360
    keen::DsArray<keen::ds::SceneContentRoad> roads; // Offset: 400
    keen::DsArray<keen::ds::SceneContentRoad> pendingRoads; // Offset: 440
    keen::DsArray<keen::ds::SceneContentCaveCurve> caves; // Offset: 480
    keen::DsArray<keen::ds::SceneContentTunnel> tunnels; // Offset: 520
    keen::DsArray<keen::ds::SceneContentBlockOut> blockOuts; // Offset: 560
    keen::DsArray<keen::ds::SceneScatterBlocker> scatterBlockers; // Offset: 600
    keen::DsArray<keen::ds::SceneDisplacementBlocker> displacementBlockers; // Offset: 640
    keen::DsArray<keen::ds::SceneContentInstance> instances; // Offset: 680
    keen::DsArray<keen::ds::SceneContentInstance> resolvedInstances; // Offset: 720
    keen::DsArray<keen::ds::SceneContentInstance> dungeonRoomInstances; // Offset: 760
    keen::DsArray<keen::ds::ScenePlayableAreaBox> playableAreas; // Offset: 800
    keen::DsArray<keen::Guid> proceduralLayers; // Offset: 840
    keen::DsArray<keen::ds::SceneDistributionTag> distributionTags; // Offset: 880
    keen::DsArray<keen::ds::DistributionLootInfo> spawnLootInfos; // Offset: 920
    keen::DsArray<keen::ds::DistributionLootInfo> sceneLootInfos; // Offset: 960
    keen::DsArray<keen::ds::SceneDistributionDebugData> distributionDebugData; // Offset: 1000
    keen::bool isDebugDataDirty; // Offset: 1040
};

struct SceneContentPasses {
    keen::DsArray<keen::ds::SceneContent> passes; // Offset: 0
};

struct SceneDestructionBubbles {
    keen::DsArray<keen::ds::SceneDestructionBubble> bubbles; // Offset: 0
};

struct SceneRuntimeContent {
    keen::DsArray<keen::ds::SceneModel> models; // Offset: 0
    keen::DsArray<keen::ds::SceneLightResource> pointLights; // Offset: 40
    keen::DsArray<keen::ds::SceneCamera> cameras; // Offset: 80
    keen::DsArray<keen::ds::SceneEntitySpawnResource> spawns; // Offset: 120
    keen::DsArray<keen::ds::SceneVfx> vfxs; // Offset: 160
    keen::DsArray<keen::ds::SceneSound> sounds; // Offset: 200
    keen::DsArray<keen::ds::SceneScatterBlocker> scatterBlockers; // Offset: 240
    keen::DsArray<keen::ds::SceneContentInstance> instances; // Offset: 280
    keen::DsArray<keen::ds::ScenePlayableAreaBox> playableAreas; // Offset: 320
    keen::DsArray<keen::Guid> proceduralLayers; // Offset: 360
};

struct SceneVoxelContent {
    keen::DsArray<keen::ds::SceneVoxelContentPass> passes; // Offset: 0
    keen::DsArray<keen::ds::SceneDestructionBubble> destructionBubbles; // Offset: 40
    keen::DsArray<keen::ds::SceneSurfaceMaterialBubble> surfaceMaterialBubbles; // Offset: 80
    keen::DsArray<keen::ds::SceneContentRoad> nonConnectingRoads; // Offset: 120
    keen::DsArray<keen::ds::SceneDisplacementBlocker> displacementBlockers; // Offset: 160
};

struct SceneCombinedContent {
    keen::ds::SceneRuntimeContent runtime; // Offset: 0
    keen::ds::SceneVoxelContent voxel; // Offset: 400
};

struct ContentPassIndex {
    keen::uint64 indexPath; // Offset: 0
    keen::uint32 depth; // Offset: 8
};

struct SceneVoxelContentPass {
    keen::ds::ContentPassIndex passIndex; // Offset: 0
    keen::DsArray<keen::ds::SceneContentBlockOut> blockOuts; // Offset: 16
    keen::DsArray<keen::ds::SceneVoxelObject> voxelObjects; // Offset: 56
    keen::DsArray<keen::ds::SceneVoxelBrush> voxelBrushes; // Offset: 96
    keen::DsArray<keen::ds::SceneContentCaveCurve> caves; // Offset: 136
    keen::DsArray<keen::ds::SceneContentTunnel> tunnels; // Offset: 176
    keen::DsArray<keen::ds::SceneContentRoad> roads; // Offset: 216
    keen::DsArray<keen::ds::SceneContentInstance> instances; // Offset: 256
    keen::DsArray<keen::ds::SceneContentInstance> dungeonRoomInstances; // Offset: 296
    keen::DsArray<keen::Guid> proceduralLayers; // Offset: 336
};

struct SceneContentRoads {
    keen::DsArray<keen::ds::SceneContentRoad> roads; // Offset: 0
};

struct SceneRoadAttachment {
    keen::Vector3 position; // Offset: 0
    keen::Guid definitionGuid; // Offset: 16
    keen::ds::RoadDefinition definition; // Offset: 32
};

struct SceneAttachments {
    keen::DsArray<keen::ds::SceneRoadAttachment> roadAttachments; // Offset: 0
};

struct SceneLightResource {
    keen::WorldTransform transform; // Offset: 0
    keen::ds::RenderLight light; // Offset: 56
};

struct SceneContentRoadPoint {
    keen::WorldPosition position; // Offset: 0
    keen::float32 width; // Offset: 24
};

struct SceneContentRoad {
    keen::Guid definition; // Offset: 0
    keen::DsArray<keen::ds::SceneContentRoadPoint> points; // Offset: 16
    keen::ds::ContentPass contentPass; // Offset: 56
    keen::bool snapToOtherRoads; // Offset: 57
};

struct SceneContentBlockOut {
    keen::Guid objectGuid; // Offset: 0
    keen::WorldTransform transform; // Offset: 16
    keen::DsArray<keen::ds::BlockOutMeshPoint> points; // Offset: 72
    keen::ds::VoxelMaterialReference material; // Offset: 112
    keen::bool enableTopDisplacement; // Offset: 128
    keen::bool enableTopBrushScattering; // Offset: 129
    keen::bool negativeVoxels; // Offset: 130
    keen::bool ignoreDisplacementBlockers; // Offset: 131
    keen::bool resolveBiomePerVoxel; // Offset: 132
    keen::ObjectReference<keen::ds::BlockOutBrushScatteringDefinition> scattering; // Offset: 136
    keen::ObjectReference<keen::ds::FogRemovalSetup> removableFogId; // Offset: 152
};

struct SceneContentCaveCurvePoint {
    keen::WorldPosition position; // Offset: 0
};

struct SceneContentCaveCurve {
    keen::WorldTransform transform; // Offset: 0
    keen::float32 height; // Offset: 56
    keen::ds::CaveVoxelMode mode; // Offset: 60
    keen::ds::VoxelMaterialReference material; // Offset: 64
    keen::DsArray<keen::ds::SceneContentCaveCurvePoint> points; // Offset: 80
};

struct SceneContentTunnelPoint {
    keen::WorldPosition position; // Offset: 0
};

struct SceneContentTunnel {
    keen::float32 width; // Offset: 0
    keen::float32 height; // Offset: 4
    keen::ds::VoxelMaterialReference material; // Offset: 8
    keen::DsArray<keen::ds::SceneContentTunnelPoint> points; // Offset: 24
};

struct SceneEntitySpawnResource {
    keen::WorldTransform transform; // Offset: 0
    keen::ds::ecs::TemplateReference templateReference; // Offset: 56
    keen::ds::SceneEntitySpawnData spawnData; // Offset: 72
    keen::DsArray<keen::DsVariant<keen::ds::ecs::SpawnComponent>> components; // Offset: 304
    keen::bool snapToGround; // Offset: 344
    keen::bool enableFloorMaterial; // Offset: 345
};

struct SceneContentInstance {
    keen::WorldTransform transform; // Offset: 0
    keen::Guid instanceGuid; // Offset: 56
    keen::Guid sceneGuid; // Offset: 72
    keen::bool connectToRoad; // Offset: 88
    keen::sint32 spawnLevelOffset; // Offset: 92
};

struct SceneNoBuildZone {
    keen::WorldPosition worldBoxMin; // Offset: 0
    keen::WorldPosition worldBoxMax; // Offset: 24
    keen::ds::AmbientEnvironment ambience; // Offset: 48
};

struct SceneQuestEntity {
    keen::WorldTransform transform; // Offset: 0
    keen::Guid templateGuid; // Offset: 56
};

struct SceneResource {
    keen::ObjectReference<keen::ds::IblResource> ibl; // Offset: 0
    keen::float32 iblIntensity; // Offset: 16
    keen::DsOptional<keen::ds::render::AtmosphereParameters> atmosphereParameters; // Offset: 24
    keen::DsArray<keen::ds::SceneTreeNode> nodes; // Offset: 40
    keen::DsArray<keen::ds::SceneModel> models; // Offset: 80
    keen::DsArray<keen::ds::SceneLightResource> lights; // Offset: 120
    keen::DsArray<keen::ds::SceneCamera> cameras; // Offset: 160
    keen::DsArray<keen::ds::SceneVfx> vfxs; // Offset: 200
    keen::DsArray<keen::ds::SceneSound> sounds; // Offset: 240
    keen::DsArray<keen::ds::SceneNoBuildZone> noBuildZones; // Offset: 280
    keen::DsArray<keen::ds::SceneQuestEntity> questEntities; // Offset: 320
    keen::uint2 entityChunkCount; // Offset: 360
    keen::uint32 moveVersion; // Offset: 368
    keen::ds::SceneScatterResourceReference scatterResource; // Offset: 372
    keen::ds::SceneResetPlayersOutOfBounds resetPlayersOutOfBounds; // Offset: 392
};

struct SceneEntityChunkResource {
    keen::DsArray<keen::ds::ecs::TemplateReference> templates; // Offset: 0
    keen::DsArray<keen::bool> templatesDoNotSave; // Offset: 40
    keen::DsArray<keen::ObjectReference<keen::ds::Model>> models; // Offset: 80
    keen::DsArray<keen::ds::SceneEntityChunkSpawn> entities; // Offset: 120
    keen::DsArray<keen::ds::SceneEntityExtraData> entityExtraData; // Offset: 160
};

struct SceneEntityExtraData {
    keen::ds::SceneEntitySpawnData spawnData; // Offset: 0
    keen::DsArray<keen::DsVariant<keen::ds::ecs::SpawnComponent>> components; // Offset: 232
    keen::bool enableFloorMaterial; // Offset: 272
};

struct SceneEntityChunkSpawn {
    keen::uint32 index; // Offset: 0
    keen::WorldTransform transform; // Offset: 8
};

struct SceneEntityChunkTemplateInfo {
    keen::Guid templateId; // Offset: 0
    keen::DsOptional<keen::AxisAlignedBox> boundingBox; // Offset: 16
    keen::ObjectReference<keen::ds::Model> fallbackModel; // Offset: 32
    keen::ObjectReference<keen::ds::BaseVoxelMaterial> floorMaterial; // Offset: 48
    keen::float32 floorMaterialRadius; // Offset: 64
    keen::float32 floorMaterialNoiseStrength; // Offset: 68
    keen::ds::FloorMaterialShape floorMaterialShape; // Offset: 72
    keen::bool doNotSave; // Offset: 73
    keen::bool isSkinned; // Offset: 74
};

struct SceneEntityChunkTemplateInfos {
    keen::DsArray<keen::ds::SceneEntityChunkTemplateInfo> infos; // Offset: 0
};

struct SceneScatterBlockerChunk {
    keen::DsArray<keen::ds::SceneScatterBlocker> scatterBlockers; // Offset: 0
};

struct SceneFloorMaterialInstance {
    keen::WorldPosition position; // Offset: 0
    keen::float32 radius; // Offset: 24
    keen::ObjectReference<keen::ds::BaseVoxelMaterial> material; // Offset: 28
    keen::ds::FloorMaterialShape shape; // Offset: 44
    keen::float32 noiseStrength; // Offset: 48
};

struct SceneFloorMaterialChunk {
    keen::DsArray<keen::ds::SceneFloorMaterialInstance> instances; // Offset: 0
};

typedef keen::ObjectReference<keen::ds::SceneResource> SceneResourceReference;

struct SceneInfo {
    keen::float3 pivot; // Offset: 0
    keen::float32 radius; // Offset: 12
    keen::ds::WorldDistributionTypeFlags distributionTypeFlags; // Offset: 16
    keen::bool hasBuildingVoxels; // Offset: 17
};

struct SceneBoundingBox {
    keen::float3 min; // Offset: 0
    keen::float3 max; // Offset: 12
    keen::float3 pivot; // Offset: 24
};

struct ScatterImageAlias {
    keen::Guid target; // Offset: 0
    keen::Guid replacement; // Offset: 16
};

struct ScatterImageAliases {
    keen::DsArray<keen::ds::ScatterImageAlias> aliases; // Offset: 0
};

struct ScenePreview {
    keen::DsArray<keen::Guid> modelIds; // Offset: 0
    keen::DsArray<keen::WorldTransform> transforms; // Offset: 40
    keen::ds::SceneObjectTypeMask objectTypes; // Offset: 80
};

struct SceneConverterConfig {
    keen::bool validateNonTestScenes; // Offset: 0
};

struct BenchmarkPointDebugContent {
    keen::Guid guid; // Offset: 0
    keen::WorldTransform worldTransform; // Offset: 16
    keen::HashKey32 hash; // Offset: 72
};

struct SceneResolvedDebugContent {
    keen::DsArray<keen::ds::BenchmarkPointDebugContent> benchmarkPoints; // Offset: 0
};

struct SceneDebugContent {
    keen::DsArray<keen::ds::BenchmarkPointDebugContent> benchmarkPoints; // Offset: 0
};

struct SceneLevelDistribution {
    keen::ObjectReference<keen::ds::SceneLevelDistributionSet> levelDistributionSet; // Offset: 0
};

struct SceneLevelDistributionSet {
};

struct SceneLevelMap {
    keen::ObjectReference<keen::ds::AbstractScatterImage> scatterImage; // Offset: 0
    keen::uint32 level; // Offset: 16
};

struct SceneLevelMapConvertInfo {
    keen::uint32 level; // Offset: 0
    keen::Guid imageId; // Offset: 4
    keen::ds::ScatterImageMetaData imageMetaData; // Offset: 20
};

struct SceneLevelDistributionConvertParams {
    keen::Guid sceneId; // Offset: 0
    keen::Guid levelDistributionSetObjectId; // Offset: 16
    keen::DsArray<keen::ds::SceneLevelMapConvertInfo> levelInfos; // Offset: 32
};

struct SceneLevelDistributionSetInfo {
    keen::uint2 mapSize; // Offset: 0
    keen::uint32 upscaleFactor; // Offset: 8
};

typedef keen::WorldTransformFlag WorldTransformFlag;

struct PrefabLibrary {
    keen::ObjectReference<keen::ds::WhiteboxCollisionSetup> collisions; // Offset: 0
    keen::ObjectReference<keen::ds::DungeonConnectionsConfig> connections; // Offset: 16
};

struct PrefabLibrarySettings {
    keen::ObjectReference<keen::ds::WhiteboxCollisionSetup> collisions; // Offset: 0
};

struct DungeonConnectionInfo {
    keen::DsArray<keen::ds::DungeonConnectionSetup> connectionPoints; // Offset: 0
};

struct PrefabDirectory {
};

struct Prefab {
    keen::float32 replacementWeight; // Offset: 96
};

struct PrefabEntitySpawn {
    keen::Guid objectId; // Offset: 352
    keen::ds::ContentPass contentPass; // Offset: 368
};

typedef keen::TileContextFlags TileContextFlags;

struct PrefabObjectContextInfo {
    keen::ds::SceneObjectType objectType; // Offset: 0
    keen::ds::ContentPassIndex passIndex; // Offset: 8
    keen::ds::TileContextFlags type; // Offset: 24
    keen::uint32 index; // Offset: 28
    keen::bool forbidden; // Offset: 32
};

struct WhiteboxTriggerScope {
};

struct PrefabLootEntity {
    keen::uint32 spawnIndex; // Offset: 0
    keen::ds::LootContainerInfo entityLootInfo; // Offset: 8
};

struct PrefabContent {
    keen::DsArray<keen::ds::PrefabEntitySpawn> spawns; // Offset: 0
    keen::DsArray<keen::ds::SceneModel> models; // Offset: 40
    keen::DsArray<keen::ds::SceneDestructionBubble> destructionBubbles; // Offset: 80
    keen::DsArray<keen::ds::SceneLightResource> pointLights; // Offset: 120
    keen::DsArray<keen::ds::PrefabLootEntity> lootInfos; // Offset: 160
    keen::DsArray<keen::ds::PrefabObjectContextInfo> contextInfos; // Offset: 200
    keen::DsArray<keen::ds::SceneContentRoad> roads; // Offset: 240
    keen::DsArray<keen::ds::SceneDisplacementBlocker> displacementBlockers; // Offset: 280
    keen::DsArray<keen::ds::PrefabContentPass> passes; // Offset: 320
};

struct PrefabContentPass {
    keen::ds::ContentPassIndex passIndex; // Offset: 0
    keen::DsArray<keen::ds::SceneVoxelObject> voxelObjects; // Offset: 16
    keen::DsArray<keen::ds::SceneVoxelBrush> voxelBrushes; // Offset: 56
    keen::DsArray<keen::ds::SceneContentTunnel> tunnels; // Offset: 96
};

struct PrefabEntityInfo {
    keen::DsString description; // Offset: 0
    keen::ObjectReference<keen::ds::Prefab> prefab; // Offset: 40
    keen::ObjectReference<keen::ds::ecs::Template> templateReference; // Offset: 56
};

struct PrefabVoxelWorldSceneContent {
    keen::DsArray<keen::ds::SceneDungeonRoomWhitebox> whiteboxes; // Offset: 0
    keen::DsArray<keen::ds::SceneVoxelObject> voxelObjects; // Offset: 40
    keen::DsArray<keen::ds::SceneVoxelBrush> voxelBrushes; // Offset: 80
    keen::DsArray<keen::ds::SceneDestructionBubble> destructionBubbles; // Offset: 120
    keen::DsArray<keen::ds::SceneContentRoad> roads; // Offset: 160
    keen::DsArray<keen::ds::SceneContentTunnel> tunnels; // Offset: 200
};

struct PrefabWhiteboxResolveInfo {
    keen::WorldTransform worldTransform; // Offset: 0
    keen::ds::ContentPass contentPass; // Offset: 56
};

struct WhiteboxEntityList {
    keen::DsArray<keen::ds::PrefabEntityInfo> singleEntityPrefabs; // Offset: 0
    keen::DsArray<keen::ds::PrefabEntityInfo> customPrefabs; // Offset: 40
};

struct WhiteboxOptions {
    keen::Guid whiteboxDefinitionId; // Offset: 0
    keen::bool reducePrefabProbability; // Offset: 16
    keen::DsArray<keen::ds::PrefabInfo> prefabs; // Offset: 24
};

struct PrefabInfo {
    keen::ObjectReference<keen::ds::Prefab> prefab; // Offset: 0
    keen::float32 weight; // Offset: 16
    keen::DsArray<keen::ds::WhiteboxTagInfo> tags; // Offset: 24
};

typedef keen::WhiteboxTileType WhiteboxTileType;

struct WhiteboxDefinitionModelVisibility {
    keen::bool voxelMode; // Offset: 0
    keen::bool editMode; // Offset: 1
    keen::bool brushMode; // Offset: 2
};

struct WhiteboxDefinition {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
    keen::ds::WhiteboxDefinitionModelVisibility modelVisibility; // Offset: 16
    keen::bool reducePrefabProbability; // Offset: 19
    keen::ds::WhiteboxTileType type; // Offset: 20
    keen::float2 gridSize; // Offset: 24
    keen::Color tintColor; // Offset: 32
    keen::float3 modelScale; // Offset: 36
};

typedef keen::TileContextFlagMask TileContextFlagMask;

struct WhiteboxTileContext {
    keen::ds::TileContextFlagMask context; // Offset: 0
};

struct SceneDungeonRoomWhitebox {
    keen::DsString identifier; // Offset: 64
    keen::ObjectReference<keen::ds::WhiteboxDefinition> definition; // Offset: 104
    keen::float32 replacementProbability; // Offset: 120
    keen::float32 randomRotationOffsetX; // Offset: 124
    keen::float32 randomRotationOffsetY; // Offset: 128
    keen::float32 randomRotationOffsetZ; // Offset: 132
    keen::bool snapToGround; // Offset: 136
    keen::ds::SceneEntitySpawnData spawnData; // Offset: 140
};

struct DungeonRoomDirectory {
};

struct DungeonRoomScene {
    keen::uint3 size; // Offset: 208
};

struct DungeonRoomRayDedubg {
    keen::Vector3 start; // Offset: 0
    keen::Vector3 end; // Offset: 16
    keen::bool hit; // Offset: 32
};

struct DungeonRoomCollisionsDebugInfo {
    keen::DsArray<keen::ds::DungeonRoomRayDedubg> rayChecks; // Offset: 0
    keen::DsArray<keen::AxisAlignedBox> checkBoundingBoxes; // Offset: 40
};

struct DungeonRoomShapes {
    keen::DsArray<keen::AxisAlignedBox> boundingBoxes; // Offset: 0
};

struct DungeonRoomSceneLayerGroup {
};

typedef keen::RoomConnectionPointType RoomConnectionPointType;

struct DungeonRoomConnectionPoint {
    keen::Guid objectId; // Offset: 0
    keen::Guid roomInstanceId; // Offset: 16
    keen::Guid roomSceneId; // Offset: 32
    keen::Guid whiteboxDefinitionId; // Offset: 48
    keen::WorldTransform worldTransform; // Offset: 64
    keen::ds::RoomConnectionPointType type; // Offset: 120
    keen::AxisAlignedBox boundingBox; // Offset: 128
    keen::ds::string identifier; // Offset: 160
};

struct DungeonRoomConnectionPoints {
    keen::DsArray<keen::ds::DungeonRoomConnectionPoint> connections; // Offset: 0
};

struct DungeonConnectionPointInfo {
    keen::ds::DungeonRoomConnectionPoint pointA; // Offset: 0
    keen::ds::DungeonRoomConnectionPoint pointB; // Offset: 208
};

struct DungeonConnectionPoints {
    keen::DsArray<keen::ds::DungeonConnectionPointInfo> connections; // Offset: 0
};

struct DungeonWhiteboxReplacement {
    keen::Guid whiteboxInstanceId; // Offset: 0
    keen::Guid newWhiteboxDefinitionId; // Offset: 16
};

struct DungeonWhiteboxReplacements {
    keen::DsArray<keen::ds::DungeonWhiteboxReplacement> replacements; // Offset: 0
};

struct DungeonEntranceInfo {
    keen::Guid whiteboxInstanceId; // Offset: 0
    keen::DsString identifier; // Offset: 16
    keen::WorldTransform transform; // Offset: 56
    keen::AxisAlignedBox boundingBox; // Offset: 112
};

struct DungeonRoomEntranceList {
    keen::DsArray<keen::ds::DungeonEntranceInfo> entrances; // Offset: 0
};

struct DungeonRoomEntranceConvertInfo {
    keen::DsArray<keen::Guid> markedEntrances; // Offset: 0
};

struct WhiteboxCollisionSetup {
};

struct WhiteboxCollisionGroup {
};

struct WhiteboxCollisionItem {
    keen::ObjectReference<keen::ds::WhiteboxDefinition> definition; // Offset: 0
    keen::uint8 weight; // Offset: 16
    keen::float32 range; // Offset: 20
};

struct WhiteboxCollisionGroupInfo {
    keen::DsArray<keen::ds::WhiteboxCollisionItem> items; // Offset: 0
};

struct WhiteboxCollisionInfo {
    keen::DsArray<keen::ds::WhiteboxCollisionGroupInfo> groups; // Offset: 0
};

struct WhiteboxContextSetup {
    keen::ObjectReference<keen::ds::WhiteboxTag> groundTag; // Offset: 0
    keen::ObjectReference<keen::ds::WhiteboxTag> ceilingTag; // Offset: 16
};

struct DungeonConnectionsConfig {
};

struct DungeonConnectionSetup {
    keen::ObjectReference<keen::ds::WhiteboxDefinition> connectionWhitebox; // Offset: 0
    keen::ObjectReference<keen::ds::WhiteboxDefinition> replacementOtherConnection; // Offset: 16
    keen::ObjectReference<keen::ds::WhiteboxDefinition> replacementRoadPoint; // Offset: 32
    keen::ObjectReference<keen::ds::WhiteboxDefinition> replacementWithoutConnection; // Offset: 48
    keen::AxisAlignedBox connectionAABB; // Offset: 64
};

typedef keen::WhiteboxNodeType WhiteboxNodeType;

struct WhiteboxConvertInfo {
    keen::HashKey32 id; // Offset: 0
    keen::HashKey32 parentId; // Offset: 4
    keen::ds::WhiteboxNodeType type; // Offset: 8
    keen::Guid replacementObjectId; // Offset: 12
    keen::Guid whiteboxInstanceId; // Offset: 28
    keen::Guid whiteboxDefinitionId; // Offset: 44
    keen::ds::ContentPassIndex passIndex; // Offset: 64
    keen::ds::WhiteboxTileContext roomTileContext; // Offset: 80
    keen::ds::WhiteboxTileContext requiredRoomTileContext; // Offset: 81
    keen::ds::WhiteboxTileContext forbiddenRoomTileContext; // Offset: 82
    keen::DsArray<keen::ds::WhiteboxTriggerSetup> requiredTriggers; // Offset: 88
    keen::DsArray<keen::ds::WhiteboxTriggerInfo> triggerInfos; // Offset: 128
    keen::WorldTransform worldTransform; // Offset: 168
    keen::DsArray<keen::ds::WhiteboxTagInfo> tags; // Offset: 224
    keen::float3 randomRotationOffset; // Offset: 264
    keen::float32 replacementProbability; // Offset: 276
    keen::ds::SceneEntitySpawnData entitySpawnData; // Offset: 280
    keen::Guid triggerGraphId; // Offset: 508
};

struct WhiteboxReplacementPass {
    keen::DsArray<keen::ds::WhiteboxConvertInfo> replacements; // Offset: 0
    keen::DsArray<keen::ds::WhiteboxConvertInfo> failedReplacements; // Offset: 40
};

struct WhiteboxReplacementInfoPasses {
    keen::DsArray<keen::ds::WhiteboxReplacementInfoPass> passes; // Offset: 0
};

struct WhiteboxReplacementInfoPass {
    keen::ds::ContentPassIndex passIndex; // Offset: 0
    keen::DsArray<keen::ds::WhiteboxReplacementInfo> replacements; // Offset: 16
};

struct WhiteboxReplacementInfo {
    keen::HashKey32 id; // Offset: 0
    keen::Guid sceneId; // Offset: 4
    keen::WorldTransform worldTransform; // Offset: 24
    keen::DsArray<keen::ds::WhiteboxTriggerInfo> triggers; // Offset: 80
    keen::ds::WhiteboxTileContext roomTileContext; // Offset: 120
    keen::ds::SceneEntitySpawnData entitySpawnData; // Offset: 124
};

struct SceneWhiteboxContentInfo {
    keen::Guid whiteboxInstanceId; // Offset: 0
    keen::Guid whiteboxDefinitionId; // Offset: 16
    keen::uint32 passIndex; // Offset: 32
    keen::WorldTransform worldTransform; // Offset: 40
    keen::float3 randomRotationOffset; // Offset: 96
    keen::float32 replacementProbability; // Offset: 108
    keen::DsArray<keen::ds::WhiteboxTagInfo> tags; // Offset: 112
    keen::ds::WhiteboxTileContext requiredRoomTileContext; // Offset: 152
    keen::ds::WhiteboxTileContext forbiddenRoomTileContext; // Offset: 153
    keen::ds::SceneEntitySpawnData entitySpawnData; // Offset: 156
    keen::Guid triggerGraphId; // Offset: 384
};

struct SceneWhiteboxInfo {
    keen::DsArray<keen::ds::SceneWhiteboxContentInfo> whiteboxes; // Offset: 0
};

struct SceneWhiteboxErrorInfo {
    keen::uint32 failedReplacementCount; // Offset: 0
};

struct WhiteboxTagList {
    keen::DsArray<keen::ds::WhiteboxTagInfo> tags; // Offset: 0
};

struct SceneDungeonRoomInstance {
    keen::DsString identifier; // Offset: 64
    keen::ObjectReference<keen::ds::DungeonRoomScene> room; // Offset: 104
    keen::sint32 spawnLevelOffset; // Offset: 120
    keen::HashKey32 whiteboxSeed; // Offset: 124
};

struct SceneDungeonRoomLayerGroupInstance {
    keen::ObjectReference<keen::ds::DungeonRoomSceneLayerGroup> layerGroup; // Offset: 64
};

struct DungeonEntranceDefinition {
    keen::ObjectReference<keen::ds::SceneDungeonRoomWhitebox> whitebox; // Offset: 0
};

struct DungeonConnectionPriority {
    keen::ObjectReference<keen::ds::SceneDungeonRoomInstance> room; // Offset: 0
    keen::ObjectReference<keen::ds::SceneDungeonRoomWhitebox> whitebox; // Offset: 16
};

struct DungeonDirectory {
};

struct DungeonScene {
};

struct SceneDungeonInstance {
    keen::ObjectReference<keen::ds::DungeonScene> dungeon; // Offset: 64
    keen::sint32 spawnLevelOffset; // Offset: 80
    keen::HashKey32 whiteboxSeed; // Offset: 84
};

struct SceneWhiteboxPathParameters {
    keen::WorldTransform transform; // Offset: 0
    keen::Guid rootSceneId; // Offset: 56
    keen::Guid sceneInstanceId; // Offset: 72
    keen::uint32 seed; // Offset: 88
};

struct SceneWhiteboxPathList {
    keen::ds::SceneWhiteboxPathParameters rootScene; // Offset: 0
    keen::DsArray<keen::ds::SceneWhiteboxPathParameters> subscenes; // Offset: 96
    keen::DsArray<keen::ds::SceneWhiteboxPathParameters> scatterScenes; // Offset: 136
};

struct ContentLabelInfo {
    keen::DsArray<keen::ds::WhiteboxTagInfo> whiteboxLabels; // Offset: 0
    keen::ds::ObjectLootSettings lootSettings; // Offset: 40
};

struct ecs.EntityTag {
};

struct ForbiddenEntityTags {
};

typedef keen::ObjectReference<keen::ds::Sequence> SequenceReference;

typedef keen::SessionDebugAction SessionDebugAction;

struct SessionDebugActionMessage {
    keen::ds::SessionDebugAction action; // Offset: 0
};

struct SessionDebugChannelInfo {
    keen::ds::string name; // Offset: 0
};

struct SessionDebugChannelsMessage {
    keen::DsArray<keen::ds::SessionDebugChannelInfo> channels; // Offset: 0
};

struct SessionDebugPacketChannel {
    keen::uint16 messageSize; // Offset: 0
    keen::uint8 messageCount; // Offset: 2
};

struct SessionDebugPacketsChannel {
    keen::uint64 totalMessageSize; // Offset: 0
    keen::uint32 totalMessageCount; // Offset: 8
    keen::uint32 messageSize; // Offset: 12
    keen::uint16 messageCount; // Offset: 16
};

typedef keen::SessionDebugPacketChannels SessionDebugPacketChannels;

typedef keen::SessionDebugPacketsChannels SessionDebugPacketsChannels;

struct SessionDebugPacket {
    keen::Time time; // Offset: 0
    keen::Time oldestMessageTime; // Offset: 8
    keen::uint32 machineId; // Offset: 16
    keen::uint32 packetId; // Offset: 20
    keen::uint32 packetSize; // Offset: 24
    keen::uint8 machineIndex; // Offset: 28
    keen::ds::SessionDebugPacketChannels channels; // Offset: 30
};

struct SessionDebugPacketMessage {
    keen::Time time; // Offset: 0
    keen::uint32 machineId; // Offset: 8
    keen::ds::SessionDebugPacketsChannels packetsChannels; // Offset: 16
    keen::uint64 totalPacketsSize; // Offset: 784
    keen::uint32 packetsSize; // Offset: 792
};

struct SessionDebugPacketSendMessage {
    keen::DsArray<keen::ds::SessionDebugPacket> packets; // Offset: 800
};

struct SessionDebugPacketRecvMessage {
    keen::DsArray<keen::ds::SessionDebugPacket> packets; // Offset: 800
};

struct SessionDebugMachineStats {
    keen::uint32 machineIndex; // Offset: 0
    keen::uint32 lostPackets; // Offset: 4
    keen::Time roundTripTime; // Offset: 8
    keen::uint64 bandwidthLimitInBps; // Offset: 16
};

struct SessionDebugStatsMessage {
    keen::Time time; // Offset: 0
    keen::DsArray<keen::ds::SessionDebugMachineStats> machineStats; // Offset: 8
};

struct GameParameters {
    keen::uint32 flameLevel; // Offset: 0
    keen::uint32 gameSettingsPreset; // Offset: 4
};

typedef keen::SoundContentType SoundContentType;

struct Sound {
    keen::ds::SoundContentType contentType; // Offset: 0
};

typedef keen::ObjectReference<keen::ds::Sound> SoundReference;

struct SoundContainer {
};

struct SoundContainerEntryShared {
    keen::float32 chance; // Offset: 0
};

struct SoundContainerEntry {
};

struct SoundContainerSoundEntry {
    keen::ds::SoundReference sound; // Offset: 4
};

struct SoundContainerContainerEntry {
    keen::ds::SoundContainerReference container; // Offset: 4
};

struct SoundContainerResource {
    keen::DsArray<keen::DsVariant<keen::ds::SoundContainerResourceEntry>> entries; // Offset: 64
};

struct SoundContainerResourceEntry {
};

typedef keen::ObjectReference<keen::ds::SoundResource> SoundResourceReference;

struct SoundContainerResourceSoundEntry {
    keen::ds::SoundResourceReference sound; // Offset: 4
};

struct SoundContainerResourceContainerEntry {
    keen::ds::SoundContainerResourceReference container; // Offset: 4
};

struct SoundMusicPlaylist {
    keen::DsArray<keen::ds::SoundReference> tracks; // Offset: 0
    keen::bool shuffle; // Offset: 40
    keen::float32 fadeDuration; // Offset: 44
};

typedef keen::ObjectReference<keen::ds::SoundMusicPlaylist> SoundMusicPlaylistReference;

typedef keen::SoundChannelConfiguration SoundChannelConfiguration;

typedef keen::SoundDataFormat SoundDataFormat;

struct SoundResource {
    keen::ds::SoundChannelConfiguration channelConfiguration; // Offset: 0
    keen::ds::SoundDataFormat format; // Offset: 1
    keen::uint16 framesPerSecond; // Offset: 2
    keen::uint32 frameCount; // Offset: 4
    keen::Time duration; // Offset: 8
    keen::DsArray<keen::uint8> data; // Offset: 16
    keen::ContentHash dataHash; // Offset: 56
    keen::ds::string debugName; // Offset: 72
};

struct GpuInformation {
    keen::ds::string identifier; // Offset: 0
};

struct SessionStarted {
    keen::uint32 userId; // Offset: 0
    keen::uint32 sessionCount; // Offset: 4
    keen::ds::GpuInformation gpu; // Offset: 8
    keen::uint32 gameVersion; // Offset: 48
    keen::uint32 engineVersion; // Offset: 52
};

struct CraftingAction {
    keen::HashKey32 station; // Offset: 0
    keen::uint32 count; // Offset: 4
};

struct FoodBuffData {
    keen::uint32 maxUsedSlots; // Offset: 0
    keen::uint32 activatedFoodBuffs; // Offset: 4
};

struct SessionEnded {
    keen::uint32 userId; // Offset: 0
    keen::uint32 maxPlayer; // Offset: 4
    keen::Time playTime; // Offset: 8
    keen::bool host; // Offset: 16
    keen::uint32 saveGameSize; // Offset: 20
    keen::ds::GpuInformation gpu; // Offset: 24
    keen::uint32 gameVersion; // Offset: 64
    keen::uint32 engineVersion; // Offset: 68
    keen::DsArray<keen::HashKey32> unlockedKnowledge; // Offset: 72
    keen::DsArray<keen::ds::CraftingAction> crafting; // Offset: 112
    keen::ds::FoodBuffData foodBuffData; // Offset: 152
    keen::bool didUsePersonelCrafting; // Offset: 160
    keen::ds::ecs::GameSettingsPreset preset; // Offset: 161
    keen::ds::ecs::GameSettings settings; // Offset: 168
};

struct DedicatedSessionStarted {
};

struct DedicatedSessionEnded {
    keen::Time playTime; // Offset: 0
};

typedef keen::DeathCause DeathCause;

struct PlayerDeath {
    keen::ds::DeathCause cause; // Offset: 0
    keen::float3 position; // Offset: 4
    keen::Guid causeGuid; // Offset: 16
    keen::bool wasDeadlyFog; // Offset: 32
};

struct tracking.LevelUp {
    keen::sint32 level; // Offset: 0
    keen::Time duration; // Offset: 8
    keen::float3 position; // Offset: 16
};

typedef keen::tracking::MinSpecError tracking.MinSpecError;

typedef keen::tracking::MinSpecErrorMask tracking.MinSpecErrorMask;

struct tracking.CrashInfo {
    keen::uint32 userId; // Offset: 0
    keen::Time duration; // Offset: 8
    keen::uint32 gameVersion; // Offset: 16
    keen::uint32 engineVersion; // Offset: 20
    keen::ds::tracking::MinSpecErrorMask minspecError; // Offset: 24
};

struct TtfFontResource {
    keen::ContentHash fontFileHash; // Offset: 0
};

struct TtfFontInfo {
    keen::Guid objectId; // Offset: 0
    keen::ContentHash fontFileHash; // Offset: 16
};

struct TtfFont {
};

typedef keen::ObjectReference<keen::ds::TtfFont> TtfFontReference;

typedef keen::ObjectReference<keen::ds::TtfFontResource> TtfFontResourceReference;

typedef keen::UiHorizontalAlignment UiHorizontalAlignment;

typedef keen::UiVerticalAlignment UiVerticalAlignment;

struct UiTestStyles {
    keen::ds::UiCharacterStyle test; // Offset: 0
};

struct UiTestParagraphStyles {
    keen::ds::UiParagraphStyle test; // Offset: 0
    keen::ds::UiParagraphStyle test2; // Offset: 64
};

typedef keen::ObjectReference<keen::ds::UiFont> UiFontReference;

struct UiBundleTest {
    keen::ds::UiTexture test; // Offset: 120
    keen::ds::UiTestStyles namedStyles; // Offset: 168
    keen::ds::UiTestParagraphStyles namedParagraphStyles; // Offset: 288
    keen::ds::UiFontReference font; // Offset: 416
};

struct UiFontRange {
    keen::uint32 firstRune; // Offset: 0
    keen::uint32 lastRune; // Offset: 4
};

struct UiGlyphSet {
    keen::ds::TtfFontReference font; // Offset: 0
    keen::float32 scale; // Offset: 16
    keen::bool useForMetrics; // Offset: 20
    keen::bool bold; // Offset: 21
    keen::bool italic; // Offset: 22
};

struct UiFont {
};

struct UiFontLanguage {
    keen::bool En_Us; // Offset: 0
    keen::bool En_Gb; // Offset: 1
    keen::bool De_De; // Offset: 2
    keen::bool Nl_Nl; // Offset: 3
    keen::bool Fr_Fr; // Offset: 4
    keen::bool It_It; // Offset: 5
    keen::bool Es_Es; // Offset: 6
    keen::bool Es_Mx; // Offset: 7
    keen::bool Ru_Ru; // Offset: 8
    keen::bool Pl_Pl; // Offset: 9
    keen::bool Ja_Jp; // Offset: 10
    keen::bool Id_Id; // Offset: 11
    keen::bool Ko_Kr; // Offset: 12
    keen::bool Ms_My; // Offset: 13
    keen::bool Pt_Pt; // Offset: 14
    keen::bool Pt_Br; // Offset: 15
    keen::bool Th_Th; // Offset: 16
    keen::bool Tr_Tr; // Offset: 17
    keen::bool Vi_Vn; // Offset: 18
    keen::bool Zh_Cn; // Offset: 19
    keen::bool Zh_Tw; // Offset: 20
    keen::bool Fr_Ca; // Offset: 21
    keen::bool Es_419; // Offset: 22
    keen::bool Bg_Bg; // Offset: 23
    keen::bool Cs_Cz; // Offset: 24
    keen::bool Da_Dk; // Offset: 25
    keen::bool Fi_Fi; // Offset: 26
    keen::bool El_Gr; // Offset: 27
    keen::bool Hu_Hu; // Offset: 28
    keen::bool No_No; // Offset: 29
    keen::bool Nb_No; // Offset: 30
    keen::bool Ro_Ro; // Offset: 31
    keen::bool Sv_Se; // Offset: 32
    keen::bool Uk_Ua; // Offset: 33
    keen::bool Default; // Offset: 34
};

typedef keen::UiFontLanguageMask UiFontLanguageMask;

typedef keen::UiFontVariantFlag UiFontVariantFlag;

typedef keen::UiFontVariantMask UiFontVariantMask;

struct UiGlyphSetResource {
    keen::uint32 fontIndex; // Offset: 0
    keen::float32 scale; // Offset: 4
    keen::DsArray<keen::ds::UiFontRange> ranges; // Offset: 8
    keen::ds::UiFontVariantMask fontVariantMask; // Offset: 48
};

struct UiFontLanguageGroupResource {
    keen::ds::UiFontLanguageMask groupLanguages; // Offset: 0
    keen::DsArray<keen::ds::UiGlyphSetResource> glyphSets; // Offset: 8
    keen::uint32 metricsIndex; // Offset: 48
    keen::bool isDefaultLanguageGroup; // Offset: 52
};

struct UiFontResource {
    keen::DsArray<keen::ds::TtfFontResource> fonts; // Offset: 0
    keen::DsArray<keen::ds::UiFontLanguageGroupResource> languageGroups; // Offset: 40
};

struct UiFontPreviewLanguageGroupOutput {
    keen::DsArray<keen::ds::TtfFontResource> fonts; // Offset: 0
    keen::DsArray<keen::ds::UiGlyphSetResource> glyphSets; // Offset: 40
};

typedef keen::ObjectReference<keen::ds::UiFontResource> UiFontResourceReference;

typedef keen::UiObjectId UiObjectId;

struct UiPassTreeFrameState {
    keen::ds::UiObjectId stateId; // Offset: 0
    keen::uint32 size; // Offset: 8
};

typedef keen::UiFrameFlags UiFrameFlags;

struct UiFrameSizes {
    keen::ds::UiPosition offset; // Offset: 0
    keen::ds::UiSize minSize; // Offset: 8
    keen::ds::UiSize prefSize; // Offset: 16
    keen::ds::UiSize maxSize; // Offset: 24
    keen::ds::UiSize stretch; // Offset: 32
};

typedef keen::UiFrameLayoutType UiFrameLayoutType;

struct UiFrameLayout {
    keen::ds::UiFrameLayoutType type; // Offset: 0
    keen::bool horizontalScroll; // Offset: 4
    keen::bool verticalScroll; // Offset: 5
    keen::bool flow; // Offset: 6
    keen::bool splitter; // Offset: 7
    keen::ds::UiSize spacing; // Offset: 8
    keen::uint32 framesPerGridRow; // Offset: 16
};

struct UiFrameBorder {
    keen::UiBorder margin; // Offset: 0
    keen::UiBorder padding; // Offset: 16
};

struct UiFrameScrollState {
    keen::ds::UiPosition scrollOffset; // Offset: 0
    keen::ds::UiSize scrollAreaSize; // Offset: 8
};

struct UiFrameLayoutState {
    keen::ds::UiSize minSize; // Offset: 0
    keen::ds::UiSize prefSize; // Offset: 8
    keen::ds::UiSize maxSize; // Offset: 16
    keen::ds::UiSize stretch; // Offset: 24
    keen::bool flowChild; // Offset: 32
};

struct UiPassTreeFrame {
    keen::ds::UiObjectId frameId; // Offset: 0
    keen::ds::UiObjectId localFrameId; // Offset: 8
    keen::ds::UiObjectId highestChildUiFrameId; // Offset: 16
    keen::ds::UiFrameFlags flags; // Offset: 24
    keen::uint32 inputMask; // Offset: 28
    keen::ds::UiFrameSizes sizes; // Offset: 32
    keen::ds::UiFrameLayout layout; // Offset: 72
    keen::ds::UiFrameBorder border; // Offset: 92
    keen::UiAlignment alignment; // Offset: 124
    keen::UiAlignment childAlignment; // Offset: 126
    keen::DsString debugName; // Offset: 128
    keen::DsArray<keen::ds::UiPassTreeFrame> children; // Offset: 168
    keen::DsArray<keen::ds::UiPassTreeFrameState> states; // Offset: 208
    keen::ds::UiFrameScrollState scrollState; // Offset: 248
    keen::ds::UiFrameLayoutState layoutState; // Offset: 264
    keen::UiRectangle oldRect; // Offset: 300
    keen::UiRectangle rect; // Offset: 316
    keen::ds::UiPosition offset; // Offset: 332
};

typedef keen::DsOptional<keen::ds::UiPassTreeFrame> UiPassTreeFrameOpt;

struct UiPassTreeWindow {
    keen::ds::UiObjectId windowId; // Offset: 0
    keen::uint32 zOrder; // Offset: 8
    keen::uint32 inputMask; // Offset: 12
    keen::uint32 flags; // Offset: 16
    keen::ds::UiPosition offset; // Offset: 20
    keen::float32 scale; // Offset: 28
    keen::ds::UiPassTreeFrameOpt rootFrame; // Offset: 32
    keen::DsString debugName; // Offset: 48
};

struct UiPassTreeScreen {
    keen::ds::UiObjectId screenId; // Offset: 0
    keen::UiRectangle rect; // Offset: 8
    keen::DsArray<keen::ds::UiPassTreeWindow> windows; // Offset: 24
};

struct UiPassTree {
    keen::uint32 systemUpdateCounter; // Offset: 0
    keen::DsArray<keen::ds::UiPassTreeScreen> screens; // Offset: 8
};

typedef keen::UiFrameFlag UiFrameFlag;

struct UiSplitterSizes {
    keen::ds::UiSize minSize; // Offset: 0
    keen::ds::UiSize prefSize; // Offset: 8
    keen::ds::UiSize maxSize; // Offset: 16
    keen::ds::UiSize stretch; // Offset: 24
};

struct UiFrameSplitterData {
    keen::ds::UiPosition position; // Offset: 0
    keen::ds::UiPosition positionClamped; // Offset: 8
    keen::ds::UiPosition dragSplitterPosition; // Offset: 16
    keen::ds::UiPosition dragMousePosition; // Offset: 24
    keen::ds::UiSplitterSizes sizes; // Offset: 32
};

struct UiFrameSplitterState {
    keen::StaticArray<keen::ds::UiFrameSplitterData,8> splitter; // Offset: 0
};

struct VoxelTemperatureResource {
    keen::int3 worldOrigin; // Offset: 0
    keen::uint3 worldSize; // Offset: 12
    keen::uint3 sizeInVoxels; // Offset: 24
    keen::DsArray<keen::uint8> voxelData; // Offset: 40
};

typedef keen::ObjectReference<keen::ds::VoxelTemperatureResource> VoxelTemperatureReference;

typedef keen::VoxelWorldResourceType VoxelWorldResourceType;

struct VoxelWorldResource {
    keen::ds::VoxelWorldResourceType type; // Offset: 0
    keen::uint2 tileCount; // Offset: 4
    keen::int3 origin; // Offset: 12
    keen::ContentHash lowLODData; // Offset: 24
    keen::uint32 lowLODMaxLevel; // Offset: 40
    keen::StaticArray<keen::Guid,256> materialGuids; // Offset: 44
    keen::uint8 defaultTerrainMaterial; // Offset: 4140
};

struct VoxelWorldChunkResource {
    keen::ContentHash highLODData; // Offset: 0
    keen::DsArray<keen::uint64> waterTileNotEmptyMask; // Offset: 16
};

typedef keen::ObjectReference<keen::ds::VoxelWorldResource> VoxelWorldReference;

struct SolidVoxelMaterialWithId {
    keen::Guid id; // Offset: 0
    keen::Guid stoneMaterialId; // Offset: 16
    keen::bool canReceiveFloorMaterial; // Offset: 32
};

struct BiomeVoxelMaterialMapping {
    keen::Guid id; // Offset: 0
    keen::StaticArray<keen::Guid,7> biomes; // Offset: 16
};

struct VoxelMaterialResolvedList {
    keen::DsArray<keen::ds::SolidVoxelMaterialWithId> solidMaterials; // Offset: 0
    keen::DsArray<keen::Guid> buildingMaterials; // Offset: 40
    keen::DsArray<keen::ds::BiomeVoxelMaterialMapping> biomeMaterials; // Offset: 80
};

struct VoxelMaterialSettings {
    keen::uint8 defaultTerrainMaterial; // Offset: 0
};

struct VoxelDisplacementMaterial {
    keen::Guid id; // Offset: 0
    keen::ds::VoxelWorldDisplacement side; // Offset: 16
    keen::ds::VoxelWorldDisplacement top; // Offset: 44
};

struct VoxelMaterialDisplacement {
    keen::DsArray<keen::ds::VoxelDisplacementMaterial> materials; // Offset: 0
};

typedef keen::FogVoxelMaterialResolvedType FogVoxelMaterialResolvedType;

struct FogVoxelMaterialResolved {
    keen::Guid id; // Offset: 0
    keen::ds::FogVoxelMaterialResolvedType type; // Offset: 16
    keen::uint8 level; // Offset: 17
};

struct FogVoxelMaterialResolvedList {
    keen::DsArray<keen::ds::FogVoxelMaterialResolved> fogMaterials; // Offset: 0
};

struct WaterVoxelMaterialResolvedList {
    keen::Guid waterMaterial; // Offset: 0
};

struct TemperatureVoxelMaterialResolvedList {
    keen::DsArray<keen::Guid> temperatureMaterials; // Offset: 0
};

struct BuildingMaterialMappingResource {
    keen::uint8 localId; // Offset: 0
    keen::Guid materialId; // Offset: 4
};

struct BuildingMaterialPaletteResource {
    keen::DsArray<keen::ds::BuildingMaterialMappingResource> mappings; // Offset: 0
};

typedef keen::ReservedMaterialId ReservedMaterialId;

struct FogRemovalSetup {
    keen::uint8 level; // Offset: 0
};

struct FogRemovalDirectory {
};

struct FogRemovalLink {
    keen::ObjectReference<keen::ds::FogRemovalSetup> fogId; // Offset: 0
};

typedef keen::FogVoxelMappingType FogVoxelMappingType;

struct FogVoxelMapping {
    keen::ds::FogVoxelMappingType type; // Offset: 0
    keen::uint8 level; // Offset: 1
    keen::ds::FogRemovalId removalId; // Offset: 4
    keen::AxisAlignedBox boundingBox; // Offset: 16
};

struct FogVoxelMappingResource {
    keen::DsArray<keen::ds::FogVoxelMapping> mapping; // Offset: 0
};

struct VoxelModelResource {
    keen::uint3 size; // Offset: 0
    keen::DsArray<keen::uint8> data; // Offset: 16
    keen::bool isTerrain; // Offset: 56
};

struct VoxelModelInfo {
    keen::uint3 size; // Offset: 0
    keen::DsArray<keen::ds::BuildingMaterialMappingResource> materialMap; // Offset: 16
    keen::bool isTerrain; // Offset: 56
};

typedef keen::VoxelObjectPreviewMode VoxelObjectPreviewMode;

struct VoxelObjectDefinition {
    keen::ObjectReference<keen::ds::BuildingMaterialPalette> materialPalette; // Offset: 0
    keen::ObjectReference<keen::ds::Material> material; // Offset: 16
    keen::bool invertEmptyConservative; // Offset: 32
    keen::ds::VoxelObjectPreviewMode previewMode; // Offset: 33
};

struct TerrainVoxelObjectDefinition {
    keen::ObjectReference<keen::ds::Model> model; // Offset: 0
};

struct VoxelWorldObject {
    keen::ds::ImageReference heightmap; // Offset: 0
    keen::ObjectReference<keen::ds::AbstractScatterImage> compositeHeightmap; // Offset: 16
    keen::float32 heightScale; // Offset: 32
    keen::bool useCompositeScatterImage; // Offset: 36
    keen::bool displaceHeightmap; // Offset: 37
    keen::int3 origin; // Offset: 40
};

struct VoxelWorldInfo {
    keen::int2 minTile; // Offset: 0
    keen::int2 maxTile; // Offset: 8
    keen::sint32 yOffset; // Offset: 16
    keen::uint2 heightMapSize; // Offset: 20
    keen::float32 heightMapHeight; // Offset: 28
};

struct VoxelWorldTerraAction {
    keen::float3 position; // Offset: 0
    keen::float32 radius; // Offset: 12
    keen::uint32 mode; // Offset: 16
};

struct VoxelWorldTerraActions {
    keen::DsArray<keen::ds::VoxelWorldTerraAction> actions; // Offset: 0
};

struct VoxelRoadShapeDefinition {
    keen::float32 roadWidth; // Offset: 0
};

struct VoxelWorldAutomatedTest {
    keen::ObjectReference<keen::ds::Scene> scene; // Offset: 0
    keen::ObjectReference<keen::ds::SourceFile> referenceVoxelData; // Offset: 16
};

typedef keen::DestructionVoxelBlockType DestructionVoxelBlockType;

struct VoxelWorldConverterConfig {
    keen::bool buildWaterVoxels; // Offset: 0
};

struct WeatherPhenomenon {
    keen::ObjectReference<keen::ds::Image> cloudMap; // Offset: 0
    keen::bool tiling; // Offset: 16
};

struct WeatherSnowBorderConfiguration {
    keen::FloatRange fadeRange; // Offset: 0
    keen::ObjectReference<keen::ds::CompositeScatterImage> mask; // Offset: 8
    keen::uint32 maskResolutionDivisor; // Offset: 24
};

struct WeatherSystemConfiguration {
    keen::ObjectReference<keen::ds::Scene> scene; // Offset: 0
    keen::ds::WeatherSnowBorderConfiguration snowBorder; // Offset: 16
    keen::uint32 layerMaskResolutionDivisor; // Offset: 44
};

struct WeatherHeightMap {
    keen::FloatRange fadeRange; // Offset: 0
    keen::ObjectReference<keen::ds::CompositeScatterImage> mask; // Offset: 8
};

struct WeatherPhenomenonProbability {
    keen::float32 probability; // Offset: 0
    keen::TimeRange duration; // Offset: 8
};

struct WeatherLayerConfiguration {
    keen::bool useMaskResolutionDivisor; // Offset: 0
    keen::ObjectReference<keen::ds::CompositeScatterImage> restrictMask; // Offset: 4
    keen::ObjectReference<keen::ds::CompositeScatterImage> excludeMask; // Offset: 20
    keen::bool maskClouds; // Offset: 36
    keen::bool maskRain; // Offset: 37
    keen::ds::WeatherPhenomenonProbability nothingProbability; // Offset: 40
};

typedef keen::WeatherPhenomenonEffect WeatherPhenomenonEffect;

struct WeatherPhenomenonConfiguration {
    keen::ds::WeatherPhenomenonProbability probability; // Offset: 0
    keen::ObjectReference<keen::ds::WeatherPhenomenon> phenomenon; // Offset: 24
    keen::FloatRange scale; // Offset: 40
    keen::FloatRange rotation; // Offset: 48
    keen::FloatRange moveSpeed; // Offset: 56
    keen::bool alignRotationToMoveSpeed; // Offset: 64
    keen::Time spawnFadeTime; // Offset: 72
    keen::Time despawnFadeTime; // Offset: 80
    keen::ds::WeatherPhenomenonEffect effect; // Offset: 88
    keen::float32 rainThreshold; // Offset: 92
};

struct WeatherSystemMaskResource {
    keen::float2 bboxMin; // Offset: 0
    keen::float2 bboxMax; // Offset: 8
    keen::float2 worldToRelative; // Offset: 16
    keen::uint2 size; // Offset: 24
    keen::DsArray<keen::uint8> data; // Offset: 32
};

struct WeatherSystemResource {
    keen::HashKey32 dataHash; // Offset: 0
    keen::uint2 worldSize; // Offset: 4
    keen::float2 snowBorderRangeMapping; // Offset: 12
    keen::ds::WeatherSystemMaskResource snowBorderMask; // Offset: 24
    keen::DsArray<keen::ds::WeatherSystemLayerResource> layers; // Offset: 96
    keen::DsArray<keen::ds::WeatherSystemLayerMaskResource> layerMasks; // Offset: 136
    keen::DsArray<keen::ds::WeatherSystemPhenomenonResource> phenomenons; // Offset: 176
    keen::DsArray<keen::ds::WeatherSystemMaskResource> rainMasks; // Offset: 216
};

typedef keen::WeatherLayerMaskIndex WeatherLayerMaskIndex;

typedef keen::WeatherSystemPhenomenonResourceFlags WeatherSystemPhenomenonResourceFlags;

typedef keen::WeatherRainMaskIndex WeatherRainMaskIndex;

struct WeatherSystemPhenomenonResource {
    keen::Guid guid; // Offset: 0
    keen::float32 probability; // Offset: 16
    keen::ds::WeatherSystemPhenomenonResourceFlags flags; // Offset: 20
    keen::Time durationMin; // Offset: 24
    keen::Time durationMax; // Offset: 32
    keen::float32 radiusMin; // Offset: 40
    keen::float32 radiusMax; // Offset: 44
    keen::float32 moveSpeedMin; // Offset: 48
    keen::float32 moveSpeedMax; // Offset: 52
    keen::Time spawnFadeTime; // Offset: 56
    keen::Time despawnFadeTime; // Offset: 64
    keen::float32 rainThreshold; // Offset: 72
    keen::ds::WeatherRainMaskIndex rainMaskIndex; // Offset: 76
    keen::ObjectReference<keen::ds::RenderWeatherPhenomenonResource> renderer; // Offset: 80
    keen::ds::WeatherPhenomenonEffect effect; // Offset: 96
};

struct WeatherSystemLayerResource {
    keen::Guid guid; // Offset: 0
    keen::ds::WeatherLayerMaskIndex restrictMaskIndex; // Offset: 16
    keen::ds::WeatherLayerMaskIndex excludeMaskIndex; // Offset: 17
    keen::DsArray<keen::ds::WeatherPhenomenonIndex> phenomenonIndices; // Offset: 24
    keen::ds::WeatherSystemPhenomenonResource nothingPhenomenon; // Offset: 64
};

struct WeatherSystemLayerMaskResource {
    keen::ds::WeatherSystemMaskResource mask; // Offset: 0
    keen::ObjectReference<keen::ds::RenderWeatherMaskResource> renderer; // Offset: 72
};

typedef keen::WeatherSystemPhenomenonResourceFlag WeatherSystemPhenomenonResourceFlag;

struct WeatherSystemDebugState {
    keen::Time currentTime; // Offset: 0
    keen::DsArray<keen::ds::WeatherSystemDebugLayerState> layers; // Offset: 8
    keen::DsArray<keen::ds::WeatherSystemDebugInstanceState> instances; // Offset: 48
};

struct WeatherSystemDebugLayerState {
    keen::Guid guid; // Offset: 0
    keen::Time nextPhenomenonTime; // Offset: 16
    keen::uint32 currentInstanceHandle; // Offset: 24
    keen::uint32 previousInstanceHandle; // Offset: 28
};

struct WeatherSystemDebugInstanceState {
    keen::uint32 handle; // Offset: 0
    keen::Guid guid; // Offset: 4
    keen::float2 position; // Offset: 20
    keen::float32 rotation; // Offset: 28
    keen::float32 radius; // Offset: 32
    keen::float32 moveSpeed; // Offset: 36
    keen::float32 fade; // Offset: 40
};

struct WeatherSystemDebugSkipToNextPhenomenonMessage {
    keen::uint32 layerIndex; // Offset: 0
};

typedef keen::WeatherPhenomenonIndex WeatherPhenomenonIndex;

struct weather.save_v0.WeatherSavedLayerInstance {
    keen::ds::WeatherPhenomenonIndex phenomenonIndex; // Offset: 0
    keen::WorldPosition spawnPosition; // Offset: 8
    keen::Angle rotation; // Offset: 32
    keen::float32 radius; // Offset: 36
    keen::float32 moveSpeed; // Offset: 40
    keen::Time spawnTime; // Offset: 48
    keen::Time despawnTime; // Offset: 56
};

struct weather.save_v0.WeatherSavedLayer {
    keen::Time nextPhenomenon; // Offset: 0
    keen::ds::weather::save_v0::WeatherSavedLayerInstance currentInstance; // Offset: 8
    keen::ds::weather::save_v0::WeatherSavedLayerInstance previousInstance; // Offset: 72
};

typedef keen::WeatherLayerIndex WeatherLayerIndex;

struct WeatherSpawnParameters {
    keen::float32 eventProbabilityModifier; // Offset: 0
};

struct g38_options.SettingsHeader {
    keen::uint32 version; // Offset: 0
};

typedef keen::g38_options::pc::v5_dedicated_song_selection_binding::machine::WindowMode g38_options.pc.v5_dedicated_song_selection_binding.machine.WindowMode;

typedef keen::g38_options::pc::v5_dedicated_song_selection_binding::machine::NvidiaReflexModeSettings g38_options.pc.v5_dedicated_song_selection_binding.machine.NvidiaReflexModeSettings;

struct g38_options.pc.v5_dedicated_song_selection_binding.machine.GraphicsSettings {
    keen::ds::g38_options::pc::v5_dedicated_song_selection_binding::machine::WindowMode windowMode; // Offset: 0
    keen::int2 windowPosition; // Offset: 4
    keen::uint2 windowSize; // Offset: 12
    keen::uint2 forceBackbufferResolution; // Offset: 20
    keen::float32 renderScale; // Offset: 28
    keen::bool automaticRenderScale; // Offset: 32
    keen::bool vsync; // Offset: 33
    keen::ds::g38_options::pc::v5_dedicated_song_selection_binding::machine::NvidiaReflexModeSettings nvidiaReflex; // Offset: 36
    keen::ds::RenderSettings render; // Offset: 40
    keen::bool useDefaultRenderSettings; // Offset: 120
    keen::bool sleepInBackground; // Offset: 121
};

struct g38_options.pc.v5_dedicated_song_selection_binding.machine.SoundSettings {
    keen::bool muteInBackground; // Offset: 0
};

struct g38_options.pc.v5_dedicated_song_selection_binding.machine.Settings {
    keen::ds::g38_options::pc::v5_dedicated_song_selection_binding::machine::GraphicsSettings graphics; // Offset: 4
    keen::ds::g38_options::pc::v5_dedicated_song_selection_binding::machine::SoundSettings sound; // Offset: 128
};

struct g38_options.pc.v5_dedicated_song_selection_binding.user.GraphicsSettings {
    keen::float32 fov; // Offset: 0
};

struct g38_options.pc.v5_dedicated_song_selection_binding.user.SoundSettings {
    keen::float32 masterVolume; // Offset: 0
    keen::float32 musicVolume; // Offset: 4
    keen::float32 uiVolume; // Offset: 8
    keen::float32 gameVolume; // Offset: 12
    keen::float32 voiceVolume; // Offset: 16
    keen::bool dynamicReverb; // Offset: 20
};

struct g38_options.pc.v5_dedicated_song_selection_binding.user.MouseSettings {
    keen::float32 defaultSensitivity; // Offset: 0
    keen::float32 rangedCombatSensitivity; // Offset: 4
    keen::bool2 invertCameraAxes; // Offset: 8
    keen::ds::AttackDirectionInput attackDirection; // Offset: 10
    keen::bool enableSmoothing; // Offset: 11
};

struct g38_options.pc.v5_dedicated_song_selection_binding.user.GamepadSettings {
    keen::float32 defaultSensitivity; // Offset: 0
    keen::float32 rangedCombatSensitivity; // Offset: 4
    keen::bool2 invertCameraAxes; // Offset: 8
    keen::ds::AttackDirectionInput attackDirection; // Offset: 10
    keen::ds::ControllerButtonStyle controllerButtonStyle; // Offset: 11
};

struct g38_options.pc.v5_dedicated_song_selection_binding.user.InputSettings {
    keen::ds::input_mapping::PresetId selectedKeyboardMousePresetId; // Offset: 0
    keen::ds::input_mapping::PresetId selectedGamepadPresetId; // Offset: 1
    keen::ds::input_mapping::serialize::InputBindings customInputBindings; // Offset: 8
    keen::ds::g38_options::pc::v5_dedicated_song_selection_binding::user::MouseSettings mouse; // Offset: 56
    keen::ds::g38_options::pc::v5_dedicated_song_selection_binding::user::GamepadSettings gamepad; // Offset: 68
};

typedef keen::g38_options::pc::v5_dedicated_song_selection_binding::user::SpiderSetting g38_options.pc.v5_dedicated_song_selection_binding.user.SpiderSetting;

struct g38_options.pc.v5_dedicated_song_selection_binding.user.GameplaySettings {
    keen::float cameraZoomFactor; // Offset: 0
    keen::bool enableIdleCameraTransition; // Offset: 4
    keen::bool reduceDynamicCameraMovement; // Offset: 5
    keen::float screenShakeStrength; // Offset: 8
    keen::bool displayDamageNumbers; // Offset: 12
    keen::bool displayDamagePropertyTexts; // Offset: 13
    keen::bool keepTargetLockWhenSprinting; // Offset: 14
    keen::bool breakTargetLockOnKill; // Offset: 15
    keen::uint32 hudAspectRatioWidth; // Offset: 16
    keen::float textScale; // Offset: 20
    keen::bool useAdditionalSymbolsForItemRarity; // Offset: 24
    keen::bool hideHUD; // Offset: 25
    keen::bool hideHelmet; // Offset: 26
    keen::bool hideGloves; // Offset: 27
    keen::bool showCharacterName; // Offset: 28
    keen::ds::ItemRarity itemDeletionProtectionLevel; // Offset: 29
    keen::ds::g38_options::pc::v5_dedicated_song_selection_binding::user::SpiderSetting hideSpiders; // Offset: 30
};

struct g38_options.pc.v5_dedicated_song_selection_binding.user.HostUserGroup {
    keen::bool enable; // Offset: 0
    keen::ds::string password; // Offset: 8
};

struct g38_options.pc.v5_dedicated_song_selection_binding.user.HostSettings {
    keen::uint32 maxSlots; // Offset: 0
    keen::ds::string password; // Offset: 8
    keen::ds::g38_options::pc::v5_dedicated_song_selection_binding::user::HostUserGroup guests; // Offset: 48
    keen::ds::g38_options::pc::v5_dedicated_song_selection_binding::user::HostUserGroup friends; // Offset: 96
    keen::ds::g38_options::pc::v5_dedicated_song_selection_binding::user::HostUserGroup admins; // Offset: 144
};

struct g38_options.pc.v5_dedicated_song_selection_binding.user.Settings {
    keen::ds::g38_options::pc::v5_dedicated_song_selection_binding::user::GraphicsSettings graphics; // Offset: 4
    keen::ds::g38_options::pc::v5_dedicated_song_selection_binding::user::SoundSettings sound; // Offset: 8
    keen::ds::g38_options::pc::v5_dedicated_song_selection_binding::user::InputSettings input; // Offset: 32
    keen::ds::g38_options::pc::v5_dedicated_song_selection_binding::user::GameplaySettings gameplay; // Offset: 112
    keen::ds::g38_options::pc::v5_dedicated_song_selection_binding::user::HostSettings hostSettings; // Offset: 144
    keen::uint32 playedSessions; // Offset: 336
};

struct g38_options.pc.v4_dedicated_glider_binding.machine.Settings {
};

struct g38_options.pc.v4_dedicated_glider_binding.user.Settings {
    keen::ds::g38_options::pc::v5_dedicated_song_selection_binding::user::Settings legacySettings; // Offset: 0
};

struct g38_options.pc.v3_early_access_release.machine.Settings {
};

struct g38_options.pc.v3_early_access_release.user.Settings {
    keen::ds::g38_options::pc::v5_dedicated_song_selection_binding::user::Settings legacySettings; // Offset: 0
};

struct G38SupportedFeatures {
    keen::ds::RenderSettingsFeatures renderFeatures; // Offset: 0
    keen::bool isNvReflexAvailable; // Offset: 8
};

struct debug.CameraPathKeyframe {
    keen::Matrix43 transform; // Offset: 0
    keen::Time time; // Offset: 64
};

struct debug.CameraRecording {
    keen::DsArray<keen::ds::debug::CameraPathKeyframe> cameraPath; // Offset: 0
};

}
